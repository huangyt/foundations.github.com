// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../odbc.h"
#include "../Config.h"
#include "../odbc.h"
#include "../ODBCArray.h"
#include "../ODBCCallableStatement.h"
#include "../ODBCColumn.h"
#include "../ODBCConnection.h"
#include "../ODBCDatabaseMetaData.h"
#include "../ODBCDriver.h"
#include "../ODBCHandle.h"
#include "../ODBCPreparedStatement.h"
#include "../ODBCResultSet.h"
#include "../ODBCResultSetMetaData.h"
#include "../ODBCStatement.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;
using namespace acdk::sql;

//static
::acdk::lang::RObject
ODBCDriver_create_array(int length)
{
  return new ObjectArrayImpl<RODBCDriver>(length);
}

//static
::acdk::lang::RObject
ODBCDriver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCDriver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCDriver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_ODBCDriver__LRODBCDriver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCDriver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method__getODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDriver::_getODBCHandle();
    else
        ret = (::acdk::lang::RObject)This->_getODBCHandle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_acceptsURL_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDriver::acceptsURL((RString)args[0].getObjectVar());
    else
      ret = This->acceptsURL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDriver::connect((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->connect((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCDriver::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_getMajorVersionNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDriver::getMajorVersionNumber();
    else
      ret = This->getMajorVersionNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_getMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDriver::getMinorVersion();
    else
      ret = This->getMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDriver::getPropertyInfo((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPropertyInfo((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCDriver::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCDriver_method_jdbcCompliant__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCDriver::jdbcCompliant();
    else
      ret = This->jdbcCompliant();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCDriver_fields__envh_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCDriver* This = dmi_cast<ODBCDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_envh, flags);
    else
      This->_envh = (RODBCHandle)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCDriver_fields__envh = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_envh", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(),
  ODBCDriver_MetainfoWrapper::ODBCDriver_fields__envh_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCDriver_fields[] = 
{
  &ODBCDriver_fields__envh,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_ODBCDriver__LRODBCDriver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_ODBCDriver__LRODBCDriver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_ODBCDriver__LRODBCDriver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCDriver::clazzInfo(), // return type
  "_0_ODBCDriver", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_ODBCDriver__LRODBCDriver__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_ODBCDriver__LRODBCDriver__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_ODBCDriver__LRODBCDriver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods__getODBCHandle__LRODBCHandle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods__getODBCHandle__LRODBCHandle__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method__getODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_8__getODBCHandle", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods__getODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCDriver_methods__getODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method__getODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDriver_methods_acceptsURL_INLRString__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_acceptsURL_INLRString__Z_args[] = 
{
  &ODBCDriver_methods_acceptsURL_INLRString__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_acceptsURL_INLRString__Z_exceptions[] =
{
  acdk::lang::RException::clazzInfo(), 
  0
};

void ODBCDriver_acceptsURL_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::lang::Exception) == true)
    THROW_INSTANCE( acdk::lang::RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_acceptsURL_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_acceptsURL", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_acceptsURL_INLRString__Z_args, // the arguments
  0, //arguments count
  ODBCDriver_methods_acceptsURL_INLRString__Z_exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_acceptsURL_INLRString__Z_dispatch, // invoke this method
  ODBCDriver_acceptsURL_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args[] = 
{
  &ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url,
  &ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ODBCDriver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_7_connect", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch, // invoke this method
  ODBCDriver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_create_instance", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_create_instance__LRObject__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_getMajorVersionNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_getMajorVersionNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_getMajorVersionNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMajorVersionNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getMajorVersionNumber", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_getMajorVersionNumber__I_args, // the arguments
  0, //arguments count
  ODBCDriver_methods_getMajorVersionNumber__I_exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_getMajorVersionNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_getMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_getMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_getMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_getMinorVersion__I_args, // the arguments
  0, //arguments count
  ODBCDriver_methods_getMinorVersion__I_exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_getMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args[] = 
{
  &ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url,
  &ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void ODBCDriver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPropertyInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriverPropertyInfoArray::clazzInfo(), // return type
  "_5_getPropertyInfo", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch, // invoke this method
  ODBCDriver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_getWarnings__L_acdk_sql_RSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_getWarnings__L_acdk_sql_RSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(), // return type
  "_9_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_getWarnings__L_acdk_sql_RSQLWarning__args, // the arguments
  0, //arguments count
  ODBCDriver_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCDriver_methods_jdbcCompliant__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCDriver_methods_jdbcCompliant__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCDriver_method_jdbcCompliant__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "jdbcCompliant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_jdbcCompliant", // alternative name of method
  -1, // altlabelHashCode
  ODBCDriver_methods_jdbcCompliant__Z_args, // the arguments
  0, //arguments count
  ODBCDriver_methods_jdbcCompliant__Z_exceptions, // the declared exceptions
  ODBCDriver_MetainfoWrapper::ODBCDriver_method_jdbcCompliant__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCDriver_methods[] = 
{
  &ODBCDriver_method_GetClass__L_acdk_lang_RClass_,
  &ODBCDriver_method_ODBCDriver__LRODBCDriver_,
  &ODBCDriver_method__getODBCHandle__LRODBCHandle_,
  &ODBCDriver_method_acceptsURL_INLRString__Z,
  &ODBCDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_,
  &ODBCDriver_method_create_instance__LRObject_,
  &ODBCDriver_method_getMajorVersionNumber__I,
  &ODBCDriver_method_getMinorVersion__I,
  &ODBCDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_,
  &ODBCDriver_method_getWarnings__L_acdk_sql_RSQLWarning_,
  &ODBCDriver_method_jdbcCompliant__Z,
  0
};


struct ODBCDriver_MetaInfoInitializer
{  ODBCDriver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCDriver::clazzInfo();
    ci->fields =  _ODBCDriver_fields;
    ci->methods =  _ODBCDriver_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCDriver_MetaInfoInitializer ODBCDriver_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 


//static
::acdk::lang::RObject
ODBCStatusRecord_create_array(int length)
{
  return new ObjectArrayImpl<RODBCStatusRecord>(length);
}

//static
::acdk::lang::RObject
ODBCStatusRecord_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCStatusRecord_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCStatusRecord::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_ODBCStatusRecord__LRODBCStatusRecord__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCStatusRecord();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_getClassOrigin__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatusRecord::getClassOrigin();
    else
        ret = (::acdk::lang::RObject)This->getClassOrigin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_getConnectionName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatusRecord::getConnectionName();
    else
        ret = (::acdk::lang::RObject)This->getConnectionName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_getMessageText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatusRecord::getMessageText();
    else
        ret = (::acdk::lang::RObject)This->getMessageText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_getSQLState__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatusRecord::getSQLState();
    else
        ret = (::acdk::lang::RObject)This->getSQLState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCStatusRecord_method_getSubClassOrigin__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCStatusRecord::getSubClassOrigin();
    else
        ret = (::acdk::lang::RObject)This->getSubClassOrigin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__classOrigin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_classOrigin, flags);
    else
      This->_classOrigin = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__columnNumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnNumber, flags);
    else
      This->_columnNumber = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__columnNumberValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnNumberValid, flags);
    else
      This->_columnNumberValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__connectionName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_connectionName, flags);
    else
      This->_connectionName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__messageText_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_messageText, flags);
    else
      This->_messageText = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__nativeErr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nativeErr, flags);
    else
      This->_nativeErr = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__nativeErrValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nativeErrValid, flags);
    else
      This->_nativeErrValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__rowNumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowNumber, flags);
    else
      This->_rowNumber = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__rowNumberValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowNumberValid, flags);
    else
      This->_rowNumberValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__sqlState_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sqlState, flags);
    else
      This->_sqlState = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCStatusRecord_fields__subClassOrigin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCStatusRecord* This = dmi_cast<ODBCStatusRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_subClassOrigin, flags);
    else
      This->_subClassOrigin = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__classOrigin = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_classOrigin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__classOrigin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__columnNumber = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnNumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__columnNumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__columnNumberValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnNumberValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__columnNumberValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__connectionName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_connectionName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__connectionName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__messageText = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_messageText", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__messageText_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__nativeErr = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nativeErr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__nativeErr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__nativeErrValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nativeErrValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__nativeErrValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__rowNumber = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowNumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__rowNumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__rowNumberValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowNumberValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__rowNumberValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__sqlState = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sqlState", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__sqlState_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCStatusRecord_fields__subClassOrigin = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_subClassOrigin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_fields__subClassOrigin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCStatusRecord_fields[] = 
{
  &ODBCStatusRecord_fields__classOrigin,
  &ODBCStatusRecord_fields__columnNumber,
  &ODBCStatusRecord_fields__columnNumberValid,
  &ODBCStatusRecord_fields__connectionName,
  &ODBCStatusRecord_fields__messageText,
  &ODBCStatusRecord_fields__nativeErr,
  &ODBCStatusRecord_fields__nativeErrValid,
  &ODBCStatusRecord_fields__rowNumber,
  &ODBCStatusRecord_fields__rowNumberValid,
  &ODBCStatusRecord_fields__sqlState,
  &ODBCStatusRecord_fields__subClassOrigin,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_ODBCStatusRecord__LRODBCStatusRecord__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_ODBCStatusRecord__LRODBCStatusRecord__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_ODBCStatusRecord__LRODBCStatusRecord_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCStatusRecord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCStatusRecord::clazzInfo(), // return type
  "_5_ODBCStatusRecord", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_ODBCStatusRecord__LRODBCStatusRecord__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_ODBCStatusRecord__LRODBCStatusRecord__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_ODBCStatusRecord__LRODBCStatusRecord__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_getClassOrigin__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_getClassOrigin__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_getClassOrigin__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getClassOrigin", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_getClassOrigin__LRString__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_getClassOrigin__LRString__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_getClassOrigin__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_getConnectionName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_getConnectionName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_getConnectionName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnectionName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getConnectionName", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_getConnectionName__LRString__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_getConnectionName__LRString__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_getConnectionName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_getMessageText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_getMessageText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_getMessageText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessageText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getMessageText", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_getMessageText__LRString__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_getMessageText__LRString__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_getMessageText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_getSQLState__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_getSQLState__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_getSQLState__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getSQLState", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_getSQLState__LRString__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_getSQLState__LRString__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_getSQLState__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCStatusRecord_methods_getSubClassOrigin__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCStatusRecord_methods_getSubClassOrigin__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCStatusRecord_method_getSubClassOrigin__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSubClassOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getSubClassOrigin", // alternative name of method
  -1, // altlabelHashCode
  ODBCStatusRecord_methods_getSubClassOrigin__LRString__args, // the arguments
  0, //arguments count
  ODBCStatusRecord_methods_getSubClassOrigin__LRString__exceptions, // the declared exceptions
  ODBCStatusRecord_MetainfoWrapper::ODBCStatusRecord_method_getSubClassOrigin__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCStatusRecord_methods[] = 
{
  &ODBCStatusRecord_method_GetClass__L_acdk_lang_RClass_,
  &ODBCStatusRecord_method_ODBCStatusRecord__LRODBCStatusRecord_,
  &ODBCStatusRecord_method_getClassOrigin__LRString_,
  &ODBCStatusRecord_method_getConnectionName__LRString_,
  &ODBCStatusRecord_method_getMessageText__LRString_,
  &ODBCStatusRecord_method_getSQLState__LRString_,
  &ODBCStatusRecord_method_getSubClassOrigin__LRString_,
  0
};


struct ODBCStatusRecord_MetaInfoInitializer
{  ODBCStatusRecord_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCStatusRecord::clazzInfo();
    ci->fields =  _ODBCStatusRecord_fields;
    ci->methods =  _ODBCStatusRecord_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCStatusRecord_MetaInfoInitializer ODBCStatusRecord_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 


//static
::acdk::lang::RObject
ODBCHandle_create_array(int length)
{
  return new ObjectArrayImpl<RODBCHandle>(length);
}

//static
::acdk::lang::RObject
ODBCHandle_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCHandle_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCHandle::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__addException_INL_acdk_sql_RSQLException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_addException((::acdk::sql::RSQLException)args[0].getObjectVar());
    else
        This->_addException((::acdk::sql::RSQLException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__addException_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_addException((RString)args[0].getObjectVar());
    else
        This->_addException((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__addWarning_INL_acdk_sql_RSQLWarning__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_addWarning((::acdk::sql::RSQLWarning)args[0].getObjectVar());
    else
        This->_addWarning((::acdk::sql::RSQLWarning)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__addWarning_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_addWarning((RString)args[0].getObjectVar());
    else
        This->_addWarning((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__clearExceptions__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_clearExceptions();
    else
        This->_clearExceptions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::_clearWarnings();
    else
        This->_clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__getExceptions__L_acdk_sql_RSQLException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCHandle::_getExceptions();
    else
        ret = (::acdk::lang::RObject)This->_getExceptions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method__getWarnings__L_acdk_sql_RSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCHandle::_getWarnings();
    else
        ret = (::acdk::lang::RObject)This->_getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method_deinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCHandle::deinit();
    else
        This->deinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method_getDynamicFunction__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCHandle::getDynamicFunction();
    else
        ret = (::acdk::lang::RObject)This->getDynamicFunction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method_getStatusRecords__LRODBCStatusRecordArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCHandle::getStatusRecords();
    else
        ret = (::acdk::lang::RObject)This->getStatusRecords();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCHandle_method_init_INLRODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCHandle::init((RODBCHandle)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->init((RODBCHandle)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__cursorRowCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cursorRowCount, flags);
    else
      This->_cursorRowCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__cursorRowCountValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cursorRowCountValid, flags);
    else
      This->_cursorRowCountValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__dynamicFunction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dynamicFunction, flags);
    else
      This->_dynamicFunction = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__dynamicFunctionCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dynamicFunctionCode, flags);
    else
      This->_dynamicFunctionCode = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__dynamicFunctionCodeValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dynamicFunctionCodeValid, flags);
    else
      This->_dynamicFunctionCodeValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__excpt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_excpt, flags);
    else
      This->_excpt = (::acdk::sql::RSQLException)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__initialized_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_initialized, flags);
    else
      This->_initialized = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__numberRecords_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numberRecords, flags);
    else
      This->_numberRecords = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__numberRecordsValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numberRecordsValid, flags);
    else
      This->_numberRecordsValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__returnCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_returnCode, flags);
    else
      This->_returnCode = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__returnCodeValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_returnCodeValid, flags);
    else
      This->_returnCodeValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__rowCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowCount, flags);
    else
      This->_rowCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__rowCountValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowCountValid, flags);
    else
      This->_rowCountValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__statusRecords_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_statusRecords, flags);
    else
      This->_statusRecords = (RODBCStatusRecordArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCHandle_fields__warng_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCHandle* This = dmi_cast<ODBCHandle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_warng, flags);
    else
      This->_warng = (::acdk::sql::RSQLWarning)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__cursorRowCount = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cursorRowCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__cursorRowCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__cursorRowCountValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cursorRowCountValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__cursorRowCountValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__dynamicFunction = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dynamicFunction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__dynamicFunction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__dynamicFunctionCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dynamicFunctionCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__dynamicFunctionCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__dynamicFunctionCodeValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dynamicFunctionCodeValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__dynamicFunctionCodeValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__excpt = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_excpt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLException::clazzInfo(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__excpt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__initialized = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_initialized", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__initialized_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__numberRecords = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numberRecords", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__numberRecords_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__numberRecordsValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numberRecordsValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__numberRecordsValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__returnCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_returnCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__returnCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__returnCodeValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_returnCodeValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__returnCodeValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__rowCount = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__rowCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__rowCountValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowCountValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__rowCountValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__statusRecords = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_statusRecords", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatusRecordArray::clazzInfo(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__statusRecords_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCHandle_fields__warng = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_warng", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(),
  ODBCHandle_MetainfoWrapper::ODBCHandle_fields__warng_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCHandle_fields[] = 
{
  &ODBCHandle_fields__cursorRowCount,
  &ODBCHandle_fields__cursorRowCountValid,
  &ODBCHandle_fields__dynamicFunction,
  &ODBCHandle_fields__dynamicFunctionCode,
  &ODBCHandle_fields__dynamicFunctionCodeValid,
  &ODBCHandle_fields__excpt,
  &ODBCHandle_fields__initialized,
  &ODBCHandle_fields__numberRecords,
  &ODBCHandle_fields__numberRecordsValid,
  &ODBCHandle_fields__returnCode,
  &ODBCHandle_fields__returnCodeValid,
  &ODBCHandle_fields__rowCount,
  &ODBCHandle_fields__rowCountValid,
  &ODBCHandle_fields__statusRecords,
  &ODBCHandle_fields__warng,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCHandle_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_arg_excpt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "excpt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_args[] = 
{
  &ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_arg_excpt,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__addException_INL_acdk_sql_RSQLException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_addException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a__addException", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__addException_INL_acdk_sql_RSQLException__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__addException_INL_acdk_sql_RSQLException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCHandle_methods__addException_INLRString__V_arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__addException_INLRString__V_args[] = 
{
  &ODBCHandle_methods__addException_INLRString__V_arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__addException_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__addException_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_addException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b__addException", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__addException_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__addException_INLRString__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__addException_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_arg_warng = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "warng", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_args[] = 
{
  &ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_arg_warng,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__addWarning_INL_acdk_sql_RSQLWarning__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_addWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c__addWarning", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__addWarning_INL_acdk_sql_RSQLWarning__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__addWarning_INL_acdk_sql_RSQLWarning__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCHandle_methods__addWarning_INLRString__V_arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__addWarning_INLRString__V_args[] = 
{
  &ODBCHandle_methods__addWarning_INLRString__V_arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__addWarning_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__addWarning_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_addWarning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d__addWarning", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__addWarning_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__addWarning_INLRString__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__addWarning_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__clearExceptions__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__clearExceptions__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__clearExceptions__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_clearExceptions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__clearExceptions", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__clearExceptions__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__clearExceptions__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__clearExceptions__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9__clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__clearWarnings__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods__clearWarnings__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__getExceptions__L_acdk_sql_RSQLException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__getExceptions__L_acdk_sql_RSQLException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__getExceptions__L_acdk_sql_RSQLException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getExceptions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLException::clazzInfo(), // return type
  "_6__getExceptions", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__getExceptions__L_acdk_sql_RSQLException__args, // the arguments
  0, //arguments count
  ODBCHandle_methods__getExceptions__L_acdk_sql_RSQLException__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__getExceptions__L_acdk_sql_RSQLException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods__getWarnings__L_acdk_sql_RSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods__getWarnings__L_acdk_sql_RSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method__getWarnings__L_acdk_sql_RSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(), // return type
  "_7__getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods__getWarnings__L_acdk_sql_RSQLWarning__args, // the arguments
  0, //arguments count
  ODBCHandle_methods__getWarnings__L_acdk_sql_RSQLWarning__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method__getWarnings__L_acdk_sql_RSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods_deinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods_deinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method_deinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_deinit", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods_deinit__V_args, // the arguments
  0, //arguments count
  ODBCHandle_methods_deinit__V_exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method_deinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods_getDynamicFunction__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods_getDynamicFunction__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method_getDynamicFunction__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDynamicFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getDynamicFunction", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods_getDynamicFunction__LRString__args, // the arguments
  0, //arguments count
  ODBCHandle_methods_getDynamicFunction__LRString__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method_getDynamicFunction__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods_getStatusRecords__LRODBCStatusRecordArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods_getStatusRecords__LRODBCStatusRecordArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method_getStatusRecords__LRODBCStatusRecordArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatusRecords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatusRecordArray::clazzInfo(), // return type
  "_f_getStatusRecords", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods_getStatusRecords__LRODBCStatusRecordArray__args, // the arguments
  0, //arguments count
  ODBCHandle_methods_getStatusRecords__LRODBCStatusRecordArray__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method_getStatusRecords__LRODBCStatusRecordArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__arg_prnt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prnt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__args[] = 
{
  &ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__arg_prnt,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCHandle_method_init_INLRODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_1_init", // alternative name of method
  -1, // altlabelHashCode
  ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCHandle_methods_init_INLRODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCHandle_MetainfoWrapper::ODBCHandle_method_init_INLRODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCHandle_methods[] = 
{
  &ODBCHandle_method_GetClass__L_acdk_lang_RClass_,
  &ODBCHandle_method__addException_INL_acdk_sql_RSQLException__V,
  &ODBCHandle_method__addException_INLRString__V,
  &ODBCHandle_method__addWarning_INL_acdk_sql_RSQLWarning__V,
  &ODBCHandle_method__addWarning_INLRString__V,
  &ODBCHandle_method__clearExceptions__V,
  &ODBCHandle_method__clearWarnings__V,
  &ODBCHandle_method__getExceptions__L_acdk_sql_RSQLException_,
  &ODBCHandle_method__getWarnings__L_acdk_sql_RSQLWarning_,
  &ODBCHandle_method_deinit__V,
  &ODBCHandle_method_getDynamicFunction__LRString_,
  &ODBCHandle_method_getStatusRecords__LRODBCStatusRecordArray_,
  &ODBCHandle_method_init_INLRODBCHandle__LRODBCHandle_,
  0
};


struct ODBCHandle_MetaInfoInitializer
{  ODBCHandle_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCHandle::clazzInfo();
    ci->fields =  _ODBCHandle_fields;
    ci->methods =  _ODBCHandle_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCHandle_MetaInfoInitializer ODBCHandle_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCParam_create_array(int length)
{
  return new ObjectArrayImpl<RODBCParam>(length);
}

//static
::acdk::lang::RObject
ODBCParam_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCParam_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCParam_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCParam::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCParam_method_getCType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCParam::getCType();
    else
      ret = This->getCType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCParam_method_getSQLType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCParam::getSQLType();
    else
      ret = This->getSQLType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCParam_method_getTypeSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCParam::getTypeSize();
    else
      ret = This->getTypeSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCParam_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCParam_fields__sqlType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sqlType, flags);
    else
      This->_sqlType = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCParam_fields__transferedSize_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCParam* This = dmi_cast<ODBCParam>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_transferedSize, flags);
    else
      This->_transferedSize = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCParam_fields__flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCParam_MetainfoWrapper::ODBCParam_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCParam_fields__sqlType = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sqlType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCParam_MetainfoWrapper::ODBCParam_fields__sqlType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCParam_fields__transferedSize = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_transferedSize", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCParam_MetainfoWrapper::ODBCParam_fields__transferedSize_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCParam_fields[] = 
{
  &ODBCParam_fields__flags,
  &ODBCParam_fields__sqlType,
  &ODBCParam_fields__transferedSize,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCParam_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCParam_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCParam_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCParam_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCParam_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCParam_MetainfoWrapper::ODBCParam_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCParam_methods_getCType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCParam_methods_getCType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCParam_method_getCType__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getCType", // alternative name of method
  -1, // altlabelHashCode
  ODBCParam_methods_getCType__I_args, // the arguments
  0, //arguments count
  ODBCParam_methods_getCType__I_exceptions, // the declared exceptions
  ODBCParam_MetainfoWrapper::ODBCParam_method_getCType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCParam_methods_getSQLType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCParam_methods_getSQLType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCParam_method_getSQLType__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getSQLType", // alternative name of method
  -1, // altlabelHashCode
  ODBCParam_methods_getSQLType__I_args, // the arguments
  0, //arguments count
  ODBCParam_methods_getSQLType__I_exceptions, // the declared exceptions
  ODBCParam_MetainfoWrapper::ODBCParam_method_getSQLType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCParam_methods_getTypeSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCParam_methods_getTypeSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCParam_method_getTypeSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getTypeSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCParam_methods_getTypeSize__I_args, // the arguments
  0, //arguments count
  ODBCParam_methods_getTypeSize__I_exceptions, // the declared exceptions
  ODBCParam_MetainfoWrapper::ODBCParam_method_getTypeSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCParam_methods[] = 
{
  &ODBCParam_method_GetClass__L_acdk_lang_RClass_,
  &ODBCParam_method_getCType__I,
  &ODBCParam_method_getSQLType__I,
  &ODBCParam_method_getTypeSize__I,
  0
};


struct ODBCParam_MetaInfoInitializer
{  ODBCParam_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCParam::clazzInfo();
    ci->fields =  _ODBCParam_fields;
    ci->methods =  _ODBCParam_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCParam_MetaInfoInitializer ODBCParam_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCPreparedStatement_create_array(int length)
{
  return new ObjectArrayImpl<RODBCPreparedStatement>(length);
}

//static
::acdk::lang::RObject
ODBCPreparedStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCPreparedStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCPreparedStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCPreparedStatement((RODBCConnection)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_addBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::addBatch();
    else
        This->addBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_clearParameters__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::clearParameters();
    else
        This->clearParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_execute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCPreparedStatement::execute();
    else
      ret = This->execute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_executeQuery__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCPreparedStatement::executeQuery();
    else
        ret = (::acdk::lang::RObject)This->executeQuery();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_executeUpdate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCPreparedStatement::executeUpdate();
    else
      ret = This->executeUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCPreparedStatement::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCPreparedStatement::init((acdk::util::RProperties)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->init((acdk::util::RProperties)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setBlob_IINLRBlob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setBlob(args[0].getIntVar(), (RBlob)args[1].getObjectVar());
    else
        This->setBlob(args[0].getIntVar(), (RBlob)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setBoolean(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->setBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setByte(args[0].getIntVar(), args[1].getByteVar());
    else
        This->setByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->setBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setDate_IINLRDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setDate(args[0].getIntVar(), (RDate)args[1].getObjectVar());
    else
        This->setDate(args[0].getIntVar(), (RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setDate_IINLRDate_INLRCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setDate(args[0].getIntVar(), (RDate)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    else
        This->setDate(args[0].getIntVar(), (RDate)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setDouble(args[0].getIntVar(), args[1].getDoubleVar());
    else
        This->setDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setFloat(args[0].getIntVar(), args[1].getFloatVar());
    else
        This->setFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setInt(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setLong(args[0].getIntVar(), args[1].getLongVar());
    else
        This->setLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setNull_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setNull(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setNull(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setNull_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setNull(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->setNull(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setObject_IINLRObject_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setShort(args[0].getIntVar(), args[1].getShortVar());
    else
        This->setShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    else
        This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setTime_IINLRTime_INLRCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    else
        This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp_INLRCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCPreparedStatement::setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    else
        This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar(), (RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCPreparedStatement_fields__args_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_args, flags);
    else
      This->_args = (RODBCParamArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCPreparedStatement_fields__clause_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCPreparedStatement* This = dmi_cast<ODBCPreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_clause, flags);
    else
      This->_clause = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCPreparedStatement_fields__args = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_args", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCParamArray::clazzInfo(),
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_fields__args_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCPreparedStatement_fields__clause = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_clause", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_fields__clause_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCPreparedStatement_fields[] = 
{
  &ODBCPreparedStatement_fields__args,
  &ODBCPreparedStatement_fields__clause,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__arg_conn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "conn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__arg_clause = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clause", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__args[] = 
{
  &ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__arg_conn,
  &ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__arg_clause,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCPreparedStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCPreparedStatement::clazzInfo(), // return type
  "_0_ODBCPreparedStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_addBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_addBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_addBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addBatch", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_addBatch__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_addBatch__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_addBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_clearParameters__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_clearParameters__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_clearParameters__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clearParameters", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_clearParameters__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_clearParameters__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_clearParameters__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_execute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_execute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_execute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_execute__Z_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_execute__Z_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_execute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_executeQuery__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_executeQuery__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_executeQuery__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_5_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_executeQuery__LRResultSet__args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_executeQuery__LRResultSet__exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_executeQuery__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_executeUpdate__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_executeUpdate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_executeUpdate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_executeUpdate__I_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_executeUpdate__I_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_executeUpdate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_7_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args[] = 
{
  &ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatement::clazzInfo(), // return type
  "_1_init", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_init_INLacdk_util_RProperties__LRODBCStatement__exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_init_INLacdk_util_RProperties__LRODBCStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_args[] = 
{
  &ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setBlob_IINLRBlob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setBlob", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setBlob_IINLRBlob__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setBlob_IINLRBlob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setBoolean_IZ_V_args[] = 
{
  &ODBCPreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setBoolean_IZ_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setBoolean_IZ_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setByte_IB_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setByte_IB_V_args[] = 
{
  &ODBCPreparedStatement_methods_setByte_IB_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setByte_IB_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setByte_IB_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_args[] = 
{
  &ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDate_IINLRDate__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDate_IINLRDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setDate_IINLRDate__V_args[] = 
{
  &ODBCPreparedStatement_methods_setDate_IINLRDate__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setDate_IINLRDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setDate_IINLRDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setDate_IINLRDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setDate_IINLRDate__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setDate_IINLRDate__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setDate_IINLRDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_args[] = 
{
  &ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_x,
  &ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setDate_IINLRDate_INLRCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setDate_IINLRDate_INLRCalendar__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setDate_IINLRDate_INLRCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDouble_ID_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setDouble_ID_V_args[] = 
{
  &ODBCPreparedStatement_methods_setDouble_ID_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setDouble_ID_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setDouble_ID_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setFloat_IF_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setFloat_IF_V_args[] = 
{
  &ODBCPreparedStatement_methods_setFloat_IF_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setFloat_IF_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setFloat_IF_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setInt_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setInt_II_V_args[] = 
{
  &ODBCPreparedStatement_methods_setInt_II_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setInt_II_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setInt_II_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setLong_IJ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setLong_IJ_V_args[] = 
{
  &ODBCPreparedStatement_methods_setLong_IJ_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setLong_IJ_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setLong_IJ_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setNull_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setNull_II_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setNull_II_V_args[] = 
{
  &ODBCPreparedStatement_methods_setNull_II_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setNull_II_V_arg_sqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setNull_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setNull_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setNull_II_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setNull_II_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setNull_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paramIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setNull_IIINLRString__V_args[] = 
{
  &ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex,
  &ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType,
  &ODBCPreparedStatement_methods_setNull_IIINLRString__V_arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setNull_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setNull_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setNull_IIINLRString__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setNull_IIINLRString__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setNull_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setObject_IINLRObject__V_args[] = 
{
  &ODBCPreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setObject_IINLRObject__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_args[] = 
{
  &ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_x,
  &ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setObject_IINLRObject_I_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_args[] = 
{
  &ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_x,
  &ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType,
  &ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setObject_IINLRObject_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setObject_IINLRObject_II_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setObject_IINLRObject_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setShort_IS_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setShort_IS_V_args[] = 
{
  &ODBCPreparedStatement_methods_setShort_IS_V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setShort_IS_V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setShort_IS_V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setString_IINLRString__V_args[] = 
{
  &ODBCPreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setString", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setTime_IINLRTime__V_args[] = 
{
  &ODBCPreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setTime_IINLRTime__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_args[] = 
{
  &ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_x,
  &ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setTime_IINLRTime_INLRCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setTime_IINLRTime_INLRCalendar__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setTime_IINLRTime_INLRCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args[] = 
{
  &ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_args[] = 
{
  &ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_parameterIndex,
  &ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_x,
  &ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp_INLRCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_args, // the arguments
  0, //arguments count
  ODBCPreparedStatement_methods_setTimestamp_IINLRTimestamp_INLRCalendar__V_exceptions, // the declared exceptions
  ODBCPreparedStatement_MetainfoWrapper::ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp_INLRCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCPreparedStatement_methods[] = 
{
  &ODBCPreparedStatement_method_GetClass__L_acdk_lang_RClass_,
  &ODBCPreparedStatement_method_ODBCPreparedStatement_INLRODBCConnection_INLRString__LRODBCPreparedStatement_,
  &ODBCPreparedStatement_method_addBatch__V,
  &ODBCPreparedStatement_method_clearParameters__V,
  &ODBCPreparedStatement_method_execute__Z,
  &ODBCPreparedStatement_method_executeQuery__LRResultSet_,
  &ODBCPreparedStatement_method_executeUpdate__I,
  &ODBCPreparedStatement_method_getMetaData__LRResultSetMetaData_,
  &ODBCPreparedStatement_method_init_INLacdk_util_RProperties__LRODBCStatement_,
  &ODBCPreparedStatement_method_setBlob_IINLRBlob__V,
  &ODBCPreparedStatement_method_setBoolean_IZ_V,
  &ODBCPreparedStatement_method_setByte_IB_V,
  &ODBCPreparedStatement_method_setBytes_IINLRbyteArray__V,
  &ODBCPreparedStatement_method_setDate_IINLRDate__V,
  &ODBCPreparedStatement_method_setDate_IINLRDate_INLRCalendar__V,
  &ODBCPreparedStatement_method_setDouble_ID_V,
  &ODBCPreparedStatement_method_setFloat_IF_V,
  &ODBCPreparedStatement_method_setInt_II_V,
  &ODBCPreparedStatement_method_setLong_IJ_V,
  &ODBCPreparedStatement_method_setNull_II_V,
  &ODBCPreparedStatement_method_setNull_IIINLRString__V,
  &ODBCPreparedStatement_method_setObject_IINLRObject__V,
  &ODBCPreparedStatement_method_setObject_IINLRObject_I_V,
  &ODBCPreparedStatement_method_setObject_IINLRObject_II_V,
  &ODBCPreparedStatement_method_setShort_IS_V,
  &ODBCPreparedStatement_method_setString_IINLRString__V,
  &ODBCPreparedStatement_method_setTime_IINLRTime__V,
  &ODBCPreparedStatement_method_setTime_IINLRTime_INLRCalendar__V,
  &ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp__V,
  &ODBCPreparedStatement_method_setTimestamp_IINLRTimestamp_INLRCalendar__V,
  0
};


struct ODBCPreparedStatement_MetaInfoInitializer
{  ODBCPreparedStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCPreparedStatement::clazzInfo();
    ci->fields =  _ODBCPreparedStatement_fields;
    ci->methods =  _ODBCPreparedStatement_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCPreparedStatement_MetaInfoInitializer ODBCPreparedStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCResultSet_create_array(int length)
{
  return new ObjectArrayImpl<RODBCResultSet>(length);
}

//static
::acdk::lang::RObject
ODBCResultSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCResultSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCResultSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCResultSet((RODBCStatement)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__chkindex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::_chkindex(args[0].getIntVar());
    else
        This->_chkindex(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__getColumn_I_LRODBCColumn__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::_getColumn(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->_getColumn(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__getColumnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::_getColumnCount();
    else
      ret = This->_getColumnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__getColumnIndex_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::_getColumnIndex((RString)args[0].getObjectVar());
    else
      ret = This->_getColumnIndex((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__getNumRows__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::_getNumRows();
    else
        This->_getNumRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method__getODBCHandle__LRODBCHandle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::_getODBCHandle();
    else
        ret = (::acdk::lang::RObject)This->_getODBCHandle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_absolute_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::absolute(args[0].getIntVar());
    else
      ret = This->absolute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_afterLast__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::afterLast();
    else
        This->afterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_beforeFirst__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::beforeFirst();
    else
        This->beforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_cancelRowUpdates__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::cancelRowUpdates();
    else
        This->cancelRowUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_deleteRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::deleteRow();
    else
        This->deleteRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_findColumn_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::findColumn((RString)args[0].getObjectVar());
    else
      ret = This->findColumn((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_first__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::first();
    else
      ret = This->first();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getArray_I_LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getArray(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getArray(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getArray_INLRString__LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getArray((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getArray((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getAsciiStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getAsciiStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getAsciiStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAsciiStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBinaryStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBinaryStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBinaryStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBinaryStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBlob_I_LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBlob(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBlob_INLRString__LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBlob((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getBoolean(args[0].getIntVar());
    else
      ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBoolean_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getBoolean((RString)args[0].getObjectVar());
    else
      ret = This->getBoolean((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getByte(args[0].getIntVar());
    else
      ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getByte_INLRString__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getByte((RString)args[0].getObjectVar());
    else
      ret = This->getByte((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBytes_I_LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBytes(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBytes(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getBytes_INLRString__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getBytes((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBytes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getCharacterStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getCharacterStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getCharacterStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getCharacterStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getConcurrency();
    else
      ret = This->getConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getCursorName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getCursorName();
    else
        ret = (::acdk::lang::RObject)This->getCursorName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getDate_I_Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getDate(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getDate((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getDate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getDouble(args[0].getIntVar());
    else
      ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getDouble_INLRString__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getDouble((RString)args[0].getObjectVar());
    else
      ret = This->getDouble((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getFetchDirection();
    else
      ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getFetchSize();
    else
      ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getFloat(args[0].getIntVar());
    else
      ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getFloat_INLRString__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getFloat((RString)args[0].getObjectVar());
    else
      ret = This->getFloat((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getInt(args[0].getIntVar());
    else
      ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getInt_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getInt((RString)args[0].getObjectVar());
    else
      ret = This->getInt((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getLong(args[0].getIntVar());
    else
      ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getLong_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getLong((RString)args[0].getObjectVar());
    else
      ret = This->getLong((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getObject(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getObject((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getObject((RString)args[0].getObjectVar(), (acdk::util::RMap)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getRow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getRow();
    else
      ret = This->getRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getShort(args[0].getIntVar());
    else
      ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getShort_INLRString__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getShort((RString)args[0].getObjectVar());
    else
      ret = This->getShort((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getStatement();
    else
        ret = (::acdk::lang::RObject)This->getStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getString((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getTime_I_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getTime(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getTime_INLRString__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getTime((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTime((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getTimestamp_I_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getTimestamp(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getTimestamp((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::getType();
    else
      ret = This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSet::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_insertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::insertRow();
    else
        This->insertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_isAfterLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::isAfterLast();
    else
      ret = This->isAfterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_isBeforeFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::isBeforeFirst();
    else
      ret = This->isBeforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_isFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::isFirst();
    else
      ret = This->isFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_isLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::isLast();
    else
      ret = This->isLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_last__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::last();
    else
      ret = This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_moveToCurrentRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::moveToCurrentRow();
    else
        This->moveToCurrentRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_moveToInsertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::moveToInsertRow();
    else
        This->moveToInsertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_next__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::next();
    else
      ret = This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_previous__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::previous();
    else
      ret = This->previous();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_refreshRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::refreshRow();
    else
        This->refreshRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_relative_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::relative(args[0].getIntVar());
    else
      ret = This->relative(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_rowDeleted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::rowDeleted();
    else
      ret = This->rowDeleted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_rowInserted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::rowInserted();
    else
      ret = This->rowInserted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_rowUpdated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::rowUpdated();
    else
      ret = This->rowUpdated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::setFetchDirection(args[0].getIntVar());
    else
        This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::setFetchSize(args[0].getIntVar());
    else
        This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateAsciiStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateAsciiStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateAsciiStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateAsciiStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBinaryStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateBinaryStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBinaryStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateBinaryStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBoolean(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->updateBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBoolean_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBoolean((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->updateBoolean((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateByte(args[0].getIntVar(), args[1].getByteVar());
    else
        This->updateByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateByte_INLRString_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateByte((RString)args[0].getObjectVar(), args[1].getByteVar());
    else
        This->updateByte((RString)args[0].getObjectVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->updateBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateBytes((RString)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->updateBytes((RString)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateCharacterStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateCharacterStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateCharacterStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateCharacterStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    else
        This->updateDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateDate((RString)args[0].getObjectVar(), (acdk::util::RDate)args[1].getObjectVar());
    else
        This->updateDate((RString)args[0].getObjectVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateDouble(args[0].getIntVar(), args[1].getDoubleVar());
    else
        This->updateDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateDouble_INLRString_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateDouble((RString)args[0].getObjectVar(), args[1].getDoubleVar());
    else
        This->updateDouble((RString)args[0].getObjectVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateFloat(args[0].getIntVar(), args[1].getFloatVar());
    else
        This->updateFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateFloat_INLRString_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateFloat((RString)args[0].getObjectVar(), args[1].getFloatVar());
    else
        This->updateFloat((RString)args[0].getObjectVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateInt(args[0].getIntVar(), args[1].getIntVar());
    else
        This->updateInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateInt_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateInt((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateInt((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateLong(args[0].getIntVar(), args[1].getLongVar());
    else
        This->updateLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateLong_INLRString_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateLong((RString)args[0].getObjectVar(), args[1].getLongVar());
    else
        This->updateLong((RString)args[0].getObjectVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateNull_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateNull(args[0].getIntVar());
    else
        This->updateNull(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateNull_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateNull((RString)args[0].getObjectVar());
    else
        This->updateNull((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    else
        This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateObject_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateRow();
    else
        This->updateRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateShort(args[0].getIntVar(), args[1].getShortVar());
    else
        This->updateShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateShort_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateShort((RString)args[0].getObjectVar(), args[1].getShortVar());
    else
        This->updateShort((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->updateString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateString((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->updateString((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    else
        This->updateTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateTime_INLRString_INLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateTime((RString)args[0].getObjectVar(), (RTime)args[1].getObjectVar());
    else
        This->updateTime((RString)args[0].getObjectVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->updateTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ODBCResultSet::updateTimestamp((RString)args[0].getObjectVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->updateTimestamp((RString)args[0].getObjectVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSet_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSet::wasNull();
    else
      ret = This->wasNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields___hndl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->__hndl, flags);
    else
      This->__hndl = (RODBCHandle)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__colDesc_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_colDesc, flags);
    else
      This->_colDesc = (RODBCColumnArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__cursorpos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cursorpos, flags);
    else
      This->_cursorpos = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__direction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_direction, flags);
    else
      This->_direction = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__fetched_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fetched, flags);
    else
      This->_fetched = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__numrows_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numrows, flags);
    else
      This->_numrows = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__numrowsValid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_numrowsValid, flags);
    else
      This->_numrowsValid = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__stmt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stmt, flags);
    else
      This->_stmt = (RODBCStatement)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSet_fields__valid_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSet* This = dmi_cast<ODBCResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_valid, flags);
    else
      This->_valid = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields___hndl = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__hndl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields___hndl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__colDesc = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_colDesc", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCColumnArray::clazzInfo(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__colDesc_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__cursorpos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cursorpos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__cursorpos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__direction = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_direction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__direction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__fetched = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fetched", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__fetched_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__numrows = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numrows", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__numrows_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__numrowsValid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_numrowsValid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__numrowsValid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__stmt = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stmt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatement::clazzInfo(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__stmt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSet_fields__valid = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_valid", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_fields__valid_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCResultSet_fields[] = 
{
  &ODBCResultSet_fields___hndl,
  &ODBCResultSet_fields__colDesc,
  &ODBCResultSet_fields__cursorpos,
  &ODBCResultSet_fields__direction,
  &ODBCResultSet_fields__fetched,
  &ODBCResultSet_fields__numrows,
  &ODBCResultSet_fields__numrowsValid,
  &ODBCResultSet_fields__stmt,
  &ODBCResultSet_fields__valid,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1U_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__arg_stmt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stmt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCStatement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__args[] = 
{
  &ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__arg_stmt,
  &ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCResultSet::clazzInfo(), // return type
  "_1N_ODBCResultSet", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods__chkindex_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__chkindex_I_V_args[] = 
{
  &ODBCResultSet_methods__chkindex_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__chkindex_I_V_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet__chkindex_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__chkindex_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_chkindex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1R__chkindex", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__chkindex_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__chkindex_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__chkindex_I_V_dispatch, // invoke this method
  ODBCResultSet__chkindex_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods__getColumn_I_LRODBCColumn__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__getColumn_I_LRODBCColumn__args[] = 
{
  &ODBCResultSet_methods__getColumn_I_LRODBCColumn__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__getColumn_I_LRODBCColumn__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet__getColumn_I_LRODBCColumn__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__getColumn_I_LRODBCColumn_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCColumn::clazzInfo(), // return type
  "_1P__getColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__getColumn_I_LRODBCColumn__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__getColumn_I_LRODBCColumn__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__getColumn_I_LRODBCColumn__dispatch, // invoke this method
  ODBCResultSet__getColumn_I_LRODBCColumn__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__getColumnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__getColumnCount__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet__getColumnCount__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__getColumnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getColumnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1O__getColumnCount", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__getColumnCount__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__getColumnCount__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__getColumnCount__I_dispatch, // invoke this method
  ODBCResultSet__getColumnCount__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods__getColumnIndex_INLRString__I_arg_colname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__getColumnIndex_INLRString__I_args[] = 
{
  &ODBCResultSet_methods__getColumnIndex_INLRString__I_arg_colname,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__getColumnIndex_INLRString__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet__getColumnIndex_INLRString__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__getColumnIndex_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getColumnIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1Q__getColumnIndex", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__getColumnIndex_INLRString__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__getColumnIndex_INLRString__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__getColumnIndex_INLRString__I_dispatch, // invoke this method
  ODBCResultSet__getColumnIndex_INLRString__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__getNumRows__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__getNumRows__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__getNumRows__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getNumRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1S__getNumRows", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__getNumRows__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__getNumRows__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__getNumRows__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods__getODBCHandle__LRODBCHandle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods__getODBCHandle__LRODBCHandle__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet__getODBCHandle__LRODBCHandle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method__getODBCHandle__LRODBCHandle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getODBCHandle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCHandle::clazzInfo(), // return type
  "_1T__getODBCHandle", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods__getODBCHandle__LRODBCHandle__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods__getODBCHandle__LRODBCHandle__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method__getODBCHandle__LRODBCHandle__dispatch, // invoke this method
  ODBCResultSet__getODBCHandle__LRODBCHandle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_absolute_I_Z_arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_absolute_I_Z_args[] = 
{
  &ODBCResultSet_methods_absolute_I_Z_arg_row,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_absolute_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_absolute_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "absolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_absolute", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_absolute_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_absolute_I_Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_absolute_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_afterLast__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_afterLast__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_afterLast__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_afterLast", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_afterLast__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_afterLast__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_afterLast__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_beforeFirst__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_beforeFirst__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_beforeFirst__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_beforeFirst", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_beforeFirst__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_beforeFirst__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_beforeFirst__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_cancelRowUpdates__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_cancelRowUpdates__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_cancelRowUpdates__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancelRowUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_cancelRowUpdates", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_cancelRowUpdates__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_cancelRowUpdates__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_cancelRowUpdates__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_clearWarnings__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_close__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_close__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_deleteRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_deleteRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_deleteRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_deleteRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_deleteRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_deleteRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_deleteRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_findColumn_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_findColumn_INLRString__I_args[] = 
{
  &ODBCResultSet_methods_findColumn_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_findColumn_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_findColumn_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_findColumn", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_findColumn_INLRString__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_findColumn_INLRString__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_findColumn_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_first__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_first__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet_first__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_first__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "first", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_first", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_first__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_first__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_first__Z_dispatch, // invoke this method
  ODBCResultSet_first__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getArray_I_LRArray__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getArray_I_LRArray__args[] = 
{
  &ODBCResultSet_methods_getArray_I_LRArray__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getArray_I_LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getArray_I_LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_9_getArray", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getArray_I_LRArray__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getArray_I_LRArray__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getArray_I_LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getArray_INLRString__LRArray__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getArray_INLRString__LRArray__args[] = 
{
  &ODBCResultSet_methods_getArray_INLRString__LRArray__arg_colName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getArray_INLRString__LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getArray_INLRString__LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_a_getArray", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getArray_INLRString__LRArray__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getArray_INLRString__LRArray__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getArray_INLRString__LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getAsciiStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_b_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_c_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBinaryStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_d_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_e_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBlob_I_LRBlob__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBlob_I_LRBlob__args[] = 
{
  &ODBCResultSet_methods_getBlob_I_LRBlob__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBlob_I_LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBlob_I_LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_f_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBlob_I_LRBlob__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBlob_I_LRBlob__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBlob_I_LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBlob_INLRString__LRBlob__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBlob_INLRString__LRBlob__args[] = 
{
  &ODBCResultSet_methods_getBlob_INLRString__LRBlob__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBlob_INLRString__LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBlob_INLRString__LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_g_getBlob", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBlob_INLRString__LRBlob__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBlob_INLRString__LRBlob__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBlob_INLRString__LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBoolean_I_Z_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBoolean_I_Z_args[] = 
{
  &ODBCResultSet_methods_getBoolean_I_Z_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBoolean_INLRString__Z_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBoolean_INLRString__Z_args[] = 
{
  &ODBCResultSet_methods_getBoolean_INLRString__Z_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBoolean_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBoolean_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBoolean_INLRString__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBoolean_INLRString__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBoolean_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getByte_I_B_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getByte_I_B_args[] = 
{
  &ODBCResultSet_methods_getByte_I_B_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_j_getByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getByte_I_B_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getByte_INLRString__B_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getByte_INLRString__B_args[] = 
{
  &ODBCResultSet_methods_getByte_INLRString__B_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getByte_INLRString__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getByte_INLRString__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_k_getByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getByte_INLRString__B_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getByte_INLRString__B_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getByte_INLRString__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBytes_I_LRbyteArray__args[] = 
{
  &ODBCResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBytes_I_LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBytes_I_LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_l_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBytes_I_LRbyteArray__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBytes_I_LRbyteArray__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBytes_I_LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__args[] = 
{
  &ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getBytes_INLRString__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_m_getBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getBytes_INLRString__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getCharacterStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_n_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_o_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getConcurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getConcurrency__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getConcurrency__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getCursorName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getCursorName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getCursorName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getCursorName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getCursorName__LRString__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getCursorName__LRString__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getCursorName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__args[] = 
{
  &ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getDate_I_Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_r_getDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getDate_I_Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args[] = 
{
  &ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getDate_INLRString__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_s_getDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getDouble_I_D_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getDouble_I_D_args[] = 
{
  &ODBCResultSet_methods_getDouble_I_D_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_t_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getDouble_I_D_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getDouble_INLRString__D_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getDouble_INLRString__D_args[] = 
{
  &ODBCResultSet_methods_getDouble_INLRString__D_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getDouble_INLRString__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getDouble_INLRString__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_u_getDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getDouble_INLRString__D_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getDouble_INLRString__D_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getDouble_INLRString__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_v_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getFetchDirection__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_w_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getFetchSize__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getFloat_I_F_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getFloat_I_F_args[] = 
{
  &ODBCResultSet_methods_getFloat_I_F_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_x_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getFloat_I_F_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getFloat_INLRString__F_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getFloat_INLRString__F_args[] = 
{
  &ODBCResultSet_methods_getFloat_INLRString__F_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getFloat_INLRString__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getFloat_INLRString__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_y_getFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getFloat_INLRString__F_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getFloat_INLRString__F_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getFloat_INLRString__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getInt_I_I_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getInt_I_I_args[] = 
{
  &ODBCResultSet_methods_getInt_I_I_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getInt_I_I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getInt_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getInt_INLRString__I_args[] = 
{
  &ODBCResultSet_methods_getInt_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getInt_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getInt_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getInt_INLRString__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getInt_INLRString__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getInt_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getLong_I_J_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getLong_I_J_args[] = 
{
  &ODBCResultSet_methods_getLong_I_J_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_B_getLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getLong_I_J_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getLong_INLRString__J_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getLong_INLRString__J_args[] = 
{
  &ODBCResultSet_methods_getLong_INLRString__J_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getLong_INLRString__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getLong_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_C_getLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getLong_INLRString__J_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getLong_INLRString__J_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getLong_INLRString__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_D_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_I_LRObject__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getObject_I_LRObject__args[] = 
{
  &ODBCResultSet_methods_getObject_I_LRObject__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_E_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getObject_I_LRObject__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getObject_I_LRObject__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args[] = 
{
  &ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i,
  &ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getObject_IINLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_F_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_INLRString__LRObject__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getObject_INLRString__LRObject__args[] = 
{
  &ODBCResultSet_methods_getObject_INLRString__LRObject__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_G_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getObject_INLRString__LRObject__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args[] = 
{
  &ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_columnName,
  &ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_H_getObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getRow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getRow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getRow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_I_getRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getRow__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getRow__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getRow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getShort_I_S_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getShort_I_S_args[] = 
{
  &ODBCResultSet_methods_getShort_I_S_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_J_getShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getShort_I_S_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getShort_INLRString__S_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getShort_INLRString__S_args[] = 
{
  &ODBCResultSet_methods_getShort_INLRString__S_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getShort_INLRString__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getShort_INLRString__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_K_getShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getShort_INLRString__S_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getShort_INLRString__S_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getShort_INLRString__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_L_getStatement", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getStatement__LRStatement__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getStatement__LRStatement__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getString_I_LRString__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getString_I_LRString__args[] = 
{
  &ODBCResultSet_methods_getString_I_LRString__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_M_getString", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getString_I_LRString__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getString_INLRString__LRString__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getString_INLRString__LRString__args[] = 
{
  &ODBCResultSet_methods_getString_INLRString__LRString__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_N_getString", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getString_INLRString__LRString__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getString_INLRString__LRString__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getTime_I_LRTime__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getTime_I_LRTime__args[] = 
{
  &ODBCResultSet_methods_getTime_I_LRTime__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getTime_I_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getTime_I_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_O_getTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getTime_I_LRTime__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getTime_I_LRTime__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getTime_I_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getTime_INLRString__LRTime__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getTime_INLRString__LRTime__args[] = 
{
  &ODBCResultSet_methods_getTime_INLRString__LRTime__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getTime_INLRString__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getTime_INLRString__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_P_getTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getTime_INLRString__LRTime__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getTime_INLRString__LRTime__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getTime_INLRString__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getTimestamp_I_LRTimestamp__args[] = 
{
  &ODBCResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getTimestamp_I_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getTimestamp_I_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_Q_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getTimestamp_I_LRTimestamp__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getTimestamp_I_LRTimestamp__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getTimestamp_I_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__args[] = 
{
  &ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getTimestamp_INLRString__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_R_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_getType", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getType__I_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getType__I_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_getWarnings__L_acdk_sql_RSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_getWarnings__L_acdk_sql_RSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::sql::RSQLWarning::clazzInfo(), // return type
  "_T_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_getWarnings__L_acdk_sql_RSQLWarning__args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_getWarnings__L_acdk_sql_RSQLWarning__exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_getWarnings__L_acdk_sql_RSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_insertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_insertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_insertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_U_insertRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_insertRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_insertRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_insertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_isAfterLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_isAfterLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_isAfterLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAfterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_isAfterLast", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_isAfterLast__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_isAfterLast__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_isAfterLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_isBeforeFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_isBeforeFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_isBeforeFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBeforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_isBeforeFirst", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_isBeforeFirst__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_isBeforeFirst__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_isBeforeFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_isFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_isFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_isFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_isFirst", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_isFirst__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_isFirst__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_isFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_isLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_isLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_isLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_isLast", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_isLast__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_isLast__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_isLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_last__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_last__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_last__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Z_last", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_last__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_last__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_last__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_moveToCurrentRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_moveToCurrentRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_moveToCurrentRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToCurrentRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_10_moveToCurrentRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_moveToCurrentRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_moveToCurrentRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_moveToCurrentRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_moveToInsertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_moveToInsertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_moveToInsertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToInsertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_moveToInsertRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_moveToInsertRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_moveToInsertRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_moveToInsertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_next__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_next__Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSet_next__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_next__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_12_next", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_next__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_next__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_next__Z_dispatch, // invoke this method
  ODBCResultSet_next__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_previous__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_previous__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_previous__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previous", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_previous", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_previous__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_previous__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_previous__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_refreshRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_refreshRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_refreshRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_14_refreshRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_refreshRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_refreshRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_refreshRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_relative_I_Z_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_relative_I_Z_args[] = 
{
  &ODBCResultSet_methods_relative_I_Z_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_relative_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_relative_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "relative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_relative", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_relative_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_relative_I_Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_relative_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_rowDeleted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_rowDeleted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_rowDeleted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowDeleted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_rowDeleted", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_rowDeleted__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_rowDeleted__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_rowDeleted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_rowInserted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_rowInserted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_rowInserted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowInserted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_rowInserted", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_rowInserted__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_rowInserted__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_rowInserted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_rowUpdated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_rowUpdated__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_rowUpdated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowUpdated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_rowUpdated", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_rowUpdated__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_rowUpdated__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_rowUpdated__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_setFetchDirection_I_V_args[] = 
{
  &ODBCResultSet_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_setFetchSize_I_V_args[] = 
{
  &ODBCResultSet_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x,
  &ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x,
  &ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBoolean_IZ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBoolean_IZ_V_args[] = 
{
  &ODBCResultSet_methods_updateBoolean_IZ_V_arg_columnIndex,
  &ODBCResultSet_methods_updateBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBoolean_IZ_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBoolean_IZ_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBoolean_INLRString_Z_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBoolean_INLRString_Z_V_args[] = 
{
  &ODBCResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName,
  &ODBCResultSet_methods_updateBoolean_INLRString_Z_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBoolean_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBoolean_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBoolean_INLRString_Z_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBoolean_INLRString_Z_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBoolean_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateByte_IB_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateByte_IB_V_args[] = 
{
  &ODBCResultSet_methods_updateByte_IB_V_arg_columnIndex,
  &ODBCResultSet_methods_updateByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1h_updateByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateByte_IB_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateByte_IB_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateByte_INLRString_B_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateByte_INLRString_B_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateByte_INLRString_B_V_args[] = 
{
  &ODBCResultSet_methods_updateByte_INLRString_B_V_arg_columnName,
  &ODBCResultSet_methods_updateByte_INLRString_B_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateByte_INLRString_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateByte_INLRString_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_updateByte", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateByte_INLRString_B_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateByte_INLRString_B_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateByte_INLRString_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_args[] = 
{
  &ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex,
  &ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args[] = 
{
  &ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName,
  &ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateBytes_INLRString_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x,
  &ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader,
  &ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1m_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_args[] = 
{
  &ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex,
  &ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateDate_IINLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1n_updateDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args[] = 
{
  &ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName,
  &ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_updateDate", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDouble_ID_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateDouble_ID_V_args[] = 
{
  &ODBCResultSet_methods_updateDouble_ID_V_arg_columnIndex,
  &ODBCResultSet_methods_updateDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateDouble_ID_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateDouble_ID_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDouble_INLRString_D_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateDouble_INLRString_D_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateDouble_INLRString_D_V_args[] = 
{
  &ODBCResultSet_methods_updateDouble_INLRString_D_V_arg_columnName,
  &ODBCResultSet_methods_updateDouble_INLRString_D_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateDouble_INLRString_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateDouble_INLRString_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateDouble_INLRString_D_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateDouble_INLRString_D_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateDouble_INLRString_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateFloat_IF_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateFloat_IF_V_args[] = 
{
  &ODBCResultSet_methods_updateFloat_IF_V_arg_columnIndex,
  &ODBCResultSet_methods_updateFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateFloat_IF_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateFloat_IF_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateFloat_INLRString_F_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateFloat_INLRString_F_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateFloat_INLRString_F_V_args[] = 
{
  &ODBCResultSet_methods_updateFloat_INLRString_F_V_arg_columnName,
  &ODBCResultSet_methods_updateFloat_INLRString_F_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateFloat_INLRString_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateFloat_INLRString_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1s_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateFloat_INLRString_F_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateFloat_INLRString_F_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateFloat_INLRString_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateInt_II_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateInt_II_V_args[] = 
{
  &ODBCResultSet_methods_updateInt_II_V_arg_columnIndex,
  &ODBCResultSet_methods_updateInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_updateInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateInt_II_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateInt_II_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateInt_INLRString_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateInt_INLRString_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateInt_INLRString_I_V_args[] = 
{
  &ODBCResultSet_methods_updateInt_INLRString_I_V_arg_columnName,
  &ODBCResultSet_methods_updateInt_INLRString_I_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateInt_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateInt_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1u_updateInt", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateInt_INLRString_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateInt_INLRString_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateInt_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateLong_IJ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateLong_IJ_V_args[] = 
{
  &ODBCResultSet_methods_updateLong_IJ_V_arg_columnIndex,
  &ODBCResultSet_methods_updateLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1v_updateLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateLong_IJ_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateLong_IJ_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateLong_INLRString_J_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateLong_INLRString_J_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateLong_INLRString_J_V_args[] = 
{
  &ODBCResultSet_methods_updateLong_INLRString_J_V_arg_columnName,
  &ODBCResultSet_methods_updateLong_INLRString_J_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateLong_INLRString_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateLong_INLRString_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_updateLong", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateLong_INLRString_J_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateLong_INLRString_J_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateLong_INLRString_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateNull_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateNull_I_V_args[] = 
{
  &ODBCResultSet_methods_updateNull_I_V_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateNull_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateNull_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_updateNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateNull_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateNull_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateNull_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateNull_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateNull_INLRString__V_args[] = 
{
  &ODBCResultSet_methods_updateNull_INLRString__V_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateNull_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateNull_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1y_updateNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateNull_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateNull_INLRString__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateNull_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateObject_IINLRObject__V_args[] = 
{
  &ODBCResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex,
  &ODBCResultSet_methods_updateObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1z_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateObject_IINLRObject__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateObject_IINLRObject_I_V_args[] = 
{
  &ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex,
  &ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_x,
  &ODBCResultSet_methods_updateObject_IINLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1A_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateObject_IINLRObject_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_args[] = 
{
  &ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName,
  &ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateObject_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateObject_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_args[] = 
{
  &ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName,
  &ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x,
  &ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateObject_INLRString_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1C_updateObject", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1M_updateRow", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateRow__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateRow__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateShort_IS_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateShort_IS_V_args[] = 
{
  &ODBCResultSet_methods_updateShort_IS_V_arg_columnIndex,
  &ODBCResultSet_methods_updateShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1D_updateShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateShort_IS_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateShort_IS_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateShort_INLRString_S_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateShort_INLRString_S_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateShort_INLRString_S_V_args[] = 
{
  &ODBCResultSet_methods_updateShort_INLRString_S_V_arg_columnName,
  &ODBCResultSet_methods_updateShort_INLRString_S_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateShort_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateShort_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1E_updateShort", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateShort_INLRString_S_V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateShort_INLRString_S_V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateShort_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateString_IINLRString__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateString_IINLRString__V_args[] = 
{
  &ODBCResultSet_methods_updateString_IINLRString__V_arg_columnIndex,
  &ODBCResultSet_methods_updateString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1F_updateString", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateString_IINLRString__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateString_IINLRString__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateString_INLRString_INLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateString_INLRString_INLRString__V_args[] = 
{
  &ODBCResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName,
  &ODBCResultSet_methods_updateString_INLRString_INLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1G_updateString", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateString_INLRString_INLRString__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateTime_IINLRTime__V_args[] = 
{
  &ODBCResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex,
  &ODBCResultSet_methods_updateTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1H_updateTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateTime_IINLRTime__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_args[] = 
{
  &ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName,
  &ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateTime_INLRString_INLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1I_updateTime", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateTime_INLRString_INLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_args[] = 
{
  &ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex,
  &ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1J_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args[] = 
{
  &ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName,
  &ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1K_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSet_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSet_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSet_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1L_wasNull", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSet_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  ODBCResultSet_methods_wasNull__Z_exceptions, // the declared exceptions
  ODBCResultSet_MetainfoWrapper::ODBCResultSet_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCResultSet_methods[] = 
{
  &ODBCResultSet_method_GetClass__L_acdk_lang_RClass_,
  &ODBCResultSet_method_ODBCResultSet_INLRODBCStatement_I_LRODBCResultSet_,
  &ODBCResultSet_method__chkindex_I_V,
  &ODBCResultSet_method__getColumn_I_LRODBCColumn_,
  &ODBCResultSet_method__getColumnCount__I,
  &ODBCResultSet_method__getColumnIndex_INLRString__I,
  &ODBCResultSet_method__getNumRows__V,
  &ODBCResultSet_method__getODBCHandle__LRODBCHandle_,
  &ODBCResultSet_method_absolute_I_Z,
  &ODBCResultSet_method_afterLast__V,
  &ODBCResultSet_method_beforeFirst__V,
  &ODBCResultSet_method_cancelRowUpdates__V,
  &ODBCResultSet_method_clearWarnings__V,
  &ODBCResultSet_method_close__V,
  &ODBCResultSet_method_deleteRow__V,
  &ODBCResultSet_method_findColumn_INLRString__I,
  &ODBCResultSet_method_first__Z,
  &ODBCResultSet_method_getArray_I_LRArray_,
  &ODBCResultSet_method_getArray_INLRString__LRArray_,
  &ODBCResultSet_method_getAsciiStream_I_Lacdk_io_RReader_,
  &ODBCResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_,
  &ODBCResultSet_method_getBinaryStream_I_Lacdk_io_RReader_,
  &ODBCResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_,
  &ODBCResultSet_method_getBlob_I_LRBlob_,
  &ODBCResultSet_method_getBlob_INLRString__LRBlob_,
  &ODBCResultSet_method_getBoolean_I_Z,
  &ODBCResultSet_method_getBoolean_INLRString__Z,
  &ODBCResultSet_method_getByte_I_B,
  &ODBCResultSet_method_getByte_INLRString__B,
  &ODBCResultSet_method_getBytes_I_LRbyteArray_,
  &ODBCResultSet_method_getBytes_INLRString__LRbyteArray_,
  &ODBCResultSet_method_getCharacterStream_I_Lacdk_io_RReader_,
  &ODBCResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_,
  &ODBCResultSet_method_getConcurrency__I,
  &ODBCResultSet_method_getCursorName__LRString_,
  &ODBCResultSet_method_getDate_I_Lacdk_util_RDate_,
  &ODBCResultSet_method_getDate_INLRString__Lacdk_util_RDate_,
  &ODBCResultSet_method_getDouble_I_D,
  &ODBCResultSet_method_getDouble_INLRString__D,
  &ODBCResultSet_method_getFetchDirection__I,
  &ODBCResultSet_method_getFetchSize__I,
  &ODBCResultSet_method_getFloat_I_F,
  &ODBCResultSet_method_getFloat_INLRString__F,
  &ODBCResultSet_method_getInt_I_I,
  &ODBCResultSet_method_getInt_INLRString__I,
  &ODBCResultSet_method_getLong_I_J,
  &ODBCResultSet_method_getLong_INLRString__J,
  &ODBCResultSet_method_getMetaData__LRResultSetMetaData_,
  &ODBCResultSet_method_getObject_I_LRObject_,
  &ODBCResultSet_method_getObject_IINLacdk_util_RMap__LRObject_,
  &ODBCResultSet_method_getObject_INLRString__LRObject_,
  &ODBCResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_,
  &ODBCResultSet_method_getRow__I,
  &ODBCResultSet_method_getShort_I_S,
  &ODBCResultSet_method_getShort_INLRString__S,
  &ODBCResultSet_method_getStatement__LRStatement_,
  &ODBCResultSet_method_getString_I_LRString_,
  &ODBCResultSet_method_getString_INLRString__LRString_,
  &ODBCResultSet_method_getTime_I_LRTime_,
  &ODBCResultSet_method_getTime_INLRString__LRTime_,
  &ODBCResultSet_method_getTimestamp_I_LRTimestamp_,
  &ODBCResultSet_method_getTimestamp_INLRString__LRTimestamp_,
  &ODBCResultSet_method_getType__I,
  &ODBCResultSet_method_getWarnings__L_acdk_sql_RSQLWarning_,
  &ODBCResultSet_method_insertRow__V,
  &ODBCResultSet_method_isAfterLast__Z,
  &ODBCResultSet_method_isBeforeFirst__Z,
  &ODBCResultSet_method_isFirst__Z,
  &ODBCResultSet_method_isLast__Z,
  &ODBCResultSet_method_last__Z,
  &ODBCResultSet_method_moveToCurrentRow__V,
  &ODBCResultSet_method_moveToInsertRow__V,
  &ODBCResultSet_method_next__Z,
  &ODBCResultSet_method_previous__Z,
  &ODBCResultSet_method_refreshRow__V,
  &ODBCResultSet_method_relative_I_Z,
  &ODBCResultSet_method_rowDeleted__Z,
  &ODBCResultSet_method_rowInserted__Z,
  &ODBCResultSet_method_rowUpdated__Z,
  &ODBCResultSet_method_setFetchDirection_I_V,
  &ODBCResultSet_method_setFetchSize_I_V,
  &ODBCResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateBoolean_IZ_V,
  &ODBCResultSet_method_updateBoolean_INLRString_Z_V,
  &ODBCResultSet_method_updateByte_IB_V,
  &ODBCResultSet_method_updateByte_INLRString_B_V,
  &ODBCResultSet_method_updateBytes_IINLRbyteArray__V,
  &ODBCResultSet_method_updateBytes_INLRString_INLRbyteArray__V,
  &ODBCResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V,
  &ODBCResultSet_method_updateDate_IINLacdk_util_RDate__V,
  &ODBCResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V,
  &ODBCResultSet_method_updateDouble_ID_V,
  &ODBCResultSet_method_updateDouble_INLRString_D_V,
  &ODBCResultSet_method_updateFloat_IF_V,
  &ODBCResultSet_method_updateFloat_INLRString_F_V,
  &ODBCResultSet_method_updateInt_II_V,
  &ODBCResultSet_method_updateInt_INLRString_I_V,
  &ODBCResultSet_method_updateLong_IJ_V,
  &ODBCResultSet_method_updateLong_INLRString_J_V,
  &ODBCResultSet_method_updateNull_I_V,
  &ODBCResultSet_method_updateNull_INLRString__V,
  &ODBCResultSet_method_updateObject_IINLRObject__V,
  &ODBCResultSet_method_updateObject_IINLRObject_I_V,
  &ODBCResultSet_method_updateObject_INLRString_INLRObject__V,
  &ODBCResultSet_method_updateObject_INLRString_INLRObject_I_V,
  &ODBCResultSet_method_updateRow__V,
  &ODBCResultSet_method_updateShort_IS_V,
  &ODBCResultSet_method_updateShort_INLRString_S_V,
  &ODBCResultSet_method_updateString_IINLRString__V,
  &ODBCResultSet_method_updateString_INLRString_INLRString__V,
  &ODBCResultSet_method_updateTime_IINLRTime__V,
  &ODBCResultSet_method_updateTime_INLRString_INLRTime__V,
  &ODBCResultSet_method_updateTimestamp_IINLRTimestamp__V,
  &ODBCResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V,
  &ODBCResultSet_method_wasNull__Z,
  0
};


struct ODBCResultSet_MetaInfoInitializer
{  ODBCResultSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCResultSet::clazzInfo();
    ci->fields =  _ODBCResultSet_fields;
    ci->methods =  _ODBCResultSet_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCResultSet_MetaInfoInitializer ODBCResultSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc


namespace acdk { 
namespace sql { 
namespace odbc { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ODBCResultSetMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RODBCResultSetMetaData>(length);
}

//static
::acdk::lang::RObject
ODBCResultSetMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ODBCResultSetMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ODBCResultSetMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ODBCResultSetMetaData((RODBCResultSet)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getCatalogName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getCatalogName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getCatalogName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnClassName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getColumnClassName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnClassName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getColumnCount();
    else
      ret = This->getColumnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getColumnDisplaySize(args[0].getIntVar());
    else
      ret = This->getColumnDisplaySize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnLabel_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getColumnLabel(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnLabel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getColumnName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getColumnType(args[0].getIntVar());
    else
      ret = This->getColumnType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getColumnTypeName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnTypeName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getLength_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getLength(args[0].getIntVar());
    else
      ret = This->getLength(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getPrecision_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getPrecision(args[0].getIntVar());
    else
      ret = This->getPrecision(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getScale_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::getScale(args[0].getIntVar());
    else
      ret = This->getScale(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getSchemaName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getSchemaName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getSchemaName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_getTableName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ODBCResultSetMetaData::getTableName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTableName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isAutoIncrement_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isAutoIncrement(args[0].getIntVar());
    else
      ret = This->isAutoIncrement(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isCaseSensitive_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isCaseSensitive(args[0].getIntVar());
    else
      ret = This->isCaseSensitive(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isCurrency_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isCurrency(args[0].getIntVar());
    else
      ret = This->isCurrency(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isDefinitelyWritable(args[0].getIntVar());
    else
      ret = This->isDefinitelyWritable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isNullable_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isNullable(args[0].getIntVar());
    else
      ret = This->isNullable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isReadOnly_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isReadOnly(args[0].getIntVar());
    else
      ret = This->isReadOnly(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isSearchable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isSearchable(args[0].getIntVar());
    else
      ret = This->isSearchable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isSigned_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isSigned(args[0].getIntVar());
    else
      ret = This->isSigned(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ODBCResultSetMetaData_method_isWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ODBCResultSetMetaData::isWritable(args[0].getIntVar());
    else
      ret = This->isWritable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ODBCResultSetMetaData_fields__rset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ODBCResultSetMetaData* This = dmi_cast<ODBCResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rset, flags);
    else
      This->_rset = (RODBCResultSet)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ODBCResultSetMetaData_fields__rset = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCResultSet::clazzInfo(),
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_fields__rset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ODBCResultSetMetaData_fields[] = 
{
  &ODBCResultSetMetaData_fields__rset,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_n_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__arg_rset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RODBCResultSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__args[] = 
{
  &ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__arg_rset,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ODBCResultSetMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ODBCResultSetMetaData::clazzInfo(), // return type
  "_m_ODBCResultSetMetaData", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getCatalogName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getCatalogName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getCatalogName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getCatalogName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getCatalogName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getCatalogName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getCatalogName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getCatalogName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getCatalogName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getCatalogName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getCatalogName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnClassName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnClassName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getColumnClassName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnClassName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnClassName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnCount__I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnCount__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getColumnCount", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnCount__I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnCount__I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnCount__I_dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnCount__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnDisplaySize_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnDisplaySize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getColumnDisplaySize", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnLabel_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnLabel_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getColumnLabel", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnLabel_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnLabel_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnType_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnType_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnType_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnType_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnType_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getColumnType", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnType_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnType_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnType_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnType_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getColumnTypeName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getColumnTypeName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getLength_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getLength_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_getLength_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getLength_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getLength_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getLength_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getLength", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getLength_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getLength_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getLength_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_getLength_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getPrecision_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getPrecision_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_getPrecision_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getPrecision_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getPrecision_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getPrecision_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrecision", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getPrecision", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getPrecision_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getPrecision_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getPrecision_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_getPrecision_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getScale_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getScale_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_getScale_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getScale_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getScale_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getScale_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getScale", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getScale_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getScale_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getScale_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_getScale_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getSchemaName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getSchemaName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getSchemaName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getSchemaName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getSchemaName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getSchemaName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getSchemaName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getSchemaName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getSchemaName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getSchemaName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getSchemaName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_getTableName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_getTableName_I_LRString__args[] = 
{
  &ODBCResultSetMetaData_methods_getTableName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_getTableName_I_LRString__exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_getTableName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_getTableName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getTableName", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_getTableName_I_LRString__args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_getTableName_I_LRString__exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_getTableName_I_LRString__dispatch, // invoke this method
  ODBCResultSetMetaData_getTableName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isAutoIncrement_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isAutoIncrement_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAutoIncrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isAutoIncrement", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isAutoIncrement_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isAutoIncrement_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isCaseSensitive_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isCaseSensitive_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCaseSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isCaseSensitive", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isCaseSensitive_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isCaseSensitive_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isCurrency_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isCurrency_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isCurrency_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isCurrency_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isCurrency_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isCurrency_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isCurrency", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isCurrency_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isCurrency_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isCurrency_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isCurrency_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isDefinitelyWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDefinitelyWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isDefinitelyWritable", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isNullable_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isNullable_I_I_args[] = 
{
  &ODBCResultSetMetaData_methods_isNullable_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isNullable_I_I_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isNullable_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isNullable_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNullable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_isNullable", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isNullable_I_I_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isNullable_I_I_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isNullable_I_I_dispatch, // invoke this method
  ODBCResultSetMetaData_isNullable_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isReadOnly_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isReadOnly_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isReadOnly_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isReadOnly_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isReadOnly_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isReadOnly_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isReadOnly_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isReadOnly_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isReadOnly_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isReadOnly_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isSearchable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isSearchable_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isSearchable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isSearchable_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isSearchable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isSearchable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSearchable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isSearchable", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isSearchable_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isSearchable_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isSearchable_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isSearchable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isSigned_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isSigned_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isSigned_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isSigned_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isSigned_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isSigned_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isSigned", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isSigned_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isSigned_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isSigned_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isSigned_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ODBCResultSetMetaData_methods_isWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ODBCResultSetMetaData_methods_isWritable_I_Z_args[] = 
{
  &ODBCResultSetMetaData_methods_isWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ODBCResultSetMetaData_methods_isWritable_I_Z_exceptions[] =
{
  ::acdk::sql::RSQLException::clazzInfo(), 
  0
};

void ODBCResultSetMetaData_isWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::sql::SQLException) == true)
    THROW_INSTANCE( ::acdk::sql::RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ODBCResultSetMetaData_method_isWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isWritable", // alternative name of method
  -1, // altlabelHashCode
  ODBCResultSetMetaData_methods_isWritable_I_Z_args, // the arguments
  0, //arguments count
  ODBCResultSetMetaData_methods_isWritable_I_Z_exceptions, // the declared exceptions
  ODBCResultSetMetaData_MetainfoWrapper::ODBCResultSetMetaData_method_isWritable_I_Z_dispatch, // invoke this method
  ODBCResultSetMetaData_isWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ODBCResultSetMetaData_methods[] = 
{
  &ODBCResultSetMetaData_method_GetClass__L_acdk_lang_RClass_,
  &ODBCResultSetMetaData_method_ODBCResultSetMetaData_INLRODBCResultSet__LRODBCResultSetMetaData_,
  &ODBCResultSetMetaData_method_getCatalogName_I_LRString_,
  &ODBCResultSetMetaData_method_getColumnClassName_I_LRString_,
  &ODBCResultSetMetaData_method_getColumnCount__I,
  &ODBCResultSetMetaData_method_getColumnDisplaySize_I_I,
  &ODBCResultSetMetaData_method_getColumnLabel_I_LRString_,
  &ODBCResultSetMetaData_method_getColumnName_I_LRString_,
  &ODBCResultSetMetaData_method_getColumnType_I_I,
  &ODBCResultSetMetaData_method_getColumnTypeName_I_LRString_,
  &ODBCResultSetMetaData_method_getLength_I_I,
  &ODBCResultSetMetaData_method_getPrecision_I_I,
  &ODBCResultSetMetaData_method_getScale_I_I,
  &ODBCResultSetMetaData_method_getSchemaName_I_LRString_,
  &ODBCResultSetMetaData_method_getTableName_I_LRString_,
  &ODBCResultSetMetaData_method_isAutoIncrement_I_Z,
  &ODBCResultSetMetaData_method_isCaseSensitive_I_Z,
  &ODBCResultSetMetaData_method_isCurrency_I_Z,
  &ODBCResultSetMetaData_method_isDefinitelyWritable_I_Z,
  &ODBCResultSetMetaData_method_isNullable_I_I,
  &ODBCResultSetMetaData_method_isReadOnly_I_Z,
  &ODBCResultSetMetaData_method_isSearchable_I_Z,
  &ODBCResultSetMetaData_method_isSigned_I_Z,
  &ODBCResultSetMetaData_method_isWritable_I_Z,
  0
};


struct ODBCResultSetMetaData_MetaInfoInitializer
{  ODBCResultSetMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ODBCResultSetMetaData::clazzInfo();
    ci->fields =  _ODBCResultSetMetaData_fields;
    ci->methods =  _ODBCResultSetMetaData_methods;
    ci->_scopeParent = acdk_sql_odbc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ODBCResultSetMetaData_MetaInfoInitializer ODBCResultSetMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace odbc

