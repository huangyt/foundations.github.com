// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../tcl.h"
#include "../Config.h"
#include "../tcl.h"
#include "../TclInterpreter.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace tcl { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TclInterpreter_create_array(int length)
{
  return new ObjectArrayImpl<RTclInterpreter>(length);
}

//static
::acdk::lang::RObject
TclInterpreter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TclInterpreter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TclInterpreter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_eval_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TclInterpreter* This = dmi_cast<TclInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TclInterpreter::eval((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_getInstance__LRTclInterpreter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TclInterpreter::getInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TclInterpreter* This = dmi_cast<TclInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TclInterpreter::interactive((acdk::io::RCharReader)args[0].getObjectVar(), (acdk::io::RCharWriter)args[1].getObjectVar(), (acdk::io::RCharWriter)args[2].getObjectVar());
    else
        This->interactive((acdk::io::RCharReader)args[0].getObjectVar(), (acdk::io::RCharWriter)args[1].getObjectVar(), (acdk::io::RCharWriter)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_parse_INLacdk_io_RFile__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TclInterpreter* This = dmi_cast<TclInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TclInterpreter::parse((acdk::io::RFile)args[0].getObjectVar());
    else
        This->parse((acdk::io::RFile)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TclInterpreter_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TclInterpreter* This = dmi_cast<TclInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TclInterpreter::parse((RString)args[0].getObjectVar());
    else
        This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TclInterpreter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TclInterpreter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_eval_INLRString__LRObject__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_eval_INLRString__LRObject__args[] = 
{
  &TclInterpreter_methods_eval_INLRString__LRObject__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_eval_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_eval_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_eval", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_eval_INLRString__LRObject__args, // the arguments
  0, //arguments count
  TclInterpreter_methods_eval_INLRString__LRObject__exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_eval_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_getInstance__LRTclInterpreter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_getInstance__LRTclInterpreter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_getInstance__LRTclInterpreter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTclInterpreter::clazzInfo(), // return type
  "_4_getInstance", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_getInstance__LRTclInterpreter__args, // the arguments
  0, //arguments count
  TclInterpreter_methods_getInstance__LRTclInterpreter__exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_getInstance__LRTclInterpreter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_err = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "err", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_args[] = 
{
  &TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_in,
  &TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_out,
  &TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_arg_err,
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interactive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_interactive", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  TclInterpreter_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_parse_INLacdk_io_RFile__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_parse_INLacdk_io_RFile__V_args[] = 
{
  &TclInterpreter_methods_parse_INLacdk_io_RFile__V_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_parse_INLacdk_io_RFile__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_parse_INLacdk_io_RFile__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_parse", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_parse_INLacdk_io_RFile__V_args, // the arguments
  0, //arguments count
  TclInterpreter_methods_parse_INLacdk_io_RFile__V_exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_parse_INLacdk_io_RFile__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TclInterpreter_methods_parse_INLRString__V_arg_script = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "script", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TclInterpreter_methods_parse_INLRString__V_args[] = 
{
  &TclInterpreter_methods_parse_INLRString__V_arg_script,
  0
};

::acdk::lang::dmi::ClazzInfo* TclInterpreter_methods_parse_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TclInterpreter_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_parse", // alternative name of method
  -1, // altlabelHashCode
  TclInterpreter_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  TclInterpreter_methods_parse_INLRString__V_exceptions, // the declared exceptions
  TclInterpreter_MetainfoWrapper::TclInterpreter_method_parse_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TclInterpreter_methods[] = 
{
  &TclInterpreter_method_GetClass__L_acdk_lang_RClass_,
  &TclInterpreter_method_eval_INLRString__LRObject_,
  &TclInterpreter_method_getInstance__LRTclInterpreter_,
  &TclInterpreter_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter_INLacdk_io_RCharWriter__V,
  &TclInterpreter_method_parse_INLacdk_io_RFile__V,
  &TclInterpreter_method_parse_INLRString__V,
  0
};


struct TclInterpreter_MetaInfoInitializer
{  TclInterpreter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TclInterpreter::clazzInfo();
    ci->fields =  _TclInterpreter_fields;
    ci->methods =  _TclInterpreter_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TclInterpreter_MetaInfoInitializer TclInterpreter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tcl


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) tcl_dummyExportFunc() {}
#endif

