// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../ast.h"
#include "../AciCodeAttributeData.h"
#include "../ast.h"
#include "../AstNode.h"
#include "../AstNodeVisitor.h"
#include "../ast_metainf.h"
#include "../EofTerminal.h"
#include "../Expression.h"
#include "../Identifier.h"
#include "../Keyword.h"
#include "../Literal.h"
#include "../Statement.h"
#include "../Terminal.h"
#include "../Whitespace.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
AstNode_create_array(int length)
{
  return new ObjectArrayImpl<RAstNode>(length);
}

//static
::acdk::lang::RObject
AstNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AstNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_AstNode_INLRAstNode_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AstNode((RAstNode)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_AstNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_AstNode_INLRAstNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AstNode((RAstNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AstNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_addChild_INLRAstNode_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::addChild((RAstNode)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->addChild((RAstNode)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_buildSemantic_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::buildSemantic((RCompiler)args[0].getObjectVar());
    else
        This->buildSemantic((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::createAstProps((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createAstProps((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_findType_INLRString__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::findType((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findType((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_genOpCode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::genOpCode((RCompiler)args[0].getObjectVar());
    else
        This->genOpCode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getAstProps((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAstProps((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getChild_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getChild(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getChild(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getChildCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AstNode::getChildCount();
    else
      ret = This->getChildCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getCodeLocation();
    else
        ret = (::acdk::lang::RObject)This->getCodeLocation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getExpressionSem__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getExpressionSem();
    else
        ret = (::acdk::lang::RObject)This->getExpressionSem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getNodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getNodeName();
    else
        ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getOrgAstNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getOrgAstNode();
    else
        ret = (::acdk::lang::RObject)This->getOrgAstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getParent__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getParseNode__Lacdk_aci_parser_RParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getParseNode();
    else
        ret = (::acdk::lang::RObject)This->getParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getSaveNodeAfterBuild__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AstNode::getSaveNodeAfterBuild();
    else
      ret = This->getSaveNodeAfterBuild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getSem__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getSem();
    else
        ret = (::acdk::lang::RObject)This->getSem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getSourceTextFragment__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getSourceTextFragment();
    else
        ret = (::acdk::lang::RObject)This->getSourceTextFragment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_getSymbolTable__LRSymbolTable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::getSymbolTable();
    else
        ret = (::acdk::lang::RObject)This->getSymbolTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRClass_II_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRClass__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRClass_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRString_II_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRString__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_queryChild_INLRString_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::queryChild((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_removeLastChild__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::removeLastChild();
    else
        ret = (::acdk::lang::RObject)This->removeLastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_replaceWithTranformed_INLRAstNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::replaceWithTranformed((RAstNode)args[0].getObjectVar());
    else
        This->replaceWithTranformed((RAstNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_setOrgNode_INLRAstNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::setOrgNode((RAstNode)args[0].getObjectVar());
    else
        This->setOrgNode((RAstNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_setParent_INLRAstNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::setParent((RAstNode)args[0].getObjectVar());
    else
        This->setParent((RAstNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_setSaveNodeAfterBuild_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNode::setSaveNodeAfterBuild(args[0].getBoolVar());
    else
        This->setSaveNodeAfterBuild(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_shouldTraverse_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AstNode::shouldTraverse(args[0].getIntVar());
    else
      ret = This->shouldTraverse(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNode_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNode::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNode_fields__astFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_astFlags, flags);
    else
      This->_astFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNode_fields__astProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_astProps, flags);
    else
      This->_astProps = (acdk::cfgscript::RProps)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNode_fields__codeType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNode* This = dmi_cast<AstNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_codeType, flags);
    else
      This->_codeType = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AstNode_fields__astFlags = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_astFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AstNode_MetainfoWrapper::AstNode_fields__astFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AstNode_fields__astProps = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_astProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(),
  AstNode_MetainfoWrapper::AstNode_fields__astProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AstNode_fields__codeType = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_codeType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AstNode_MetainfoWrapper::AstNode_fields__codeType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AstNode_fields[] = 
{
  &AstNode_fields__astFlags,
  &AstNode_fields__astProps,
  &AstNode_fields__codeType,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__arg_astFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "astFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__args[] = 
{
  &AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__arg_parent,
  &AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__arg_astFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_AstNode_INLRAstNode_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AstNode::clazzInfo(), // return type
  "_0_AstNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_AstNode_INLRAstNode_I_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_AstNode_INLRAstNode_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_AstNode__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_AstNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_AstNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AstNode::clazzInfo(), // return type
  "_1_AstNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_AstNode__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_AstNode__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_AstNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_AstNode_INLRAstNode__LRAstNode__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_AstNode_INLRAstNode__LRAstNode__args[] = 
{
  &AstNode_methods_AstNode_INLRAstNode__LRAstNode__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_AstNode_INLRAstNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_AstNode_INLRAstNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AstNode::clazzInfo(), // return type
  "_2_AstNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_AstNode_INLRAstNode__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_AstNode_INLRAstNode__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_AstNode_INLRAstNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_B_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AstNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_addChild_INLRAstNode_Z_V_arg_childNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "childNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_addChild_INLRAstNode_Z_V_arg_setParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "setParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_addChild_INLRAstNode_Z_V_args[] = 
{
  &AstNode_methods_addChild_INLRAstNode_Z_V_arg_childNode,
  &AstNode_methods_addChild_INLRAstNode_Z_V_arg_setParent,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_addChild_INLRAstNode_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_addChild_INLRAstNode_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_addChild_INLRAstNode_Z_V_args, // the arguments
  0, //arguments count
  AstNode_methods_addChild_INLRAstNode_Z_V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_addChild_INLRAstNode_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_buildSemantic_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_buildSemantic_INLRCompiler__V_args[] = 
{
  &AstNode_methods_buildSemantic_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_buildSemantic_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_buildSemantic_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buildSemantic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_buildSemantic", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_buildSemantic_INLRCompiler__V_args, // the arguments
  0, //arguments count
  AstNode_methods_buildSemantic_INLRCompiler__V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_buildSemantic_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__args[] = 
{
  &AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createAstProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(), // return type
  "_z_createAstProps", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__args, // the arguments
  0, //arguments count
  AstNode_methods_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_x_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  AstNode_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_findType_INLRString__LRDClazzInfo__arg_tn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_findType_INLRString__LRDClazzInfo__args[] = 
{
  &AstNode_methods_findType_INLRString__LRDClazzInfo__arg_tn,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_findType_INLRString__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_findType_INLRString__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_w_findType", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_findType_INLRString__LRDClazzInfo__args, // the arguments
  0, //arguments count
  AstNode_methods_findType_INLRString__LRDClazzInfo__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_findType_INLRString__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_genOpCode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_genOpCode_INLRCompiler__V_args[] = 
{
  &AstNode_methods_genOpCode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_genOpCode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_genOpCode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "genOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_genOpCode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_genOpCode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  AstNode_methods_genOpCode_INLRCompiler__V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_genOpCode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__args[] = 
{
  &AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAstProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(), // return type
  "_y_getAstProps", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__args, // the arguments
  0, //arguments count
  AstNode_methods_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_getChild_I_LRAstNode__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getChild_I_LRAstNode__args[] = 
{
  &AstNode_methods_getChild_I_LRAstNode__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getChild_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getChild_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_d_getChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getChild_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_getChild_I_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getChild_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getChildCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getChildCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getChildCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getChildCount", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getChildCount__I_args, // the arguments
  0, //arguments count
  AstNode_methods_getChildCount__I_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getChildCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeLocation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(), // return type
  "_5_getCodeLocation", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args, // the arguments
  0, //arguments count
  AstNode_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getExpressionSem__LRSemanticElem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getExpressionSem__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getExpressionSem__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpressionSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_v_getExpressionSem", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getExpressionSem__LRSemanticElem__args, // the arguments
  0, //arguments count
  AstNode_methods_getExpressionSem__LRSemanticElem__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getExpressionSem__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getNodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getNodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getNodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getNodeName__LRString__args, // the arguments
  0, //arguments count
  AstNode_methods_getNodeName__LRString__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getNodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getOrgAstNode__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getOrgAstNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getOrgAstNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOrgAstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_g_getOrgAstNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getOrgAstNode__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_getOrgAstNode__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getOrgAstNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getParent__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getParent__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getParent__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_a_getParent", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getParent__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_getParent__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getParent__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getParseNode__Lacdk_aci_parser_RParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseNode::clazzInfo(), // return type
  "_7_getParseNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__args, // the arguments
  0, //arguments count
  AstNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getParseNode__Lacdk_aci_parser_RParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getSaveNodeAfterBuild__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getSaveNodeAfterBuild__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getSaveNodeAfterBuild__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSaveNodeAfterBuild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_getSaveNodeAfterBuild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getSaveNodeAfterBuild__Z_args, // the arguments
  0, //arguments count
  AstNode_methods_getSaveNodeAfterBuild__Z_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getSaveNodeAfterBuild__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getSem__LRSemanticElem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getSem__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getSem__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_u_getSem", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getSem__LRSemanticElem__args, // the arguments
  0, //arguments count
  AstNode_methods_getSem__LRSemanticElem__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getSem__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getSourceTextFragment__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getSourceTextFragment__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getSourceTextFragment__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSourceTextFragment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getSourceTextFragment", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getSourceTextFragment__LRString__args, // the arguments
  0, //arguments count
  AstNode_methods_getSourceTextFragment__LRString__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getSourceTextFragment__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_getSymbolTable__LRSymbolTable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_getSymbolTable__LRSymbolTable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_getSymbolTable__LRSymbolTable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSymbolTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSymbolTable::clazzInfo(), // return type
  "_t_getSymbolTable", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_getSymbolTable__LRSymbolTable__args, // the arguments
  0, //arguments count
  AstNode_methods_getSymbolTable__LRSymbolTable__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_getSymbolTable__LRSymbolTable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRClass_II_LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_type,
  &AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_nth,
  &AstNode_methods_queryChild_INLRClass_II_LRAstNode__arg_deep,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRClass_II_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRClass_II_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_j_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRClass_II_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRClass_II_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRClass_II_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass__LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRClass__LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRClass__LRAstNode__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRClass__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRClass__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_k_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRClass__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRClass__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRClass__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass_I_LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRClass_I_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRClass_I_LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRClass_I_LRAstNode__arg_type,
  &AstNode_methods_queryChild_INLRClass_I_LRAstNode__arg_nth,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRClass_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRClass_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_l_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRClass_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRClass_I_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRClass_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRString_II_LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_nodeName,
  &AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_nth,
  &AstNode_methods_queryChild_INLRString_II_LRAstNode__arg_deep,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRString_II_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRString_II_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_m_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRString_II_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRString_II_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRString_II_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString__LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRString__LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRString__LRAstNode__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRString__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRString__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_n_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRString__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRString__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRString__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString_I_LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_queryChild_INLRString_I_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_queryChild_INLRString_I_LRAstNode__args[] = 
{
  &AstNode_methods_queryChild_INLRString_I_LRAstNode__arg_nodeName,
  &AstNode_methods_queryChild_INLRString_I_LRAstNode__arg_nth,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_queryChild_INLRString_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_queryChild_INLRString_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_o_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_queryChild_INLRString_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_queryChild_INLRString_I_LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_queryChild_INLRString_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_removeLastChild__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_removeLastChild__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_removeLastChild__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_f_removeLastChild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_removeLastChild__LRAstNode__args, // the arguments
  0, //arguments count
  AstNode_methods_removeLastChild__LRAstNode__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_removeLastChild__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_replaceWithTranformed_INLRAstNode__V_arg_newNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_replaceWithTranformed_INLRAstNode__V_args[] = 
{
  &AstNode_methods_replaceWithTranformed_INLRAstNode__V_arg_newNode,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_replaceWithTranformed_INLRAstNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_replaceWithTranformed_INLRAstNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceWithTranformed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_replaceWithTranformed", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_replaceWithTranformed_INLRAstNode__V_args, // the arguments
  0, //arguments count
  AstNode_methods_replaceWithTranformed_INLRAstNode__V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_replaceWithTranformed_INLRAstNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_setOrgNode_INLRAstNode__V_arg_orgNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "orgNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_setOrgNode_INLRAstNode__V_args[] = 
{
  &AstNode_methods_setOrgNode_INLRAstNode__V_arg_orgNode,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_setOrgNode_INLRAstNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_setOrgNode_INLRAstNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOrgNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setOrgNode", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_setOrgNode_INLRAstNode__V_args, // the arguments
  0, //arguments count
  AstNode_methods_setOrgNode_INLRAstNode__V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_setOrgNode_INLRAstNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_setParent_INLRAstNode__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_setParent_INLRAstNode__V_args[] = 
{
  &AstNode_methods_setParent_INLRAstNode__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_setParent_INLRAstNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_setParent_INLRAstNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setParent", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_setParent_INLRAstNode__V_args, // the arguments
  0, //arguments count
  AstNode_methods_setParent_INLRAstNode__V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_setParent_INLRAstNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_setSaveNodeAfterBuild_Z_V_arg_save = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "save", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_setSaveNodeAfterBuild_Z_V_args[] = 
{
  &AstNode_methods_setSaveNodeAfterBuild_Z_V_arg_save,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_setSaveNodeAfterBuild_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_setSaveNodeAfterBuild_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSaveNodeAfterBuild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setSaveNodeAfterBuild", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_setSaveNodeAfterBuild_Z_V_args, // the arguments
  0, //arguments count
  AstNode_methods_setSaveNodeAfterBuild_Z_V_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_setSaveNodeAfterBuild_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNode_methods_shouldTraverse_I_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_shouldTraverse_I_Z_args[] = 
{
  &AstNode_methods_shouldTraverse_I_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_shouldTraverse_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_shouldTraverse_I_Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shouldTraverse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_shouldTraverse", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_shouldTraverse_I_Z_args, // the arguments
  0, //arguments count
  AstNode_methods_shouldTraverse_I_Z_exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_shouldTraverse_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNode_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNode_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNode_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  AstNode_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AstNode_methods_toString__LRString__exceptions, // the declared exceptions
  AstNode_MetainfoWrapper::AstNode_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AstNode_methods[] = 
{
  &AstNode_method_AstNode_INLRAstNode_I_LRAstNode_,
  &AstNode_method_AstNode__LRAstNode_,
  &AstNode_method_AstNode_INLRAstNode__LRAstNode_,
  &AstNode_method_GetClass__L_acdk_lang_RClass_,
  &AstNode_method_addChild_INLRAstNode_Z_V,
  &AstNode_method_buildSemantic_INLRCompiler__V,
  &AstNode_method_createAstProps_INLRCompiler__Lacdk_cfgscript_RProps_,
  &AstNode_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &AstNode_method_findType_INLRString__LRDClazzInfo_,
  &AstNode_method_genOpCode_INLRCompiler__V,
  &AstNode_method_getAstProps_INLRCompiler__Lacdk_cfgscript_RProps_,
  &AstNode_method_getChild_I_LRAstNode_,
  &AstNode_method_getChildCount__I,
  &AstNode_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_,
  &AstNode_method_getExpressionSem__LRSemanticElem_,
  &AstNode_method_getNodeName__LRString_,
  &AstNode_method_getOrgAstNode__LRAstNode_,
  &AstNode_method_getParent__LRAstNode_,
  &AstNode_method_getParseNode__Lacdk_aci_parser_RParseNode_,
  &AstNode_method_getSaveNodeAfterBuild__Z,
  &AstNode_method_getSem__LRSemanticElem_,
  &AstNode_method_getSourceTextFragment__LRString_,
  &AstNode_method_getSymbolTable__LRSymbolTable_,
  &AstNode_method_queryChild_INLRClass_II_LRAstNode_,
  &AstNode_method_queryChild_INLRClass__LRAstNode_,
  &AstNode_method_queryChild_INLRClass_I_LRAstNode_,
  &AstNode_method_queryChild_INLRString_II_LRAstNode_,
  &AstNode_method_queryChild_INLRString__LRAstNode_,
  &AstNode_method_queryChild_INLRString_I_LRAstNode_,
  &AstNode_method_removeLastChild__LRAstNode_,
  &AstNode_method_replaceWithTranformed_INLRAstNode__V,
  &AstNode_method_setOrgNode_INLRAstNode__V,
  &AstNode_method_setParent_INLRAstNode__V,
  &AstNode_method_setSaveNodeAfterBuild_Z_V,
  &AstNode_method_shouldTraverse_I_Z,
  &AstNode_method_toString__LRString_,
  0
};


struct AstNode_MetaInfoInitializer
{  AstNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AstNode::clazzInfo();
    ci->fields =  _AstNode_fields;
    ci->methods =  _AstNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AstNode_MetaInfoInitializer AstNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
AstNodeFromParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RAstNodeFromParseNode>(length);
}

//static
::acdk::lang::RObject
AstNodeFromParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AstNodeFromParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeFromParseNode_method_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AstNodeFromParseNode((RAstNode)args[0].getObjectVar(), (acdk::aci::parser::RParseNode)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeFromParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AstNodeFromParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeFromParseNode_method_getNodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeFromParseNode* This = dmi_cast<AstNodeFromParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeFromParseNode::getNodeName();
    else
        ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeFromParseNode_method_getParseNode__Lacdk_aci_parser_RParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeFromParseNode* This = dmi_cast<AstNodeFromParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeFromParseNode::getParseNode();
    else
        ret = (::acdk::lang::RObject)This->getParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeFromParseNode_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeFromParseNode* This = dmi_cast<AstNodeFromParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeFromParseNode::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNodeFromParseNode_fields__nodeName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNodeFromParseNode* This = dmi_cast<AstNodeFromParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nodeName, flags);
    else
      This->_nodeName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNodeFromParseNode_fields__parseNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNodeFromParseNode* This = dmi_cast<AstNodeFromParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parseNode, flags);
    else
      This->_parseNode = (acdk::aci::parser::RParseNode)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AstNodeFromParseNode_fields__nodeName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nodeName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_fields__nodeName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AstNodeFromParseNode_fields__parseNode = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parseNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseNode::clazzInfo(),
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_fields__parseNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AstNodeFromParseNode_fields[] = 
{
  &AstNodeFromParseNode_fields__nodeName,
  &AstNodeFromParseNode_fields__parseNode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_pn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__args[] = 
{
  &AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_parent,
  &AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_pn,
  &AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeFromParseNode_method_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AstNodeFromParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AstNodeFromParseNode::clazzInfo(), // return type
  "_0_AstNodeFromParseNode", // alternative name of method
  -1, // altlabelHashCode
  AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__args, // the arguments
  0, //arguments count
  AstNodeFromParseNode_methods_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__exceptions, // the declared exceptions
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_method_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeFromParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeFromParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeFromParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AstNodeFromParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AstNodeFromParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeFromParseNode_methods_getNodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeFromParseNode_methods_getNodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeFromParseNode_method_getNodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  AstNodeFromParseNode_methods_getNodeName__LRString__args, // the arguments
  0, //arguments count
  AstNodeFromParseNode_methods_getNodeName__LRString__exceptions, // the declared exceptions
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_method_getNodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeFromParseNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeFromParseNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeFromParseNode_method_getParseNode__Lacdk_aci_parser_RParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseNode::clazzInfo(), // return type
  "_3_getParseNode", // alternative name of method
  -1, // altlabelHashCode
  AstNodeFromParseNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__args, // the arguments
  0, //arguments count
  AstNodeFromParseNode_methods_getParseNode__Lacdk_aci_parser_RParseNode__exceptions, // the declared exceptions
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_method_getParseNode__Lacdk_aci_parser_RParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeFromParseNode_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeFromParseNode_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeFromParseNode_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  AstNodeFromParseNode_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AstNodeFromParseNode_methods_toString__LRString__exceptions, // the declared exceptions
  AstNodeFromParseNode_MetainfoWrapper::AstNodeFromParseNode_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AstNodeFromParseNode_methods[] = 
{
  &AstNodeFromParseNode_method_AstNodeFromParseNode_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeFromParseNode_,
  &AstNodeFromParseNode_method_GetClass__L_acdk_lang_RClass_,
  &AstNodeFromParseNode_method_getNodeName__LRString_,
  &AstNodeFromParseNode_method_getParseNode__Lacdk_aci_parser_RParseNode_,
  &AstNodeFromParseNode_method_toString__LRString_,
  0
};


struct AstNodeFromParseNode_MetaInfoInitializer
{  AstNodeFromParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AstNodeFromParseNode::clazzInfo();
    ci->fields =  _AstNodeFromParseNode_fields;
    ci->methods =  _AstNodeFromParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AstNodeFromParseNode_MetaInfoInitializer AstNodeFromParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
AstNodeWithChilds_create_array(int length)
{
  return new ObjectArrayImpl<RAstNodeWithChilds>(length);
}

//static
::acdk::lang::RObject
AstNodeWithChilds_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AstNodeWithChilds_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AstNodeWithChilds((RAstNode)args[0].getObjectVar(), (acdk::aci::parser::RParseNode)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AstNodeWithChilds::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_addChild_INLRAstNode_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNodeWithChilds::addChild((RAstNode)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->addChild((RAstNode)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_buildSemantic_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNodeWithChilds::buildSemantic((RCompiler)args[0].getObjectVar());
    else
        This->buildSemantic((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_genOpCode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AstNodeWithChilds::genOpCode((RCompiler)args[0].getObjectVar());
    else
        This->genOpCode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_getChild_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::getChild(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getChild(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_getChildCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AstNodeWithChilds::getChildCount();
    else
      ret = This->getChildCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::getCodeLocation();
    else
        ret = (::acdk::lang::RObject)This->getCodeLocation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRClass_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRString_II_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRString__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRString_I_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRClass_II_LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_queryChild_INLRClass__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::queryChild((RClass)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->queryChild((RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AstNodeWithChilds_method_removeLastChild__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AstNodeWithChilds::removeLastChild();
    else
        ret = (::acdk::lang::RObject)This->removeLastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AstNodeWithChilds_fields__childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AstNodeWithChilds* This = dmi_cast<AstNodeWithChilds>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_childs, flags);
    else
      This->_childs = (RAstNodeArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AstNodeWithChilds_fields__childs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNodeArray::clazzInfo(),
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_fields__childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AstNodeWithChilds_fields[] = 
{
  &AstNodeWithChilds_fields__childs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_pn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__args[] = 
{
  &AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_parent,
  &AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_pn,
  &AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AstNodeWithChilds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AstNodeWithChilds::clazzInfo(), // return type
  "_0_AstNodeWithChilds", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_arg_childNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "childNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_arg_setParent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "setParent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_args[] = 
{
  &AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_arg_childNode,
  &AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_arg_setParent,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_addChild_INLRAstNode_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_addChild_INLRAstNode_Z_V_exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_addChild_INLRAstNode_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_args[] = 
{
  &AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_buildSemantic_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buildSemantic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_buildSemantic", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_buildSemantic_INLRCompiler__V_exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_buildSemantic_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_args[] = 
{
  &AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_genOpCode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "genOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_genOpCode", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_genOpCode_INLRCompiler__V_exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_genOpCode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_getChild_I_LRAstNode__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_getChild_I_LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_getChild_I_LRAstNode__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_getChild_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_getChild_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_2_getChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_getChild_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_getChild_I_LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_getChild_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_getChildCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_getChildCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_getChildCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getChildCount", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_getChildCount__I_args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_getChildCount__I_exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_getChildCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeLocation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(), // return type
  "_5_getCodeLocation", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__arg_type,
  &AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__arg_nth,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRClass_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_c_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRClass_I_LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRClass_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_nodeName,
  &AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_nth,
  &AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__arg_deep,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRString_II_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_d_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRString_II_LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRString_II_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRString__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_e_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRString__LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRString__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__arg_nodeName,
  &AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__arg_nth,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRString_I_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_f_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRString_I_LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRString_I_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_nth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_deep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_type,
  &AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_nth,
  &AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__arg_deep,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRClass_II_LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_a_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRClass_II_LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRClass_II_LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__args[] = 
{
  &AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_queryChild_INLRClass__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "queryChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_b_queryChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_queryChild_INLRClass__LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_queryChild_INLRClass__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AstNodeWithChilds_methods_removeLastChild__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AstNodeWithChilds_methods_removeLastChild__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AstNodeWithChilds_method_removeLastChild__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_3_removeLastChild", // alternative name of method
  -1, // altlabelHashCode
  AstNodeWithChilds_methods_removeLastChild__LRAstNode__args, // the arguments
  0, //arguments count
  AstNodeWithChilds_methods_removeLastChild__LRAstNode__exceptions, // the declared exceptions
  AstNodeWithChilds_MetainfoWrapper::AstNodeWithChilds_method_removeLastChild__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AstNodeWithChilds_methods[] = 
{
  &AstNodeWithChilds_method_AstNodeWithChilds_INLRAstNode_INLacdk_aci_parser_RParseNode_INLRString__LRAstNodeWithChilds_,
  &AstNodeWithChilds_method_GetClass__L_acdk_lang_RClass_,
  &AstNodeWithChilds_method_addChild_INLRAstNode_Z_V,
  &AstNodeWithChilds_method_buildSemantic_INLRCompiler__V,
  &AstNodeWithChilds_method_genOpCode_INLRCompiler__V,
  &AstNodeWithChilds_method_getChild_I_LRAstNode_,
  &AstNodeWithChilds_method_getChildCount__I,
  &AstNodeWithChilds_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_,
  &AstNodeWithChilds_method_queryChild_INLRClass_I_LRAstNode_,
  &AstNodeWithChilds_method_queryChild_INLRString_II_LRAstNode_,
  &AstNodeWithChilds_method_queryChild_INLRString__LRAstNode_,
  &AstNodeWithChilds_method_queryChild_INLRString_I_LRAstNode_,
  &AstNodeWithChilds_method_queryChild_INLRClass_II_LRAstNode_,
  &AstNodeWithChilds_method_queryChild_INLRClass__LRAstNode_,
  &AstNodeWithChilds_method_removeLastChild__LRAstNode_,
  0
};


struct AstNodeWithChilds_MetaInfoInitializer
{  AstNodeWithChilds_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AstNodeWithChilds::clazzInfo();
    ci->fields =  _AstNodeWithChilds_fields;
    ci->methods =  _AstNodeWithChilds_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AstNodeWithChilds_MetaInfoInitializer AstNodeWithChilds_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
Expression_create_array(int length)
{
  return new ObjectArrayImpl<RExpression>(length);
}

//static
::acdk::lang::RObject
Expression_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Expression_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Expression_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Expression::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Expression_method_getExpressionSem__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Expression* This = dmi_cast<Expression>(This_);
    ret = (::acdk::lang::RObject)This->getExpressionSem();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Expression_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Expression_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Expression_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Expression_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Expression_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Expression_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Expression_MetainfoWrapper::Expression_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Expression_methods_getExpressionSem__LRSemanticElem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Expression_methods_getExpressionSem__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Expression_method_getExpressionSem__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpressionSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_0_getExpressionSem", // alternative name of method
  -1, // altlabelHashCode
  Expression_methods_getExpressionSem__LRSemanticElem__args, // the arguments
  0, //arguments count
  Expression_methods_getExpressionSem__LRSemanticElem__exceptions, // the declared exceptions
  Expression_MetainfoWrapper::Expression_method_getExpressionSem__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Expression_methods[] = 
{
  &Expression_method_GetClass__L_acdk_lang_RClass_,
  &Expression_method_getExpressionSem__LRSemanticElem_,
  0
};


struct Expression_MetaInfoInitializer
{  Expression_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Expression::clazzInfo();
    ci->fields =  _Expression_fields;
    ci->methods =  _Expression_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Expression_MetaInfoInitializer Expression_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
Identifier_create_array(int length)
{
  return new ObjectArrayImpl<RIdentifier>(length);
}

//static
::acdk::lang::RObject
Identifier_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Identifier_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Identifier_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Identifier::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Identifier_method_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Identifier((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Identifier_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Identifier* This = dmi_cast<Identifier>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Identifier::getIdentifier();
    else
        ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Identifier_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Identifier* This = dmi_cast<Identifier>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Identifier::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Identifier_fields__identifier_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Identifier* This = dmi_cast<Identifier>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_identifier, flags);
    else
      This->_identifier = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Identifier_fields__identifier = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_identifier", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Identifier_MetainfoWrapper::Identifier_fields__identifier_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Identifier_fields[] = 
{
  &Identifier_fields__identifier,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Identifier_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Identifier_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Identifier_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Identifier_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Identifier_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Identifier_MetainfoWrapper::Identifier_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_identifier = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "identifier", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__args[] = 
{
  &Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_templ,
  &Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_cl,
  &Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__arg_identifier,
  0
};

::acdk::lang::dmi::ClazzInfo* Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Identifier_method_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Identifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Identifier::clazzInfo(), // return type
  "_0_Identifier", // alternative name of method
  -1, // altlabelHashCode
  Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__args, // the arguments
  0, //arguments count
  Identifier_methods_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__exceptions, // the declared exceptions
  Identifier_MetainfoWrapper::Identifier_method_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Identifier_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Identifier_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Identifier_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  Identifier_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  Identifier_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  Identifier_MetainfoWrapper::Identifier_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Identifier_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Identifier_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Identifier_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  Identifier_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Identifier_methods_toString__LRString__exceptions, // the declared exceptions
  Identifier_MetainfoWrapper::Identifier_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Identifier_methods[] = 
{
  &Identifier_method_GetClass__L_acdk_lang_RClass_,
  &Identifier_method_Identifier_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRIdentifier_,
  &Identifier_method_getIdentifier__LRString_,
  &Identifier_method_toString__LRString_,
  0
};


struct Identifier_MetaInfoInitializer
{  Identifier_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Identifier::clazzInfo();
    ci->fields =  _Identifier_fields;
    ci->methods =  _Identifier_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Identifier_MetaInfoInitializer Identifier_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
Keyword_create_array(int length)
{
  return new ObjectArrayImpl<RKeyword>(length);
}

//static
::acdk::lang::RObject
Keyword_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Keyword_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Keyword::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Keyword((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_getCodeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Keyword* This = dmi_cast<Keyword>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Keyword::getCodeString();
    else
        ret = (::acdk::lang::RObject)This->getCodeString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_getKeyword__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Keyword* This = dmi_cast<Keyword>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Keyword::getKeyword();
    else
        ret = (::acdk::lang::RObject)This->getKeyword();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Keyword* This = dmi_cast<Keyword>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Keyword::printCodeTree((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printCodeTree((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Keyword_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Keyword* This = dmi_cast<Keyword>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Keyword::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Keyword_fields__keyword_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Keyword* This = dmi_cast<Keyword>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_keyword, flags);
    else
      This->_keyword = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Keyword_fields__keyword = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_keyword", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Keyword_MetainfoWrapper::Keyword_fields__keyword_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Keyword_fields[] = 
{
  &Keyword_fields__keyword,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Keyword_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_keyword = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyword", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__args[] = 
{
  &Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_templ,
  &Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_cl,
  &Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_nodeName,
  &Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__arg_keyword,
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Keyword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Keyword::clazzInfo(), // return type
  "_0_Keyword", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__args, // the arguments
  0, //arguments count
  Keyword_methods_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_getCodeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_getCodeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_getCodeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getCodeString", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_getCodeString__LRString__args, // the arguments
  0, //arguments count
  Keyword_methods_getCodeString__LRString__exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_getCodeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_getKeyword__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_getKeyword__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_getKeyword__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeyword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getKeyword", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_getKeyword__LRString__args, // the arguments
  0, //arguments count
  Keyword_methods_getKeyword__LRString__exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_getKeyword__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printCodeTree", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_printCodeTree", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  Keyword_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Keyword_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Keyword_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Keyword_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toString", // alternative name of method
  -1, // altlabelHashCode
  Keyword_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Keyword_methods_toString__LRString__exceptions, // the declared exceptions
  Keyword_MetainfoWrapper::Keyword_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Keyword_methods[] = 
{
  &Keyword_method_GetClass__L_acdk_lang_RClass_,
  &Keyword_method_Keyword_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString_INLRString__LRKeyword_,
  &Keyword_method_getCodeString__LRString_,
  &Keyword_method_getKeyword__LRString_,
  &Keyword_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V,
  &Keyword_method_toString__LRString_,
  0
};


struct Keyword_MetaInfoInitializer
{  Keyword_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Keyword::clazzInfo();
    ci->fields =  _Keyword_fields;
    ci->methods =  _Keyword_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Keyword_MetaInfoInitializer Keyword_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
Literal_create_array(int length)
{
  return new ObjectArrayImpl<RLiteral>(length);
}

//static
::acdk::lang::RObject
Literal_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Literal_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Literal::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Literal((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Literal((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar(), (acdk::lang::dmi::RDmiObject)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_getExpressionSem__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Literal* This = dmi_cast<Literal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Literal::getExpressionSem();
    else
        ret = (::acdk::lang::RObject)This->getExpressionSem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_getValue__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Literal* This = dmi_cast<Literal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Literal::getValue();
    else
        ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Literal_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Literal* This = dmi_cast<Literal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Literal::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Literal_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Literal_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__args[] = 
{
  &Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__arg_templ,
  &Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Literal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Literal::clazzInfo(), // return type
  "_1_Literal", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__args, // the arguments
  0, //arguments count
  Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_sv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__args[] = 
{
  &Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_templ,
  &Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_cl,
  &Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__arg_sv,
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Literal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Literal::clazzInfo(), // return type
  "_2_Literal", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__args, // the arguments
  0, //arguments count
  Literal_methods_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_getExpressionSem__LRSemanticElem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_getExpressionSem__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_getExpressionSem__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpressionSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_4_getExpressionSem", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_getExpressionSem__LRSemanticElem__args, // the arguments
  0, //arguments count
  Literal_methods_getExpressionSem__LRSemanticElem__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_getExpressionSem__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_getValue__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_getValue__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_getValue__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_getValue__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  Literal_methods_getValue__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_getValue__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Literal_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Literal_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Literal_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  Literal_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Literal_methods_toString__LRString__exceptions, // the declared exceptions
  Literal_MetainfoWrapper::Literal_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Literal_methods[] = 
{
  &Literal_method_GetClass__L_acdk_lang_RClass_,
  &Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRLiteral_,
  &Literal_method_Literal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLacdk_lang_dmi_RDmiObject__LRLiteral_,
  &Literal_method_getExpressionSem__LRSemanticElem_,
  &Literal_method_getValue__Lacdk_lang_dmi_RDmiObject_,
  &Literal_method_toString__LRString_,
  0
};


struct Literal_MetaInfoInitializer
{  Literal_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Literal::clazzInfo();
    ci->fields =  _Literal_fields;
    ci->methods =  _Literal_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Literal_MetaInfoInitializer Literal_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


namespace acdk { 
namespace aci { 
namespace ast { 


//static
::acdk::lang::RObject
Terminal_create_array(int length)
{
  return new ObjectArrayImpl<RTerminal>(length);
}

//static
::acdk::lang::RObject
Terminal_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Terminal_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Terminal::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Terminal((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Terminal((acdk::aci::parser::RTerminalParseNode)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Terminal::getCodeLocation();
    else
        ret = (::acdk::lang::RObject)This->getCodeLocation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_getScannerPrio__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Terminal::getScannerPrio();
    else
      ret = This->getScannerPrio();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_getScannerTokenId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Terminal::getScannerTokenId();
    else
      ret = This->getScannerTokenId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Terminal::getTerminalParseNode();
    else
        ret = (::acdk::lang::RObject)This->getTerminalParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_isCachable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Terminal::isCachable();
    else
      ret = This->isCachable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_isComment__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Terminal::isComment();
    else
      ret = This->isComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Terminal_method_isWhiteSpace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Terminal::isWhiteSpace();
    else
      ret = This->isWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Terminal_fields__codeLocation_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_codeLocation, flags);
    else
      This->_codeLocation = (acdk::aci::util::RCodeLocation)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Terminal_fields__terminalParseNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Terminal* This = dmi_cast<Terminal>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_terminalParseNode, flags);
    else
      This->_terminalParseNode = (acdk::aci::parser::RTerminalParseNode)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Terminal_fields__codeLocation = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_codeLocation", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(),
  Terminal_MetainfoWrapper::Terminal_fields__codeLocation_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Terminal_fields__terminalParseNode = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_terminalParseNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo(),
  Terminal_MetainfoWrapper::Terminal_fields__terminalParseNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Terminal_fields[] = 
{
  &Terminal_fields__codeLocation,
  &Terminal_fields__terminalParseNode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Terminal_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__args[] = 
{
  &Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_templ,
  &Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_cl,
  &Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Terminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Terminal::clazzInfo(), // return type
  "_0_Terminal", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__args, // the arguments
  0, //arguments count
  Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__args[] = 
{
  &Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_templ,
  &Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Terminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Terminal::clazzInfo(), // return type
  "_1_Terminal", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__args, // the arguments
  0, //arguments count
  Terminal_methods_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeLocation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(), // return type
  "_2_getCodeLocation", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args, // the arguments
  0, //arguments count
  Terminal_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_getScannerPrio__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_getScannerPrio__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_getScannerPrio__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScannerPrio", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getScannerPrio", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_getScannerPrio__I_args, // the arguments
  0, //arguments count
  Terminal_methods_getScannerPrio__I_exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_getScannerPrio__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_getScannerTokenId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_getScannerTokenId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_getScannerTokenId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScannerTokenId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getScannerTokenId", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_getScannerTokenId__I_args, // the arguments
  0, //arguments count
  Terminal_methods_getScannerTokenId__I_exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_getScannerTokenId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RTerminalParseNode::clazzInfo(), // return type
  "_8_getTerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__args, // the arguments
  0, //arguments count
  Terminal_methods_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_isCachable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_isCachable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_isCachable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCachable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isCachable", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_isCachable__Z_args, // the arguments
  0, //arguments count
  Terminal_methods_isCachable__Z_exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_isCachable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_isComment__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_isComment__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_isComment__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isComment", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_isComment__Z_args, // the arguments
  0, //arguments count
  Terminal_methods_isComment__Z_exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_isComment__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Terminal_methods_isWhiteSpace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Terminal_methods_isWhiteSpace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Terminal_method_isWhiteSpace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  Terminal_methods_isWhiteSpace__Z_args, // the arguments
  0, //arguments count
  Terminal_methods_isWhiteSpace__Z_exceptions, // the declared exceptions
  Terminal_MetainfoWrapper::Terminal_method_isWhiteSpace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Terminal_methods[] = 
{
  &Terminal_method_GetClass__L_acdk_lang_RClass_,
  &Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation_INLRString__LRTerminal_,
  &Terminal_method_Terminal_INLacdk_aci_parser_RTerminalParseNode_INLacdk_aci_util_RCodeLocation__LRTerminal_,
  &Terminal_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_,
  &Terminal_method_getScannerPrio__I,
  &Terminal_method_getScannerTokenId__I,
  &Terminal_method_getTerminalParseNode__Lacdk_aci_parser_RTerminalParseNode_,
  &Terminal_method_isCachable__Z,
  &Terminal_method_isComment__Z,
  &Terminal_method_isWhiteSpace__Z,
  0
};


struct Terminal_MetaInfoInitializer
{  Terminal_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Terminal::clazzInfo();
    ci->fields =  _Terminal_fields;
    ci->methods =  _Terminal_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Terminal_MetaInfoInitializer Terminal_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace ast


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) ast_dummyExportFunc() {}
#endif

