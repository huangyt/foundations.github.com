// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../aci.h"
#include "../AccLoader.h"
#include "../aci.h"
#include "../aci_metainf.h"
#include "../ClazzSymbolTable.h"
#include "../Compiler.h"
#include "../Config.h"
#include "../core_stack.h"
#include "../DClazzInfo.h"
#include "../StdAci.h"
#include "../SymbolTable.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace aci { 

using namespace acdk::aci::vm;
using namespace acdk::aci::parser;

//static
::acdk::lang::RObject
Compiler_create_array(int length)
{
  return new ObjectArrayImpl<RCompiler>(length);
}

//static
::acdk::lang::RObject
Compiler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Compiler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_Compiler_INLRScanner__LRCompiler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Compiler((RScanner)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_Compiler__LRCompiler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Compiler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Compiler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_addOpCode_INLRExecutableArray_INLRExecutable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::addOpCode((RExecutableArray)args[0].getObjectVar(), (RExecutable)args[1].getObjectVar());
    else
        This->addOpCode((RExecutableArray)args[0].getObjectVar(), (RExecutable)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_checkRules__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::checkRules();
    else
        This->checkRules();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_createCode_INLRString__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::createCode((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createCode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_createSubTextParser_INLRString_INLRAstNode__LRCompiler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::createSubTextParser((RString)args[0].getObjectVar(), (RAstNode)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createSubTextParser((RString)args[0].getObjectVar(), (RAstNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_execute_INLRExecutableArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::execute((RExecutableArray)args[0].getObjectVar());
    else
        This->execute((RExecutableArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_execute_INLRExecutableArray_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::execute((RExecutableArray)args[0].getObjectVar(), (REvalEnv)args[1].getObjectVar());
    else
        This->execute((RExecutableArray)args[0].getObjectVar(), (REvalEnv)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RAstNode)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RAstNode)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_findType_INLRString_INLRAstNode__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::findType((RString)args[0].getObjectVar(), (RAstNode)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findType((RString)args[0].getObjectVar(), (RAstNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_genLabel_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::genLabel((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->genLabel((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getCodeLocation();
    else
        ret = (::acdk::lang::RObject)This->getCodeLocation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getCompilerEnv__LREvalEnv__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getCompilerEnv();
    else
        ret = (::acdk::lang::RObject)This->getCompilerEnv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getCounter__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::getCounter();
    else
      ret = This->getCounter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getParseEnv__Lacdk_aci_parser_RParseEnv__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getParseEnv();
    else
        ret = (::acdk::lang::RObject)This->getParseEnv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getParseNode_INLRString__LRParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getParseNode((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getSyntaxParserEnv__Lacdk_cfgscript_RProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getSyntaxParserEnv();
    else
        ret = (::acdk::lang::RObject)This->getSyntaxParserEnv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_getTerminal_INLRString__LRTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::getTerminal((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTerminal((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_initializeForEvaluation_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::initializeForEvaluation((REvalEnv)args[0].getObjectVar());
    else
        This->initializeForEvaluation((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_isKeyword_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::isKeyword((RString)args[0].getObjectVar());
    else
      ret = This->isKeyword((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_notReduceRole_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::notReduceRole((RString)args[0].getObjectVar());
    else
      ret = This->notReduceRole((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_parseComplete_INLRString__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::parseComplete((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseComplete((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_parseOpOrIdent__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::parseOpOrIdent();
    else
        ret = (::acdk::lang::RObject)This->parseOpOrIdent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_parseRule_INLRString_INLRParseNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Compiler::parseRule((RString)args[0].getObjectVar(), (RParseNode)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseRule((RString)args[0].getObjectVar(), (RParseNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_registerKeyword_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::registerKeyword((RString)args[0].getObjectVar());
    else
      ret = This->registerKeyword((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_registerSyntaxRule_INLRSyntaxParseNode_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::registerSyntaxRule((RSyntaxParseNode)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->registerSyntaxRule((RSyntaxParseNode)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_registerSyntaxRule_INLRSyntaxParseNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Compiler::registerSyntaxRule((RSyntaxParseNode)args[0].getObjectVar());
    else
        This->registerSyntaxRule((RSyntaxParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_registerTerminal_INLRTerminalParseNode_B_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::registerTerminal((RTerminalParseNode)args[0].getObjectVar(), args[1].getByteVar());
    else
      ret = This->registerTerminal((RTerminalParseNode)args[0].getObjectVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_registerTerminal_INLRTerminalParseNode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Compiler::registerTerminal((RTerminalParseNode)args[0].getObjectVar());
    else
      ret = This->registerTerminal((RTerminalParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Compiler_method_resolveLabels_INLRExecutableArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Compiler::resolveLabels((RExecutableArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields__compilerEnv_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_compilerEnv, flags);
    else
      This->_compilerEnv = (vm::REvalEnv)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields__genLabelCounter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_genLabelCounter, flags);
    else
      This->_genLabelCounter = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields__globals_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_globals, flags);
    else
      This->_globals = (RSymbolTable)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields__opCodes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_opCodes, flags);
    else
      This->_opCodes = (vm::RExecutableArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields__parseEnv_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parseEnv, flags);
    else
      This->_parseEnv = (acdk::aci::parser::RParseEnv)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields_scanner_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->scanner, flags);
    else
      This->scanner = (RScanner)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Compiler_fields_topNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Compiler* This = dmi_cast<Compiler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->topNode, flags);
    else
      This->topNode = (RParseNode)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields__compilerEnv = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_compilerEnv", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  vm::REvalEnv::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields__compilerEnv_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields__genLabelCounter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_genLabelCounter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Compiler_MetainfoWrapper::Compiler_fields__genLabelCounter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields__globals = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_globals", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSymbolTable::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields__globals_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields__opCodes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_opCodes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  vm::RExecutableArray::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields__opCodes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields__parseEnv = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parseEnv", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseEnv::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields__parseEnv_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields_scanner = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "scanner", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScanner::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields_scanner_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Compiler_fields_topNode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "topNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo(),
  Compiler_MetainfoWrapper::Compiler_fields_topNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Compiler_fields[] = 
{
  &Compiler_fields__compilerEnv,
  &Compiler_fields__genLabelCounter,
  &Compiler_fields__globals,
  &Compiler_fields__opCodes,
  &Compiler_fields__parseEnv,
  &Compiler_fields_scanner,
  &Compiler_fields_topNode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_Compiler_INLRScanner__LRCompiler__arg_sc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScanner::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_Compiler_INLRScanner__LRCompiler__args[] = 
{
  &Compiler_methods_Compiler_INLRScanner__LRCompiler__arg_sc,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_Compiler_INLRScanner__LRCompiler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_Compiler_INLRScanner__LRCompiler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Compiler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Compiler::clazzInfo(), // return type
  "_0_Compiler", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_Compiler_INLRScanner__LRCompiler__args, // the arguments
  0, //arguments count
  Compiler_methods_Compiler_INLRScanner__LRCompiler__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_Compiler_INLRScanner__LRCompiler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_Compiler__LRCompiler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_Compiler__LRCompiler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_Compiler__LRCompiler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Compiler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Compiler::clazzInfo(), // return type
  "_1_Compiler", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_Compiler__LRCompiler__args, // the arguments
  0, //arguments count
  Compiler_methods_Compiler__LRCompiler__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_Compiler__LRCompiler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Compiler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_args[] = 
{
  &Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_arg_oca,
  &Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_addOpCode_INLRExecutableArray_INLRExecutable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_addOpCode", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_args, // the arguments
  0, //arguments count
  Compiler_methods_addOpCode_INLRExecutableArray_INLRExecutable__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_addOpCode_INLRExecutableArray_INLRExecutable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_checkRules__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_checkRules__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_checkRules__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkRules", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_checkRules", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_checkRules__V_args, // the arguments
  0, //arguments count
  Compiler_methods_checkRules__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_checkRules__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_createCode_INLRString__LRAstNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_createCode_INLRString__LRAstNode__args[] = 
{
  &Compiler_methods_createCode_INLRString__LRAstNode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_createCode_INLRString__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_createCode_INLRString__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_r_createCode", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_createCode_INLRString__LRAstNode__args, // the arguments
  0, //arguments count
  Compiler_methods_createCode_INLRString__LRAstNode__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_createCode_INLRString__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__arg_codetext = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "codetext", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__arg_topCode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "topCode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__args[] = 
{
  &Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__arg_codetext,
  &Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__arg_topCode,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_createSubTextParser_INLRString_INLRAstNode__LRCompiler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createSubTextParser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo(), // return type
  "_s_createSubTextParser", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__args, // the arguments
  0, //arguments count
  Compiler_methods_createSubTextParser_INLRString_INLRAstNode__LRCompiler__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_createSubTextParser_INLRString_INLRAstNode__LRCompiler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_execute_INLRExecutableArray__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_execute_INLRExecutableArray__V_args[] = 
{
  &Compiler_methods_execute_INLRExecutableArray__V_arg_oca,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_execute_INLRExecutableArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_execute_INLRExecutableArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_execute", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_execute_INLRExecutableArray__V_args, // the arguments
  0, //arguments count
  Compiler_methods_execute_INLRExecutableArray__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_execute_INLRExecutableArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_args[] = 
{
  &Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_arg_oca,
  &Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_execute_INLRExecutableArray_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_execute", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  Compiler_methods_execute_INLRExecutableArray_INLREvalEnv__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_execute_INLRExecutableArray_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__args[] = 
{
  &Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_name,
  &Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_op,
  &Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_j_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__args, // the arguments
  0, //arguments count
  Compiler_methods_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__args[] = 
{
  &Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__arg_name,
  &Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_findType_INLRString_INLRAstNode__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_i_findType", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__args, // the arguments
  0, //arguments count
  Compiler_methods_findType_INLRString_INLRAstNode__LRDClazzInfo__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_findType_INLRString_INLRAstNode__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_genLabel_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_genLabel_INLRString__LRString__args[] = 
{
  &Compiler_methods_genLabel_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_genLabel_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_genLabel_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "genLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_genLabel", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_genLabel_INLRString__LRString__args, // the arguments
  0, //arguments count
  Compiler_methods_genLabel_INLRString__LRString__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_genLabel_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeLocation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(), // return type
  "_d_getCodeLocation", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__args, // the arguments
  0, //arguments count
  Compiler_methods_getCodeLocation__Lacdk_aci_util_RCodeLocation__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getCodeLocation__Lacdk_aci_util_RCodeLocation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getCompilerEnv__LREvalEnv__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getCompilerEnv__LREvalEnv__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getCompilerEnv__LREvalEnv_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCompilerEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo(), // return type
  "_t_getCompilerEnv", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getCompilerEnv__LREvalEnv__args, // the arguments
  0, //arguments count
  Compiler_methods_getCompilerEnv__LREvalEnv__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getCompilerEnv__LREvalEnv__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getCounter__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getCounter__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getCounter__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCounter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getCounter", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getCounter__I_args, // the arguments
  0, //arguments count
  Compiler_methods_getCounter__I_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getCounter__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getParseEnv__Lacdk_aci_parser_RParseEnv__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getParseEnv__Lacdk_aci_parser_RParseEnv__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getParseEnv__Lacdk_aci_parser_RParseEnv_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParseEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::parser::RParseEnv::clazzInfo(), // return type
  "_2_getParseEnv", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getParseEnv__Lacdk_aci_parser_RParseEnv__args, // the arguments
  0, //arguments count
  Compiler_methods_getParseEnv__Lacdk_aci_parser_RParseEnv__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getParseEnv__Lacdk_aci_parser_RParseEnv__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_getParseNode_INLRString__LRParseNode__arg_rulename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getParseNode_INLRString__LRParseNode__args[] = 
{
  &Compiler_methods_getParseNode_INLRString__LRParseNode__arg_rulename,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getParseNode_INLRString__LRParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getParseNode_INLRString__LRParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo(), // return type
  "_a_getParseNode", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getParseNode_INLRString__LRParseNode__args, // the arguments
  0, //arguments count
  Compiler_methods_getParseNode_INLRString__LRParseNode__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getParseNode_INLRString__LRParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getSyntaxParserEnv__Lacdk_cfgscript_RProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getSyntaxParserEnv__Lacdk_cfgscript_RProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getSyntaxParserEnv__Lacdk_cfgscript_RProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntaxParserEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(), // return type
  "_u_getSyntaxParserEnv", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getSyntaxParserEnv__Lacdk_cfgscript_RProps__args, // the arguments
  0, //arguments count
  Compiler_methods_getSyntaxParserEnv__Lacdk_cfgscript_RProps__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getSyntaxParserEnv__Lacdk_cfgscript_RProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__args[] = 
{
  &Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_getTerminal_INLRString__LRTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo(), // return type
  "_c_getTerminal", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__args, // the arguments
  0, //arguments count
  Compiler_methods_getTerminal_INLRString__LRTerminalParseNode__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_getTerminal_INLRString__LRTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_initializeForEvaluation_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_initializeForEvaluation_INLREvalEnv__V_args[] = 
{
  &Compiler_methods_initializeForEvaluation_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_initializeForEvaluation_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_initializeForEvaluation_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initializeForEvaluation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_initializeForEvaluation", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_initializeForEvaluation_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  Compiler_methods_initializeForEvaluation_INLREvalEnv__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_initializeForEvaluation_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_isKeyword_INLRString__Z_arg_kw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "kw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_isKeyword_INLRString__Z_args[] = 
{
  &Compiler_methods_isKeyword_INLRString__Z_arg_kw,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_isKeyword_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_isKeyword_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isKeyword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isKeyword", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_isKeyword_INLRString__Z_args, // the arguments
  0, //arguments count
  Compiler_methods_isKeyword_INLRString__Z_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_isKeyword_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_notReduceRole_INLRString__Z_arg_rule = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rule", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_notReduceRole_INLRString__Z_args[] = 
{
  &Compiler_methods_notReduceRole_INLRString__Z_arg_rule,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_notReduceRole_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_notReduceRole_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notReduceRole", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_notReduceRole", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_notReduceRole_INLRString__Z_args, // the arguments
  0, //arguments count
  Compiler_methods_notReduceRole_INLRString__Z_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_notReduceRole_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_parseComplete_INLRString__LRAstNode__arg_codetype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "codetype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_parseComplete_INLRString__LRAstNode__args[] = 
{
  &Compiler_methods_parseComplete_INLRString__LRAstNode__arg_codetype,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_parseComplete_INLRString__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_parseComplete_INLRString__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseComplete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_b_parseComplete", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_parseComplete_INLRString__LRAstNode__args, // the arguments
  0, //arguments count
  Compiler_methods_parseComplete_INLRString__LRAstNode__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_parseComplete_INLRString__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_parseOpOrIdent__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_parseOpOrIdent__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_parseOpOrIdent__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseOpOrIdent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_parseOpOrIdent", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_parseOpOrIdent__LRString__args, // the arguments
  0, //arguments count
  Compiler_methods_parseOpOrIdent__LRString__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_parseOpOrIdent__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__arg_ruleName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ruleName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__args[] = 
{
  &Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__arg_ruleName,
  &Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_parseRule_INLRString_INLRParseNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_e_parseRule", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__args, // the arguments
  0, //arguments count
  Compiler_methods_parseRule_INLRString_INLRParseNode__LRAstNode__exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_parseRule_INLRString_INLRParseNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_args[] = 
{
  &Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_printSyntax_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_printSyntax", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  Compiler_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerKeyword_INLRString__I_arg_kw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "kw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_registerKeyword_INLRString__I_args[] = 
{
  &Compiler_methods_registerKeyword_INLRString__I_arg_kw,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_registerKeyword_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_registerKeyword_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerKeyword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_registerKeyword", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_registerKeyword_INLRString__I_args, // the arguments
  0, //arguments count
  Compiler_methods_registerKeyword_INLRString__I_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_registerKeyword_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_arg_notreduce = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "notreduce", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_args[] = 
{
  &Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_arg_node,
  &Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_arg_notreduce,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_registerSyntaxRule_INLRSyntaxParseNode_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerSyntaxRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_registerSyntaxRule", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_args, // the arguments
  0, //arguments count
  Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode_Z_V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_registerSyntaxRule_INLRSyntaxParseNode_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_args[] = 
{
  &Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_registerSyntaxRule_INLRSyntaxParseNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "registerSyntaxRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_registerSyntaxRule", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_args, // the arguments
  0, //arguments count
  Compiler_methods_registerSyntaxRule_INLRSyntaxParseNode__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_registerSyntaxRule_INLRSyntaxParseNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_arg_prio = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "prio", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_args[] = 
{
  &Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_arg_code,
  &Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_arg_prio,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_registerTerminal_INLRTerminalParseNode_B_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_registerTerminal", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_args, // the arguments
  0, //arguments count
  Compiler_methods_registerTerminal_INLRTerminalParseNode_B_I_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_registerTerminal_INLRTerminalParseNode_B_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_registerTerminal_INLRTerminalParseNode__I_arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_registerTerminal_INLRTerminalParseNode__I_args[] = 
{
  &Compiler_methods_registerTerminal_INLRTerminalParseNode__I_arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_registerTerminal_INLRTerminalParseNode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_registerTerminal_INLRTerminalParseNode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_registerTerminal", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_registerTerminal_INLRTerminalParseNode__I_args, // the arguments
  0, //arguments count
  Compiler_methods_registerTerminal_INLRTerminalParseNode__I_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_registerTerminal_INLRTerminalParseNode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Compiler_methods_resolveLabels_INLRExecutableArray__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Compiler_methods_resolveLabels_INLRExecutableArray__V_args[] = 
{
  &Compiler_methods_resolveLabels_INLRExecutableArray__V_arg_oca,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler_methods_resolveLabels_INLRExecutableArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Compiler_method_resolveLabels_INLRExecutableArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveLabels", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_resolveLabels", // alternative name of method
  -1, // altlabelHashCode
  Compiler_methods_resolveLabels_INLRExecutableArray__V_args, // the arguments
  0, //arguments count
  Compiler_methods_resolveLabels_INLRExecutableArray__V_exceptions, // the declared exceptions
  Compiler_MetainfoWrapper::Compiler_method_resolveLabels_INLRExecutableArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Compiler_methods[] = 
{
  &Compiler_method_Compiler_INLRScanner__LRCompiler_,
  &Compiler_method_Compiler__LRCompiler_,
  &Compiler_method_GetClass__L_acdk_lang_RClass_,
  &Compiler_method_addOpCode_INLRExecutableArray_INLRExecutable__V,
  &Compiler_method_checkRules__V,
  &Compiler_method_createCode_INLRString__LRAstNode_,
  &Compiler_method_createSubTextParser_INLRString_INLRAstNode__LRCompiler_,
  &Compiler_method_execute_INLRExecutableArray__V,
  &Compiler_method_execute_INLRExecutableArray_INLREvalEnv__V,
  &Compiler_method_findSubSem_INLRString_INLRString_INLRAstNode__LRSemanticElem_,
  &Compiler_method_findType_INLRString_INLRAstNode__LRDClazzInfo_,
  &Compiler_method_genLabel_INLRString__LRString_,
  &Compiler_method_getCodeLocation__Lacdk_aci_util_RCodeLocation_,
  &Compiler_method_getCompilerEnv__LREvalEnv_,
  &Compiler_method_getCounter__I,
  &Compiler_method_getParseEnv__Lacdk_aci_parser_RParseEnv_,
  &Compiler_method_getParseNode_INLRString__LRParseNode_,
  &Compiler_method_getSyntaxParserEnv__Lacdk_cfgscript_RProps_,
  &Compiler_method_getTerminal_INLRString__LRTerminalParseNode_,
  &Compiler_method_initializeForEvaluation_INLREvalEnv__V,
  &Compiler_method_isKeyword_INLRString__Z,
  &Compiler_method_notReduceRole_INLRString__Z,
  &Compiler_method_parseComplete_INLRString__LRAstNode_,
  &Compiler_method_parseOpOrIdent__LRString_,
  &Compiler_method_parseRule_INLRString_INLRParseNode__LRAstNode_,
  &Compiler_method_printSyntax_INLacdk_io_RPrintWriter__V,
  &Compiler_method_registerKeyword_INLRString__I,
  &Compiler_method_registerSyntaxRule_INLRSyntaxParseNode_Z_V,
  &Compiler_method_registerSyntaxRule_INLRSyntaxParseNode__V,
  &Compiler_method_registerTerminal_INLRTerminalParseNode_B_I,
  &Compiler_method_registerTerminal_INLRTerminalParseNode__I,
  &Compiler_method_resolveLabels_INLRExecutableArray__V,
  0
};


struct Compiler_MetaInfoInitializer
{  Compiler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Compiler::clazzInfo();
    ci->fields =  _Compiler_fields;
    ci->methods =  _Compiler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Compiler_MetaInfoInitializer Compiler_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
SemanticElem_create_array(int length)
{
  return new ObjectArrayImpl<RSemanticElem>(length);
}

//static
::acdk::lang::RObject
SemanticElem_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SemanticElem_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SemanticElem_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SemanticElem::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SemanticElem_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SemanticElem* This = dmi_cast<SemanticElem>(This_);
    ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SemanticElem_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SemanticElem* This = dmi_cast<SemanticElem>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SemanticElem_method_getOwnerClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SemanticElem* This = dmi_cast<SemanticElem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SemanticElem::getOwnerClass();
    else
        ret = (::acdk::lang::RObject)This->getOwnerClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SemanticElem_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SemanticElem* This = dmi_cast<SemanticElem>(This_);
    ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SemanticElem_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SemanticElem_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SemanticElem_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SemanticElem_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SemanticElem_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SemanticElem_MetainfoWrapper::SemanticElem_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SemanticElem_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_1_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  SemanticElem_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  SemanticElem_MetainfoWrapper::SemanticElem_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SemanticElem_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SemanticElem_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getName", // alternative name of method
  -1, // altlabelHashCode
  SemanticElem_methods_getName__LRString__args, // the arguments
  0, //arguments count
  SemanticElem_methods_getName__LRString__exceptions, // the declared exceptions
  SemanticElem_MetainfoWrapper::SemanticElem_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SemanticElem_methods_getOwnerClass__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem_methods_getOwnerClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SemanticElem_method_getOwnerClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_3_getOwnerClass", // alternative name of method
  -1, // altlabelHashCode
  SemanticElem_methods_getOwnerClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  SemanticElem_methods_getOwnerClass__LRDClazzInfo__exceptions, // the declared exceptions
  SemanticElem_MetainfoWrapper::SemanticElem_method_getOwnerClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SemanticElem_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SemanticElem_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_2_getType", // alternative name of method
  -1, // altlabelHashCode
  SemanticElem_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  SemanticElem_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  SemanticElem_MetainfoWrapper::SemanticElem_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SemanticElem_methods[] = 
{
  &SemanticElem_method_GetClass__L_acdk_lang_RClass_,
  &SemanticElem_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &SemanticElem_method_getName__LRString_,
  &SemanticElem_method_getOwnerClass__LRDClazzInfo_,
  &SemanticElem_method_getType__LRDClazzInfo_,
  0
};


struct SemanticElem_MetaInfoInitializer
{  SemanticElem_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SemanticElem::clazzInfo();
    ci->fields =  _SemanticElem_fields;
    ci->methods =  _SemanticElem_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SemanticElem_MetaInfoInitializer SemanticElem_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
DUnitInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDUnitInfo>(length);
}

//static
::acdk::lang::RObject
DUnitInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DUnitInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_DUnitInfo_INLRString__LRDUnitInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DUnitInfo((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DUnitInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DUnitInfo* This = dmi_cast<DUnitInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DUnitInfo::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DUnitInfo* This = dmi_cast<DUnitInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DUnitInfo::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DUnitInfo* This = dmi_cast<DUnitInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DUnitInfo::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DUnitInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DUnitInfo* This = dmi_cast<DUnitInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DUnitInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DUnitInfo_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__arg_unitname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "unitname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__args[] = 
{
  &DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__arg_unitname,
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_DUnitInfo_INLRString__LRDUnitInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DUnitInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DUnitInfo::clazzInfo(), // return type
  "_0_DUnitInfo", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_DUnitInfo_INLRString__LRDUnitInfo__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_DUnitInfo_INLRString__LRDUnitInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_3_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_getName__LRString__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_getName__LRString__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_4_getType", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DUnitInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DUnitInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  DUnitInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DUnitInfo_methods_toString__LRString__exceptions, // the declared exceptions
  DUnitInfo_MetainfoWrapper::DUnitInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DUnitInfo_methods[] = 
{
  &DUnitInfo_method_DUnitInfo_INLRString__LRDUnitInfo_,
  &DUnitInfo_method_GetClass__L_acdk_lang_RClass_,
  &DUnitInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &DUnitInfo_method_getName__LRString_,
  &DUnitInfo_method_getType__LRDClazzInfo_,
  &DUnitInfo_method_toString__LRString_,
  0
};


struct DUnitInfo_MetaInfoInitializer
{  DUnitInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DUnitInfo::clazzInfo();
    ci->fields =  _DUnitInfo_fields;
    ci->methods =  _DUnitInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DUnitInfo_MetaInfoInitializer DUnitInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
DClazzFieldInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDClazzFieldInfo>(length);
}

//static
::acdk::lang::RObject
DClazzFieldInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DClazzFieldInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DClazzFieldInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_getOwnerClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::getOwnerClass();
    else
        ret = (::acdk::lang::RObject)This->getOwnerClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_getOwnerClassName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::getOwnerClassName();
    else
        ret = (::acdk::lang::RObject)This->getOwnerClassName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_isStatic__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzFieldInfo::isStatic();
    else
      ret = This->isStatic();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzFieldInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzFieldInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzFieldInfo_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzFieldInfo* This = dmi_cast<DClazzFieldInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_type, flags);
    else
      This->_type = (RDClazzInfo)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DClazzFieldInfo_fields__type = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(),
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DClazzFieldInfo_fields[] = 
{
  &DClazzFieldInfo_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_2_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_getName__LRString__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_getName__LRString__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_getOwnerClass__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_getOwnerClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_getOwnerClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_6_getOwnerClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_getOwnerClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_getOwnerClass__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_getOwnerClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_getOwnerClassName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_getOwnerClassName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_getOwnerClassName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getOwnerClassName", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_getOwnerClassName__LRString__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_getOwnerClassName__LRString__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_getOwnerClassName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_3_getType", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_isStatic__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_isStatic__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_isStatic__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isStatic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isStatic", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_isStatic__Z_args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_isStatic__Z_exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_isStatic__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzFieldInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzFieldInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toString", // alternative name of method
  -1, // altlabelHashCode
  DClazzFieldInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DClazzFieldInfo_methods_toString__LRString__exceptions, // the declared exceptions
  DClazzFieldInfo_MetainfoWrapper::DClazzFieldInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DClazzFieldInfo_methods[] = 
{
  &DClazzFieldInfo_method_GetClass__L_acdk_lang_RClass_,
  &DClazzFieldInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &DClazzFieldInfo_method_getName__LRString_,
  &DClazzFieldInfo_method_getOwnerClass__LRDClazzInfo_,
  &DClazzFieldInfo_method_getOwnerClassName__LRString_,
  &DClazzFieldInfo_method_getType__LRDClazzInfo_,
  &DClazzFieldInfo_method_isStatic__Z,
  &DClazzFieldInfo_method_toString__LRString_,
  0
};


struct DClazzFieldInfo_MetaInfoInitializer
{  DClazzFieldInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DClazzFieldInfo::clazzInfo();
    ci->fields =  _DClazzFieldInfo_fields;
    ci->methods =  _DClazzFieldInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DClazzFieldInfo_MetaInfoInitializer DClazzFieldInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
DClazzMethodInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDClazzMethodInfo>(length);
}

//static
::acdk::lang::RObject
DClazzMethodInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DClazzMethodInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DClazzMethodInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::addParameter((RString)args[0].getObjectVar(), (RDClazzInfo)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->addParameter((RString)args[0].getObjectVar(), (RDClazzInfo)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::addParameter((RString)args[0].getObjectVar(), (RDClazzInfo)args[1].getObjectVar());
    else
        This->addParameter((RString)args[0].getObjectVar(), (RDClazzInfo)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_cloneArgs_INLRDClazzMethodInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::cloneArgs((RDClazzMethodInfo)args[0].getObjectVar());
    else
        This->cloneArgs((RDClazzMethodInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getCallName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getCallName();
    else
        ret = (::acdk::lang::RObject)This->getCallName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getCode__Lacdk_aci_vm_RExecutableArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getCode();
    else
        ret = (::acdk::lang::RObject)This->getCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getOwnerClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getOwnerClass();
    else
        ret = (::acdk::lang::RObject)This->getOwnerClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getReturnType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getReturnType();
    else
        ret = (::acdk::lang::RObject)This->getReturnType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_isConstructor__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzMethodInfo::isConstructor();
    else
      ret = This->isConstructor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_isStatic__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzMethodInfo::isStatic();
    else
      ret = This->isStatic();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_makeCodeAttribute__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::makeCodeAttribute();
    else
        This->makeCodeAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_setAltName_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::setAltName(args[0].getIntVar());
    else
        This->setAltName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::setName((RString)args[0].getObjectVar());
    else
        This->setName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_setReturnType_INLRDClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzMethodInfo::setReturnType((RDClazzInfo)args[0].getObjectVar());
    else
        This->setReturnType((RDClazzInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzMethodInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzMethodInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzMethodInfo_fields__args_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_args, flags);
    else
      This->_args = (RDClazzMethodArgInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzMethodInfo_fields__code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_code, flags);
    else
      This->_code = (acdk::aci::vm::RExecutableArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzMethodInfo_fields__retType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzMethodInfo* This = dmi_cast<DClazzMethodInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_retType, flags);
    else
      This->_retType = (RDClazzInfo)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DClazzMethodInfo_fields__args = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_args", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodArgInfoArray::clazzInfo(),
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_fields__args_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DClazzMethodInfo_fields__code = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::vm::RExecutableArray::clazzInfo(),
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_fields__code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DClazzMethodInfo_fields__retType = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_retType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(),
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_fields__retType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DClazzMethodInfo_fields[] = 
{
  &DClazzMethodInfo_fields__args,
  &DClazzMethodInfo_fields__code,
  &DClazzMethodInfo_fields__retType,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_ci = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ci", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_args[] = 
{
  &DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_name,
  &DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_ci,
  &DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_addParameter", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo_I_V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_arg_ci = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ci", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_args[] = 
{
  &DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_arg_name,
  &DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_arg_ci,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_addParameter", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_addParameter_INLRString_INLRDClazzInfo__V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_args[] = 
{
  &DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_cloneArgs_INLRDClazzMethodInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cloneArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_cloneArgs", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_cloneArgs_INLRDClazzMethodInfo__V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_cloneArgs_INLRDClazzMethodInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_4_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getCallName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getCallName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getCallName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCallName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getCallName", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getCallName__LRString__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getCallName__LRString__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getCallName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getCode__Lacdk_aci_vm_RExecutableArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getCode__Lacdk_aci_vm_RExecutableArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getCode__Lacdk_aci_vm_RExecutableArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::vm::RExecutableArray::clazzInfo(), // return type
  "_e_getCode", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getCode__Lacdk_aci_vm_RExecutableArray__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getCode__Lacdk_aci_vm_RExecutableArray__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getCode__Lacdk_aci_vm_RExecutableArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getName__LRString__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getName__LRString__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getOwnerClass__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getOwnerClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getOwnerClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_6_getOwnerClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getOwnerClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getOwnerClass__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getOwnerClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getReturnType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getReturnType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getReturnType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReturnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_a_getReturnType", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getReturnType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getReturnType__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getReturnType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_5_getType", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_isConstructor__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_isConstructor__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_isConstructor__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isConstructor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isConstructor", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_isConstructor__Z_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_isConstructor__Z_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_isConstructor__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_isStatic__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_isStatic__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_isStatic__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isStatic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isStatic", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_isStatic__Z_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_isStatic__Z_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_isStatic__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_makeCodeAttribute__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_makeCodeAttribute__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_makeCodeAttribute__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeCodeAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_makeCodeAttribute", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_makeCodeAttribute__V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_makeCodeAttribute__V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_makeCodeAttribute__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_setAltName_I_V_arg_counter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "counter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_setAltName_I_V_args[] = 
{
  &DClazzMethodInfo_methods_setAltName_I_V_arg_counter,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_setAltName_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_setAltName_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAltName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setAltName", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_setAltName_I_V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_setAltName_I_V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_setAltName_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_setName_INLRString__V_args[] = 
{
  &DClazzMethodInfo_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setName", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_setName_INLRString__V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_arg_ci = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ci", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_args[] = 
{
  &DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_arg_ci,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_setReturnType_INLRDClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReturnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setReturnType", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_setReturnType_INLRDClazzInfo__V_exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_setReturnType_INLRDClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzMethodInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzMethodInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toString", // alternative name of method
  -1, // altlabelHashCode
  DClazzMethodInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DClazzMethodInfo_methods_toString__LRString__exceptions, // the declared exceptions
  DClazzMethodInfo_MetainfoWrapper::DClazzMethodInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DClazzMethodInfo_methods[] = 
{
  &DClazzMethodInfo_method_GetClass__L_acdk_lang_RClass_,
  &DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo_I_V,
  &DClazzMethodInfo_method_addParameter_INLRString_INLRDClazzInfo__V,
  &DClazzMethodInfo_method_cloneArgs_INLRDClazzMethodInfo__V,
  &DClazzMethodInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &DClazzMethodInfo_method_getCallName__LRString_,
  &DClazzMethodInfo_method_getCode__Lacdk_aci_vm_RExecutableArray_,
  &DClazzMethodInfo_method_getName__LRString_,
  &DClazzMethodInfo_method_getOwnerClass__LRDClazzInfo_,
  &DClazzMethodInfo_method_getReturnType__LRDClazzInfo_,
  &DClazzMethodInfo_method_getType__LRDClazzInfo_,
  &DClazzMethodInfo_method_isConstructor__Z,
  &DClazzMethodInfo_method_isStatic__Z,
  &DClazzMethodInfo_method_makeCodeAttribute__V,
  &DClazzMethodInfo_method_setAltName_I_V,
  &DClazzMethodInfo_method_setName_INLRString__V,
  &DClazzMethodInfo_method_setReturnType_INLRDClazzInfo__V,
  &DClazzMethodInfo_method_toString__LRString_,
  0
};


struct DClazzMethodInfo_MetaInfoInitializer
{  DClazzMethodInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DClazzMethodInfo::clazzInfo();
    ci->fields =  _DClazzMethodInfo_fields;
    ci->methods =  _DClazzMethodInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DClazzMethodInfo_MetaInfoInitializer DClazzMethodInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
DClazzInfo_create_array(int length)
{
  return new ObjectArrayImpl<RDClazzInfo>(length);
}

//static
::acdk::lang::RObject
DClazzInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DClazzInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_DClazzInfo_INLRClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DClazzInfo((RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_DClazzInfo_INLRString__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DClazzInfo((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_DClazzInfo__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DClazzInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DClazzInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::addField(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RDClazzInfo)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addField(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RDClazzInfo)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_addSuper_INLRDClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::addSuper((RDClazzInfo)args[0].getObjectVar());
    else
        This->addSuper((RDClazzInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_createMethod_INLRString__LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::createMethod((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createMethod((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_deregisterClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::deregisterClazzInfo();
    else
        This->deregisterClazzInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_equals_INLRDClazzInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::equals((RDClazzInfo)args[0].getObjectVar());
    else
      ret = This->equals((RDClazzInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::findCompatibleMethod((RString)args[0].getObjectVar(), (RDClazzMethodInfo)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findCompatibleMethod((RString)args[0].getObjectVar(), (RDClazzMethodInfo)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getArrayElementType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getArrayElementType();
    else
        ret = (::acdk::lang::RObject)This->getArrayElementType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getClassInitializerMethod_Z_LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getClassInitializerMethod(args[0].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->getClassInitializerMethod(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getClassInitializerMethod__LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getClassInitializerMethod();
    else
        ret = (::acdk::lang::RObject)This->getClassInitializerMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getDefunMethod_I_LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getDefunMethod(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getDefunMethod(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getInstance_INLRClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DClazzInfo::getInstance((RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getNamespace__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getNamespace();
    else
        ret = (::acdk::lang::RObject)This->getNamespace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getSuperClass__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getSuperClass();
    else
        ret = (::acdk::lang::RObject)This->getSuperClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getSuperClasses__LRDClazzInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getSuperClasses();
    else
        ret = (::acdk::lang::RObject)This->getSuperClasses();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DClazzInfo::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_hasAnyConstructor__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::hasAnyConstructor();
    else
      ret = This->hasAnyConstructor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isAny__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isAny();
    else
      ret = This->isAny();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isArray();
    else
      ret = This->isArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isBoolean();
    else
      ret = This->isBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isIntegerNumber__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isIntegerNumber();
    else
      ret = This->isIntegerNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isNumber__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isNumber();
    else
      ret = This->isNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isThrowable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isThrowable();
    else
      ret = This->isThrowable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_isVoid__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DClazzInfo::isVoid();
    else
      ret = This->isVoid();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_readObject_INLacdk_io_RObjectReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::readObject((acdk::io::RObjectReader)args[0].getObjectVar());
    else
        This->readObject((acdk::io::RObjectReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_registerClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::registerClazzInfo();
    else
        This->registerClazzInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_setClassInitializerMethod_INLRDClazzMethodInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::setClassInitializerMethod((RDClazzMethodInfo)args[0].getObjectVar());
    else
        This->setClassInitializerMethod((RDClazzMethodInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_setMethodAltNames__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::setMethodAltNames();
    else
        This->setMethodAltNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::setName((RString)args[0].getObjectVar());
    else
        This->setName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_setNamespace_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::setNamespace((RString)args[0].getObjectVar());
    else
        This->setNamespace((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DClazzInfo_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DClazzInfo::writeObject((acdk::io::RObjectWriter)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    else
        This->writeObject((acdk::io::RObjectWriter)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzInfo_fields__fields_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fields, flags);
    else
      This->_fields = (RDClazzFieldInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzInfo_fields__interfaces_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_interfaces, flags);
    else
      This->_interfaces = (RDClazzSuperInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzInfo_fields__methods_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_methods, flags);
    else
      This->_methods = (RDClazzMethodInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DClazzInfo_fields__registered_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DClazzInfo* This = dmi_cast<DClazzInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_registered, flags);
    else
      This->_registered = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DClazzInfo_fields__fields = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fields", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzFieldInfoArray::clazzInfo(),
  DClazzInfo_MetainfoWrapper::DClazzInfo_fields__fields_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DClazzInfo_fields__interfaces = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_interfaces", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzSuperInfoArray::clazzInfo(),
  DClazzInfo_MetainfoWrapper::DClazzInfo_fields__interfaces_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DClazzInfo_fields__methods = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_methods", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfoArray::clazzInfo(),
  DClazzInfo_MetainfoWrapper::DClazzInfo_fields__methods_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DClazzInfo_fields__registered = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_registered", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DClazzInfo_MetainfoWrapper::DClazzInfo_fields__registered_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DClazzInfo_fields[] = 
{
  &DClazzInfo_fields__fields,
  &DClazzInfo_fields__interfaces,
  &DClazzInfo_fields__methods,
  &DClazzInfo_fields__registered,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__args[] = 
{
  &DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_DClazzInfo_INLRClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DClazzInfo::clazzInfo(), // return type
  "_0_DClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_DClazzInfo_INLRClass__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_DClazzInfo_INLRClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__args[] = 
{
  &DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_DClazzInfo_INLRString__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DClazzInfo::clazzInfo(), // return type
  "_1_DClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_DClazzInfo_INLRString__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_DClazzInfo_INLRString__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_DClazzInfo__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_DClazzInfo__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_DClazzInfo__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DClazzInfo::clazzInfo(), // return type
  "_2_DClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_DClazzInfo__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_DClazzInfo__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_DClazzInfo__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_A_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__args[] = 
{
  &DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_flags,
  &DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_name,
  &DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzFieldInfo::clazzInfo(), // return type
  "_5_addField", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_addSuper_INLRDClazzInfo__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_addSuper_INLRDClazzInfo__V_args[] = 
{
  &DClazzInfo_methods_addSuper_INLRDClazzInfo__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_addSuper_INLRDClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_addSuper_INLRDClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuper", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addSuper", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_addSuper_INLRDClazzInfo__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_addSuper_INLRDClazzInfo__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_addSuper_INLRDClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__args[] = 
{
  &DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_createMethod_INLRString__LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_6_createMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_createMethod_INLRString__LRDClazzMethodInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_createMethod_INLRString__LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_deregisterClazzInfo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_deregisterClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_deregisterClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deregisterClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_deregisterClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_deregisterClazzInfo__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_deregisterClazzInfo__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_deregisterClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_equals_INLRDClazzInfo__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_equals_INLRDClazzInfo__Z_args[] = 
{
  &DClazzInfo_methods_equals_INLRDClazzInfo__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_equals_INLRDClazzInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_equals_INLRDClazzInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_equals_INLRDClazzInfo__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_equals_INLRDClazzInfo__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_equals_INLRDClazzInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__args[] = 
{
  &DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__arg_name,
  &DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findCompatibleMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_s_findCompatibleMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_9_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getArrayElementType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getArrayElementType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getArrayElementType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArrayElementType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_n_getArrayElementType", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getArrayElementType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getArrayElementType__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getArrayElementType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__arg_create = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "create", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__args[] = 
{
  &DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__arg_create,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getClassInitializerMethod_Z_LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassInitializerMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_w_getClassInitializerMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getClassInitializerMethod_Z_LRDClazzMethodInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getClassInitializerMethod_Z_LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getClassInitializerMethod__LRDClazzMethodInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getClassInitializerMethod__LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getClassInitializerMethod__LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getClassInitializerMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_x_getClassInitializerMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getClassInitializerMethod__LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getClassInitializerMethod__LRDClazzMethodInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getClassInitializerMethod__LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__args[] = 
{
  &DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getDefunMethod_I_LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefunMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_r_getDefunMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getDefunMethod_I_LRDClazzMethodInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getDefunMethod_I_LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__args[] = 
{
  &DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getInstance_INLRClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_3_getInstance", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getInstance_INLRClass__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getInstance_INLRClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getName", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getName__LRString__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getName__LRString__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getNamespace__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getNamespace__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getNamespace__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNamespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getNamespace", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getNamespace__LRString__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getNamespace__LRString__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getNamespace__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getSuperClass__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getSuperClass__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getSuperClass__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuperClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_q_getSuperClass", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getSuperClass__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getSuperClass__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getSuperClass__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getSuperClasses__LRDClazzInfoArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getSuperClasses__LRDClazzInfoArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getSuperClasses__LRDClazzInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuperClasses", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfoArray::clazzInfo(), // return type
  "_p_getSuperClasses", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getSuperClasses__LRDClazzInfoArray__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getSuperClasses__LRDClazzInfoArray__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getSuperClasses__LRDClazzInfoArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_a_getType", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  DClazzInfo_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_hasAnyConstructor__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_hasAnyConstructor__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_hasAnyConstructor__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasAnyConstructor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_hasAnyConstructor", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_hasAnyConstructor__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_hasAnyConstructor__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_hasAnyConstructor__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isAny__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isAny__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isAny__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAny", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_isAny", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isAny__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isAny__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isAny__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isArray__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isArray", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isArray__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isArray__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isBoolean", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isBoolean__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isBoolean__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isIntegerNumber__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isIntegerNumber__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isIntegerNumber__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isIntegerNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_isIntegerNumber", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isIntegerNumber__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isIntegerNumber__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isIntegerNumber__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isNumber__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isNumber__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isNumber__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isNumber", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isNumber__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isNumber__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isNumber__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isThrowable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isThrowable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isThrowable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isThrowable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_isThrowable", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isThrowable__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isThrowable__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isThrowable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_isVoid__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_isVoid__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_isVoid__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVoid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isVoid", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_isVoid__Z_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_isVoid__Z_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_isVoid__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RObjectReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_args[] = 
{
  &DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_readObject_INLacdk_io_RObjectReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_readObject", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_readObject_INLacdk_io_RObjectReader__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_readObject_INLacdk_io_RObjectReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_registerClazzInfo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_registerClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_registerClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_registerClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_registerClazzInfo__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_registerClazzInfo__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_registerClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_arg_mi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_args[] = 
{
  &DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_arg_mi,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_setClassInitializerMethod_INLRDClazzMethodInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClassInitializerMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setClassInitializerMethod", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_setClassInitializerMethod_INLRDClazzMethodInfo__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_setClassInitializerMethod_INLRDClazzMethodInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_setMethodAltNames__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_setMethodAltNames__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_setMethodAltNames__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMethodAltNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_setMethodAltNames", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_setMethodAltNames__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_setMethodAltNames__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_setMethodAltNames__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_setName_INLRString__V_args[] = 
{
  &DClazzInfo_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setName", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_setName_INLRString__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_setNamespace_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_setNamespace_INLRString__V_args[] = 
{
  &DClazzInfo_methods_setNamespace_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_setNamespace_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_setNamespace_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNamespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setNamespace", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_setNamespace_INLRString__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_setNamespace_INLRString__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_setNamespace_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_args[] = 
{
  &DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_out,
  &DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DClazzInfo_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_writeObject", // alternative name of method
  -1, // altlabelHashCode
  DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_args, // the arguments
  0, //arguments count
  DClazzInfo_methods_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_exceptions, // the declared exceptions
  DClazzInfo_MetainfoWrapper::DClazzInfo_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DClazzInfo_methods[] = 
{
  &DClazzInfo_method_DClazzInfo_INLRClass__LRDClazzInfo_,
  &DClazzInfo_method_DClazzInfo_INLRString__LRDClazzInfo_,
  &DClazzInfo_method_DClazzInfo__LRDClazzInfo_,
  &DClazzInfo_method_GetClass__L_acdk_lang_RClass_,
  &DClazzInfo_method_addField_IINLRString_INLRDClazzInfo__LRDClazzFieldInfo_,
  &DClazzInfo_method_addSuper_INLRDClazzInfo__V,
  &DClazzInfo_method_createMethod_INLRString__LRDClazzMethodInfo_,
  &DClazzInfo_method_deregisterClazzInfo__V,
  &DClazzInfo_method_equals_INLRDClazzInfo__Z,
  &DClazzInfo_method_findCompatibleMethod_INLRString_INLRDClazzMethodInfo__LRDClazzMethodInfo_,
  &DClazzInfo_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &DClazzInfo_method_getArrayElementType__LRDClazzInfo_,
  &DClazzInfo_method_getClassInitializerMethod_Z_LRDClazzMethodInfo_,
  &DClazzInfo_method_getClassInitializerMethod__LRDClazzMethodInfo_,
  &DClazzInfo_method_getDefunMethod_I_LRDClazzMethodInfo_,
  &DClazzInfo_method_getInstance_INLRClass__LRDClazzInfo_,
  &DClazzInfo_method_getName__LRString_,
  &DClazzInfo_method_getNamespace__LRString_,
  &DClazzInfo_method_getSuperClass__LRDClazzInfo_,
  &DClazzInfo_method_getSuperClasses__LRDClazzInfoArray_,
  &DClazzInfo_method_getType__LRDClazzInfo_,
  &DClazzInfo_method_hasAnyConstructor__Z,
  &DClazzInfo_method_isAny__Z,
  &DClazzInfo_method_isArray__Z,
  &DClazzInfo_method_isBoolean__Z,
  &DClazzInfo_method_isIntegerNumber__Z,
  &DClazzInfo_method_isNumber__Z,
  &DClazzInfo_method_isThrowable__Z,
  &DClazzInfo_method_isVoid__Z,
  &DClazzInfo_method_readObject_INLacdk_io_RObjectReader__V,
  &DClazzInfo_method_registerClazzInfo__V,
  &DClazzInfo_method_setClassInitializerMethod_INLRDClazzMethodInfo__V,
  &DClazzInfo_method_setMethodAltNames__V,
  &DClazzInfo_method_setName_INLRString__V,
  &DClazzInfo_method_setNamespace_INLRString__V,
  &DClazzInfo_method_writeObject_INLacdk_io_RObjectWriter_INLRClass__V,
  0
};


struct DClazzInfo_MetaInfoInitializer
{  DClazzInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DClazzInfo::clazzInfo();
    ci->fields =  _DClazzInfo_fields;
    ci->methods =  _DClazzInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DClazzInfo_MetaInfoInitializer DClazzInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
VarDefinition_create_array(int length)
{
  return new ObjectArrayImpl<RVarDefinition>(length);
}

//static
::acdk::lang::RObject
VarDefinition_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class VarDefinition_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)VarDefinition::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_VarDefinition__LRVarDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarDefinition(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RDClazzInfo)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_VarDefinition_IINLRString__LRVarDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarDefinition(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarDefinition((RDClazzFieldInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->VarDefinition::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_getFieldInfo__LRDClazzFieldInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->VarDefinition::getFieldInfo();
    else
        ret = (::acdk::lang::RObject)This->getFieldInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->VarDefinition::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->VarDefinition::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->VarDefinition::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarDefinition_method_printVar_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->VarDefinition::printVar((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printVar((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  VarDefinition_fields__dflags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dflags, flags);
    else
      This->_dflags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  VarDefinition_fields__fieldInfo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fieldInfo, flags);
    else
      This->_fieldInfo = (RDClazzFieldInfo)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  VarDefinition_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  VarDefinition_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    VarDefinition* This = dmi_cast<VarDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_type, flags);
    else
      This->_type = (RDClazzInfo)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo VarDefinition_fields__dflags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dflags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  VarDefinition_MetainfoWrapper::VarDefinition_fields__dflags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo VarDefinition_fields__fieldInfo = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fieldInfo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzFieldInfo::clazzInfo(),
  VarDefinition_MetainfoWrapper::VarDefinition_fields__fieldInfo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo VarDefinition_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  VarDefinition_MetainfoWrapper::VarDefinition_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo VarDefinition_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(),
  VarDefinition_MetainfoWrapper::VarDefinition_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _VarDefinition_fields[] = 
{
  &VarDefinition_fields__dflags,
  &VarDefinition_fields__fieldInfo,
  &VarDefinition_fields__name,
  &VarDefinition_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  VarDefinition_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_VarDefinition__LRVarDefinition__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_VarDefinition__LRVarDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_VarDefinition__LRVarDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "VarDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarDefinition::clazzInfo(), // return type
  "_0_VarDefinition", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_VarDefinition__LRVarDefinition__args, // the arguments
  0, //arguments count
  VarDefinition_methods_VarDefinition__LRVarDefinition__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_VarDefinition__LRVarDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_tp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__args[] = 
{
  &VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_flags,
  &VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_n,
  &VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__arg_tp,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "VarDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarDefinition::clazzInfo(), // return type
  "_1_VarDefinition", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__args, // the arguments
  0, //arguments count
  VarDefinition_methods_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__args[] = 
{
  &VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__arg_flags,
  &VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_VarDefinition_IINLRString__LRVarDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "VarDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarDefinition::clazzInfo(), // return type
  "_2_VarDefinition", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__args, // the arguments
  0, //arguments count
  VarDefinition_methods_VarDefinition_IINLRString__LRVarDefinition__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_VarDefinition_IINLRString__LRVarDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__arg_fieldInfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fieldInfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzFieldInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__args[] = 
{
  &VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__arg_fieldInfo,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "VarDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarDefinition::clazzInfo(), // return type
  "_3_VarDefinition", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__args, // the arguments
  0, //arguments count
  VarDefinition_methods_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_6_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  VarDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_getFieldInfo__LRDClazzFieldInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_getFieldInfo__LRDClazzFieldInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_getFieldInfo__LRDClazzFieldInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFieldInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzFieldInfo::clazzInfo(), // return type
  "_8_getFieldInfo", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_getFieldInfo__LRDClazzFieldInfo__args, // the arguments
  0, //arguments count
  VarDefinition_methods_getFieldInfo__LRDClazzFieldInfo__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_getFieldInfo__LRDClazzFieldInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getName", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_getName__LRString__args, // the arguments
  0, //arguments count
  VarDefinition_methods_getName__LRString__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_7_getType", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  VarDefinition_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_hashCode", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_hashCode__I_args, // the arguments
  0, //arguments count
  VarDefinition_methods_hashCode__I_exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarDefinition_method_printVar_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_printVar", // alternative name of method
  -1, // altlabelHashCode
  VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  VarDefinition_methods_printVar_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  VarDefinition_MetainfoWrapper::VarDefinition_method_printVar_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _VarDefinition_methods[] = 
{
  &VarDefinition_method_GetClass__L_acdk_lang_RClass_,
  &VarDefinition_method_VarDefinition__LRVarDefinition_,
  &VarDefinition_method_VarDefinition_IINLRString_LRDClazzInfo__LRVarDefinition_,
  &VarDefinition_method_VarDefinition_IINLRString__LRVarDefinition_,
  &VarDefinition_method_VarDefinition_INLRDClazzFieldInfo__LRVarDefinition_,
  &VarDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &VarDefinition_method_getFieldInfo__LRDClazzFieldInfo_,
  &VarDefinition_method_getName__LRString_,
  &VarDefinition_method_getType__LRDClazzInfo_,
  &VarDefinition_method_hashCode__I,
  &VarDefinition_method_printVar_INLacdk_io_RPrintWriter_INLRString__V,
  0
};


struct VarDefinition_MetaInfoInitializer
{  VarDefinition_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = VarDefinition::clazzInfo();
    ci->fields =  _VarDefinition_fields;
    ci->methods =  _VarDefinition_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
VarDefinition_MetaInfoInitializer VarDefinition_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
NamespaceDefinition_create_array(int length)
{
  return new ObjectArrayImpl<RNamespaceDefinition>(length);
}

//static
::acdk::lang::RObject
NamespaceDefinition_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NamespaceDefinition_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceDefinition_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamespaceDefinition::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceDefinition_method_NamespaceDefinition_INLRString__LRNamespaceDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NamespaceDefinition((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceDefinition* This = dmi_cast<NamespaceDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceDefinition::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceDefinition_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceDefinition* This = dmi_cast<NamespaceDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceDefinition::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceDefinition_method_getType__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceDefinition* This = dmi_cast<NamespaceDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceDefinition::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NamespaceDefinition_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NamespaceDefinition* This = dmi_cast<NamespaceDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NamespaceDefinition_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NamespaceDefinition* This = dmi_cast<NamespaceDefinition>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NamespaceDefinition_fields__flags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NamespaceDefinition_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NamespaceDefinition_fields[] = 
{
  &NamespaceDefinition_fields__flags,
  &NamespaceDefinition_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceDefinition_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceDefinition_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NamespaceDefinition_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NamespaceDefinition_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__arg_unitname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "unitname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__args[] = 
{
  &NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__arg_unitname,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceDefinition_method_NamespaceDefinition_INLRString__LRNamespaceDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NamespaceDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NamespaceDefinition::clazzInfo(), // return type
  "_0_NamespaceDefinition", // alternative name of method
  -1, // altlabelHashCode
  NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__args, // the arguments
  0, //arguments count
  NamespaceDefinition_methods_NamespaceDefinition_INLRString__LRNamespaceDefinition__exceptions, // the declared exceptions
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_method_NamespaceDefinition_INLRString__LRNamespaceDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_3_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  NamespaceDefinition_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceDefinition_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceDefinition_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  NamespaceDefinition_methods_getName__LRString__args, // the arguments
  0, //arguments count
  NamespaceDefinition_methods_getName__LRString__exceptions, // the declared exceptions
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceDefinition_methods_getType__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition_methods_getType__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceDefinition_method_getType__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_2_getType", // alternative name of method
  -1, // altlabelHashCode
  NamespaceDefinition_methods_getType__LRDClazzInfo__args, // the arguments
  0, //arguments count
  NamespaceDefinition_methods_getType__LRDClazzInfo__exceptions, // the declared exceptions
  NamespaceDefinition_MetainfoWrapper::NamespaceDefinition_method_getType__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NamespaceDefinition_methods[] = 
{
  &NamespaceDefinition_method_GetClass__L_acdk_lang_RClass_,
  &NamespaceDefinition_method_NamespaceDefinition_INLRString__LRNamespaceDefinition_,
  &NamespaceDefinition_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &NamespaceDefinition_method_getName__LRString_,
  &NamespaceDefinition_method_getType__LRDClazzInfo_,
  0
};


struct NamespaceDefinition_MetaInfoInitializer
{  NamespaceDefinition_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NamespaceDefinition::clazzInfo();
    ci->fields =  _NamespaceDefinition_fields;
    ci->methods =  _NamespaceDefinition_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NamespaceDefinition_MetaInfoInitializer NamespaceDefinition_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 


//static
::acdk::lang::RObject
SymbolTable_create_array(int length)
{
  return new ObjectArrayImpl<RSymbolTable>(length);
}

//static
::acdk::lang::RObject
SymbolTable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SymbolTable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SymbolTable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_SymbolTable_INLRSymbolTable__LRSymbolTable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SymbolTable((RSymbolTable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_SymbolTable__LRSymbolTable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SymbolTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_addSeeAlsoSem_INLRSemanticElem__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::addSeeAlsoSem((RSemanticElem)args[0].getObjectVar());
    else
        This->addSeeAlsoSem((RSemanticElem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_addSeeAlsoType_INLRSymbolTable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::addSeeAlsoType((RSymbolTable)args[0].getObjectVar());
    else
        This->addSeeAlsoType((RSymbolTable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_addSeeAlsoVar_INLRSymbolTable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::addSeeAlsoVar((RSymbolTable)args[0].getObjectVar());
    else
        This->addSeeAlsoVar((RSymbolTable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_createTempVar_INLRDClazzInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::createTempVar((RDClazzInfo)args[0].getObjectVar());
    else
      ret = This->createTempVar((RDClazzInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->findSubSem((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getCurMethod__LRDClazzMethodInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::getCurMethod();
    else
        ret = (::acdk::lang::RObject)This->getCurMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getFlag_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::getFlag(args[0].getIntVar());
    else
      ret = This->getFlag(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getMethodClazzInfo_INLRString__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::getMethodClazzInfo((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getMethodClazzInfo((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getMethodClazzInfo__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::getMethodClazzInfo();
    else
        ret = (::acdk::lang::RObject)This->getMethodClazzInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getType_INLRString__LRDClazzInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::getType((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getType((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getVar_INLRString__LRVarDefinition__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SymbolTable::getVar((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getVar((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getVarIndex_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::getVarIndex((RString)args[0].getObjectVar());
    else
      ret = This->getVarIndex((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_getVarMaxIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::getVarMaxIndex();
    else
      ret = This->getVarMaxIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_isVarInLocalBlockDefined_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::isVarInLocalBlockDefined((RString)args[0].getObjectVar());
    else
      ret = This->isVarInLocalBlockDefined((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newType_INLRDClazzInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::newType((RDClazzInfo)args[0].getObjectVar());
    else
        This->newType((RDClazzInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_IINLRString_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    else
      ret = This->newVarDecl(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_IINLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->newVarDecl(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl(args[0].getIntVar(), (RDClazzInfo)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    else
      ret = This->newVarDecl(args[0].getIntVar(), (RDClazzInfo)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_INLRVarDefinition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl((RVarDefinition)args[0].getObjectVar());
    else
      ret = This->newVarDecl((RVarDefinition)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl(args[0].getIntVar(), (RDClazzInfo)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->newVarDecl(args[0].getIntVar(), (RDClazzInfo)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_newVarDecl_INLRVarDefinition_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SymbolTable::newVarDecl((RVarDefinition)args[0].getObjectVar(), args[1].getIntVar());
    else
      ret = This->newVarDecl((RVarDefinition)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::printSymbolTable((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printSymbolTable((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::printVars((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    else
        This->printVars((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::printVars((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printVars((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_setCurMethod_INLRDClazzMethodInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::setCurMethod((RDClazzMethodInfo)args[0].getObjectVar());
    else
        This->setCurMethod((RDClazzMethodInfo)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_setFlag_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::setFlag(args[0].getIntVar());
    else
        This->setFlag(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SymbolTable_method_setFlag_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SymbolTable::setFlag(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setFlag(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__blockStart_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_blockStart, flags);
    else
      This->_blockStart = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__classes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_classes, flags);
    else
      This->_classes = (RDClazzInfoArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__curMethod_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curMethod, flags);
    else
      This->_curMethod = (RDClazzMethodInfo)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__seeAlsoSemElements_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seeAlsoSemElements, flags);
    else
      This->_seeAlsoSemElements = (RSemanticElemArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__seeAlsoTypes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seeAlsoTypes, flags);
    else
      This->_seeAlsoTypes = (acdk::lang::ref::RWeakReferenceArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__seeAlsoVars_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seeAlsoVars, flags);
    else
      This->_seeAlsoVars = (acdk::lang::ref::RWeakReferenceArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__tvarCounter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tvarCounter, flags);
    else
      This->_tvarCounter = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__typeMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_typeMap, flags);
    else
      This->_typeMap = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SymbolTable_fields__variables_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SymbolTable* This = dmi_cast<SymbolTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_variables, flags);
    else
      This->_variables = (RVarDefinitionArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__blockStart = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_blockStart", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__blockStart_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__classes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_classes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfoArray::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__classes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__curMethod = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curMethod", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__curMethod_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__seeAlsoSemElements = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_seeAlsoSemElements", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElemArray::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__seeAlsoSemElements_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__seeAlsoTypes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_seeAlsoTypes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::ref::RWeakReferenceArray::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__seeAlsoTypes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__seeAlsoVars = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_seeAlsoVars", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::ref::RWeakReferenceArray::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__seeAlsoVars_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__tvarCounter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tvarCounter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__tvarCounter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__typeMap = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_typeMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__typeMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SymbolTable_fields__variables = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_variables", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RVarDefinitionArray::clazzInfo(),
  SymbolTable_MetainfoWrapper::SymbolTable_fields__variables_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SymbolTable_fields[] = 
{
  &SymbolTable_fields__blockStart,
  &SymbolTable_fields__classes,
  &SymbolTable_fields__curMethod,
  &SymbolTable_fields__flags,
  &SymbolTable_fields__seeAlsoSemElements,
  &SymbolTable_fields__seeAlsoTypes,
  &SymbolTable_fields__seeAlsoVars,
  &SymbolTable_fields__tvarCounter,
  &SymbolTable_fields__typeMap,
  &SymbolTable_fields__variables,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SymbolTable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSymbolTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__args[] = 
{
  &SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_SymbolTable_INLRSymbolTable__LRSymbolTable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SymbolTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SymbolTable::clazzInfo(), // return type
  "_0_SymbolTable", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__args, // the arguments
  0, //arguments count
  SymbolTable_methods_SymbolTable_INLRSymbolTable__LRSymbolTable__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_SymbolTable_INLRSymbolTable__LRSymbolTable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_SymbolTable__LRSymbolTable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_SymbolTable__LRSymbolTable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_SymbolTable__LRSymbolTable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SymbolTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SymbolTable::clazzInfo(), // return type
  "_1_SymbolTable", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_SymbolTable__LRSymbolTable__args, // the arguments
  0, //arguments count
  SymbolTable_methods_SymbolTable__LRSymbolTable__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_SymbolTable__LRSymbolTable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_arg_sem = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sem", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_args[] = 
{
  &SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_arg_sem,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_addSeeAlsoSem_INLRSemanticElem__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSeeAlsoSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_addSeeAlsoSem", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_addSeeAlsoSem_INLRSemanticElem__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_addSeeAlsoSem_INLRSemanticElem__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_arg_st = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "st", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSymbolTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_args[] = 
{
  &SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_arg_st,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_addSeeAlsoType_INLRSymbolTable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSeeAlsoType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_addSeeAlsoType", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_addSeeAlsoType_INLRSymbolTable__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_addSeeAlsoType_INLRSymbolTable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_arg_st = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "st", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSymbolTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_args[] = 
{
  &SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_arg_st,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_addSeeAlsoVar_INLRSymbolTable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSeeAlsoVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addSeeAlsoVar", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_addSeeAlsoVar_INLRSymbolTable__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_addSeeAlsoVar_INLRSymbolTable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_createTempVar_INLRDClazzInfo__I_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_createTempVar_INLRDClazzInfo__I_args[] = 
{
  &SymbolTable_methods_createTempVar_INLRDClazzInfo__I_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_createTempVar_INLRDClazzInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_createTempVar_INLRDClazzInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTempVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_createTempVar", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_createTempVar_INLRDClazzInfo__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_createTempVar_INLRDClazzInfo__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_createTempVar_INLRDClazzInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args[] = 
{
  &SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_str,
  &SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_findSubSem_INLRString_INLRString__LRSemanticElem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findSubSem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSemanticElem::clazzInfo(), // return type
  "_3_findSubSem", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__args, // the arguments
  0, //arguments count
  SymbolTable_methods_findSubSem_INLRString_INLRString__LRSemanticElem__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_findSubSem_INLRString_INLRString__LRSemanticElem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getCurMethod__LRDClazzMethodInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getCurMethod__LRDClazzMethodInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getCurMethod__LRDClazzMethodInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo(), // return type
  "_j_getCurMethod", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getCurMethod__LRDClazzMethodInfo__args, // the arguments
  0, //arguments count
  SymbolTable_methods_getCurMethod__LRDClazzMethodInfo__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getCurMethod__LRDClazzMethodInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_getFlag_I_I_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getFlag_I_I_args[] = 
{
  &SymbolTable_methods_getFlag_I_I_arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getFlag_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getFlag_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getFlag", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getFlag_I_I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_getFlag_I_I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getFlag_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__args[] = 
{
  &SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getMethodClazzInfo_INLRString__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethodClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_g_getMethodClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__args, // the arguments
  0, //arguments count
  SymbolTable_methods_getMethodClazzInfo_INLRString__LRDClazzInfo__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getMethodClazzInfo_INLRString__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getMethodClazzInfo__LRDClazzInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getMethodClazzInfo__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getMethodClazzInfo__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethodClazzInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_h_getMethodClazzInfo", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getMethodClazzInfo__LRDClazzInfo__args, // the arguments
  0, //arguments count
  SymbolTable_methods_getMethodClazzInfo__LRDClazzInfo__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getMethodClazzInfo__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_getType_INLRString__LRDClazzInfo__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getType_INLRString__LRDClazzInfo__args[] = 
{
  &SymbolTable_methods_getType_INLRString__LRDClazzInfo__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getType_INLRString__LRDClazzInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getType_INLRString__LRDClazzInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo(), // return type
  "_2_getType", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getType_INLRString__LRDClazzInfo__args, // the arguments
  0, //arguments count
  SymbolTable_methods_getType_INLRString__LRDClazzInfo__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getType_INLRString__LRDClazzInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_getVar_INLRString__LRVarDefinition__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getVar_INLRString__LRVarDefinition__args[] = 
{
  &SymbolTable_methods_getVar_INLRString__LRVarDefinition__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getVar_INLRString__LRVarDefinition__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getVar_INLRString__LRVarDefinition_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RVarDefinition::clazzInfo(), // return type
  "_4_getVar", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getVar_INLRString__LRVarDefinition__args, // the arguments
  0, //arguments count
  SymbolTable_methods_getVar_INLRString__LRVarDefinition__exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getVar_INLRString__LRVarDefinition__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_getVarIndex_INLRString__I_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getVarIndex_INLRString__I_args[] = 
{
  &SymbolTable_methods_getVarIndex_INLRString__I_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getVarIndex_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getVarIndex_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVarIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getVarIndex", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getVarIndex_INLRString__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_getVarIndex_INLRString__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getVarIndex_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_getVarMaxIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_getVarMaxIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_getVarMaxIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVarMaxIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getVarMaxIndex", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_getVarMaxIndex__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_getVarMaxIndex__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_getVarMaxIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_args[] = 
{
  &SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_isVarInLocalBlockDefined_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVarInLocalBlockDefined", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_isVarInLocalBlockDefined", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_args, // the arguments
  0, //arguments count
  SymbolTable_methods_isVarInLocalBlockDefined_INLRString__Z_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_isVarInLocalBlockDefined_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newType_INLRDClazzInfo__V_arg_td = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "td", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newType_INLRDClazzInfo__V_args[] = 
{
  &SymbolTable_methods_newType_INLRDClazzInfo__V_arg_td,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newType_INLRDClazzInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newType_INLRDClazzInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_newType", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newType_INLRDClazzInfo__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newType_INLRDClazzInfo__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newType_INLRDClazzInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_varname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_args[] = 
{
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_flags,
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_type,
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_varname,
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_IINLRString_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_IINLRString_INLRString_I_I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_IINLRString_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_varname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_args[] = 
{
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_flags,
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_type,
  &SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_arg_varname,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_IINLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_IINLRString_INLRString__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_IINLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_varname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_args[] = 
{
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_flags,
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_type,
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_varname,
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString_I_I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_INLRVarDefinition__I_arg_vd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "vd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RVarDefinition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_INLRVarDefinition__I_args[] = 
{
  &SymbolTable_methods_newVarDecl_INLRVarDefinition__I_arg_vd,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_INLRVarDefinition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_INLRVarDefinition__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_INLRVarDefinition__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_INLRVarDefinition__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_INLRVarDefinition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_varname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_args[] = 
{
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_flags,
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_type,
  &SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_arg_varname,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_IINLRDClazzInfo_INLRString__I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_arg_vd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "vd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RVarDefinition::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_args[] = 
{
  &SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_arg_vd,
  &SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_newVarDecl_INLRVarDefinition_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newVarDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_newVarDecl", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_args, // the arguments
  0, //arguments count
  SymbolTable_methods_newVarDecl_INLRVarDefinition_I_I_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_newVarDecl_INLRVarDefinition_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printSymbolTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_printSymbolTable", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_all = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "all", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_args[] = 
{
  &SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_out,
  &SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_indent,
  &SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_arg_all,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printVars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_printVars", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "printVars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_printVars", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_printVars_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_arg_cm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDClazzMethodInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_args[] = 
{
  &SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_arg_cm,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_setCurMethod_INLRDClazzMethodInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setCurMethod", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_setCurMethod_INLRDClazzMethodInfo__V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_setCurMethod_INLRDClazzMethodInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_setFlag_I_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_setFlag_I_V_args[] = 
{
  &SymbolTable_methods_setFlag_I_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_setFlag_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_setFlag_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setFlag", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_setFlag_I_V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_setFlag_I_V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_setFlag_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_setFlag_II_V_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SymbolTable_methods_setFlag_II_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SymbolTable_methods_setFlag_II_V_args[] = 
{
  &SymbolTable_methods_setFlag_II_V_arg_mask,
  &SymbolTable_methods_setFlag_II_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable_methods_setFlag_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SymbolTable_method_setFlag_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setFlag", // alternative name of method
  -1, // altlabelHashCode
  SymbolTable_methods_setFlag_II_V_args, // the arguments
  0, //arguments count
  SymbolTable_methods_setFlag_II_V_exceptions, // the declared exceptions
  SymbolTable_MetainfoWrapper::SymbolTable_method_setFlag_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SymbolTable_methods[] = 
{
  &SymbolTable_method_GetClass__L_acdk_lang_RClass_,
  &SymbolTable_method_SymbolTable_INLRSymbolTable__LRSymbolTable_,
  &SymbolTable_method_SymbolTable__LRSymbolTable_,
  &SymbolTable_method_addSeeAlsoSem_INLRSemanticElem__V,
  &SymbolTable_method_addSeeAlsoType_INLRSymbolTable__V,
  &SymbolTable_method_addSeeAlsoVar_INLRSymbolTable__V,
  &SymbolTable_method_createTempVar_INLRDClazzInfo__I,
  &SymbolTable_method_findSubSem_INLRString_INLRString__LRSemanticElem_,
  &SymbolTable_method_getCurMethod__LRDClazzMethodInfo_,
  &SymbolTable_method_getFlag_I_I,
  &SymbolTable_method_getMethodClazzInfo_INLRString__LRDClazzInfo_,
  &SymbolTable_method_getMethodClazzInfo__LRDClazzInfo_,
  &SymbolTable_method_getType_INLRString__LRDClazzInfo_,
  &SymbolTable_method_getVar_INLRString__LRVarDefinition_,
  &SymbolTable_method_getVarIndex_INLRString__I,
  &SymbolTable_method_getVarMaxIndex__I,
  &SymbolTable_method_isVarInLocalBlockDefined_INLRString__Z,
  &SymbolTable_method_newType_INLRDClazzInfo__V,
  &SymbolTable_method_newVarDecl_IINLRString_INLRString_I_I,
  &SymbolTable_method_newVarDecl_IINLRString_INLRString__I,
  &SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString_I_I,
  &SymbolTable_method_newVarDecl_INLRVarDefinition__I,
  &SymbolTable_method_newVarDecl_IINLRDClazzInfo_INLRString__I,
  &SymbolTable_method_newVarDecl_INLRVarDefinition_I_I,
  &SymbolTable_method_printSymbolTable_INLacdk_io_RPrintWriter_INLRString__V,
  &SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString_Z_V,
  &SymbolTable_method_printVars_INLacdk_io_RPrintWriter_INLRString__V,
  &SymbolTable_method_setCurMethod_INLRDClazzMethodInfo__V,
  &SymbolTable_method_setFlag_I_V,
  &SymbolTable_method_setFlag_II_V,
  0
};


struct SymbolTable_MetaInfoInitializer
{  SymbolTable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SymbolTable::clazzInfo();
    ci->fields =  _SymbolTable_fields;
    ci->methods =  _SymbolTable_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SymbolTable_MetaInfoInitializer SymbolTable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) aci_dummyExportFunc() {}
#endif

