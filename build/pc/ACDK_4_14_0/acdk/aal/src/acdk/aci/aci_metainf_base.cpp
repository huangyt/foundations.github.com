// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AccLoader.h"
#include "aci.h"
#include "aci_metainf.h"
#include "ClazzSymbolTable.h"
#include "Compiler.h"
#include "Config.h"
#include "core_stack.h"
#include "DClazzInfo.h"
#include "StdAci.h"
#include "SymbolTable.h"

namespace acdk { 
namespace aci { 

using namespace acdk::aci::vm;
using namespace acdk::aci::parser;
::acdk::lang::dmi::ClazzSuperInfo _Compiler_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Compiler_interfaces[] =
{
  &_Compiler_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Compiler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Compiler", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Compiler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 6, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Compiler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Compiler(Compiler::clazzInfo());

::acdk::lang::RClass
Compiler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Compiler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_compilerEnv._ref_this()); // vm::REvalEnv _compilerEnv 
  fields.push_back((::acdk::lang::RObject*)this->_globals._ref_this()); // RSymbolTable _globals 
  fields.push_back((::acdk::lang::RObject*)this->_opCodes._ref_this()); // vm::RExecutableArray _opCodes 
  fields.push_back((::acdk::lang::RObject*)this->_parseEnv._ref_this()); // acdk::aci::parser::RParseEnv _parseEnv 
  fields.push_back((::acdk::lang::RObject*)this->scanner._ref_this()); // RScanner scanner 
  fields.push_back((::acdk::lang::RObject*)this->topNode._ref_this()); // RParseNode topNode 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo* _SemanticElem_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* SemanticElem::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SemanticElem", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SemanticElem_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SemanticElem::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SemanticElem(SemanticElem::clazzInfo());

::acdk::lang::RClass
SemanticElem::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SemanticElem::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _DUnitInfo_super_ClazzTypes =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzTypes::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DUnitInfo_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DUnitInfo_interfaces[] =
{
  &_DUnitInfo_super_ClazzTypes,
  &_DUnitInfo_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* DUnitInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DUnitInfo", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DUnitInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DUnitInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DUnitInfo(DUnitInfo::clazzInfo());

::acdk::lang::RClass
DUnitInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DUnitInfo::getCollectableFields(FieldReferences& fields)
{
  ClazzTypes::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _DClazzFieldInfo_super_ClazzTypes =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzTypes::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DClazzFieldInfo_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DClazzFieldInfo_interfaces[] =
{
  &_DClazzFieldInfo_super_ClazzTypes,
  &_DClazzFieldInfo_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzFieldInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DClazzFieldInfo", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DClazzFieldInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DClazzFieldInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DClazzFieldInfo(DClazzFieldInfo::clazzInfo());

::acdk::lang::RClass
DClazzFieldInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DClazzFieldInfo::getCollectableFields(FieldReferences& fields)
{
  ClazzTypes::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_type._ref_this()); // RDClazzInfo _type 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _DClazzMethodInfo_super_ClazzTypes =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzTypes::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DClazzMethodInfo_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DClazzMethodInfo_interfaces[] =
{
  &_DClazzMethodInfo_super_ClazzTypes,
  &_DClazzMethodInfo_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzMethodInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DClazzMethodInfo", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DClazzMethodInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DClazzMethodInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DClazzMethodInfo(DClazzMethodInfo::clazzInfo());

::acdk::lang::RClass
DClazzMethodInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DClazzMethodInfo::getCollectableFields(FieldReferences& fields)
{
  ClazzTypes::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_args._ref_this()); // RDClazzMethodArgInfoArray _args 
  fields.push_back((::acdk::lang::RObject*)this->_code._ref_this()); // acdk::aci::vm::RExecutableArray _code 
  fields.push_back((::acdk::lang::RObject*)this->_retType._ref_this()); // RDClazzInfo _retType 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _DClazzInfo_super_ClazzTypes =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzTypes::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DClazzInfo_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DClazzInfo_interfaces[] =
{
  &_DClazzInfo_super_ClazzTypes,
  &_DClazzInfo_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* DClazzInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DClazzInfo", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DClazzInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DClazzInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DClazzInfo(DClazzInfo::clazzInfo());

::acdk::lang::RClass
DClazzInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DClazzInfo::getCollectableFields(FieldReferences& fields)
{
  ClazzTypes::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fields._ref_this()); // RDClazzFieldInfoArray _fields 
  fields.push_back((::acdk::lang::RObject*)this->_interfaces._ref_this()); // RDClazzSuperInfoArray _interfaces 
  fields.push_back((::acdk::lang::RObject*)this->_methods._ref_this()); // RDClazzMethodInfoArray _methods 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _VarDefinition_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _VarDefinition_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _VarDefinition_interfaces[] =
{
  &_VarDefinition_super_acdk__lang__Object,
  &_VarDefinition_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* VarDefinition::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "VarDefinition", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _VarDefinition_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    VarDefinition::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_VarDefinition(VarDefinition::clazzInfo());

::acdk::lang::RClass
VarDefinition::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
VarDefinition::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fieldInfo._ref_this()); // RDClazzFieldInfo _fieldInfo 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_type._ref_this()); // RDClazzInfo _type 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _NamespaceDefinition_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NamespaceDefinition_super_SemanticElem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SemanticElem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NamespaceDefinition_interfaces[] =
{
  &_NamespaceDefinition_super_acdk__lang__Object,
  &_NamespaceDefinition_super_SemanticElem,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceDefinition::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NamespaceDefinition", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NamespaceDefinition_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NamespaceDefinition::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NamespaceDefinition(NamespaceDefinition::clazzInfo());

::acdk::lang::RClass
NamespaceDefinition::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NamespaceDefinition::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
}


} // namespace acdk
} // namespace aci


namespace acdk { 
namespace aci { 

::acdk::lang::dmi::ClazzSuperInfo _SymbolTable_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SymbolTable_interfaces[] =
{
  &_SymbolTable_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SymbolTable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SymbolTable", // name of class
  -1, // hashCode
  "acdk/aci", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SymbolTable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SymbolTable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SymbolTable(SymbolTable::clazzInfo());

::acdk::lang::RClass
SymbolTable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SymbolTable::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_classes._ref_this()); // RDClazzInfoArray _classes 
  fields.push_back((::acdk::lang::RObject*)this->_curMethod._ref_this()); // RDClazzMethodInfo _curMethod 
  fields.push_back((::acdk::lang::RObject*)this->_seeAlsoSemElements._ref_this()); // RSemanticElemArray _seeAlsoSemElements 
  fields.push_back((::acdk::lang::RObject*)this->_seeAlsoTypes._ref_this()); // acdk::lang::ref::RWeakReferenceArray _seeAlsoTypes 
  fields.push_back((::acdk::lang::RObject*)this->_seeAlsoVars._ref_this()); // acdk::lang::ref::RWeakReferenceArray _seeAlsoVars 
  fields.push_back((::acdk::lang::RObject*)this->_typeMap._ref_this()); // acdk::util::RHashMap _typeMap 
  fields.push_back((::acdk::lang::RObject*)this->_variables._ref_this()); // RVarDefinitionArray _variables 
}


} // namespace acdk
} // namespace aci

