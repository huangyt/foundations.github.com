// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../parser.h"
#include "../BlockCommentParseNode.h"
#include "../DecimalLiteralParseNode.h"
#include "../FloatLiteralParseNode.h"
#include "../IdentifierParseNode.h"
#include "../KeywordParseNode.h"
#include "../LineCommentParseNode.h"
#include "../LiteralParseNode.h"
#include "../ParseEnv.h"
#include "../ParseException.h"
#include "../ParseNode.h"
#include "../parser.h"
#include "../RegScanParseNode.h"
#include "../Scanner.h"
#include "../StringTerminalParseNode.h"
#include "../SyntaxNode.h"
#include "../SyntaxParseNode.h"
#include "../TerminalParseNode.h"
#include "../WhiteSpaceParseNode.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
BlockCommentParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RBlockCommentParseNode>(length);
}

//static
::acdk::lang::RObject
BlockCommentParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BlockCommentParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BlockCommentParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_BlockCommentParseNode__LRBlockCommentParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BlockCommentParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BlockCommentParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BlockCommentParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BlockCommentParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BlockCommentParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_isComment__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BlockCommentParseNode::isComment();
    else
      ret = This->isComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_isWhiteSpace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BlockCommentParseNode::isWhiteSpace();
    else
      ret = This->isWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode::registerParseNode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode::registerParseNode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_registerParseNode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode::registerParseNode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BlockCommentParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BlockCommentParseNode::scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BlockCommentParseNode_fields__begin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_begin, flags);
    else
      This->_begin = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BlockCommentParseNode_fields__end_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BlockCommentParseNode* This = dmi_cast<BlockCommentParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_end, flags);
    else
      This->_end = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BlockCommentParseNode_fields__begin = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_begin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_fields__begin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BlockCommentParseNode_fields__end = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_end", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_fields__end_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BlockCommentParseNode_fields[] = 
{
  &BlockCommentParseNode_fields__begin,
  &BlockCommentParseNode_fields__end,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__args[] = 
{
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_nodename,
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_start,
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BlockCommentParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BlockCommentParseNode::clazzInfo(), // return type
  "_0_BlockCommentParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_BlockCommentParseNode__LRBlockCommentParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_BlockCommentParseNode__LRBlockCommentParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_BlockCommentParseNode__LRBlockCommentParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BlockCommentParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BlockCommentParseNode::clazzInfo(), // return type
  "_1_BlockCommentParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_BlockCommentParseNode__LRBlockCommentParseNode__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_BlockCommentParseNode__LRBlockCommentParseNode__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_BlockCommentParseNode__LRBlockCommentParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__args[] = 
{
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_BlockCommentParseNode_INLRString__LRBlockCommentParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BlockCommentParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BlockCommentParseNode::clazzInfo(), // return type
  "_2_BlockCommentParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_BlockCommentParseNode_INLRString__LRBlockCommentParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__args[] = 
{
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__arg_nodename,
  &BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BlockCommentParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BlockCommentParseNode::clazzInfo(), // return type
  "_3_BlockCommentParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_5_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_isComment__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_isComment__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_isComment__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isComment", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_isComment__Z_args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_isComment__Z_exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_isComment__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_isWhiteSpace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_isWhiteSpace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_isWhiteSpace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_isWhiteSpace__Z_args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_isWhiteSpace__Z_exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_isWhiteSpace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_args[] = 
{
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_comp,
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_args[] = 
{
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_comp,
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_start,
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler_INLRString_INLRString__V_exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_args[] = 
{
  &BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_registerParseNode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_registerParseNode_INLRCompiler__V_exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_registerParseNode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BlockCommentParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scanNextFromSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_4_scanNextFromSource", // alternative name of method
  -1, // altlabelHashCode
  BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  BlockCommentParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  BlockCommentParseNode_MetainfoWrapper::BlockCommentParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BlockCommentParseNode_methods[] = 
{
  &BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString_INLRString__LRBlockCommentParseNode_,
  &BlockCommentParseNode_method_BlockCommentParseNode__LRBlockCommentParseNode_,
  &BlockCommentParseNode_method_BlockCommentParseNode_INLRString__LRBlockCommentParseNode_,
  &BlockCommentParseNode_method_BlockCommentParseNode_INLRString_INLRString__LRBlockCommentParseNode_,
  &BlockCommentParseNode_method_GetClass__L_acdk_lang_RClass_,
  &BlockCommentParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &BlockCommentParseNode_method_isComment__Z,
  &BlockCommentParseNode_method_isWhiteSpace__Z,
  &BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString__V,
  &BlockCommentParseNode_method_registerParseNode_INLRCompiler_INLRString_INLRString__V,
  &BlockCommentParseNode_method_registerParseNode_INLRCompiler__V,
  &BlockCommentParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  0
};


struct BlockCommentParseNode_MetaInfoInitializer
{  BlockCommentParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BlockCommentParseNode::clazzInfo();
    ci->fields =  _BlockCommentParseNode_fields;
    ci->methods =  _BlockCommentParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BlockCommentParseNode_MetaInfoInitializer BlockCommentParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
DecimalLiteralParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RDecimalLiteralParseNode>(length);
}

//static
::acdk::lang::RObject
DecimalLiteralParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DecimalLiteralParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_DecimalLiteralParseNode__LRDecimalLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalLiteralParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalLiteralParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DecimalLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DecimalLiteralParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DecimalLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DecimalLiteralParseNode* This = dmi_cast<DecimalLiteralParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DecimalLiteralParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DecimalLiteralParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__args[] = 
{
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_nodename,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_syntax,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_bindTo,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalLiteralParseNode::clazzInfo(), // return type
  "_0_DecimalLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode__LRDecimalLiteralParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode__LRDecimalLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_DecimalLiteralParseNode__LRDecimalLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalLiteralParseNode::clazzInfo(), // return type
  "_1_DecimalLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode__LRDecimalLiteralParseNode__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode__LRDecimalLiteralParseNode__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_DecimalLiteralParseNode__LRDecimalLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__args[] = 
{
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalLiteralParseNode::clazzInfo(), // return type
  "_2_DecimalLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__args[] = 
{
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__arg_nodename,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalLiteralParseNode::clazzInfo(), // return type
  "_3_DecimalLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__args[] = 
{
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_nodename,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_syntax,
  &DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__arg_bindTo,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DecimalLiteralParseNode::clazzInfo(), // return type
  "_4_DecimalLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DecimalLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_5_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  DecimalLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  DecimalLiteralParseNode_MetainfoWrapper::DecimalLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DecimalLiteralParseNode_methods[] = 
{
  &DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_IINLRString__LRDecimalLiteralParseNode_,
  &DecimalLiteralParseNode_method_DecimalLiteralParseNode__LRDecimalLiteralParseNode_,
  &DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString__LRDecimalLiteralParseNode_,
  &DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString__LRDecimalLiteralParseNode_,
  &DecimalLiteralParseNode_method_DecimalLiteralParseNode_INLRString_INLRString_I_LRDecimalLiteralParseNode_,
  &DecimalLiteralParseNode_method_GetClass__L_acdk_lang_RClass_,
  &DecimalLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  0
};


struct DecimalLiteralParseNode_MetaInfoInitializer
{  DecimalLiteralParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DecimalLiteralParseNode::clazzInfo();
    ci->fields =  _DecimalLiteralParseNode_fields;
    ci->methods =  _DecimalLiteralParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DecimalLiteralParseNode_MetaInfoInitializer DecimalLiteralParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
FloatLiteralParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RFloatLiteralParseNode>(length);
}

//static
::acdk::lang::RObject
FloatLiteralParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FloatLiteralParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FloatLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_FloatLiteralParseNode__LRFloatLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FloatLiteralParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FloatLiteralParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FloatLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FloatLiteralParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FloatLiteralParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FloatLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FloatLiteralParseNode* This = dmi_cast<FloatLiteralParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FloatLiteralParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FloatLiteralParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__args[] = 
{
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_nodename,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_syntax,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_bindTo,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FloatLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FloatLiteralParseNode::clazzInfo(), // return type
  "_0_FloatLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode__LRFloatLiteralParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode__LRFloatLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_FloatLiteralParseNode__LRFloatLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FloatLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FloatLiteralParseNode::clazzInfo(), // return type
  "_1_FloatLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_FloatLiteralParseNode__LRFloatLiteralParseNode__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_FloatLiteralParseNode__LRFloatLiteralParseNode__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_FloatLiteralParseNode__LRFloatLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__args[] = 
{
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FloatLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FloatLiteralParseNode::clazzInfo(), // return type
  "_2_FloatLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__args[] = 
{
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__arg_nodename,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FloatLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FloatLiteralParseNode::clazzInfo(), // return type
  "_3_FloatLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__args[] = 
{
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_nodename,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_syntax,
  &FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__arg_bindTo,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FloatLiteralParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FloatLiteralParseNode::clazzInfo(), // return type
  "_4_FloatLiteralParseNode", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FloatLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_5_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  FloatLiteralParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  FloatLiteralParseNode_MetainfoWrapper::FloatLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FloatLiteralParseNode_methods[] = 
{
  &FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_IINLRString__LRFloatLiteralParseNode_,
  &FloatLiteralParseNode_method_FloatLiteralParseNode__LRFloatLiteralParseNode_,
  &FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString__LRFloatLiteralParseNode_,
  &FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString__LRFloatLiteralParseNode_,
  &FloatLiteralParseNode_method_FloatLiteralParseNode_INLRString_INLRString_I_LRFloatLiteralParseNode_,
  &FloatLiteralParseNode_method_GetClass__L_acdk_lang_RClass_,
  &FloatLiteralParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  0
};


struct FloatLiteralParseNode_MetaInfoInitializer
{  FloatLiteralParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FloatLiteralParseNode::clazzInfo();
    ci->fields =  _FloatLiteralParseNode_fields;
    ci->methods =  _FloatLiteralParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FloatLiteralParseNode_MetaInfoInitializer FloatLiteralParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
IdentifierParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RIdentifierParseNode>(length);
}

//static
::acdk::lang::RObject
IdentifierParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IdentifierParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IdentifierParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_IdentifierParseNode__LRIdentifierParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentifierParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_createStandardAstNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierParseNode* This = dmi_cast<IdentifierParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IdentifierParseNode::createStandardAstNode();
    else
        ret = (::acdk::lang::RObject)This->createStandardAstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierParseNode* This = dmi_cast<IdentifierParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IdentifierParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_parse_INLRCompiler__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierParseNode* This = dmi_cast<IdentifierParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IdentifierParseNode::parse((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierParseNode_method_registerParseNode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierParseNode::registerParseNode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _IdentifierParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_IdentifierParseNode__LRIdentifierParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_IdentifierParseNode__LRIdentifierParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_IdentifierParseNode__LRIdentifierParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentifierParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentifierParseNode::clazzInfo(), // return type
  "_0_IdentifierParseNode", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_IdentifierParseNode__LRIdentifierParseNode__args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_IdentifierParseNode__LRIdentifierParseNode__exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_IdentifierParseNode__LRIdentifierParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_createStandardAstNode__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_createStandardAstNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_createStandardAstNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandardAstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_1_createStandardAstNode", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_createStandardAstNode__LRAstNode__args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_createStandardAstNode__LRAstNode__exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_createStandardAstNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_3_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__args[] = 
{
  &IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_parse_INLRCompiler__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_2_parse", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_parse_INLRCompiler__LRAstNode__exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_parse_INLRCompiler__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_args[] = 
{
  &IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierParseNode_method_registerParseNode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  IdentifierParseNode_methods_registerParseNode_INLRCompiler__V_exceptions, // the declared exceptions
  IdentifierParseNode_MetainfoWrapper::IdentifierParseNode_method_registerParseNode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IdentifierParseNode_methods[] = 
{
  &IdentifierParseNode_method_GetClass__L_acdk_lang_RClass_,
  &IdentifierParseNode_method_IdentifierParseNode__LRIdentifierParseNode_,
  &IdentifierParseNode_method_createStandardAstNode__LRAstNode_,
  &IdentifierParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &IdentifierParseNode_method_parse_INLRCompiler__LRAstNode_,
  &IdentifierParseNode_method_registerParseNode_INLRCompiler__V,
  0
};


struct IdentifierParseNode_MetaInfoInitializer
{  IdentifierParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IdentifierParseNode::clazzInfo();
    ci->fields =  _IdentifierParseNode_fields;
    ci->methods =  _IdentifierParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IdentifierParseNode_MetaInfoInitializer IdentifierParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
LineCommentParseNodeParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RLineCommentParseNodeParseNode>(length);
}

//static
::acdk::lang::RObject
LineCommentParseNodeParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LineCommentParseNodeParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LineCommentParseNodeParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LineCommentParseNodeParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LineCommentParseNodeParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LineCommentParseNodeParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LineCommentParseNodeParseNode* This = dmi_cast<LineCommentParseNodeParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LineCommentParseNodeParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_isComment__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LineCommentParseNodeParseNode* This = dmi_cast<LineCommentParseNodeParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LineCommentParseNodeParseNode::isComment();
    else
      ret = This->isComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_isWhiteSpace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LineCommentParseNodeParseNode* This = dmi_cast<LineCommentParseNodeParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LineCommentParseNodeParseNode::isWhiteSpace();
    else
      ret = This->isWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LineCommentParseNodeParseNode::registerParseNode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LineCommentParseNodeParseNode::registerParseNode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LineCommentParseNodeParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__args[] = 
{
  &LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__arg_nodename,
  &LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LineCommentParseNodeParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LineCommentParseNodeParseNode::clazzInfo(), // return type
  "_0_LineCommentParseNodeParseNode", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LineCommentParseNodeParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LineCommentParseNodeParseNode::clazzInfo(), // return type
  "_1_LineCommentParseNodeParseNode", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__args[] = 
{
  &LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LineCommentParseNodeParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LineCommentParseNodeParseNode::clazzInfo(), // return type
  "_2_LineCommentParseNodeParseNode", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_3_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_isComment__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_isComment__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_isComment__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isComment", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_isComment__Z_args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_isComment__Z_exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_isComment__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_isWhiteSpace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_isWhiteSpace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_isWhiteSpace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_isWhiteSpace__Z_args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_isWhiteSpace__Z_exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_isWhiteSpace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_args[] = 
{
  &LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_comp,
  &LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler_INLRString__V_exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_args[] = 
{
  &LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  LineCommentParseNodeParseNode_methods_registerParseNode_INLRCompiler__V_exceptions, // the declared exceptions
  LineCommentParseNodeParseNode_MetainfoWrapper::LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LineCommentParseNodeParseNode_methods[] = 
{
  &LineCommentParseNodeParseNode_method_GetClass__L_acdk_lang_RClass_,
  &LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString_INLRString__LRLineCommentParseNodeParseNode_,
  &LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode__LRLineCommentParseNodeParseNode_,
  &LineCommentParseNodeParseNode_method_LineCommentParseNodeParseNode_INLRString__LRLineCommentParseNodeParseNode_,
  &LineCommentParseNodeParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &LineCommentParseNodeParseNode_method_isComment__Z,
  &LineCommentParseNodeParseNode_method_isWhiteSpace__Z,
  &LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler_INLRString__V,
  &LineCommentParseNodeParseNode_method_registerParseNode_INLRCompiler__V,
  0
};


struct LineCommentParseNodeParseNode_MetaInfoInitializer
{  LineCommentParseNodeParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LineCommentParseNodeParseNode::clazzInfo();
    ci->fields =  _LineCommentParseNodeParseNode_fields;
    ci->methods =  _LineCommentParseNodeParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LineCommentParseNodeParseNode_MetaInfoInitializer LineCommentParseNodeParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
ParseEnv_create_array(int length)
{
  return new ObjectArrayImpl<RParseEnv>(length);
}

//static
::acdk::lang::RObject
ParseEnv_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParseEnv_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParseEnv::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_ParseEnv__LRParseEnv__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParseEnv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_addIgnoreToken_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::addIgnoreToken(args[0].getIntVar());
    else
        This->addIgnoreToken(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_addNotReducedRule_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::addNotReducedRule((RString)args[0].getObjectVar());
    else
        This->addNotReducedRule((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_addParseNode_INLRString_INLRParseNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::addParseNode((RString)args[0].getObjectVar(), (RParseNode)args[1].getObjectVar());
    else
        This->addParseNode((RString)args[0].getObjectVar(), (RParseNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_addParseNodes_INLRString_INLRParseNodeArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::addParseNodes((RString)args[0].getObjectVar(), (RParseNodeArray)args[1].getObjectVar());
    else
        This->addParseNodes((RString)args[0].getObjectVar(), (RParseNodeArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_addTerminal_INLRString_INLRTerminalParseNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::addTerminal((RString)args[0].getObjectVar(), (RTerminalParseNode)args[1].getObjectVar());
    else
        This->addTerminal((RString)args[0].getObjectVar(), (RTerminalParseNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_checkRules_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::checkRules((RCompiler)args[0].getObjectVar());
    else
        This->checkRules((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_getIgnoreTokens__LRintArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseEnv::getIgnoreTokens();
    else
        ret = (::acdk::lang::RObject)This->getIgnoreTokens();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_getParseNodes_INLRString__LRParseNodeArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseEnv::getParseNodes((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getParseNodes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_getSyntaxScannerProps__Lacdk_cfgscript_RProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseEnv::getSyntaxScannerProps();
    else
        ret = (::acdk::lang::RObject)This->getSyntaxScannerProps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_getTerminal_INLRString__LRTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseEnv::getTerminal((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTerminal((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_isIgnoreToken_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParseEnv::isIgnoreToken(args[0].getIntVar());
    else
      ret = This->isIgnoreToken(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_isKeyword_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParseEnv::isKeyword((RString)args[0].getObjectVar());
    else
      ret = This->isKeyword((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_notRecudeRole_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ParseEnv::notRecudeRole((RString)args[0].getObjectVar());
    else
      ret = This->notRecudeRole((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_popScope__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::popScope();
    else
        This->popScope();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseEnv_method_pushScope__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseEnv::pushScope();
    else
        This->pushScope();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseEnv_fields__currentParseFrame_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseEnv* This = dmi_cast<ParseEnv>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currentParseFrame, flags);
    else
      This->_currentParseFrame = (RParseFrame)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ParseEnv_fields__currentParseFrame = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currentParseFrame", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseFrame::clazzInfo(),
  ParseEnv_MetainfoWrapper::ParseEnv_fields__currentParseFrame_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParseEnv_fields[] = 
{
  &ParseEnv_fields__currentParseFrame,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParseEnv_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_ParseEnv__LRParseEnv__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_ParseEnv__LRParseEnv__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_ParseEnv__LRParseEnv_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseEnv::clazzInfo(), // return type
  "_0_ParseEnv", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_ParseEnv__LRParseEnv__args, // the arguments
  0, //arguments count
  ParseEnv_methods_ParseEnv__LRParseEnv__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_ParseEnv__LRParseEnv__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addIgnoreToken_I_V_arg_tk = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tk", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_addIgnoreToken_I_V_args[] = 
{
  &ParseEnv_methods_addIgnoreToken_I_V_arg_tk,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_addIgnoreToken_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_addIgnoreToken_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addIgnoreToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addIgnoreToken", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_addIgnoreToken_I_V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_addIgnoreToken_I_V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_addIgnoreToken_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addNotReducedRule_INLRString__V_arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_addNotReducedRule_INLRString__V_args[] = 
{
  &ParseEnv_methods_addNotReducedRule_INLRString__V_arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_addNotReducedRule_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_addNotReducedRule_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addNotReducedRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_addNotReducedRule", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_addNotReducedRule_INLRString__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_addNotReducedRule_INLRString__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_addNotReducedRule_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_args[] = 
{
  &ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_arg_rn,
  &ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_addParseNode_INLRString_INLRParseNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addParseNode", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_addParseNode_INLRString_INLRParseNode__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_addParseNode_INLRString_INLRParseNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_arg_pna = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pna", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNodeArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_args[] = 
{
  &ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_arg_rn,
  &ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_arg_pna,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_addParseNodes_INLRString_INLRParseNodeArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addParseNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addParseNodes", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_addParseNodes_INLRString_INLRParseNodeArray__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_addParseNodes_INLRString_INLRParseNodeArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_args[] = 
{
  &ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_arg_rn,
  &ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_addTerminal_INLRString_INLRTerminalParseNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_addTerminal", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_addTerminal_INLRString_INLRTerminalParseNode__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_addTerminal_INLRString_INLRTerminalParseNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_checkRules_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_checkRules_INLRCompiler__V_args[] = 
{
  &ParseEnv_methods_checkRules_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_checkRules_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_checkRules_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkRules", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_checkRules", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_checkRules_INLRCompiler__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_checkRules_INLRCompiler__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_checkRules_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_getIgnoreTokens__LRintArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_getIgnoreTokens__LRintArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_getIgnoreTokens__LRintArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIgnoreTokens", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(), // return type
  "_c_getIgnoreTokens", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_getIgnoreTokens__LRintArray__args, // the arguments
  0, //arguments count
  ParseEnv_methods_getIgnoreTokens__LRintArray__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_getIgnoreTokens__LRintArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__args[] = 
{
  &ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_getParseNodes_INLRString__LRParseNodeArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParseNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNodeArray::clazzInfo(), // return type
  "_5_getParseNodes", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__args, // the arguments
  0, //arguments count
  ParseEnv_methods_getParseNodes_INLRString__LRParseNodeArray__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_getParseNodes_INLRString__LRParseNodeArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_getSyntaxScannerProps__Lacdk_cfgscript_RProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_getSyntaxScannerProps__Lacdk_cfgscript_RProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_getSyntaxScannerProps__Lacdk_cfgscript_RProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntaxScannerProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::cfgscript::RProps::clazzInfo(), // return type
  "_b_getSyntaxScannerProps", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_getSyntaxScannerProps__Lacdk_cfgscript_RProps__args, // the arguments
  0, //arguments count
  ParseEnv_methods_getSyntaxScannerProps__Lacdk_cfgscript_RProps__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_getSyntaxScannerProps__Lacdk_cfgscript_RProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__args[] = 
{
  &ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_getTerminal_INLRString__LRTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo(), // return type
  "_9_getTerminal", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__args, // the arguments
  0, //arguments count
  ParseEnv_methods_getTerminal_INLRString__LRTerminalParseNode__exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_getTerminal_INLRString__LRTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_isIgnoreToken_I_Z_arg_tk = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tk", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_isIgnoreToken_I_Z_args[] = 
{
  &ParseEnv_methods_isIgnoreToken_I_Z_arg_tk,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_isIgnoreToken_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_isIgnoreToken_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isIgnoreToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isIgnoreToken", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_isIgnoreToken_I_Z_args, // the arguments
  0, //arguments count
  ParseEnv_methods_isIgnoreToken_I_Z_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_isIgnoreToken_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_isKeyword_INLRString__Z_arg_kw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "kw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_isKeyword_INLRString__Z_args[] = 
{
  &ParseEnv_methods_isKeyword_INLRString__Z_arg_kw,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_isKeyword_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_isKeyword_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isKeyword", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isKeyword", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_isKeyword_INLRString__Z_args, // the arguments
  0, //arguments count
  ParseEnv_methods_isKeyword_INLRString__Z_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_isKeyword_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseEnv_methods_notRecudeRole_INLRString__Z_arg_rn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_notRecudeRole_INLRString__Z_args[] = 
{
  &ParseEnv_methods_notRecudeRole_INLRString__Z_arg_rn,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_notRecudeRole_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_notRecudeRole_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notRecudeRole", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_notRecudeRole", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_notRecudeRole_INLRString__Z_args, // the arguments
  0, //arguments count
  ParseEnv_methods_notRecudeRole_INLRString__Z_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_notRecudeRole_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_popScope__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_popScope__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_popScope__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popScope", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_popScope", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_popScope__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_popScope__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_popScope__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseEnv_methods_pushScope__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv_methods_pushScope__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseEnv_method_pushScope__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushScope", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_pushScope", // alternative name of method
  -1, // altlabelHashCode
  ParseEnv_methods_pushScope__V_args, // the arguments
  0, //arguments count
  ParseEnv_methods_pushScope__V_exceptions, // the declared exceptions
  ParseEnv_MetainfoWrapper::ParseEnv_method_pushScope__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParseEnv_methods[] = 
{
  &ParseEnv_method_GetClass__L_acdk_lang_RClass_,
  &ParseEnv_method_ParseEnv__LRParseEnv_,
  &ParseEnv_method_addIgnoreToken_I_V,
  &ParseEnv_method_addNotReducedRule_INLRString__V,
  &ParseEnv_method_addParseNode_INLRString_INLRParseNode__V,
  &ParseEnv_method_addParseNodes_INLRString_INLRParseNodeArray__V,
  &ParseEnv_method_addTerminal_INLRString_INLRTerminalParseNode__V,
  &ParseEnv_method_checkRules_INLRCompiler__V,
  &ParseEnv_method_getIgnoreTokens__LRintArray_,
  &ParseEnv_method_getParseNodes_INLRString__LRParseNodeArray_,
  &ParseEnv_method_getSyntaxScannerProps__Lacdk_cfgscript_RProps_,
  &ParseEnv_method_getTerminal_INLRString__LRTerminalParseNode_,
  &ParseEnv_method_isIgnoreToken_I_Z,
  &ParseEnv_method_isKeyword_INLRString__Z,
  &ParseEnv_method_notRecudeRole_INLRString__Z,
  &ParseEnv_method_popScope__V,
  &ParseEnv_method_pushScope__V,
  0
};


struct ParseEnv_MetaInfoInitializer
{  ParseEnv_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParseEnv::clazzInfo();
    ci->fields =  _ParseEnv_fields;
    ci->methods =  _ParseEnv_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParseEnv_MetaInfoInitializer ParseEnv_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
ParseException_create_array(int length)
{
  return new ObjectArrayImpl<RParseException>(length);
}

//static
::acdk::lang::RObject
ParseException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParseException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParseException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ParseException((RString)args[0].getObjectVar(), (RParseNode)args[1].getObjectVar(), (acdk::aci::util::RCodeLocation)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseException* This = dmi_cast<ParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseException_fields__codeLocation_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseException* This = dmi_cast<ParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_codeLocation, flags);
    else
      This->_codeLocation = (acdk::aci::util::RCodeLocation)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseException_fields__pNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseException* This = dmi_cast<ParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pNode, flags);
    else
      This->_pNode = (RParseNode)var.getObjectVar();
    return fieldinf;
  }
};


void ThrowException_ParseException(IN(::acdk::lang::RThrowable) ex)
{
  throw RParseException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo ParseException_fields__codeLocation = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_codeLocation", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo(),
  ParseException_MetainfoWrapper::ParseException_fields__codeLocation_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParseException_fields__pNode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo(),
  ParseException_MetainfoWrapper::ParseException_fields__pNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParseException_fields[] = 
{
  &ParseException_fields__codeLocation,
  &ParseException_fields__pNode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParseException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_pnode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pnode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__args[] = 
{
  &ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_text,
  &ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_pnode,
  &ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseException::clazzInfo(), // return type
  "_0_ParseException", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__args, // the arguments
  0, //arguments count
  ParseException_methods_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getMessage", // alternative name of method
  -1, // altlabelHashCode
  ParseException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  ParseException_methods_getMessage__LRString__exceptions, // the declared exceptions
  ParseException_MetainfoWrapper::ParseException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParseException_methods[] = 
{
  &ParseException_method_GetClass__L_acdk_lang_RClass_,
  &ParseException_method_ParseException_INLRString_INLRParseNode_INLacdk_aci_util_RCodeLocation__LRParseException_,
  &ParseException_method_getMessage__LRString_,
  0
};


struct ParseException_MetaInfoInitializer
{  ParseException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParseException::clazzInfo();
    ci->fields =  _ParseException_fields;
    ci->methods =  _ParseException_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParseException_MetaInfoInitializer ParseException_MetaInfoInitializer_staticinstance__;


struct ParseException_clazzInfo_ClazzAttributesResInitializer1
{
  ParseException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ParseException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ParseException));
  }
};

ParseException_clazzInfo_ClazzAttributesResInitializer1 ParseException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

using namespace ::acdk::aci;
using namespace ::acdk::aci::ast;

//static
::acdk::lang::RObject
ParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RParseNode>(length);
}

//static
::acdk::lang::RObject
ParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_createStandardAstNode__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    ret = (::acdk::lang::RObject)This->createStandardAstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_getNodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseNode::getNodeName();
    else
        ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_getSyntax__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseNode::getSyntax();
    else
        ret = (::acdk::lang::RObject)This->getSyntax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_onRegister_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ParseNode::onRegister((RCompiler)args[0].getObjectVar());
    else
        This->onRegister((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_parse_INLRCompiler__LRAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    This->printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ParseNode_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ParseNode::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseNode_fields__helpText_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_helpText, flags);
    else
      This->_helpText = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ParseNode_fields__nodeName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ParseNode* This = dmi_cast<ParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nodeName, flags);
    else
      This->_nodeName = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ParseNode_fields__helpText = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_helpText", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ParseNode_MetainfoWrapper::ParseNode_fields__helpText_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ParseNode_fields__nodeName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nodeName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ParseNode_MetainfoWrapper::ParseNode_fields__nodeName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ParseNode_fields[] = 
{
  &ParseNode_fields__helpText,
  &ParseNode_fields__nodeName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__arg_helpText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "helpText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__args[] = 
{
  &ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__arg_nodeName,
  &ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__arg_helpText,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_ParseNode_INLRString_INLRString__LRParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseNode::clazzInfo(), // return type
  "_0_ParseNode", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__args, // the arguments
  0, //arguments count
  ParseNode_methods_ParseNode_INLRString_INLRString__LRParseNode__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_ParseNode_INLRString__LRParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_ParseNode_INLRString__LRParseNode__args[] = 
{
  &ParseNode_methods_ParseNode_INLRString__LRParseNode__arg_nodeName,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_ParseNode_INLRString__LRParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_ParseNode_INLRString__LRParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ParseNode::clazzInfo(), // return type
  "_1_ParseNode", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_ParseNode_INLRString__LRParseNode__args, // the arguments
  0, //arguments count
  ParseNode_methods_ParseNode_INLRString__LRParseNode__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_createStandardAstNode__LRAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_createStandardAstNode__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_createStandardAstNode__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandardAstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_4_createStandardAstNode", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_createStandardAstNode__LRAstNode__args, // the arguments
  0, //arguments count
  ParseNode_methods_createStandardAstNode__LRAstNode__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_createStandardAstNode__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_getNodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_getNodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_getNodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_getNodeName__LRString__args, // the arguments
  0, //arguments count
  ParseNode_methods_getNodeName__LRString__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_getNodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_getSyntax__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_getSyntax__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_getSyntax__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getSyntax", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_getSyntax__LRString__args, // the arguments
  0, //arguments count
  ParseNode_methods_getSyntax__LRString__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_getSyntax__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_onRegister_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_onRegister_INLRCompiler__V_args[] = 
{
  &ParseNode_methods_onRegister_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_onRegister_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_onRegister_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onRegister", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_onRegister", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_onRegister_INLRCompiler__V_args, // the arguments
  0, //arguments count
  ParseNode_methods_onRegister_INLRCompiler__V_exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_onRegister_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_parse_INLRCompiler__LRAstNode__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_parse_INLRCompiler__LRAstNode__args[] = 
{
  &ParseNode_methods_parse_INLRCompiler__LRAstNode__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_parse_INLRCompiler__LRAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_parse_INLRCompiler__LRAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAstNode::clazzInfo(), // return type
  "_3_parse", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_parse_INLRCompiler__LRAstNode__args, // the arguments
  0, //arguments count
  ParseNode_methods_parse_INLRCompiler__LRAstNode__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_parse_INLRCompiler__LRAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args[] = 
{
  &ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_printSyntax", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  ParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ParseNode_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ParseNode_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_toString", // alternative name of method
  -1, // altlabelHashCode
  ParseNode_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ParseNode_methods_toString__LRString__exceptions, // the declared exceptions
  ParseNode_MetainfoWrapper::ParseNode_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ParseNode_methods[] = 
{
  &ParseNode_method_GetClass__L_acdk_lang_RClass_,
  &ParseNode_method_ParseNode_INLRString_INLRString__LRParseNode_,
  &ParseNode_method_ParseNode_INLRString__LRParseNode_,
  &ParseNode_method_createStandardAstNode__LRAstNode_,
  &ParseNode_method_getNodeName__LRString_,
  &ParseNode_method_getSyntax__LRString_,
  &ParseNode_method_onRegister_INLRCompiler__V,
  &ParseNode_method_parse_INLRCompiler__LRAstNode_,
  &ParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V,
  &ParseNode_method_toString__LRString_,
  0
};


struct ParseNode_MetaInfoInitializer
{  ParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ParseNode::clazzInfo();
    ci->fields =  _ParseNode_fields;
    ci->methods =  _ParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ParseNode_MetaInfoInitializer ParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
RegScanParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RRegScanParseNode>(length);
}

//static
::acdk::lang::RObject
RegScanParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RegScanParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RegScanParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RegScanParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RegScanParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RegScanParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_getSyntax__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegScanParseNode::getSyntax();
    else
        ret = (::acdk::lang::RObject)This->getSyntax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RegScanParseNode::scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RegScanParseNode_method_setScannerSyntax_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RegScanParseNode::setScannerSyntax((RString)args[0].getObjectVar());
    else
        This->setScannerSyntax((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RegScanParseNode_fields__bindTo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bindTo, flags);
    else
      This->_bindTo = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RegScanParseNode_fields__regExp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_regExp, flags);
    else
      This->_regExp = (acdk::text::RRegExp)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RegScanParseNode_fields__syntax_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RegScanParseNode* This = dmi_cast<RegScanParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_syntax, flags);
    else
      This->_syntax = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RegScanParseNode_fields__bindTo = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bindTo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_fields__bindTo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RegScanParseNode_fields__regExp = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_regExp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::text::RRegExp::clazzInfo(),
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_fields__regExp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RegScanParseNode_fields__syntax = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_syntax", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_fields__syntax_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RegScanParseNode_fields[] = 
{
  &RegScanParseNode_fields__bindTo,
  &RegScanParseNode_fields__regExp,
  &RegScanParseNode_fields__syntax,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_regExpSyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "regExpSyntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__args[] = 
{
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_nodename,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_regExpSyntax,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_bindTo,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RegScanParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegScanParseNode::clazzInfo(), // return type
  "_0_RegScanParseNode", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__arg_regExpSyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "regExpSyntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__args[] = 
{
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__arg_nodename,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__arg_regExpSyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RegScanParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegScanParseNode::clazzInfo(), // return type
  "_1_RegScanParseNode", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_regExpSyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "regExpSyntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_bindTo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bindTo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__args[] = 
{
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_nodename,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_regExpSyntax,
  &RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__arg_bindTo,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RegScanParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RegScanParseNode::clazzInfo(), // return type
  "_2_RegScanParseNode", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_getSyntax__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_getSyntax__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_getSyntax__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getSyntax", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_getSyntax__LRString__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_getSyntax__LRString__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_getSyntax__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__args[] = 
{
  &RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_input,
  &RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scanNextFromSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminal::clazzInfo(), // return type
  "_3_scanNextFromSource", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RegScanParseNode_methods_setScannerSyntax_INLRString__V_arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RegScanParseNode_methods_setScannerSyntax_INLRString__V_args[] = 
{
  &RegScanParseNode_methods_setScannerSyntax_INLRString__V_arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode_methods_setScannerSyntax_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RegScanParseNode_method_setScannerSyntax_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScannerSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setScannerSyntax", // alternative name of method
  -1, // altlabelHashCode
  RegScanParseNode_methods_setScannerSyntax_INLRString__V_args, // the arguments
  0, //arguments count
  RegScanParseNode_methods_setScannerSyntax_INLRString__V_exceptions, // the declared exceptions
  RegScanParseNode_MetainfoWrapper::RegScanParseNode_method_setScannerSyntax_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RegScanParseNode_methods[] = 
{
  &RegScanParseNode_method_GetClass__L_acdk_lang_RClass_,
  &RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_IINLRString__LRRegScanParseNode_,
  &RegScanParseNode_method_RegScanParseNode_INLRString_INLRString__LRRegScanParseNode_,
  &RegScanParseNode_method_RegScanParseNode_INLRString_INLRString_I_LRRegScanParseNode_,
  &RegScanParseNode_method_getSyntax__LRString_,
  &RegScanParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal_,
  &RegScanParseNode_method_setScannerSyntax_INLRString__V,
  0
};


struct RegScanParseNode_MetaInfoInitializer
{  RegScanParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RegScanParseNode::clazzInfo();
    ci->fields =  _RegScanParseNode_fields;
    ci->methods =  _RegScanParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RegScanParseNode_MetaInfoInitializer RegScanParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
StringTerminalParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RStringTerminalParseNode>(length);
}

//static
::acdk::lang::RObject
StringTerminalParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringTerminalParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTerminalParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringTerminalParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTerminalParseNode_method_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTerminalParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTerminalParseNode_method_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTerminalParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTerminalParseNode* This = dmi_cast<StringTerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringTerminalParseNode::scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StringTerminalParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTerminalParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTerminalParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTerminalParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringTerminalParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringTerminalParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringTerminalParseNode_MetainfoWrapper::StringTerminalParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__args[] = 
{
  &StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__arg_nodename,
  &StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTerminalParseNode_method_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTerminalParseNode::clazzInfo(), // return type
  "_0_StringTerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__args, // the arguments
  0, //arguments count
  StringTerminalParseNode_methods_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__exceptions, // the declared exceptions
  StringTerminalParseNode_MetainfoWrapper::StringTerminalParseNode_method_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__args[] = 
{
  &StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTerminalParseNode_method_StringTerminalParseNode_INLRString__LRStringTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTerminalParseNode::clazzInfo(), // return type
  "_1_StringTerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__args, // the arguments
  0, //arguments count
  StringTerminalParseNode_methods_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__exceptions, // the declared exceptions
  StringTerminalParseNode_MetainfoWrapper::StringTerminalParseNode_method_StringTerminalParseNode_INLRString__LRStringTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__args[] = 
{
  &StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_input,
  &StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scanNextFromSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminal::clazzInfo(), // return type
  "_2_scanNextFromSource", // alternative name of method
  -1, // altlabelHashCode
  StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__args, // the arguments
  0, //arguments count
  StringTerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__exceptions, // the declared exceptions
  StringTerminalParseNode_MetainfoWrapper::StringTerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringTerminalParseNode_methods[] = 
{
  &StringTerminalParseNode_method_GetClass__L_acdk_lang_RClass_,
  &StringTerminalParseNode_method_StringTerminalParseNode_INLRString_INLRString__LRStringTerminalParseNode_,
  &StringTerminalParseNode_method_StringTerminalParseNode_INLRString__LRStringTerminalParseNode_,
  &StringTerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__LRTerminal_,
  0
};


struct StringTerminalParseNode_MetaInfoInitializer
{  StringTerminalParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringTerminalParseNode::clazzInfo();
    ci->fields =  _StringTerminalParseNode_fields;
    ci->methods =  _StringTerminalParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringTerminalParseNode_MetaInfoInitializer StringTerminalParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
SyntaxNode_create_array(int length)
{
  return new ObjectArrayImpl<RSyntaxNode>(length);
}

//static
::acdk::lang::RObject
SyntaxNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SyntaxNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SyntaxNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_back__LRSyntaxNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxNode::back();
    else
        ret = (::acdk::lang::RObject)This->back();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_checkRules_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxNode::checkRules((RCompiler)args[0].getObjectVar());
    else
        This->checkRules((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_pop_back__LRSyntaxNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxNode::pop_back();
    else
        ret = (::acdk::lang::RObject)This->pop_back();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_push_back_INLRSyntaxNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxNode::push_back((RSyntaxNode)args[0].getObjectVar());
    else
        This->push_back((RSyntaxNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    ret = (::acdk::lang::RObject)This->scan((RCompiler)args[0].getObjectVar(), (acdk::aci::ast::RAstNode)args[1].getObjectVar(), (acdk::aci::ast::RAstNodeArray)args[2].getObjectVar(), (RParseNode)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_toName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SyntaxNode::toName((SyntaxType)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxNode_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxNode::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxNode_fields_childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->childs, flags);
    else
      This->childs = (RSyntaxNodeArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxNode_fields_flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->flags, flags);
    else
      This->flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxNode_fields_syntaxType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxNode* This = dmi_cast<SyntaxNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->syntaxType), flags);
    else
      This->syntaxType = (SyntaxType)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxNode_fields_childs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNodeArray::clazzInfo(),
  SyntaxNode_MetainfoWrapper::SyntaxNode_fields_childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxNode_fields_flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SyntaxNode_MetainfoWrapper::SyntaxNode_fields_flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxNode_fields_syntaxType = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "syntaxType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SyntaxNode_MetainfoWrapper::SyntaxNode_fields_syntaxType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SyntaxNode_fields[] = 
{
  &SyntaxNode_fields_childs,
  &SyntaxNode_fields_flags,
  &SyntaxNode_fields_syntaxType,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__arg_tp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__args[] = 
{
  &SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__arg_tp,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_SyntaxNode_I_LRSyntaxNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxNode::clazzInfo(), // return type
  "_0_SyntaxNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_back__LRSyntaxNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_back__LRSyntaxNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_back__LRSyntaxNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "back", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo(), // return type
  "_1_back", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_back__LRSyntaxNode__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_back__LRSyntaxNode__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_back__LRSyntaxNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_checkRules_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_checkRules_INLRCompiler__V_args[] = 
{
  &SyntaxNode_methods_checkRules_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_checkRules_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_checkRules_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkRules", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_checkRules", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_checkRules_INLRCompiler__V_args, // the arguments
  0, //arguments count
  SyntaxNode_methods_checkRules_INLRCompiler__V_exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_checkRules_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_pop_back__LRSyntaxNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_pop_back__LRSyntaxNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_pop_back__LRSyntaxNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop_back", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo(), // return type
  "_2_pop_back", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_pop_back__LRSyntaxNode__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_pop_back__LRSyntaxNode__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_pop_back__LRSyntaxNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_push_back_INLRSyntaxNode__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_push_back_INLRSyntaxNode__V_args[] = 
{
  &SyntaxNode_methods_push_back_INLRSyntaxNode__V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_push_back_INLRSyntaxNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_push_back_INLRSyntaxNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push_back", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_push_back", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_push_back_INLRSyntaxNode__V_args, // the arguments
  0, //arguments count
  SyntaxNode_methods_push_back_INLRSyntaxNode__V_exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_push_back_INLRSyntaxNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_siblings = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "siblings", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNodeArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_pn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__args[] = 
{
  &SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_comp,
  &SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_parent,
  &SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_siblings,
  &SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__arg_pn,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scan", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNodeArray::clazzInfo(), // return type
  "_7_scan", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxNode_methods_toName_I_LRString__arg_tp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_toName_I_LRString__args[] = 
{
  &SyntaxNode_methods_toName_I_LRString__arg_tp,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_toName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_toName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toName", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_toName_I_LRString__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_toName_I_LRString__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_toName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxNode_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxNode_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  SyntaxNode_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SyntaxNode_methods_toString__LRString__exceptions, // the declared exceptions
  SyntaxNode_MetainfoWrapper::SyntaxNode_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SyntaxNode_methods[] = 
{
  &SyntaxNode_method_GetClass__L_acdk_lang_RClass_,
  &SyntaxNode_method_SyntaxNode_I_LRSyntaxNode_,
  &SyntaxNode_method_back__LRSyntaxNode_,
  &SyntaxNode_method_checkRules_INLRCompiler__V,
  &SyntaxNode_method_pop_back__LRSyntaxNode_,
  &SyntaxNode_method_push_back_INLRSyntaxNode__V,
  &SyntaxNode_method_scan_INLRCompiler_INLacdk_aci_ast_RAstNode_INLacdk_aci_ast_RAstNodeArray_INLRParseNode__Lacdk_aci_ast_RAstNodeArray_,
  &SyntaxNode_method_toName_I_LRString_,
  &SyntaxNode_method_toString__LRString_,
  0
};


struct SyntaxNode_MetaInfoInitializer
{  SyntaxNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SyntaxNode::clazzInfo();
    ci->fields =  _SyntaxNode_fields;
    ci->methods =  _SyntaxNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SyntaxNode_MetaInfoInitializer SyntaxNode_MetaInfoInitializer_staticinstance__;


struct SyntaxNode_clazzInfo_ClazzAttributesResInitializer2
{
  SyntaxNode_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SyntaxNode_methods_SyntaxNode_I_LRSyntaxNode__arg_tp, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SyntaxTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SyntaxNode_methods_toName_I_LRString__arg_tp, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SyntaxTypeMetaInf::GetEnumInfo()));
  }
};

SyntaxNode_clazzInfo_ClazzAttributesResInitializer2 SyntaxNode_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
SyntaxParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RSyntaxParseNode>(length);
}

//static
::acdk::lang::RObject
SyntaxParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SyntaxParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SyntaxParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RSyntaxNode)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RSyntaxNode)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SyntaxParseNode((RString)args[0].getObjectVar(), (RSyntaxNode)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method__parseToTree__LRSyntaxNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::_parseToTree();
    else
        ret = (::acdk::lang::RObject)This->_parseToTree();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_checkRules_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxParseNode::checkRules((RCompiler)args[0].getObjectVar());
    else
        This->checkRules((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::createStandardAstNode();
    else
        ret = (::acdk::lang::RObject)This->createStandardAstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_getNodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::getNodeName();
    else
        ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_getSyntax__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::getSyntax();
    else
        ret = (::acdk::lang::RObject)This->getSyntax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_getSyntaxTree__LRSyntaxNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::getSyntaxTree();
    else
        ret = (::acdk::lang::RObject)This->getSyntaxTree();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_onRegister_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxParseNode::onRegister((RCompiler)args[0].getObjectVar());
    else
        This->onRegister((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::parse((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::parseSyntax((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseSyntax((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode::parseSyntaxText((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode::parseSyntaxText((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxParseNode::printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_setSyntax_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SyntaxParseNode::setSyntax((RString)args[0].getObjectVar());
    else
        This->setSyntax((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SyntaxParseNode_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SyntaxParseNode::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxParseNode_fields__saveRule_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_saveRule, flags);
    else
      This->_saveRule = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxParseNode_fields__syntax_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_syntax, flags);
    else
      This->_syntax = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxParseNode_fields__syntaxTree_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_syntaxTree, flags);
    else
      This->_syntaxTree = (RSyntaxNode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SyntaxParseNode_fields__throwOnFail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SyntaxParseNode* This = dmi_cast<SyntaxParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_throwOnFail, flags);
    else
      This->_throwOnFail = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxParseNode_fields__saveRule = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_saveRule", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_fields__saveRule_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxParseNode_fields__syntax = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_syntax", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_fields__syntax_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxParseNode_fields__syntaxTree = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_syntaxTree", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo(),
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_fields__syntaxTree_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SyntaxParseNode_fields__throwOnFail = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_throwOnFail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_fields__throwOnFail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SyntaxParseNode_fields[] = 
{
  &SyntaxParseNode_fields__saveRule,
  &SyntaxParseNode_fields__syntax,
  &SyntaxParseNode_fields__syntaxTree,
  &SyntaxParseNode_fields__throwOnFail,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_k_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_helpText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "helpText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_saveRule = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "saveRule", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_syntax,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_helpText,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__arg_saveRule,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_0_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_1_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_helpText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "helpText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_syntax,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__arg_helpText,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_2_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_sn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_helpText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "helpText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_saveRule = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "saveRule", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_sn,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_syntax,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_helpText,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__arg_saveRule,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_3_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_sn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_sn,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_4_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_sn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_helpText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "helpText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__args[] = 
{
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_nodeName,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_sn,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_syntax,
  &SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__arg_helpText,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SyntaxParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxParseNode::clazzInfo(), // return type
  "_5_SyntaxParseNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods__parseToTree__LRSyntaxNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods__parseToTree__LRSyntaxNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method__parseToTree__LRSyntaxNode_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_parseToTree", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo(), // return type
  "_i__parseToTree", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods__parseToTree__LRSyntaxNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods__parseToTree__LRSyntaxNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method__parseToTree__LRSyntaxNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_checkRules_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_checkRules_INLRCompiler__V_args[] = 
{
  &SyntaxParseNode_methods_checkRules_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_checkRules_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_checkRules_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkRules", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_checkRules", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_checkRules_INLRCompiler__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_checkRules_INLRCompiler__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_checkRules_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandardAstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo(), // return type
  "_8_createStandardAstNode", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_getNodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_getNodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_getNodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_getNodeName__LRString__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_getNodeName__LRString__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_getNodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_getSyntax__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_getSyntax__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_getSyntax__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getSyntax", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_getSyntax__LRString__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_getSyntax__LRString__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_getSyntax__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_getSyntaxTree__LRSyntaxNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_getSyntaxTree__LRSyntaxNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_getSyntaxTree__LRSyntaxNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSyntaxTree", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSyntaxNode::clazzInfo(), // return type
  "_h_getSyntaxTree", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_getSyntaxTree__LRSyntaxNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_getSyntaxTree__LRSyntaxNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_getSyntaxTree__LRSyntaxNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_onRegister_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_onRegister_INLRCompiler__V_args[] = 
{
  &SyntaxParseNode_methods_onRegister_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_onRegister_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_onRegister_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onRegister", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_onRegister", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_onRegister_INLRCompiler__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_onRegister_INLRCompiler__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_onRegister_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__args[] = 
{
  &SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo(), // return type
  "_7_parse", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__args[] = 
{
  &SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo(), // return type
  "_j_parseSyntax", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_inputFn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "inputFn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_args[] = 
{
  &SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_comp,
  &SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_input,
  &SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_arg_inputFn,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseSyntaxText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_parseSyntaxText", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_args[] = 
{
  &SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_arg_comp,
  &SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseSyntaxText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_parseSyntaxText", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_parseSyntaxText_INLRCompiler_INLRString__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args[] = 
{
  &SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_printSyntax", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SyntaxParseNode_methods_setSyntax_INLRString__V_arg_syntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "syntax", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_setSyntax_INLRString__V_args[] = 
{
  &SyntaxParseNode_methods_setSyntax_INLRString__V_arg_syntax,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_setSyntax_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_setSyntax_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setSyntax", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_setSyntax_INLRString__V_args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_setSyntax_INLRString__V_exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_setSyntax_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SyntaxParseNode_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SyntaxParseNode_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toString", // alternative name of method
  -1, // altlabelHashCode
  SyntaxParseNode_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SyntaxParseNode_methods_toString__LRString__exceptions, // the declared exceptions
  SyntaxParseNode_MetainfoWrapper::SyntaxParseNode_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SyntaxParseNode_methods[] = 
{
  &SyntaxParseNode_method_GetClass__L_acdk_lang_RClass_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString_Z_LRSyntaxParseNode_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString__LRSyntaxParseNode_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRString_INLRString__LRSyntaxParseNode_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString_Z_LRSyntaxParseNode_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString__LRSyntaxParseNode_,
  &SyntaxParseNode_method_SyntaxParseNode_INLRString_INLRSyntaxNode_INLRString_INLRString__LRSyntaxParseNode_,
  &SyntaxParseNode_method__parseToTree__LRSyntaxNode_,
  &SyntaxParseNode_method_checkRules_INLRCompiler__V,
  &SyntaxParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode_,
  &SyntaxParseNode_method_getNodeName__LRString_,
  &SyntaxParseNode_method_getSyntax__LRString_,
  &SyntaxParseNode_method_getSyntaxTree__LRSyntaxNode_,
  &SyntaxParseNode_method_onRegister_INLRCompiler__V,
  &SyntaxParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode_,
  &SyntaxParseNode_method_parseSyntax_INLRCompiler__Lacdk_aci_ast_RAstNode_,
  &SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString_INLRString__V,
  &SyntaxParseNode_method_parseSyntaxText_INLRCompiler_INLRString__V,
  &SyntaxParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V,
  &SyntaxParseNode_method_setSyntax_INLRString__V,
  &SyntaxParseNode_method_toString__LRString_,
  0
};


struct SyntaxParseNode_MetaInfoInitializer
{  SyntaxParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SyntaxParseNode::clazzInfo();
    ci->fields =  _SyntaxParseNode_fields;
    ci->methods =  _SyntaxParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SyntaxParseNode_MetaInfoInitializer SyntaxParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
TerminalParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RTerminalParseNode>(length);
}

//static
::acdk::lang::RObject
TerminalParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TerminalParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TerminalParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_TerminalParseNode__LRTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TerminalParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TerminalParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_TerminalParseNode_INLRString__LRTerminalParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TerminalParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_compareTo_INLRTerminalParseNode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::compareTo((RTerminalParseNode)args[0].getObjectVar());
    else
      ret = This->compareTo((RTerminalParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::compareTo((RObject)args[0].getObjectVar());
    else
      ret = This->compareTo((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TerminalParseNode::createStandardAstNode();
    else
        ret = (::acdk::lang::RObject)This->createStandardAstNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TerminalParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_getScannerPrio__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::getScannerPrio();
    else
      ret = This->getScannerPrio();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_getScannerTokenId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::getScannerTokenId();
    else
      ret = This->getScannerTokenId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_isComment__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::isComment();
    else
      ret = This->isComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_isWhiteSpace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TerminalParseNode::isWhiteSpace();
    else
      ret = This->isWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TerminalParseNode::parse((RCompiler)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TerminalParseNode::printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printSyntax((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TerminalParseNode::scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->scanNextFromSource((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_setScannerPrio_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TerminalParseNode::setScannerPrio(args[0].getIntVar());
    else
        This->setScannerPrio(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TerminalParseNode_method_setScannerTokenId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TerminalParseNode::setScannerTokenId(args[0].getIntVar());
    else
        This->setScannerTokenId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TerminalParseNode_fields__scannerPrio_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scannerPrio, flags);
    else
      This->_scannerPrio = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TerminalParseNode_fields__tk_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TerminalParseNode* This = dmi_cast<TerminalParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tk, flags);
    else
      This->_tk = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TerminalParseNode_fields__scannerPrio = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scannerPrio", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_fields__scannerPrio_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TerminalParseNode_fields__tk = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tk", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_fields__tk_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TerminalParseNode_fields[] = 
{
  &TerminalParseNode_fields__scannerPrio,
  &TerminalParseNode_fields__tk,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_TerminalParseNode__LRTerminalParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_TerminalParseNode__LRTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_TerminalParseNode__LRTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TerminalParseNode::clazzInfo(), // return type
  "_0_TerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_TerminalParseNode__LRTerminalParseNode__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_TerminalParseNode__LRTerminalParseNode__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_TerminalParseNode__LRTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__args[] = 
{
  &TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__arg_nodename,
  &TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TerminalParseNode::clazzInfo(), // return type
  "_1_TerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__args[] = 
{
  &TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_TerminalParseNode_INLRString__LRTerminalParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TerminalParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TerminalParseNode::clazzInfo(), // return type
  "_2_TerminalParseNode", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_TerminalParseNode_INLRString__LRTerminalParseNode__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_TerminalParseNode_INLRString__LRTerminalParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTerminalParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_args[] = 
{
  &TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_compareTo_INLRTerminalParseNode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_compareTo", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_compareTo_INLRTerminalParseNode__I_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_compareTo_INLRTerminalParseNode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_compareTo_INLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_compareTo_INLRObject__I_args[] = 
{
  &TerminalParseNode_methods_compareTo_INLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_compareTo", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandardAstNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo(), // return type
  "_7_createStandardAstNode", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_createStandardAstNode__Lacdk_aci_ast_RAstNode__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_8_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_getScannerPrio__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_getScannerPrio__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_getScannerPrio__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScannerPrio", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getScannerPrio", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_getScannerPrio__I_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_getScannerPrio__I_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_getScannerPrio__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_getScannerTokenId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_getScannerTokenId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_getScannerTokenId__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScannerTokenId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getScannerTokenId", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_getScannerTokenId__I_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_getScannerTokenId__I_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_getScannerTokenId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_isComment__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_isComment__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_isComment__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isComment", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_isComment__Z_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_isComment__Z_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_isComment__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_isWhiteSpace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_isWhiteSpace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_isWhiteSpace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_isWhiteSpace__Z_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_isWhiteSpace__Z_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_isWhiteSpace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "compiler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__args[] = 
{
  &TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__arg_compiler,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo(), // return type
  "_a_parse", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args[] = 
{
  &TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_printSyntax", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_printSyntax_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scanNextFromSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_9_scanNextFromSource", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_setScannerPrio_I_V_arg_prio = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "prio", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_setScannerPrio_I_V_args[] = 
{
  &TerminalParseNode_methods_setScannerPrio_I_V_arg_prio,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_setScannerPrio_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_setScannerPrio_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScannerPrio", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setScannerPrio", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_setScannerPrio_I_V_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_setScannerPrio_I_V_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_setScannerPrio_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TerminalParseNode_methods_setScannerTokenId_I_V_arg_tk = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tk", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TerminalParseNode_methods_setScannerTokenId_I_V_args[] = 
{
  &TerminalParseNode_methods_setScannerTokenId_I_V_arg_tk,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode_methods_setScannerTokenId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TerminalParseNode_method_setScannerTokenId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScannerTokenId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setScannerTokenId", // alternative name of method
  -1, // altlabelHashCode
  TerminalParseNode_methods_setScannerTokenId_I_V_args, // the arguments
  0, //arguments count
  TerminalParseNode_methods_setScannerTokenId_I_V_exceptions, // the declared exceptions
  TerminalParseNode_MetainfoWrapper::TerminalParseNode_method_setScannerTokenId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TerminalParseNode_methods[] = 
{
  &TerminalParseNode_method_GetClass__L_acdk_lang_RClass_,
  &TerminalParseNode_method_TerminalParseNode__LRTerminalParseNode_,
  &TerminalParseNode_method_TerminalParseNode_INLRString_INLRString__LRTerminalParseNode_,
  &TerminalParseNode_method_TerminalParseNode_INLRString__LRTerminalParseNode_,
  &TerminalParseNode_method_compareTo_INLRTerminalParseNode__I,
  &TerminalParseNode_method_compareTo_INLRObject__I,
  &TerminalParseNode_method_createStandardAstNode__Lacdk_aci_ast_RAstNode_,
  &TerminalParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &TerminalParseNode_method_getScannerPrio__I,
  &TerminalParseNode_method_getScannerTokenId__I,
  &TerminalParseNode_method_isComment__Z,
  &TerminalParseNode_method_isWhiteSpace__Z,
  &TerminalParseNode_method_parse_INLRCompiler__Lacdk_aci_ast_RAstNode_,
  &TerminalParseNode_method_printSyntax_INLacdk_io_RPrintWriter__V,
  &TerminalParseNode_method_scanNextFromSource_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &TerminalParseNode_method_setScannerPrio_I_V,
  &TerminalParseNode_method_setScannerTokenId_I_V,
  0
};


struct TerminalParseNode_MetaInfoInitializer
{  TerminalParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TerminalParseNode::clazzInfo();
    ci->fields =  _TerminalParseNode_fields;
    ci->methods =  _TerminalParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TerminalParseNode_MetaInfoInitializer TerminalParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


//static
::acdk::lang::RObject
WhiteSpaceParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RWhiteSpaceParseNode>(length);
}

//static
::acdk::lang::RObject
WhiteSpaceParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WhiteSpaceParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WhiteSpaceParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WhiteSpaceParseNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_WhiteSpaceParseNode__LRWhiteSpaceParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WhiteSpaceParseNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WhiteSpaceParseNode* This = dmi_cast<WhiteSpaceParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WhiteSpaceParseNode::createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTerminal((RString)args[0].getObjectVar(), (acdk::aci::util::RCodeLocation)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_isWhiteSpace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WhiteSpaceParseNode* This = dmi_cast<WhiteSpaceParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->WhiteSpaceParseNode::isWhiteSpace();
    else
      ret = This->isWhiteSpace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WhiteSpaceParseNode_method_registerParseNode_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WhiteSpaceParseNode::registerParseNode((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _WhiteSpaceParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__args[] = 
{
  &WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WhiteSpaceParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WhiteSpaceParseNode::clazzInfo(), // return type
  "_0_WhiteSpaceParseNode", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_WhiteSpaceParseNode__LRWhiteSpaceParseNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_WhiteSpaceParseNode__LRWhiteSpaceParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_WhiteSpaceParseNode__LRWhiteSpaceParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "WhiteSpaceParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WhiteSpaceParseNode::clazzInfo(), // return type
  "_1_WhiteSpaceParseNode", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_WhiteSpaceParseNode__LRWhiteSpaceParseNode__args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_WhiteSpaceParseNode__LRWhiteSpaceParseNode__exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_WhiteSpaceParseNode__LRWhiteSpaceParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::util::RCodeLocation::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args[] = 
{
  &WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_input,
  &WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__arg_cp,
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTerminal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RTerminal::clazzInfo(), // return type
  "_3_createTerminal", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_isWhiteSpace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_isWhiteSpace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_isWhiteSpace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_isWhiteSpace__Z_args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_isWhiteSpace__Z_exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_isWhiteSpace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_args[] = 
{
  &WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WhiteSpaceParseNode_method_registerParseNode_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerParseNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_registerParseNode", // alternative name of method
  -1, // altlabelHashCode
  WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_args, // the arguments
  0, //arguments count
  WhiteSpaceParseNode_methods_registerParseNode_INLRCompiler__V_exceptions, // the declared exceptions
  WhiteSpaceParseNode_MetainfoWrapper::WhiteSpaceParseNode_method_registerParseNode_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WhiteSpaceParseNode_methods[] = 
{
  &WhiteSpaceParseNode_method_GetClass__L_acdk_lang_RClass_,
  &WhiteSpaceParseNode_method_WhiteSpaceParseNode_INLRString__LRWhiteSpaceParseNode_,
  &WhiteSpaceParseNode_method_WhiteSpaceParseNode__LRWhiteSpaceParseNode_,
  &WhiteSpaceParseNode_method_createTerminal_INLRString_INLacdk_aci_util_RCodeLocation__Lacdk_aci_ast_RTerminal_,
  &WhiteSpaceParseNode_method_isWhiteSpace__Z,
  &WhiteSpaceParseNode_method_registerParseNode_INLRCompiler__V,
  0
};


struct WhiteSpaceParseNode_MetaInfoInitializer
{  WhiteSpaceParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WhiteSpaceParseNode::clazzInfo();
    ci->fields =  _WhiteSpaceParseNode_fields;
    ci->methods =  _WhiteSpaceParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WhiteSpaceParseNode_MetaInfoInitializer WhiteSpaceParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace parser


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) parser_dummyExportFunc() {}
#endif

