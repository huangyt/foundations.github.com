// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "BlockCommentParseNode.h"
#include "DecimalLiteralParseNode.h"
#include "FloatLiteralParseNode.h"
#include "IdentifierParseNode.h"
#include "KeywordParseNode.h"
#include "LineCommentParseNode.h"
#include "LiteralParseNode.h"
#include "ParseEnv.h"
#include "ParseException.h"
#include "ParseNode.h"
#include "parser.h"
#include "RegScanParseNode.h"
#include "Scanner.h"
#include "StringTerminalParseNode.h"
#include "SyntaxNode.h"
#include "SyntaxParseNode.h"
#include "TerminalParseNode.h"
#include "WhiteSpaceParseNode.h"

namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _BlockCommentParseNode_super_TerminalParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TerminalParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BlockCommentParseNode_interfaces[] =
{
  &_BlockCommentParseNode_super_TerminalParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* BlockCommentParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BlockCommentParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BlockCommentParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BlockCommentParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BlockCommentParseNode(BlockCommentParseNode::clazzInfo());

::acdk::lang::RClass
BlockCommentParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BlockCommentParseNode::getCollectableFields(FieldReferences& fields)
{
  TerminalParseNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_begin._ref_this()); // RString _begin 
  fields.push_back((::acdk::lang::RObject*)this->_end._ref_this()); // RString _end 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _DecimalLiteralParseNode_super_LiteralParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LiteralParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DecimalLiteralParseNode_interfaces[] =
{
  &_DecimalLiteralParseNode_super_LiteralParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* DecimalLiteralParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DecimalLiteralParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DecimalLiteralParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DecimalLiteralParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DecimalLiteralParseNode(DecimalLiteralParseNode::clazzInfo());

::acdk::lang::RClass
DecimalLiteralParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DecimalLiteralParseNode::getCollectableFields(FieldReferences& fields)
{
  LiteralParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _FloatLiteralParseNode_super_LiteralParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LiteralParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FloatLiteralParseNode_interfaces[] =
{
  &_FloatLiteralParseNode_super_LiteralParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* FloatLiteralParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FloatLiteralParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FloatLiteralParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FloatLiteralParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FloatLiteralParseNode(FloatLiteralParseNode::clazzInfo());

::acdk::lang::RClass
FloatLiteralParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FloatLiteralParseNode::getCollectableFields(FieldReferences& fields)
{
  LiteralParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _IdentifierParseNode_super_RegScanParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RegScanParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IdentifierParseNode_interfaces[] =
{
  &_IdentifierParseNode_super_RegScanParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IdentifierParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IdentifierParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IdentifierParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IdentifierParseNode(IdentifierParseNode::clazzInfo());

::acdk::lang::RClass
IdentifierParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IdentifierParseNode::getCollectableFields(FieldReferences& fields)
{
  RegScanParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _LineCommentParseNodeParseNode_super_RegScanParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RegScanParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LineCommentParseNodeParseNode_interfaces[] =
{
  &_LineCommentParseNodeParseNode_super_RegScanParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* LineCommentParseNodeParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LineCommentParseNodeParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LineCommentParseNodeParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LineCommentParseNodeParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LineCommentParseNodeParseNode(LineCommentParseNodeParseNode::clazzInfo());

::acdk::lang::RClass
LineCommentParseNodeParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LineCommentParseNodeParseNode::getCollectableFields(FieldReferences& fields)
{
  RegScanParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _ParseEnv_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParseEnv_interfaces[] =
{
  &_ParseEnv_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseEnv::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParseEnv", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParseEnv_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParseEnv::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParseEnv(ParseEnv::clazzInfo());

::acdk::lang::RClass
ParseEnv::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParseEnv::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_currentParseFrame._ref_this()); // RParseFrame _currentParseFrame 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _ParseException_super_acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParseException_interfaces[] =
{
  &_ParseException_super_acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ParseException", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParseException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParseException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParseException(ParseException::clazzInfo());

::acdk::lang::RClass
ParseException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParseException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Exception)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_codeLocation._ref_this()); // acdk::aci::util::RCodeLocation _codeLocation 
  fields.push_back((::acdk::lang::RObject*)this->_pNode._ref_this()); // RParseNode _pNode 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

using namespace ::acdk::aci;
using namespace ::acdk::aci::ast;
::acdk::lang::dmi::ClazzSuperInfo _ParseNode_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ParseNode_interfaces[] =
{
  &_ParseNode_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ParseNode(ParseNode::clazzInfo());

::acdk::lang::RClass
ParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ParseNode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_helpText._ref_this()); // RString _helpText 
  fields.push_back((::acdk::lang::RObject*)this->_nodeName._ref_this()); // RString _nodeName 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _RegScanParseNode_super_TerminalParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TerminalParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RegScanParseNode_interfaces[] =
{
  &_RegScanParseNode_super_TerminalParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* RegScanParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RegScanParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RegScanParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RegScanParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RegScanParseNode(RegScanParseNode::clazzInfo());

::acdk::lang::RClass
RegScanParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RegScanParseNode::getCollectableFields(FieldReferences& fields)
{
  TerminalParseNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_regExp._ref_this()); // acdk::text::RRegExp _regExp 
  fields.push_back((::acdk::lang::RObject*)this->_syntax._ref_this()); // RString _syntax 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _StringTerminalParseNode_super_TerminalParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TerminalParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringTerminalParseNode_interfaces[] =
{
  &_StringTerminalParseNode_super_TerminalParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTerminalParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringTerminalParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringTerminalParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringTerminalParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringTerminalParseNode(StringTerminalParseNode::clazzInfo());

::acdk::lang::RClass
StringTerminalParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringTerminalParseNode::getCollectableFields(FieldReferences& fields)
{
  TerminalParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Or = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Or", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Or, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Follow = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Follow", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Follow, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Optional = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Optional", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Optional, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Rule = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Rule", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Rule, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Keyword = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Keyword", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Keyword, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_ZeroOrMore = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_ZeroOrMore", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_ZeroOrMore, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_OneOrMore = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_OneOrMore", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_OneOrMore, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Eval = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Eval", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Eval, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_SaveRule = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_SaveRule", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_SaveRule, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_SaveIfOptRule = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_SaveIfOptRule", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_SaveIfOptRule, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_HideSubRule = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_HideSubRule", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_HideSubRule, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Commit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Commit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Commit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SyntaxType_ST_Error = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ST_Error", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::aci::parser::ST_Error, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SyntaxType_enumValues[] = {
  &SyntaxType_ST_Or,
  &SyntaxType_ST_Follow,
  &SyntaxType_ST_Optional,
  &SyntaxType_ST_Rule,
  &SyntaxType_ST_Keyword,
  &SyntaxType_ST_ZeroOrMore,
  &SyntaxType_ST_OneOrMore,
  &SyntaxType_ST_Eval,
  &SyntaxType_ST_SaveRule,
  &SyntaxType_ST_SaveIfOptRule,
  &SyntaxType_ST_HideSubRule,
  &SyntaxType_ST_Commit,
  &SyntaxType_ST_Error,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SyntaxTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SyntaxType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SyntaxType", // name
  -1, // hashCode
  "acdk/aci/parser", // ns
  0, // _scopeParent
  0, // _nextSibling
  SyntaxType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SyntaxType(&SyntaxType_enumInfo);

  return &SyntaxType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SyntaxTypeEnumInfo(SyntaxTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _SyntaxNode_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SyntaxNode_interfaces[] =
{
  &_SyntaxNode_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SyntaxNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SyntaxNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SyntaxNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SyntaxNode(SyntaxNode::clazzInfo());

::acdk::lang::RClass
SyntaxNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SyntaxNode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->childs._ref_this()); // RSyntaxNodeArray childs 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _SyntaxParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SyntaxParseNode_interfaces[] =
{
  &_SyntaxParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* SyntaxParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SyntaxParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SyntaxParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SyntaxParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SyntaxParseNode(SyntaxParseNode::clazzInfo());

::acdk::lang::RClass
SyntaxParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SyntaxParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_syntax._ref_this()); // RString _syntax 
  fields.push_back((::acdk::lang::RObject*)this->_syntaxTree._ref_this()); // RSyntaxNode _syntaxTree 
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _TerminalParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TerminalParseNode_interfaces[] =
{
  &_TerminalParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* TerminalParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TerminalParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TerminalParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TerminalParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TerminalParseNode(TerminalParseNode::clazzInfo());

::acdk::lang::RClass
TerminalParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TerminalParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser


namespace acdk { 
namespace aci { 
namespace parser { 

::acdk::lang::dmi::ClazzSuperInfo _WhiteSpaceParseNode_super_RegScanParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RegScanParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WhiteSpaceParseNode_interfaces[] =
{
  &_WhiteSpaceParseNode_super_RegScanParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* WhiteSpaceParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "WhiteSpaceParseNode", // name of class
  -1, // hashCode
  "acdk/aci/parser", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WhiteSpaceParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WhiteSpaceParseNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WhiteSpaceParseNode(WhiteSpaceParseNode::clazzInfo());

::acdk::lang::RClass
WhiteSpaceParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WhiteSpaceParseNode::getCollectableFields(FieldReferences& fields)
{
  RegScanParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aci
} // namespace parser

