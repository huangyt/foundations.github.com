// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../vm.h"
#include "../EvalEnv.h"
#include "../Executable.h"
#include "../OpCodeOp.h"
#include "../OpCodeStm.h"
#include "../vm.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
Executable_create_array(int length)
{
  return new ObjectArrayImpl<RExecutable>(length);
}

//static
::acdk::lang::RObject
Executable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Executable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Executable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Executable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Executable_method_execute_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Executable* This = dmi_cast<Executable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Executable::execute((REvalEnv)args[0].getObjectVar());
    else
        This->execute((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Executable_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Executable* This = dmi_cast<Executable>(This_);
    This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Executable_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Executable* This = dmi_cast<Executable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Executable::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Executable_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Executable* This = dmi_cast<Executable>(This_);
    This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Executable_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Executable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Executable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Executable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Executable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Executable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Executable_MetainfoWrapper::Executable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Executable_methods_execute_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Executable_methods_execute_INLREvalEnv__V_args[] = 
{
  &Executable_methods_execute_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* Executable_methods_execute_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Executable_method_execute_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_execute", // alternative name of method
  -1, // altlabelHashCode
  Executable_methods_execute_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  Executable_methods_execute_INLREvalEnv__V_exceptions, // the declared exceptions
  Executable_MetainfoWrapper::Executable_method_execute_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Executable_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Executable_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &Executable_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* Executable_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Executable_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  Executable_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  Executable_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  Executable_MetainfoWrapper::Executable_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Executable_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Executable_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Executable_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getLabel", // alternative name of method
  -1, // altlabelHashCode
  Executable_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  Executable_methods_getLabel__LRString__exceptions, // the declared exceptions
  Executable_MetainfoWrapper::Executable_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Executable_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  Executable_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  Executable_MetainfoWrapper::Executable_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Executable_methods[] = 
{
  &Executable_method_GetClass__L_acdk_lang_RClass_,
  &Executable_method_execute_INLREvalEnv__V,
  &Executable_method_execute_inner_INLREvalEnv__V,
  &Executable_method_getLabel__LRString_,
  &Executable_method_printOpCode_INLacdk_io_RPrintWriter__V,
  0
};


struct Executable_MetaInfoInitializer
{  Executable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Executable::clazzInfo();
    ci->fields =  _Executable_fields;
    ci->methods =  _Executable_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Executable_MetaInfoInitializer Executable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
OpCodeStm_create_array(int length)
{
  return new ObjectArrayImpl<ROpCodeStm>(length);
}

//static
::acdk::lang::RObject
OpCodeStm_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OpCodeStm_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OpCodeStm::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OpCodeStm::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_getCodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm::getCodeName();
    else
        ret = (::acdk::lang::RObject)This->getCodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_getCommentToPrint__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm::getCommentToPrint();
    else
        ret = (::acdk::lang::RObject)This->getCommentToPrint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_getLabelToPrint__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm::getLabelToPrint();
    else
        ret = (::acdk::lang::RObject)This->getLabelToPrint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_getOpCode__LOpCodeOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (OpCodeOp)This->OpCodeStm::getOpCode();
    else
      ret = (OpCodeOp)This->getOpCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_opToString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OpCodeStm::opToString((OpCodeOp)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OpCodeStm::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OpCodeStm::printThisNode((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printThisNode((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OpCodeStm_fields__comment_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_comment, flags);
    else
      This->_comment = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OpCodeStm_fields__label_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_label, flags);
    else
      This->_label = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  OpCodeStm_fields__op_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    OpCodeStm* This = dmi_cast<OpCodeStm>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_op), flags);
    else
      This->_op = (OpCodeOp)var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo OpCodeStm_fields__comment = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_comment", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OpCodeStm_MetainfoWrapper::OpCodeStm_fields__comment_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OpCodeStm_fields__label = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_label", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  OpCodeStm_MetainfoWrapper::OpCodeStm_fields__label_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo OpCodeStm_fields__op = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_op", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  OpCodeStm_MetainfoWrapper::OpCodeStm_fields__op_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _OpCodeStm_fields[] = 
{
  &OpCodeStm_fields__comment,
  &OpCodeStm_fields__label,
  &OpCodeStm_fields__op,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__args[] = 
{
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_parent,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_op,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_label,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm::clazzInfo(), // return type
  "_2_OpCodeStm", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__args[] = 
{
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__arg_parent,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm::clazzInfo(), // return type
  "_3_OpCodeStm", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__args[] = 
{
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_parent,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_op,
  &OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm::clazzInfo(), // return type
  "_4_OpCodeStm", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &OpCodeStm_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  OpCodeStm_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_getCodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_getCodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_getCodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getCodeName", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_getCodeName__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_getCodeName__LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_getCodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_getCommentToPrint__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_getCommentToPrint__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_getCommentToPrint__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCommentToPrint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getCommentToPrint", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_getCommentToPrint__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_getCommentToPrint__LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_getCommentToPrint__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getLabel", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_getLabel__LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_getLabelToPrint__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_getLabelToPrint__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_getLabelToPrint__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabelToPrint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getLabelToPrint", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_getLabelToPrint__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_getLabelToPrint__LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_getLabelToPrint__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_getOpCode__LOpCodeOp__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_getOpCode__LOpCodeOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_getOpCode__LOpCodeOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getOpCode", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_getOpCode__LOpCodeOp__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_getOpCode__LOpCodeOp__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_getOpCode__LOpCodeOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_opToString_I_LRString__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_opToString_I_LRString__args[] = 
{
  &OpCodeStm_methods_opToString_I_LRString__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_opToString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_opToString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "opToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_opToString", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_opToString_I_LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_opToString_I_LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_opToString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  OpCodeStm_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_printThisNode_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printThisNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_printThisNode", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  OpCodeStm_methods_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_printThisNode_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toString", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm_methods_toString__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm_methods_toString__LRString__exceptions, // the declared exceptions
  OpCodeStm_MetainfoWrapper::OpCodeStm_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OpCodeStm_methods[] = 
{
  &OpCodeStm_method_GetClass__L_acdk_lang_RClass_,
  &OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm_,
  &OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm_,
  &OpCodeStm_method_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm_,
  &OpCodeStm_method_execute_inner_INLREvalEnv__V,
  &OpCodeStm_method_getCodeName__LRString_,
  &OpCodeStm_method_getCommentToPrint__LRString_,
  &OpCodeStm_method_getLabel__LRString_,
  &OpCodeStm_method_getLabelToPrint__LRString_,
  &OpCodeStm_method_getOpCode__LOpCodeOp_,
  &OpCodeStm_method_opToString_I_LRString_,
  &OpCodeStm_method_printOpCode_INLacdk_io_RPrintWriter__V,
  &OpCodeStm_method_printThisNode_INLacdk_io_RPrintWriter_INLRString__V,
  &OpCodeStm_method_toString__LRString_,
  0
};


struct OpCodeStm_MetaInfoInitializer
{  OpCodeStm_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OpCodeStm::clazzInfo();
    ci->fields =  _OpCodeStm_fields;
    ci->methods =  _OpCodeStm_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OpCodeStm_MetaInfoInitializer OpCodeStm_MetaInfoInitializer_staticinstance__;


struct OpCodeStm_clazzInfo_ClazzAttributesResInitializer1
{
  OpCodeStm_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm_method_getOpCode__LOpCodeOp_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LROpCodeStm__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_I_LROpCodeStm__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm_methods_OpCodeStm_INLacdk_aci_ast_RAstNode_IINLRString__LROpCodeStm__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm_methods_opToString_I_LRString__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

OpCodeStm_clazzInfo_ClazzAttributesResInitializer1 OpCodeStm_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
AfOp_create_array(int length)
{
  return new ObjectArrayImpl<RAfOp>(length);
}

//static
::acdk::lang::RObject
AfOp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AfOp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AfOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AfOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AfOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AfOp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AfOp* This = dmi_cast<AfOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AfOp::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AfOp* This = dmi_cast<AfOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AfOp::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AfOp_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AfOp* This = dmi_cast<AfOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AfOp::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AfOp_fields__index_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AfOp* This = dmi_cast<AfOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_index, flags);
    else
      This->_index = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AfOp_fields__index = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_index", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AfOp_MetainfoWrapper::AfOp_fields__index_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AfOp_fields[] = 
{
  &AfOp_fields__index,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__args[] = 
{
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_parent,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_op,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_index,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_label,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AfOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AfOp::clazzInfo(), // return type
  "_0_AfOp", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__args, // the arguments
  0, //arguments count
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__args[] = 
{
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_parent,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_op,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AfOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AfOp::clazzInfo(), // return type
  "_1_AfOp", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__args, // the arguments
  0, //arguments count
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__args[] = 
{
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_parent,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_op,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_index,
  &AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AfOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AfOp::clazzInfo(), // return type
  "_2_AfOp", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__args, // the arguments
  0, //arguments count
  AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AfOp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &AfOp_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  AfOp_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  AfOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AfOp_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AfOp_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AfOp_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  AfOp_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AfOp_methods_toString__LRString__exceptions, // the declared exceptions
  AfOp_MetainfoWrapper::AfOp_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AfOp_methods[] = 
{
  &AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp_,
  &AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp_,
  &AfOp_method_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp_,
  &AfOp_method_GetClass__L_acdk_lang_RClass_,
  &AfOp_method_execute_inner_INLREvalEnv__V,
  &AfOp_method_printOpCode_INLacdk_io_RPrintWriter__V,
  &AfOp_method_toString__LRString_,
  0
};


struct AfOp_MetaInfoInitializer
{  AfOp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AfOp::clazzInfo();
    ci->fields =  _AfOp_fields;
    ci->methods =  _AfOp_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AfOp_MetaInfoInitializer AfOp_MetaInfoInitializer_staticinstance__;


struct AfOp_clazzInfo_ClazzAttributesResInitializer2
{
  AfOp_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString_INLRString__LRAfOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_II_LRAfOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AfOp_methods_AfOp_INLacdk_aci_ast_RAstNode_IIINLRString__LRAfOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

AfOp_clazzInfo_ClazzAttributesResInitializer2 AfOp_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
GlobVarOp_create_array(int length)
{
  return new ObjectArrayImpl<RGlobVarOp>(length);
}

//static
::acdk::lang::RObject
GlobVarOp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GlobVarOp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GlobVarOp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GlobVarOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GlobVarOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GlobVarOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GlobVarOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GlobVarOp* This = dmi_cast<GlobVarOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GlobVarOp::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GlobVarOp* This = dmi_cast<GlobVarOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GlobVarOp::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GlobVarOp_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GlobVarOp* This = dmi_cast<GlobVarOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->GlobVarOp::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GlobVarOp_fields__typeName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    GlobVarOp* This = dmi_cast<GlobVarOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_typeName, flags);
    else
      This->_typeName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GlobVarOp_fields__varName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    GlobVarOp* This = dmi_cast<GlobVarOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_varName, flags);
    else
      This->_varName = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo GlobVarOp_fields__typeName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_typeName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  GlobVarOp_MetainfoWrapper::GlobVarOp_fields__typeName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo GlobVarOp_fields__varName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_varName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  GlobVarOp_MetainfoWrapper::GlobVarOp_fields__varName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _GlobVarOp_fields[] = 
{
  &GlobVarOp_fields__typeName,
  &GlobVarOp_fields__varName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_varName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__args[] = 
{
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_parent,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_op,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_varName,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_typeName,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_label,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GlobVarOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GlobVarOp::clazzInfo(), // return type
  "_0_GlobVarOp", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_varName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__args[] = 
{
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_parent,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_op,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_varName,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "GlobVarOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GlobVarOp::clazzInfo(), // return type
  "_1_GlobVarOp", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_varName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__args[] = 
{
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_parent,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_op,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_varName,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "GlobVarOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GlobVarOp::clazzInfo(), // return type
  "_2_GlobVarOp", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_varName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "varName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__args[] = 
{
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_parent,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_op,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_varName,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_typeName,
  &GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "GlobVarOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GlobVarOp::clazzInfo(), // return type
  "_3_GlobVarOp", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &GlobVarOp_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  GlobVarOp_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  GlobVarOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GlobVarOp_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GlobVarOp_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GlobVarOp_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toString", // alternative name of method
  -1, // altlabelHashCode
  GlobVarOp_methods_toString__LRString__args, // the arguments
  0, //arguments count
  GlobVarOp_methods_toString__LRString__exceptions, // the declared exceptions
  GlobVarOp_MetainfoWrapper::GlobVarOp_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GlobVarOp_methods[] = 
{
  &GlobVarOp_method_GetClass__L_acdk_lang_RClass_,
  &GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp_,
  &GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp_,
  &GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp_,
  &GlobVarOp_method_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp_,
  &GlobVarOp_method_execute_inner_INLREvalEnv__V,
  &GlobVarOp_method_printOpCode_INLacdk_io_RPrintWriter__V,
  &GlobVarOp_method_toString__LRString_,
  0
};


struct GlobVarOp_MetaInfoInitializer
{  GlobVarOp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GlobVarOp::clazzInfo();
    ci->fields =  _GlobVarOp_fields;
    ci->methods =  _GlobVarOp_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GlobVarOp_MetaInfoInitializer GlobVarOp_MetaInfoInitializer_staticinstance__;


struct GlobVarOp_clazzInfo_ClazzAttributesResInitializer3
{
  GlobVarOp_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString_INLRString__LRGlobVarOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString__LRGlobVarOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRGlobVarOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&GlobVarOp_methods_GlobVarOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRGlobVarOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

GlobVarOp_clazzInfo_ClazzAttributesResInitializer3 GlobVarOp_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
BranchOp_create_array(int length)
{
  return new ObjectArrayImpl<RBranchOp>(length);
}

//static
::acdk::lang::RObject
BranchOp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BranchOp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BranchOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BranchOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BranchOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BranchOp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BranchOp* This = dmi_cast<BranchOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BranchOp::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BranchOp* This = dmi_cast<BranchOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BranchOp::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BranchOp_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BranchOp* This = dmi_cast<BranchOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BranchOp::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BranchOp_fields__label_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BranchOp* This = dmi_cast<BranchOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_label, flags);
    else
      This->_label = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BranchOp_fields__pc_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BranchOp* This = dmi_cast<BranchOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pc, flags);
    else
      This->_pc = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BranchOp_fields__label = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_label", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  BranchOp_MetainfoWrapper::BranchOp_fields__label_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BranchOp_fields__pc = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pc", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BranchOp_MetainfoWrapper::BranchOp_fields__pc_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BranchOp_fields[] = 
{
  &BranchOp_fields__label,
  &BranchOp_fields__pc,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__args[] = 
{
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_parent,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_op,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_target,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_label,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BranchOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BranchOp::clazzInfo(), // return type
  "_0_BranchOp", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__args, // the arguments
  0, //arguments count
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__args[] = 
{
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_parent,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_op,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BranchOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BranchOp::clazzInfo(), // return type
  "_1_BranchOp", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__args, // the arguments
  0, //arguments count
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__args[] = 
{
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_parent,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_op,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_target,
  &BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BranchOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BranchOp::clazzInfo(), // return type
  "_2_BranchOp", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__args, // the arguments
  0, //arguments count
  BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BranchOp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &BranchOp_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  BranchOp_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  BranchOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BranchOp_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BranchOp_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BranchOp_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  BranchOp_methods_toString__LRString__args, // the arguments
  0, //arguments count
  BranchOp_methods_toString__LRString__exceptions, // the declared exceptions
  BranchOp_MetainfoWrapper::BranchOp_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BranchOp_methods[] = 
{
  &BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp_,
  &BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp_,
  &BranchOp_method_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp_,
  &BranchOp_method_GetClass__L_acdk_lang_RClass_,
  &BranchOp_method_execute_inner_INLREvalEnv__V,
  &BranchOp_method_printOpCode_INLacdk_io_RPrintWriter__V,
  &BranchOp_method_toString__LRString_,
  0
};


struct BranchOp_MetaInfoInitializer
{  BranchOp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BranchOp::clazzInfo();
    ci->fields =  _BranchOp_fields;
    ci->methods =  _BranchOp_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BranchOp_MetaInfoInitializer BranchOp_MetaInfoInitializer_staticinstance__;


struct BranchOp_clazzInfo_ClazzAttributesResInitializer4
{
  BranchOp_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRBranchOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString__LRBranchOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BranchOp_methods_BranchOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRBranchOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

BranchOp_clazzInfo_ClazzAttributesResInitializer4 BranchOp_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
OpCodeStm1_create_array(int length)
{
  return new ObjectArrayImpl<ROpCodeStm1>(length);
}

//static
::acdk::lang::RObject
OpCodeStm1_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OpCodeStm1_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OpCodeStm1::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm1((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (acdk::lang::dmi::RDmiObject)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm1((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (acdk::lang::dmi::RDmiObject)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OpCodeStm1((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (acdk::lang::dmi::RDmiObject)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm1* This = dmi_cast<OpCodeStm1>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OpCodeStm1::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm1* This = dmi_cast<OpCodeStm1>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->OpCodeStm1::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OpCodeStm1_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OpCodeStm1* This = dmi_cast<OpCodeStm1>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OpCodeStm1::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _OpCodeStm1_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__args[] = 
{
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_parent,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_op,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_val,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_label,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm1", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm1::clazzInfo(), // return type
  "_0_OpCodeStm1", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__args[] = 
{
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_parent,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_op,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm1", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm1::clazzInfo(), // return type
  "_1_OpCodeStm1", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__args[] = 
{
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_parent,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_op,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_val,
  &OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OpCodeStm1", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OpCodeStm1::clazzInfo(), // return type
  "_2_OpCodeStm1", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &OpCodeStm1_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OpCodeStm1_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OpCodeStm1_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OpCodeStm1_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  OpCodeStm1_methods_toString__LRString__args, // the arguments
  0, //arguments count
  OpCodeStm1_methods_toString__LRString__exceptions, // the declared exceptions
  OpCodeStm1_MetainfoWrapper::OpCodeStm1_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OpCodeStm1_methods[] = 
{
  &OpCodeStm1_method_GetClass__L_acdk_lang_RClass_,
  &OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1_,
  &OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1_,
  &OpCodeStm1_method_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1_,
  &OpCodeStm1_method_execute_inner_INLREvalEnv__V,
  &OpCodeStm1_method_printOpCode_INLacdk_io_RPrintWriter__V,
  &OpCodeStm1_method_toString__LRString_,
  0
};


struct OpCodeStm1_MetaInfoInitializer
{  OpCodeStm1_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OpCodeStm1::clazzInfo();
    ci->fields =  _OpCodeStm1_fields;
    ci->methods =  _OpCodeStm1_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OpCodeStm1_MetaInfoInitializer OpCodeStm1_MetaInfoInitializer_staticinstance__;


struct OpCodeStm1_clazzInfo_ClazzAttributesResInitializer5
{
  OpCodeStm1_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString_INLRString__LROpCodeStm1__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject__LROpCodeStm1__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&OpCodeStm1_methods_OpCodeStm1_INLacdk_aci_ast_RAstNode_IINLacdk_lang_dmi_RDmiObject_INLRString__LROpCodeStm1__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

OpCodeStm1_clazzInfo_ClazzAttributesResInitializer5 OpCodeStm1_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


namespace acdk { 
namespace aci { 
namespace vm { 


//static
::acdk::lang::RObject
ObjectOp_create_array(int length)
{
  return new ObjectArrayImpl<RObjectOp>(length);
}

//static
::acdk::lang::RObject
ObjectOp_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ObjectOp_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ObjectOp::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectOp((acdk::aci::ast::RAstNode)args[0].getObjectVar(), (OpCodeOp)args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectOp* This = dmi_cast<ObjectOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectOp::execute_inner((REvalEnv)args[0].getObjectVar());
    else
        This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectOp* This = dmi_cast<ObjectOp>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectOp::printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printOpCode((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectOp_fields__objectName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectOp* This = dmi_cast<ObjectOp>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_objectName, flags);
    else
      This->_objectName = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ObjectOp_fields__objectName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_objectName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ObjectOp_MetainfoWrapper::ObjectOp_fields__objectName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ObjectOp_fields[] = 
{
  &ObjectOp_fields__objectName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ObjectOp_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_objName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "objName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__args[] = 
{
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_parent,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_op,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_objName,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_label,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectOp::clazzInfo(), // return type
  "_0_ObjectOp", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__args, // the arguments
  0, //arguments count
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_objName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "objName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__args[] = 
{
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_parent,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_op,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_objName,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectOp::clazzInfo(), // return type
  "_1_ObjectOp", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__args, // the arguments
  0, //arguments count
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::aci::ast::RAstNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "op", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_objName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "objName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__args[] = 
{
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_parent,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_op,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_objName,
  &ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectOp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectOp::clazzInfo(), // return type
  "_2_ObjectOp", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__args, // the arguments
  0, //arguments count
  ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &ObjectOp_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_execute_inner", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  ObjectOp_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args[] = 
{
  &ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectOp_method_printOpCode_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printOpCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_printOpCode", // alternative name of method
  -1, // altlabelHashCode
  ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  ObjectOp_methods_printOpCode_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  ObjectOp_MetainfoWrapper::ObjectOp_method_printOpCode_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ObjectOp_methods[] = 
{
  &ObjectOp_method_GetClass__L_acdk_lang_RClass_,
  &ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp_,
  &ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp_,
  &ObjectOp_method_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp_,
  &ObjectOp_method_execute_inner_INLREvalEnv__V,
  &ObjectOp_method_printOpCode_INLacdk_io_RPrintWriter__V,
  0
};


struct ObjectOp_MetaInfoInitializer
{  ObjectOp_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ObjectOp::clazzInfo();
    ci->fields =  _ObjectOp_fields;
    ci->methods =  _ObjectOp_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ObjectOp_MetaInfoInitializer ObjectOp_MetaInfoInitializer_staticinstance__;


struct ObjectOp_clazzInfo_ClazzAttributesResInitializer6
{
  ObjectOp_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString_INLRString__LRObjectOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString__LRObjectOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ObjectOp_methods_ObjectOp_INLacdk_aci_ast_RAstNode_IINLRString_INLRString__LRObjectOp__arg_op, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)OpCodeOpMetaInf::GetEnumInfo()));
  }
};

ObjectOp_clazzInfo_ClazzAttributesResInitializer6 ObjectOp_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace aci
} // namespace vm


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) vm_dummyExportFunc() {}
#endif

