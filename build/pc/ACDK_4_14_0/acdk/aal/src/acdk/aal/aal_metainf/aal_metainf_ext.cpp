// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../aal.h"
#include "../aal.h"
#include "../AalCompiler.h"
#include "../AalObject.h"
#include "../ClassDecl.h"
#include "../CodeTreeInterpreter.h"
#include "../Config.h"
#include "../Expressions.h"
#include "../Identifier.h"
#include "../Statements.h"
#include "../SubscribeExpressions.h"
#include "../Type.h"
#include "../TypeName.h"
#include "../VarName.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
ClassMemberAttr_create_array(int length)
{
  return new ObjectArrayImpl<RClassMemberAttr>(length);
}

//static
::acdk::lang::RObject
ClassMemberAttr_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassMemberAttr_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassMemberAttr_method_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassMemberAttr((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassMemberAttr_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassMemberAttr::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassMemberAttr_method_getMemberFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassMemberAttr* This = dmi_cast<ClassMemberAttr>(This_);
  ret = This->getMemberFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassMemberAttr_method_parseFlags_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ClassMemberAttr::parseFlags((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassMemberAttr_method_postParse_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassMemberAttr* This = dmi_cast<ClassMemberAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassMemberAttr::postParse((RCompiler)args[0].getObjectVar());
    else
        This->postParse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassMemberAttr_fields__memberFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassMemberAttr* This = dmi_cast<ClassMemberAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_memberFlags, flags);
    else
      This->_memberFlags = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClassMemberAttr_fields__memberFlags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_memberFlags", // name
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_fields__memberFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClassMemberAttr_fields[] = 
{
  &ClassMemberAttr_fields__memberFlags,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__arg_pn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pn", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__args[] = 
{
  &ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__arg_pn,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassMemberAttr_method_ClassMemberAttr_INLRParseNode__LRClassMemberAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassMemberAttr", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassMemberAttr::clazzInfo(), // return type
  "_0_ClassMemberAttr", // alternative name of method
  ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__args, // the arguments
  0, //arguments count
  ClassMemberAttr_methods_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__exceptions, // the declared exceptions
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_method_ClassMemberAttr_INLRParseNode__LRClassMemberAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassMemberAttr_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassMemberAttr_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  ClassMemberAttr_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassMemberAttr_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassMemberAttr_methods_getMemberFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr_methods_getMemberFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassMemberAttr_method_getMemberFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMemberFlags", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getMemberFlags", // alternative name of method
  ClassMemberAttr_methods_getMemberFlags__I_args, // the arguments
  0, //arguments count
  ClassMemberAttr_methods_getMemberFlags__I_exceptions, // the declared exceptions
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_method_getMemberFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassMemberAttr_methods_parseFlags_INLRString__I_arg_attrname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attrname", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassMemberAttr_methods_parseFlags_INLRString__I_args[] = 
{
  &ClassMemberAttr_methods_parseFlags_INLRString__I_arg_attrname,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr_methods_parseFlags_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassMemberAttr_method_parseFlags_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseFlags", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_parseFlags", // alternative name of method
  ClassMemberAttr_methods_parseFlags_INLRString__I_args, // the arguments
  0, //arguments count
  ClassMemberAttr_methods_parseFlags_INLRString__I_exceptions, // the declared exceptions
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_method_parseFlags_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassMemberAttr_methods_postParse_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassMemberAttr_methods_postParse_INLRCompiler__V_args[] = 
{
  &ClassMemberAttr_methods_postParse_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr_methods_postParse_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassMemberAttr_method_postParse_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "postParse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_postParse", // alternative name of method
  ClassMemberAttr_methods_postParse_INLRCompiler__V_args, // the arguments
  0, //arguments count
  ClassMemberAttr_methods_postParse_INLRCompiler__V_exceptions, // the declared exceptions
  ClassMemberAttr_MetainfoWrapper::ClassMemberAttr_method_postParse_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassMemberAttr_methods[] = 
{
  &ClassMemberAttr_method_ClassMemberAttr_INLRParseNode__LRClassMemberAttr_,
  &ClassMemberAttr_method_GetClass__L_acdk_lang_RClass_,
  &ClassMemberAttr_method_getMemberFlags__I,
  &ClassMemberAttr_method_parseFlags_INLRString__I,
  &ClassMemberAttr_method_postParse_INLRCompiler__V,
  0
};


struct ClassMemberAttr_MetaInfoInitializer
{  ClassMemberAttr_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassMemberAttr::clazzInfo();
    ci->fields =  _ClassMemberAttr_fields;
    ci->methods =  _ClassMemberAttr_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassMemberAttr_MetaInfoInitializer ClassMemberAttr_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
TypeName_create_array(int length)
{
  return new ObjectArrayImpl<RTypeName>(length);
}

//static
::acdk::lang::RObject
TypeName_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TypeName_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TypeName::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_TypeName_INLRParseNode_INLRString__LRTypeName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TypeName((RParseNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_TypeName_INLRParseNode__LRTypeName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TypeName((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TypeName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TypeName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeName* This = dmi_cast<TypeName>(This_);
    This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_getTypeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeName* This = dmi_cast<TypeName>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TypeName::getTypeName();
    else
        ret = (::acdk::lang::RObject)This->getTypeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeName_method_setTypeName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeName* This = dmi_cast<TypeName>(This_);
    This->setTypeName((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TypeName_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  TypeName_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TypeName_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__arg_tpname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tpname", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__args[] = 
{
  &TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__arg_templ,
  &TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__arg_tpname,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_TypeName_INLRParseNode_INLRString__LRTypeName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeName::clazzInfo(), // return type
  "_0_TypeName", // alternative name of method
  TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__args, // the arguments
  0, //arguments count
  TypeName_methods_TypeName_INLRParseNode_INLRString__LRTypeName__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_TypeName_INLRParseNode_INLRString__LRTypeName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_TypeName_INLRParseNode__LRTypeName__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_TypeName_INLRParseNode__LRTypeName__args[] = 
{
  &TypeName_methods_TypeName_INLRParseNode__LRTypeName__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_TypeName_INLRParseNode__LRTypeName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_TypeName_INLRParseNode__LRTypeName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeName::clazzInfo(), // return type
  "_1_TypeName", // alternative name of method
  TypeName_methods_TypeName_INLRParseNode__LRTypeName__args, // the arguments
  0, //arguments count
  TypeName_methods_TypeName_INLRParseNode__LRTypeName__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_TypeName_INLRParseNode__LRTypeName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__args[] = 
{
  &TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp,
  &TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_createCode_INLRCompiler_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_6_createCode", // alternative name of method
  TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__args, // the arguments
  0, //arguments count
  TypeName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "codename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args[] = 
{
  &TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp,
  &TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_name,
  &TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_5_createCode", // alternative name of method
  TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args, // the arguments
  0, //arguments count
  TypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &TypeName_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_execute_inner", // alternative name of method
  TypeName_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  TypeName_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_getTypeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_getTypeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_getTypeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getTypeName", // alternative name of method
  TypeName_methods_getTypeName__LRString__args, // the arguments
  0, //arguments count
  TypeName_methods_getTypeName__LRString__exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_getTypeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeName_methods_setTypeName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeName_methods_setTypeName_INLRString__V_args[] = 
{
  &TypeName_methods_setTypeName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName_methods_setTypeName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeName_method_setTypeName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setTypeName", // alternative name of method
  TypeName_methods_setTypeName_INLRString__V_args, // the arguments
  0, //arguments count
  TypeName_methods_setTypeName_INLRString__V_exceptions, // the declared exceptions
  TypeName_MetainfoWrapper::TypeName_method_setTypeName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TypeName_methods[] = 
{
  &TypeName_method_GetClass__L_acdk_lang_RClass_,
  &TypeName_method_TypeName_INLRParseNode_INLRString__LRTypeName_,
  &TypeName_method_TypeName_INLRParseNode__LRTypeName_,
  &TypeName_method_createCode_INLRCompiler_INLRString__LRCode_,
  &TypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_,
  &TypeName_method_execute_inner_INLREvalEnv__V,
  &TypeName_method_getTypeName__LRString_,
  &TypeName_method_setTypeName_INLRString__V,
  0
};


struct TypeName_MetaInfoInitializer
{  TypeName_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TypeName::clazzInfo();
    ci->fields =  _TypeName_fields;
    ci->methods =  _TypeName_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TypeName_MetaInfoInitializer TypeName_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
TypeNameParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RTypeNameParseNode>(length);
}

//static
::acdk::lang::RObject
TypeNameParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TypeNameParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TypeNameParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TypeNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TypeNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeNameParseNode_method_createStandarCode__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeNameParseNode* This = dmi_cast<TypeNameParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TypeNameParseNode::createStandarCode();
    else
        ret = (::acdk::lang::RObject)This->createStandarCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TypeNameParseNode_method_parse_INLRCompiler__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TypeNameParseNode* This = dmi_cast<TypeNameParseNode>(This_);
    ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TypeNameParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeNameParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  TypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TypeNameParseNode_MetainfoWrapper::TypeNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__args[] = 
{
  &TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_nodename,
  &TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_rulesyntax,
  &TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TypeNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeNameParseNode::clazzInfo(), // return type
  "_0_TypeNameParseNode", // alternative name of method
  TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__args, // the arguments
  0, //arguments count
  TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__exceptions, // the declared exceptions
  TypeNameParseNode_MetainfoWrapper::TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__args[] = 
{
  &TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__arg_nodename,
  &TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__arg_rulesyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TypeNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TypeNameParseNode::clazzInfo(), // return type
  "_1_TypeNameParseNode", // alternative name of method
  TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__args, // the arguments
  0, //arguments count
  TypeNameParseNode_methods_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__exceptions, // the declared exceptions
  TypeNameParseNode_MetainfoWrapper::TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeNameParseNode_methods_createStandarCode__LRCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode_methods_createStandarCode__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeNameParseNode_method_createStandarCode__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandarCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_3_createStandarCode", // alternative name of method
  TypeNameParseNode_methods_createStandarCode__LRCode__args, // the arguments
  0, //arguments count
  TypeNameParseNode_methods_createStandarCode__LRCode__exceptions, // the declared exceptions
  TypeNameParseNode_MetainfoWrapper::TypeNameParseNode_method_createStandarCode__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TypeNameParseNode_methods_parse_INLRCompiler__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TypeNameParseNode_methods_parse_INLRCompiler__LRCode__args[] = 
{
  &TypeNameParseNode_methods_parse_INLRCompiler__LRCode__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode_methods_parse_INLRCompiler__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TypeNameParseNode_method_parse_INLRCompiler__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_2_parse", // alternative name of method
  TypeNameParseNode_methods_parse_INLRCompiler__LRCode__args, // the arguments
  0, //arguments count
  TypeNameParseNode_methods_parse_INLRCompiler__LRCode__exceptions, // the declared exceptions
  TypeNameParseNode_MetainfoWrapper::TypeNameParseNode_method_parse_INLRCompiler__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TypeNameParseNode_methods[] = 
{
  &TypeNameParseNode_method_GetClass__L_acdk_lang_RClass_,
  &TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString_INLRString__LRTypeNameParseNode_,
  &TypeNameParseNode_method_TypeNameParseNode_INLRString_INLRString__LRTypeNameParseNode_,
  &TypeNameParseNode_method_createStandarCode__LRCode_,
  &TypeNameParseNode_method_parse_INLRCompiler__LRCode_,
  0
};


struct TypeNameParseNode_MetaInfoInitializer
{  TypeNameParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TypeNameParseNode::clazzInfo();
    ci->fields =  _TypeNameParseNode_fields;
    ci->methods =  _TypeNameParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TypeNameParseNode_MetaInfoInitializer TypeNameParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
FqTypeName_create_array(int length)
{
  return new ObjectArrayImpl<RFqTypeName>(length);
}

//static
::acdk::lang::RObject
FqTypeName_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FqTypeName_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_FqTypeName_INLRParseNode__LRFqTypeName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FqTypeName((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FqTypeName::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FqTypeName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FqTypeName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_getLastElemName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FqTypeName* This = dmi_cast<FqTypeName>(This_);
    ret = (::acdk::lang::RObject)This->getLastElemName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FqTypeName* This = dmi_cast<FqTypeName>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FqTypeName::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_getNotLastElemName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FqTypeName* This = dmi_cast<FqTypeName>(This_);
    ret = (::acdk::lang::RObject)This->getNotLastElemName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeName_method_getTypeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FqTypeName* This = dmi_cast<FqTypeName>(This_);
    ret = (::acdk::lang::RObject)This->getTypeName();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FqTypeName_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__args[] = 
{
  &FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_FqTypeName_INLRParseNode__LRFqTypeName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FqTypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FqTypeName::clazzInfo(), // return type
  "_0_FqTypeName", // alternative name of method
  FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__args, // the arguments
  0, //arguments count
  FqTypeName_methods_FqTypeName_INLRParseNode__LRFqTypeName__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_FqTypeName_INLRParseNode__LRFqTypeName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  FqTypeName_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FqTypeName_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_fqname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqname", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__args[] = 
{
  &FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp,
  &FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_fqname,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_createCode_INLRCompiler_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_6_createCode", // alternative name of method
  FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__args, // the arguments
  0, //arguments count
  FqTypeName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_fqname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqname", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "codename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args[] = 
{
  &FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp,
  &FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_fqname,
  &FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_5_createCode", // alternative name of method
  FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args, // the arguments
  0, //arguments count
  FqTypeName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_getLastElemName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_getLastElemName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_getLastElemName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastElemName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getLastElemName", // alternative name of method
  FqTypeName_methods_getLastElemName__LRString__args, // the arguments
  0, //arguments count
  FqTypeName_methods_getLastElemName__LRString__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_getLastElemName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  FqTypeName_methods_getName__LRString__args, // the arguments
  0, //arguments count
  FqTypeName_methods_getName__LRString__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_getNotLastElemName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_getNotLastElemName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_getNotLastElemName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNotLastElemName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getNotLastElemName", // alternative name of method
  FqTypeName_methods_getNotLastElemName__LRString__args, // the arguments
  0, //arguments count
  FqTypeName_methods_getNotLastElemName__LRString__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_getNotLastElemName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeName_methods_getTypeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName_methods_getTypeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeName_method_getTypeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getTypeName", // alternative name of method
  FqTypeName_methods_getTypeName__LRString__args, // the arguments
  0, //arguments count
  FqTypeName_methods_getTypeName__LRString__exceptions, // the declared exceptions
  FqTypeName_MetainfoWrapper::FqTypeName_method_getTypeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FqTypeName_methods[] = 
{
  &FqTypeName_method_FqTypeName_INLRParseNode__LRFqTypeName_,
  &FqTypeName_method_GetClass__L_acdk_lang_RClass_,
  &FqTypeName_method_createCode_INLRCompiler_INLRString__LRCode_,
  &FqTypeName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_,
  &FqTypeName_method_getLastElemName__LRString_,
  &FqTypeName_method_getName__LRString_,
  &FqTypeName_method_getNotLastElemName__LRString_,
  &FqTypeName_method_getTypeName__LRString_,
  0
};


struct FqTypeName_MetaInfoInitializer
{  FqTypeName_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FqTypeName::clazzInfo();
    ci->fields =  _FqTypeName_fields;
    ci->methods =  _FqTypeName_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FqTypeName_MetaInfoInitializer FqTypeName_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
FqTypeNameParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RFqTypeNameParseNode>(length);
}

//static
::acdk::lang::RObject
FqTypeNameParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FqTypeNameParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FqTypeNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FqTypeNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FqTypeNameParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FqTypeNameParseNode_method_createStandarCode__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FqTypeNameParseNode* This = dmi_cast<FqTypeNameParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FqTypeNameParseNode::createStandarCode();
    else
        ret = (::acdk::lang::RObject)This->createStandarCode();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FqTypeNameParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__args[] = 
{
  &FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_nodename,
  &FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_rulesyntax,
  &FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FqTypeNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FqTypeNameParseNode::clazzInfo(), // return type
  "_0_FqTypeNameParseNode", // alternative name of method
  FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__args, // the arguments
  0, //arguments count
  FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__exceptions, // the declared exceptions
  FqTypeNameParseNode_MetainfoWrapper::FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__args[] = 
{
  &FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__arg_nodename,
  &FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__arg_rulesyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FqTypeNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FqTypeNameParseNode::clazzInfo(), // return type
  "_1_FqTypeNameParseNode", // alternative name of method
  FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__args, // the arguments
  0, //arguments count
  FqTypeNameParseNode_methods_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__exceptions, // the declared exceptions
  FqTypeNameParseNode_MetainfoWrapper::FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeNameParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  FqTypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FqTypeNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FqTypeNameParseNode_MetainfoWrapper::FqTypeNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FqTypeNameParseNode_methods_createStandarCode__LRCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeNameParseNode_methods_createStandarCode__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FqTypeNameParseNode_method_createStandarCode__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandarCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_2_createStandarCode", // alternative name of method
  FqTypeNameParseNode_methods_createStandarCode__LRCode__args, // the arguments
  0, //arguments count
  FqTypeNameParseNode_methods_createStandarCode__LRCode__exceptions, // the declared exceptions
  FqTypeNameParseNode_MetainfoWrapper::FqTypeNameParseNode_method_createStandarCode__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FqTypeNameParseNode_methods[] = 
{
  &FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString_INLRString__LRFqTypeNameParseNode_,
  &FqTypeNameParseNode_method_FqTypeNameParseNode_INLRString_INLRString__LRFqTypeNameParseNode_,
  &FqTypeNameParseNode_method_GetClass__L_acdk_lang_RClass_,
  &FqTypeNameParseNode_method_createStandarCode__LRCode_,
  0
};


struct FqTypeNameParseNode_MetaInfoInitializer
{  FqTypeNameParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FqTypeNameParseNode::clazzInfo();
    ci->fields =  _FqTypeNameParseNode_fields;
    ci->methods =  _FqTypeNameParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FqTypeNameParseNode_MetaInfoInitializer FqTypeNameParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
IdentifierCode_create_array(int length)
{
  return new ObjectArrayImpl<RIdentifierCode>(length);
}

//static
::acdk::lang::RObject
IdentifierCode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IdentifierCode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IdentifierCode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentifierCode((RParseNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_IdentifierCode_INLRParseNode__LRIdentifierCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentifierCode((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_getCodeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    ret = (::acdk::lang::RObject)This->getCodeString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IdentifierCode::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IdentifierCode::printCodeTree((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->printCodeTree((acdk::io::RPrintWriter)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentifierCode_method_setIdentifier_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    This->setIdentifier((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IdentifierCode_fields__identifier_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IdentifierCode* This = dmi_cast<IdentifierCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_identifier, flags);
    else
      This->_identifier = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo IdentifierCode_fields__identifier = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_identifier", // name
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  IdentifierCode_MetainfoWrapper::IdentifierCode_fields__identifier_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IdentifierCode_fields[] = 
{
  &IdentifierCode_fields__identifier,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  IdentifierCode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__arg_identifier = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "identifier", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__args[] = 
{
  &IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__arg_templ,
  &IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__arg_identifier,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentifierCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentifierCode::clazzInfo(), // return type
  "_0_IdentifierCode", // alternative name of method
  IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__args[] = 
{
  &IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_IdentifierCode_INLRParseNode__LRIdentifierCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentifierCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentifierCode::clazzInfo(), // return type
  "_1_IdentifierCode", // alternative name of method
  IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_IdentifierCode_INLRParseNode__LRIdentifierCode__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_IdentifierCode_INLRParseNode__LRIdentifierCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_getCodeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_getCodeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_getCodeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCodeString", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getCodeString", // alternative name of method
  IdentifierCode_methods_getCodeString__LRString__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_getCodeString__LRString__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_getCodeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getIdentifier", // alternative name of method
  IdentifierCode_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  IdentifierCode_methods_getName__LRString__args, // the arguments
  0, //arguments count
  IdentifierCode_methods_getName__LRString__exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "indent", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_args[] = 
{
  &IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_out,
  &IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printCodeTree", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_printCodeTree", // alternative name of method
  IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_args, // the arguments
  0, //arguments count
  IdentifierCode_methods_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentifierCode_methods_setIdentifier_INLRString__V_arg_identifier = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "identifier", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentifierCode_methods_setIdentifier_INLRString__V_args[] = 
{
  &IdentifierCode_methods_setIdentifier_INLRString__V_arg_identifier,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode_methods_setIdentifier_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentifierCode_method_setIdentifier_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIdentifier", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setIdentifier", // alternative name of method
  IdentifierCode_methods_setIdentifier_INLRString__V_args, // the arguments
  0, //arguments count
  IdentifierCode_methods_setIdentifier_INLRString__V_exceptions, // the declared exceptions
  IdentifierCode_MetainfoWrapper::IdentifierCode_method_setIdentifier_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IdentifierCode_methods[] = 
{
  &IdentifierCode_method_GetClass__L_acdk_lang_RClass_,
  &IdentifierCode_method_IdentifierCode_INLRParseNode_INLRString__LRIdentifierCode_,
  &IdentifierCode_method_IdentifierCode_INLRParseNode__LRIdentifierCode_,
  &IdentifierCode_method_getCodeString__LRString_,
  &IdentifierCode_method_getIdentifier__LRString_,
  &IdentifierCode_method_getName__LRString_,
  &IdentifierCode_method_printCodeTree_INLacdk_io_RPrintWriter_INLRString__V,
  &IdentifierCode_method_setIdentifier_INLRString__V,
  0
};


struct IdentifierCode_MetaInfoInitializer
{  IdentifierCode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IdentifierCode::clazzInfo();
    ci->fields =  _IdentifierCode_fields;
    ci->methods =  _IdentifierCode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IdentifierCode_MetaInfoInitializer IdentifierCode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
VarName_create_array(int length)
{
  return new ObjectArrayImpl<RVarName>(length);
}

//static
::acdk::lang::RObject
VarName_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class VarName_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)VarName::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_VarName_INLRParseNode_INLRString__LRVarName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarName((RParseNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_VarName_INLRParseNode__LRVarName__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarName((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)VarName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)VarName::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_emitOpCode_INLRCompiler_INLRExecutableArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarName* This = dmi_cast<VarName>(This_);
    This->emitOpCode((RCompiler)args[0].getObjectVar(), (RExecutableArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_execute_inner_INLREvalEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarName* This = dmi_cast<VarName>(This_);
    This->execute_inner((REvalEnv)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_getVarName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarName* This = dmi_cast<VarName>(This_);
    ret = (::acdk::lang::RObject)This->getVarName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_postParse_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarName* This = dmi_cast<VarName>(This_);
    This->postParse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarName_method_setVarName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarName* This = dmi_cast<VarName>(This_);
    This->setVarName((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _VarName_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  VarName_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  VarName_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__arg_tpname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tpname", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__args[] = 
{
  &VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__arg_templ,
  &VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__arg_tpname,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_VarName_INLRParseNode_INLRString__LRVarName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "VarName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarName::clazzInfo(), // return type
  "_0_VarName", // alternative name of method
  VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__args, // the arguments
  0, //arguments count
  VarName_methods_VarName_INLRParseNode_INLRString__LRVarName__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_VarName_INLRParseNode_INLRString__LRVarName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_VarName_INLRParseNode__LRVarName__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_VarName_INLRParseNode__LRVarName__args[] = 
{
  &VarName_methods_VarName_INLRParseNode__LRVarName__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_VarName_INLRParseNode__LRVarName__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_VarName_INLRParseNode__LRVarName_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "VarName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarName::clazzInfo(), // return type
  "_1_VarName", // alternative name of method
  VarName_methods_VarName_INLRParseNode__LRVarName__args, // the arguments
  0, //arguments count
  VarName_methods_VarName_INLRParseNode__LRVarName__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_VarName_INLRParseNode__LRVarName__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args[] = 
{
  &VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp,
  &VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_value,
  &VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_nodename,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_7_createCode", // alternative name of method
  VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args, // the arguments
  0, //arguments count
  VarName_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_createCode_INLRCompiler_INLRString__LRCode__args[] = 
{
  &VarName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp,
  &VarName_methods_createCode_INLRCompiler_INLRString__LRCode__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_createCode_INLRCompiler_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_8_createCode", // alternative name of method
  VarName_methods_createCode_INLRCompiler_INLRString__LRCode__args, // the arguments
  0, //arguments count
  VarName_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_createCode_INLRCompiler_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_args[] = 
{
  &VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_comp,
  &VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_oca,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_emitOpCode_INLRCompiler_INLRExecutableArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "emitOpCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_emitOpCode", // alternative name of method
  VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_args, // the arguments
  0, //arguments count
  VarName_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_emitOpCode_INLRCompiler_INLRExecutableArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_execute_inner_INLREvalEnv__V_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvalEnv::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_execute_inner_INLREvalEnv__V_args[] = 
{
  &VarName_methods_execute_inner_INLREvalEnv__V_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_execute_inner_INLREvalEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_execute_inner_INLREvalEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute_inner", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute_inner", // alternative name of method
  VarName_methods_execute_inner_INLREvalEnv__V_args, // the arguments
  0, //arguments count
  VarName_methods_execute_inner_INLREvalEnv__V_exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_execute_inner_INLREvalEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_getVarName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_getVarName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_getVarName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVarName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getVarName", // alternative name of method
  VarName_methods_getVarName__LRString__args, // the arguments
  0, //arguments count
  VarName_methods_getVarName__LRString__exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_getVarName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_postParse_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_postParse_INLRCompiler__V_args[] = 
{
  &VarName_methods_postParse_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_postParse_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_postParse_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "postParse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_postParse", // alternative name of method
  VarName_methods_postParse_INLRCompiler__V_args, // the arguments
  0, //arguments count
  VarName_methods_postParse_INLRCompiler__V_exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_postParse_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarName_methods_setVarName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarName_methods_setVarName_INLRString__V_args[] = 
{
  &VarName_methods_setVarName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName_methods_setVarName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarName_method_setVarName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setVarName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setVarName", // alternative name of method
  VarName_methods_setVarName_INLRString__V_args, // the arguments
  0, //arguments count
  VarName_methods_setVarName_INLRString__V_exceptions, // the declared exceptions
  VarName_MetainfoWrapper::VarName_method_setVarName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _VarName_methods[] = 
{
  &VarName_method_GetClass__L_acdk_lang_RClass_,
  &VarName_method_VarName_INLRParseNode_INLRString__LRVarName_,
  &VarName_method_VarName_INLRParseNode__LRVarName_,
  &VarName_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_,
  &VarName_method_createCode_INLRCompiler_INLRString__LRCode_,
  &VarName_method_emitOpCode_INLRCompiler_INLRExecutableArray__V,
  &VarName_method_execute_inner_INLREvalEnv__V,
  &VarName_method_getVarName__LRString_,
  &VarName_method_postParse_INLRCompiler__V,
  &VarName_method_setVarName_INLRString__V,
  0
};


struct VarName_MetaInfoInitializer
{  VarName_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = VarName::clazzInfo();
    ci->fields =  _VarName_fields;
    ci->methods =  _VarName_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
VarName_MetaInfoInitializer VarName_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
VarNameParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RVarNameParseNode>(length);
}

//static
::acdk::lang::RObject
VarNameParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class VarNameParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)VarNameParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarNameParseNode_method_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarNameParseNode_method_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new VarNameParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarNameParseNode_method_createStandarCode__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarNameParseNode* This = dmi_cast<VarNameParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->VarNameParseNode::createStandarCode();
    else
        ret = (::acdk::lang::RObject)This->createStandarCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  VarNameParseNode_method_parse_INLRCompiler__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    VarNameParseNode* This = dmi_cast<VarNameParseNode>(This_);
    ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _VarNameParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarNameParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarNameParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  VarNameParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  VarNameParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  VarNameParseNode_MetainfoWrapper::VarNameParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__args[] = 
{
  &VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_nodename,
  &VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_rulesyntax,
  &VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarNameParseNode_method_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "VarNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarNameParseNode::clazzInfo(), // return type
  "_0_VarNameParseNode", // alternative name of method
  VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__args, // the arguments
  0, //arguments count
  VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__exceptions, // the declared exceptions
  VarNameParseNode_MetainfoWrapper::VarNameParseNode_method_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__args[] = 
{
  &VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__arg_nodename,
  &VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__arg_rulesyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarNameParseNode_method_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "VarNameParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  VarNameParseNode::clazzInfo(), // return type
  "_1_VarNameParseNode", // alternative name of method
  VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__args, // the arguments
  0, //arguments count
  VarNameParseNode_methods_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__exceptions, // the declared exceptions
  VarNameParseNode_MetainfoWrapper::VarNameParseNode_method_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarNameParseNode_methods_createStandarCode__LRCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode_methods_createStandarCode__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarNameParseNode_method_createStandarCode__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandarCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_3_createStandarCode", // alternative name of method
  VarNameParseNode_methods_createStandarCode__LRCode__args, // the arguments
  0, //arguments count
  VarNameParseNode_methods_createStandarCode__LRCode__exceptions, // the declared exceptions
  VarNameParseNode_MetainfoWrapper::VarNameParseNode_method_createStandarCode__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo VarNameParseNode_methods_parse_INLRCompiler__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* VarNameParseNode_methods_parse_INLRCompiler__LRCode__args[] = 
{
  &VarNameParseNode_methods_parse_INLRCompiler__LRCode__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode_methods_parse_INLRCompiler__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo VarNameParseNode_method_parse_INLRCompiler__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_2_parse", // alternative name of method
  VarNameParseNode_methods_parse_INLRCompiler__LRCode__args, // the arguments
  0, //arguments count
  VarNameParseNode_methods_parse_INLRCompiler__LRCode__exceptions, // the declared exceptions
  VarNameParseNode_MetainfoWrapper::VarNameParseNode_method_parse_INLRCompiler__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _VarNameParseNode_methods[] = 
{
  &VarNameParseNode_method_GetClass__L_acdk_lang_RClass_,
  &VarNameParseNode_method_VarNameParseNode_INLRString_INLRString_INLRString__LRVarNameParseNode_,
  &VarNameParseNode_method_VarNameParseNode_INLRString_INLRString__LRVarNameParseNode_,
  &VarNameParseNode_method_createStandarCode__LRCode_,
  &VarNameParseNode_method_parse_INLRCompiler__LRCode_,
  0
};


struct VarNameParseNode_MetaInfoInitializer
{  VarNameParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = VarNameParseNode::clazzInfo();
    ci->fields =  _VarNameParseNode_fields;
    ci->methods =  _VarNameParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
VarNameParseNode_MetaInfoInitializer VarNameParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
Operator_create_array(int length)
{
  return new ObjectArrayImpl<ROperator>(length);
}

//static
::acdk::lang::RObject
Operator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Operator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Operator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_Operator_INLRParseNode_INLRString__LROperator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Operator((RParseNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_Operator_INLRParseNode__LROperator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Operator((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_createCode_INLRCompiler_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Operator::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Operator::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_operatorToFuncName_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Operator::operatorToFuncName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_operatorToFuncName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Operator* This = dmi_cast<Operator>(This_);
    ret = (::acdk::lang::RObject)This->operatorToFuncName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Operator_method_postParse_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Operator* This = dmi_cast<Operator>(This_);
    This->postParse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Operator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  Operator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Operator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_Operator_INLRParseNode_INLRString__LROperator__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_Operator_INLRParseNode_INLRString__LROperator__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "op", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_Operator_INLRParseNode_INLRString__LROperator__args[] = 
{
  &Operator_methods_Operator_INLRParseNode_INLRString__LROperator__arg_templ,
  &Operator_methods_Operator_INLRParseNode_INLRString__LROperator__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_Operator_INLRParseNode_INLRString__LROperator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_Operator_INLRParseNode_INLRString__LROperator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Operator", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Operator::clazzInfo(), // return type
  "_0_Operator", // alternative name of method
  Operator_methods_Operator_INLRParseNode_INLRString__LROperator__args, // the arguments
  0, //arguments count
  Operator_methods_Operator_INLRParseNode_INLRString__LROperator__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_Operator_INLRParseNode_INLRString__LROperator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_Operator_INLRParseNode__LROperator__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_Operator_INLRParseNode__LROperator__args[] = 
{
  &Operator_methods_Operator_INLRParseNode__LROperator__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_Operator_INLRParseNode__LROperator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_Operator_INLRParseNode__LROperator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Operator", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Operator::clazzInfo(), // return type
  "_1_Operator", // alternative name of method
  Operator_methods_Operator_INLRParseNode__LROperator__args, // the arguments
  0, //arguments count
  Operator_methods_Operator_INLRParseNode__LROperator__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_Operator_INLRParseNode__LROperator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_createCode_INLRCompiler_INLRString__LRCode__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_createCode_INLRCompiler_INLRString__LRCode__args[] = 
{
  &Operator_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp,
  &Operator_methods_createCode_INLRCompiler_INLRString__LRCode__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_createCode_INLRCompiler_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_6_createCode", // alternative name of method
  Operator_methods_createCode_INLRCompiler_INLRString__LRCode__args, // the arguments
  0, //arguments count
  Operator_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_createCode_INLRCompiler_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "op", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "codename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args[] = 
{
  &Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp,
  &Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_op,
  &Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_5_createCode", // alternative name of method
  Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args, // the arguments
  0, //arguments count
  Operator_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_operatorToFuncName_INLRString__LRString__arg_opstr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "opstr", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_operatorToFuncName_INLRString__LRString__args[] = 
{
  &Operator_methods_operatorToFuncName_INLRString__LRString__arg_opstr,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_operatorToFuncName_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_operatorToFuncName_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operatorToFuncName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_operatorToFuncName", // alternative name of method
  Operator_methods_operatorToFuncName_INLRString__LRString__args, // the arguments
  0, //arguments count
  Operator_methods_operatorToFuncName_INLRString__LRString__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_operatorToFuncName_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_operatorToFuncName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_operatorToFuncName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_operatorToFuncName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operatorToFuncName", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_operatorToFuncName", // alternative name of method
  Operator_methods_operatorToFuncName__LRString__args, // the arguments
  0, //arguments count
  Operator_methods_operatorToFuncName__LRString__exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_operatorToFuncName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Operator_methods_postParse_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Operator_methods_postParse_INLRCompiler__V_args[] = 
{
  &Operator_methods_postParse_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator_methods_postParse_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Operator_method_postParse_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "postParse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_postParse", // alternative name of method
  Operator_methods_postParse_INLRCompiler__V_args, // the arguments
  0, //arguments count
  Operator_methods_postParse_INLRCompiler__V_exceptions, // the declared exceptions
  Operator_MetainfoWrapper::Operator_method_postParse_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Operator_methods[] = 
{
  &Operator_method_GetClass__L_acdk_lang_RClass_,
  &Operator_method_Operator_INLRParseNode_INLRString__LROperator_,
  &Operator_method_Operator_INLRParseNode__LROperator_,
  &Operator_method_createCode_INLRCompiler_INLRString__LRCode_,
  &Operator_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_,
  &Operator_method_operatorToFuncName_INLRString__LRString_,
  &Operator_method_operatorToFuncName__LRString_,
  &Operator_method_postParse_INLRCompiler__V,
  0
};


struct Operator_MetaInfoInitializer
{  Operator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Operator::clazzInfo();
    ci->fields =  _Operator_fields;
    ci->methods =  _Operator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Operator_MetaInfoInitializer Operator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
OperatorParseNode_create_array(int length)
{
  return new ObjectArrayImpl<ROperatorParseNode>(length);
}

//static
::acdk::lang::RObject
OperatorParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class OperatorParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperatorParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)OperatorParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperatorParseNode_method_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OperatorParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperatorParseNode_method_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new OperatorParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperatorParseNode_method_createStandarCode__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OperatorParseNode* This = dmi_cast<OperatorParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->OperatorParseNode::createStandarCode();
    else
        ret = (::acdk::lang::RObject)This->createStandarCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  OperatorParseNode_method_parse_INLRCompiler__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    OperatorParseNode* This = dmi_cast<OperatorParseNode>(This_);
    ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _OperatorParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperatorParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperatorParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  OperatorParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  OperatorParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  OperatorParseNode_MetainfoWrapper::OperatorParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__args[] = 
{
  &OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_nodename,
  &OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_rulesyntax,
  &OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperatorParseNode_method_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "OperatorParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OperatorParseNode::clazzInfo(), // return type
  "_0_OperatorParseNode", // alternative name of method
  OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__args, // the arguments
  0, //arguments count
  OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__exceptions, // the declared exceptions
  OperatorParseNode_MetainfoWrapper::OperatorParseNode_method_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__args[] = 
{
  &OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__arg_nodename,
  &OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__arg_rulesyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperatorParseNode_method_OperatorParseNode_INLRString_INLRString__LROperatorParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "OperatorParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  OperatorParseNode::clazzInfo(), // return type
  "_1_OperatorParseNode", // alternative name of method
  OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__args, // the arguments
  0, //arguments count
  OperatorParseNode_methods_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__exceptions, // the declared exceptions
  OperatorParseNode_MetainfoWrapper::OperatorParseNode_method_OperatorParseNode_INLRString_INLRString__LROperatorParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperatorParseNode_methods_createStandarCode__LRCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode_methods_createStandarCode__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperatorParseNode_method_createStandarCode__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandarCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_3_createStandarCode", // alternative name of method
  OperatorParseNode_methods_createStandarCode__LRCode__args, // the arguments
  0, //arguments count
  OperatorParseNode_methods_createStandarCode__LRCode__exceptions, // the declared exceptions
  OperatorParseNode_MetainfoWrapper::OperatorParseNode_method_createStandarCode__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo OperatorParseNode_methods_parse_INLRCompiler__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* OperatorParseNode_methods_parse_INLRCompiler__LRCode__args[] = 
{
  &OperatorParseNode_methods_parse_INLRCompiler__LRCode__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode_methods_parse_INLRCompiler__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo OperatorParseNode_method_parse_INLRCompiler__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_2_parse", // alternative name of method
  OperatorParseNode_methods_parse_INLRCompiler__LRCode__args, // the arguments
  0, //arguments count
  OperatorParseNode_methods_parse_INLRCompiler__LRCode__exceptions, // the declared exceptions
  OperatorParseNode_MetainfoWrapper::OperatorParseNode_method_parse_INLRCompiler__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _OperatorParseNode_methods[] = 
{
  &OperatorParseNode_method_GetClass__L_acdk_lang_RClass_,
  &OperatorParseNode_method_OperatorParseNode_INLRString_INLRString_INLRString__LROperatorParseNode_,
  &OperatorParseNode_method_OperatorParseNode_INLRString_INLRString__LROperatorParseNode_,
  &OperatorParseNode_method_createStandarCode__LRCode_,
  &OperatorParseNode_method_parse_INLRCompiler__LRCode_,
  0
};


struct OperatorParseNode_MetaInfoInitializer
{  OperatorParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = OperatorParseNode::clazzInfo();
    ci->fields =  _OperatorParseNode_fields;
    ci->methods =  _OperatorParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
OperatorParseNode_MetaInfoInitializer OperatorParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
Label_create_array(int length)
{
  return new ObjectArrayImpl<RLabel>(length);
}

//static
::acdk::lang::RObject
Label_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Label_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Label::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_Label_INLRParseNode_INLRString__LRLabel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Label((RParseNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_Label_INLRParseNode__LRLabel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Label((RParseNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Label::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_createCode_INLRCompiler_INLRString__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Label::createCode((RCompiler)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_emitOpCode_INLRCompiler_INLRExecutableArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Label* This = dmi_cast<Label>(This_);
    This->emitOpCode((RCompiler)args[0].getObjectVar(), (RExecutableArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Label_method_postParse_INLRCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Label* This = dmi_cast<Label>(This_);
    This->postParse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Label_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  Label_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Label_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_Label_INLRParseNode_INLRString__LRLabel__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_Label_INLRParseNode_INLRString__LRLabel__arg_op = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "op", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_Label_INLRParseNode_INLRString__LRLabel__args[] = 
{
  &Label_methods_Label_INLRParseNode_INLRString__LRLabel__arg_templ,
  &Label_methods_Label_INLRParseNode_INLRString__LRLabel__arg_op,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_Label_INLRParseNode_INLRString__LRLabel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_Label_INLRParseNode_INLRString__LRLabel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Label", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Label::clazzInfo(), // return type
  "_0_Label", // alternative name of method
  Label_methods_Label_INLRParseNode_INLRString__LRLabel__args, // the arguments
  0, //arguments count
  Label_methods_Label_INLRParseNode_INLRString__LRLabel__exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_Label_INLRParseNode_INLRString__LRLabel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_Label_INLRParseNode__LRLabel__arg_templ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "templ", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParseNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_Label_INLRParseNode__LRLabel__args[] = 
{
  &Label_methods_Label_INLRParseNode__LRLabel__arg_templ,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_Label_INLRParseNode__LRLabel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_Label_INLRParseNode__LRLabel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Label", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Label::clazzInfo(), // return type
  "_1_Label", // alternative name of method
  Label_methods_Label_INLRParseNode__LRLabel__args, // the arguments
  0, //arguments count
  Label_methods_Label_INLRParseNode__LRLabel__exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_Label_INLRParseNode__LRLabel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "codename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args[] = 
{
  &Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_comp,
  &Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_label,
  &Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__arg_codename,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_4_createCode", // alternative name of method
  Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__args, // the arguments
  0, //arguments count
  Label_methods_createCode_INLRCompiler_INLRString_INLRString__LRCode__exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_createCode_INLRCompiler_INLRString_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_createCode_INLRCompiler_INLRString__LRCode__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_createCode_INLRCompiler_INLRString__LRCode__args[] = 
{
  &Label_methods_createCode_INLRCompiler_INLRString__LRCode__arg_comp,
  &Label_methods_createCode_INLRCompiler_INLRString__LRCode__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_createCode_INLRCompiler_INLRString__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_5_createCode", // alternative name of method
  Label_methods_createCode_INLRCompiler_INLRString__LRCode__args, // the arguments
  0, //arguments count
  Label_methods_createCode_INLRCompiler_INLRString__LRCode__exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_createCode_INLRCompiler_INLRString__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_oca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oca", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_args[] = 
{
  &Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_comp,
  &Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_arg_oca,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_emitOpCode_INLRCompiler_INLRExecutableArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "emitOpCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_emitOpCode", // alternative name of method
  Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_args, // the arguments
  0, //arguments count
  Label_methods_emitOpCode_INLRCompiler_INLRExecutableArray__V_exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_emitOpCode_INLRCompiler_INLRExecutableArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Label_methods_postParse_INLRCompiler__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Label_methods_postParse_INLRCompiler__V_args[] = 
{
  &Label_methods_postParse_INLRCompiler__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* Label_methods_postParse_INLRCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Label_method_postParse_INLRCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "postParse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_postParse", // alternative name of method
  Label_methods_postParse_INLRCompiler__V_args, // the arguments
  0, //arguments count
  Label_methods_postParse_INLRCompiler__V_exceptions, // the declared exceptions
  Label_MetainfoWrapper::Label_method_postParse_INLRCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Label_methods[] = 
{
  &Label_method_GetClass__L_acdk_lang_RClass_,
  &Label_method_Label_INLRParseNode_INLRString__LRLabel_,
  &Label_method_Label_INLRParseNode__LRLabel_,
  &Label_method_createCode_INLRCompiler_INLRString_INLRString__LRCode_,
  &Label_method_createCode_INLRCompiler_INLRString__LRCode_,
  &Label_method_emitOpCode_INLRCompiler_INLRExecutableArray__V,
  &Label_method_postParse_INLRCompiler__V,
  0
};


struct Label_MetaInfoInitializer
{  Label_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Label::clazzInfo();
    ci->fields =  _Label_fields;
    ci->methods =  _Label_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Label_MetaInfoInitializer Label_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 


//static
::acdk::lang::RObject
LabelParseNode_create_array(int length)
{
  return new ObjectArrayImpl<RLabelParseNode>(length);
}

//static
::acdk::lang::RObject
LabelParseNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LabelParseNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LabelParseNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LabelParseNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LabelParseNode_method_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LabelParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LabelParseNode_method_LabelParseNode_INLRString_INLRString__LRLabelParseNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LabelParseNode((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LabelParseNode_method_createStandarCode__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LabelParseNode* This = dmi_cast<LabelParseNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LabelParseNode::createStandarCode();
    else
        ret = (::acdk::lang::RObject)This->createStandarCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LabelParseNode_method_parse_INLRCompiler__LRCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LabelParseNode* This = dmi_cast<LabelParseNode>(This_);
    ret = (::acdk::lang::RObject)This->parse((RCompiler)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LabelParseNode_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LabelParseNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LabelParseNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  LabelParseNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LabelParseNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LabelParseNode_MetainfoWrapper::LabelParseNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__args[] = 
{
  &LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_nodename,
  &LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_rulesyntax,
  &LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LabelParseNode_method_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LabelParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LabelParseNode::clazzInfo(), // return type
  "_0_LabelParseNode", // alternative name of method
  LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__args, // the arguments
  0, //arguments count
  LabelParseNode_methods_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__exceptions, // the declared exceptions
  LabelParseNode_MetainfoWrapper::LabelParseNode_method_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__arg_nodename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodename", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__arg_rulesyntax = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rulesyntax", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__args[] = 
{
  &LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__arg_nodename,
  &LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__arg_rulesyntax,
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LabelParseNode_method_LabelParseNode_INLRString_INLRString__LRLabelParseNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LabelParseNode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LabelParseNode::clazzInfo(), // return type
  "_1_LabelParseNode", // alternative name of method
  LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__args, // the arguments
  0, //arguments count
  LabelParseNode_methods_LabelParseNode_INLRString_INLRString__LRLabelParseNode__exceptions, // the declared exceptions
  LabelParseNode_MetainfoWrapper::LabelParseNode_method_LabelParseNode_INLRString_INLRString__LRLabelParseNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LabelParseNode_methods_createStandarCode__LRCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode_methods_createStandarCode__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LabelParseNode_method_createStandarCode__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStandarCode", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_3_createStandarCode", // alternative name of method
  LabelParseNode_methods_createStandarCode__LRCode__args, // the arguments
  0, //arguments count
  LabelParseNode_methods_createStandarCode__LRCode__exceptions, // the declared exceptions
  LabelParseNode_MetainfoWrapper::LabelParseNode_method_createStandarCode__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LabelParseNode_methods_parse_INLRCompiler__LRCode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LabelParseNode_methods_parse_INLRCompiler__LRCode__args[] = 
{
  &LabelParseNode_methods_parse_INLRCompiler__LRCode__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode_methods_parse_INLRCompiler__LRCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LabelParseNode_method_parse_INLRCompiler__LRCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCode::clazzInfo(), // return type
  "_2_parse", // alternative name of method
  LabelParseNode_methods_parse_INLRCompiler__LRCode__args, // the arguments
  0, //arguments count
  LabelParseNode_methods_parse_INLRCompiler__LRCode__exceptions, // the declared exceptions
  LabelParseNode_MetainfoWrapper::LabelParseNode_method_parse_INLRCompiler__LRCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LabelParseNode_methods[] = 
{
  &LabelParseNode_method_GetClass__L_acdk_lang_RClass_,
  &LabelParseNode_method_LabelParseNode_INLRString_INLRString_INLRString__LRLabelParseNode_,
  &LabelParseNode_method_LabelParseNode_INLRString_INLRString__LRLabelParseNode_,
  &LabelParseNode_method_createStandarCode__LRCode_,
  &LabelParseNode_method_parse_INLRCompiler__LRCode_,
  0
};


struct LabelParseNode_MetaInfoInitializer
{  LabelParseNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LabelParseNode::clazzInfo();
    ci->fields =  _LabelParseNode_fields;
    ci->methods =  _LabelParseNode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LabelParseNode_MetaInfoInitializer LabelParseNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace aal


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) aal_dummyExportFunc() {}
#endif

