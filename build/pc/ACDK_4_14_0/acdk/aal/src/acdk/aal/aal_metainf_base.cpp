// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "aal.h"
#include "AalCompiler.h"
#include "AalObject.h"
#include "ClassDecl.h"
#include "CodeTreeInterpreter.h"
#include "Config.h"
#include "Expressions.h"
#include "Identifier.h"
#include "Statements.h"
#include "SubscribeExpressions.h"
#include "Type.h"
#include "TypeName.h"
#include "VarName.h"

namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _ClassMemberAttr_super_Code =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Code::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassMemberAttr_interfaces[] =
{
  &_ClassMemberAttr_super_Code,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassMemberAttr::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ClassMemberAttr", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _ClassMemberAttr_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassMemberAttr(ClassMemberAttr::clazzInfo());

::acdk::lang::RClass
ClassMemberAttr::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ClassMemberAttr::getCollectableFields(FieldReferences& fields)
{
  Code::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _TypeName_super_IdentifierCode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IdentifierCode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TypeName_interfaces[] =
{
  &_TypeName_super_IdentifierCode,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeName::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TypeName", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _TypeName_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TypeName(TypeName::clazzInfo());

::acdk::lang::RClass
TypeName::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TypeName::getCollectableFields(FieldReferences& fields)
{
  IdentifierCode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _TypeNameParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TypeNameParseNode_interfaces[] =
{
  &_TypeNameParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* TypeNameParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TypeNameParseNode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _TypeNameParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TypeNameParseNode(TypeNameParseNode::clazzInfo());

::acdk::lang::RClass
TypeNameParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TypeNameParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _FqTypeName_super_TypeName =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TypeName::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FqTypeName_interfaces[] =
{
  &_FqTypeName_super_TypeName,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeName::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FqTypeName", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _FqTypeName_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FqTypeName(FqTypeName::clazzInfo());

::acdk::lang::RClass
FqTypeName::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FqTypeName::getCollectableFields(FieldReferences& fields)
{
  TypeName::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _FqTypeNameParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FqTypeNameParseNode_interfaces[] =
{
  &_FqTypeNameParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* FqTypeNameParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FqTypeNameParseNode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _FqTypeNameParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FqTypeNameParseNode(FqTypeNameParseNode::clazzInfo());

::acdk::lang::RClass
FqTypeNameParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FqTypeNameParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _IdentifierCode_super_Code =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Code::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IdentifierCode_interfaces[] =
{
  &_IdentifierCode_super_Code,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentifierCode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IdentifierCode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _IdentifierCode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IdentifierCode(IdentifierCode::clazzInfo());

::acdk::lang::RClass
IdentifierCode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IdentifierCode::getCollectableFields(FieldReferences& fields)
{
  Code::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)_identifier._ref_this()); // RString _identifier 
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _VarName_super_IdentifierCode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IdentifierCode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _VarName_interfaces[] =
{
  &_VarName_super_IdentifierCode,
  0
};

::acdk::lang::dmi::ClazzInfo* VarName::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "VarName", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _VarName_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_VarName(VarName::clazzInfo());

::acdk::lang::RClass
VarName::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
VarName::getCollectableFields(FieldReferences& fields)
{
  IdentifierCode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _VarNameParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _VarNameParseNode_interfaces[] =
{
  &_VarNameParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* VarNameParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "VarNameParseNode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _VarNameParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_VarNameParseNode(VarNameParseNode::clazzInfo());

::acdk::lang::RClass
VarNameParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
VarNameParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _Operator_super_VarName =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  VarName::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Operator_interfaces[] =
{
  &_Operator_super_VarName,
  0
};

::acdk::lang::dmi::ClazzInfo* Operator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Operator", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _Operator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Operator(Operator::clazzInfo());

::acdk::lang::RClass
Operator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Operator::getCollectableFields(FieldReferences& fields)
{
  VarName::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _OperatorParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _OperatorParseNode_interfaces[] =
{
  &_OperatorParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* OperatorParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "OperatorParseNode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _OperatorParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_OperatorParseNode(OperatorParseNode::clazzInfo());

::acdk::lang::RClass
OperatorParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
OperatorParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _Label_super_IdentifierCode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IdentifierCode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Label_interfaces[] =
{
  &_Label_super_IdentifierCode,
  0
};

::acdk::lang::dmi::ClazzInfo* Label::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Label", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _Label_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Label(Label::clazzInfo());

::acdk::lang::RClass
Label::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Label::getCollectableFields(FieldReferences& fields)
{
  IdentifierCode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal


namespace acdk { 
namespace aal { 

::acdk::lang::dmi::ClazzSuperInfo _LabelParseNode_super_ParseNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ParseNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LabelParseNode_interfaces[] =
{
  &_LabelParseNode_super_ParseNode,
  0
};

::acdk::lang::dmi::ClazzInfo* LabelParseNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LabelParseNode", // name of class
  "acdk/aal", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  _LabelParseNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // user defined info
  0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LabelParseNode(LabelParseNode::clazzInfo());

::acdk::lang::RClass
LabelParseNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LabelParseNode::getCollectableFields(FieldReferences& fields)
{
  ParseNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace aal

