// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../xpath.h"
#include "../xpath.h"
#include "../XPathEvaluator.h"
#include "../XPathException.h"
#include "../XPathExpression.h"
#include "../XPathNamespace.h"
#include "../XPathNSResolver.h"
#include "../XPathResult.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathEvaluator_create_array(int length)
{
  return new ObjectArrayImpl<RXPathEvaluator>(length);
}

//static
::acdk::lang::RObject
XPathEvaluator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathEvaluator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathEvaluator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathEvaluator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathEvaluator_method_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathEvaluator* This = dmi_cast<XPathEvaluator>(This_);
    ret = (::acdk::lang::RObject)This->createExpression((RString)args[0].getObjectVar(), (RXPathNSResolver)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathEvaluator_method_createNSResolver_INLRNode__LRXPathNSResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathEvaluator* This = dmi_cast<XPathEvaluator>(This_);
    ret = (::acdk::lang::RObject)This->createNSResolver((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathEvaluator_method_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathEvaluator* This = dmi_cast<XPathEvaluator>(This_);
    ret = (::acdk::lang::RObject)This->evaluate((RString)args[0].getObjectVar(), (RNode)args[1].getObjectVar(), (RXPathNSResolver)args[2].getObjectVar(), args[3].getShortVar(), (RObject)args[4].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathEvaluator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathEvaluator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathEvaluator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathEvaluator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathEvaluator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathEvaluator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathEvaluator_MetainfoWrapper::XPathEvaluator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__arg_expression = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expression", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathNSResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__args[] = 
{
  &XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__arg_expression,
  &XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__arg_resolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__exceptions[] =
{
  RXPathException::clazzInfo(), 
  RDOMException::clazzInfo(), 
  0
};

void XPathEvaluator_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathEvaluator_method_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createExpression", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathExpression::clazzInfo(), // return type
  "_0_createExpression", // alternative name of method
  -1, // altlabelHashCode
  XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__args, // the arguments
  0, //arguments count
  XPathEvaluator_methods_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__exceptions, // the declared exceptions
  XPathEvaluator_MetainfoWrapper::XPathEvaluator_method_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__dispatch, // invoke this method
  XPathEvaluator_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__arg_nodeResolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeResolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__args[] = 
{
  &XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__arg_nodeResolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathEvaluator_method_createNSResolver_INLRNode__LRXPathNSResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createNSResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathNSResolver::clazzInfo(), // return type
  "_1_createNSResolver", // alternative name of method
  -1, // altlabelHashCode
  XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__args, // the arguments
  0, //arguments count
  XPathEvaluator_methods_createNSResolver_INLRNode__LRXPathNSResolver__exceptions, // the declared exceptions
  XPathEvaluator_MetainfoWrapper::XPathEvaluator_method_createNSResolver_INLRNode__LRXPathNSResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_expression = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expression", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_contextNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "contextNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathNSResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__args[] = 
{
  &XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_expression,
  &XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_contextNode,
  &XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_resolver,
  &XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_type,
  &XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__exceptions[] =
{
  RXPathException::clazzInfo(), 
  RDOMException::clazzInfo(), 
  0
};

void XPathEvaluator_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathEvaluator_method_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evaluate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_evaluate", // alternative name of method
  -1, // altlabelHashCode
  XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__args, // the arguments
  0, //arguments count
  XPathEvaluator_methods_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__exceptions, // the declared exceptions
  XPathEvaluator_MetainfoWrapper::XPathEvaluator_method_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__dispatch, // invoke this method
  XPathEvaluator_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathEvaluator_methods[] = 
{
  &XPathEvaluator_method_GetClass__L_acdk_lang_RClass_,
  &XPathEvaluator_method_createExpression_INLRString_INLRXPathNSResolver__LRXPathExpression_,
  &XPathEvaluator_method_createNSResolver_INLRNode__LRXPathNSResolver_,
  &XPathEvaluator_method_evaluate_INLRString_INLRNode_INLRXPathNSResolver_SINLRObject__LRObject_,
  0
};


struct XPathEvaluator_MetaInfoInitializer
{  XPathEvaluator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathEvaluator::clazzInfo();
    ci->fields =  _XPathEvaluator_fields;
    ci->methods =  _XPathEvaluator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathEvaluator_MetaInfoInitializer XPathEvaluator_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathException_create_array(int length)
{
  return new ObjectArrayImpl<RXPathException>(length);
}

//static
::acdk::lang::RObject
XPathException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathException_method_XPathException_SINLRString__LRXPathException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XPathException(args[0].getShortVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XPathException_fields__code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XPathException* This = dmi_cast<XPathException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_code, flags);
    else
      This->_code = var.getShortVar();
    return fieldinf;
  }
};


void ThrowException_XPathException(IN(::acdk::lang::RThrowable) ex)
{
  throw RXPathException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo XPathException_fields__code = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  XPathException_MetainfoWrapper::XPathException_fields__code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathException_fields[] = 
{
  &XPathException_fields__code,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathException_MetainfoWrapper::XPathException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathException_methods_XPathException_SINLRString__LRXPathException__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathException_methods_XPathException_SINLRString__LRXPathException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathException_methods_XPathException_SINLRString__LRXPathException__args[] = 
{
  &XPathException_methods_XPathException_SINLRString__LRXPathException__arg_code,
  &XPathException_methods_XPathException_SINLRString__LRXPathException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathException_methods_XPathException_SINLRString__LRXPathException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathException_method_XPathException_SINLRString__LRXPathException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XPathException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XPathException::clazzInfo(), // return type
  "_0_XPathException", // alternative name of method
  -1, // altlabelHashCode
  XPathException_methods_XPathException_SINLRString__LRXPathException__args, // the arguments
  0, //arguments count
  XPathException_methods_XPathException_SINLRString__LRXPathException__exceptions, // the declared exceptions
  XPathException_MetainfoWrapper::XPathException_method_XPathException_SINLRString__LRXPathException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathException_methods[] = 
{
  &XPathException_method_GetClass__L_acdk_lang_RClass_,
  &XPathException_method_XPathException_SINLRString__LRXPathException_,
  0
};


struct XPathException_MetaInfoInitializer
{  XPathException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathException::clazzInfo();
    ci->fields =  _XPathException_fields;
    ci->methods =  _XPathException_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathException_MetaInfoInitializer XPathException_MetaInfoInitializer_staticinstance__;


struct XPathException_clazzInfo_ClazzAttributesResInitializer1
{
  XPathException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)XPathException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_XPathException));
  }
};

XPathException_clazzInfo_ClazzAttributesResInitializer1 XPathException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathExpression_create_array(int length)
{
  return new ObjectArrayImpl<RXPathExpression>(length);
}

//static
::acdk::lang::RObject
XPathExpression_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathExpression_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathExpression_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathExpression::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathExpression_method_evaluate_INLRNode_SINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathExpression* This = dmi_cast<XPathExpression>(This_);
    ret = (::acdk::lang::RObject)This->evaluate((RNode)args[0].getObjectVar(), args[1].getShortVar(), (RObject)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathExpression_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathExpression_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathExpression_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathExpression_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathExpression_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathExpression_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathExpression_MetainfoWrapper::XPathExpression_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_contextNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "contextNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__args[] = 
{
  &XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_contextNode,
  &XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_type,
  &XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__exceptions[] =
{
  RXPathException::clazzInfo(), 
  RDOMException::clazzInfo(), 
  0
};

void XPathExpression_evaluate_INLRNode_SINLRObject__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathExpression_method_evaluate_INLRNode_SINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evaluate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_evaluate", // alternative name of method
  -1, // altlabelHashCode
  XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__args, // the arguments
  0, //arguments count
  XPathExpression_methods_evaluate_INLRNode_SINLRObject__LRObject__exceptions, // the declared exceptions
  XPathExpression_MetainfoWrapper::XPathExpression_method_evaluate_INLRNode_SINLRObject__LRObject__dispatch, // invoke this method
  XPathExpression_evaluate_INLRNode_SINLRObject__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathExpression_methods[] = 
{
  &XPathExpression_method_GetClass__L_acdk_lang_RClass_,
  &XPathExpression_method_evaluate_INLRNode_SINLRObject__LRObject_,
  0
};


struct XPathExpression_MetaInfoInitializer
{  XPathExpression_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathExpression::clazzInfo();
    ci->fields =  _XPathExpression_fields;
    ci->methods =  _XPathExpression_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathExpression_MetaInfoInitializer XPathExpression_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathNamespace_create_array(int length)
{
  return new ObjectArrayImpl<RXPathNamespace>(length);
}

//static
::acdk::lang::RObject
XPathNamespace_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathNamespace_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathNamespace_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathNamespace::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathNamespace_method_getOwnerElement__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathNamespace* This = dmi_cast<XPathNamespace>(This_);
    ret = (::acdk::lang::RObject)This->getOwnerElement();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathNamespace_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathNamespace_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathNamespace_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathNamespace_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathNamespace_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathNamespace_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathNamespace_MetainfoWrapper::XPathNamespace_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathNamespace_methods_getOwnerElement__LRElement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathNamespace_methods_getOwnerElement__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathNamespace_method_getOwnerElement__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_0_getOwnerElement", // alternative name of method
  -1, // altlabelHashCode
  XPathNamespace_methods_getOwnerElement__LRElement__args, // the arguments
  0, //arguments count
  XPathNamespace_methods_getOwnerElement__LRElement__exceptions, // the declared exceptions
  XPathNamespace_MetainfoWrapper::XPathNamespace_method_getOwnerElement__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathNamespace_methods[] = 
{
  &XPathNamespace_method_GetClass__L_acdk_lang_RClass_,
  &XPathNamespace_method_getOwnerElement__LRElement_,
  0
};


struct XPathNamespace_MetaInfoInitializer
{  XPathNamespace_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathNamespace::clazzInfo();
    ci->fields =  _XPathNamespace_fields;
    ci->methods =  _XPathNamespace_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathNamespace_MetaInfoInitializer XPathNamespace_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathNSResolver_create_array(int length)
{
  return new ObjectArrayImpl<RXPathNSResolver>(length);
}

//static
::acdk::lang::RObject
XPathNSResolver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathNSResolver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathNSResolver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathNSResolver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathNSResolver_method_lookupNamespaceURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathNSResolver* This = dmi_cast<XPathNSResolver>(This_);
    ret = (::acdk::lang::RObject)This->lookupNamespaceURI((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathNSResolver_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathNSResolver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathNSResolver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathNSResolver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathNSResolver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathNSResolver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathNSResolver_MetainfoWrapper::XPathNSResolver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__args[] = 
{
  &XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathNSResolver_method_lookupNamespaceURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupNamespaceURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_lookupNamespaceURI", // alternative name of method
  -1, // altlabelHashCode
  XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  XPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__exceptions, // the declared exceptions
  XPathNSResolver_MetainfoWrapper::XPathNSResolver_method_lookupNamespaceURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathNSResolver_methods[] = 
{
  &XPathNSResolver_method_GetClass__L_acdk_lang_RClass_,
  &XPathNSResolver_method_lookupNamespaceURI_INLRString__LRString_,
  0
};


struct XPathNSResolver_MetaInfoInitializer
{  XPathNSResolver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathNSResolver::clazzInfo();
    ci->fields =  _XPathNSResolver_fields;
    ci->methods =  _XPathNSResolver_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathNSResolver_MetaInfoInitializer XPathNSResolver_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathResult_create_array(int length)
{
  return new ObjectArrayImpl<RXPathResult>(length);
}

//static
::acdk::lang::RObject
XPathResult_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathResult_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathResult::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getBooleanValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
  ret = This->getBooleanValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getInvalidIteratorState__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
  ret = This->getInvalidIteratorState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getNumberValue__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
  ret = This->getNumberValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getResultType__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
  ret = This->getResultType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    ret = (::acdk::lang::RObject)This->getSingleNodeValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getSnapshotLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
  ret = This->getSnapshotLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XPathResult::getSnapshotNodeList();
    else
        ret = (::acdk::lang::RObject)This->getSnapshotNodeList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_getStringValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    ret = (::acdk::lang::RObject)This->getStringValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_iterateNext__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    ret = (::acdk::lang::RObject)This->iterateNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XPathResult::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResult* This = dmi_cast<XPathResult>(This_);
    ret = (::acdk::lang::RObject)This->snapshotItem(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathResult_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathResult_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getBooleanValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getBooleanValue__Z_exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_getBooleanValue__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getBooleanValue__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBooleanValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getBooleanValue", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getBooleanValue__Z_args, // the arguments
  0, //arguments count
  XPathResult_methods_getBooleanValue__Z_exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getBooleanValue__Z_dispatch, // invoke this method
  XPathResult_getBooleanValue__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getInvalidIteratorState__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getInvalidIteratorState__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getInvalidIteratorState__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInvalidIteratorState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getInvalidIteratorState", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getInvalidIteratorState__Z_args, // the arguments
  0, //arguments count
  XPathResult_methods_getInvalidIteratorState__Z_exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getInvalidIteratorState__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getNumberValue__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getNumberValue__D_exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_getNumberValue__D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getNumberValue__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_1_getNumberValue", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getNumberValue__D_args, // the arguments
  0, //arguments count
  XPathResult_methods_getNumberValue__D_exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getNumberValue__D_dispatch, // invoke this method
  XPathResult_getNumberValue__D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getResultType__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getResultType__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getResultType__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_0_getResultType", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getResultType__S_args, // the arguments
  0, //arguments count
  XPathResult_methods_getResultType__S_exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getResultType__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_getSingleNodeValue__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSingleNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_4_getSingleNodeValue", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  XPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  XPathResult_getSingleNodeValue__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getSnapshotLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getSnapshotLength__I_exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_getSnapshotLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getSnapshotLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSnapshotLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getSnapshotLength", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getSnapshotLength__I_args, // the arguments
  0, //arguments count
  XPathResult_methods_getSnapshotLength__I_exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getSnapshotLength__I_dispatch, // invoke this method
  XPathResult_getSnapshotLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getSnapshotNodeList__Lorg_w3c_dom_RNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSnapshotNodeList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNodeList::clazzInfo(), // return type
  "_9_getSnapshotNodeList", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__args, // the arguments
  0, //arguments count
  XPathResult_methods_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getSnapshotNodeList__Lorg_w3c_dom_RNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_getStringValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_getStringValue__LRString__exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_getStringValue__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_getStringValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getStringValue", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_getStringValue__LRString__args, // the arguments
  0, //arguments count
  XPathResult_methods_getStringValue__LRString__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_getStringValue__LRString__dispatch, // invoke this method
  XPathResult_getStringValue__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__exceptions[] =
{
  RXPathException::clazzInfo(), 
  RDOMException::clazzInfo(), 
  0
};

void XPathResult_iterateNext__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_iterateNext__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterateNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_7_iterateNext", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  XPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_iterateNext__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  XPathResult_iterateNext__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_a_iterator", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  XPathResult_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__args[] = 
{
  &XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__exceptions[] =
{
  RXPathException::clazzInfo(), 
  0
};

void XPathResult_snapshotItem_I_Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, XPathException) == true)
    THROW_INSTANCE( RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "snapshotItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_8_snapshotItem", // alternative name of method
  -1, // altlabelHashCode
  XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  XPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  XPathResult_MetainfoWrapper::XPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode__dispatch, // invoke this method
  XPathResult_snapshotItem_I_Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathResult_methods[] = 
{
  &XPathResult_method_GetClass__L_acdk_lang_RClass_,
  &XPathResult_method_getBooleanValue__Z,
  &XPathResult_method_getInvalidIteratorState__Z,
  &XPathResult_method_getNumberValue__D,
  &XPathResult_method_getResultType__S,
  &XPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode_,
  &XPathResult_method_getSnapshotLength__I,
  &XPathResult_method_getSnapshotNodeList__Lorg_w3c_dom_RNodeList_,
  &XPathResult_method_getStringValue__LRString_,
  &XPathResult_method_iterateNext__Lorg_w3c_dom_RNode_,
  &XPathResult_method_iterator__Lacdk_util_RIterator_,
  &XPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode_,
  0
};


struct XPathResult_MetaInfoInitializer
{  XPathResult_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathResult::clazzInfo();
    ci->fields =  _XPathResult_fields;
    ci->methods =  _XPathResult_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathResult_MetaInfoInitializer XPathResult_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


namespace org { 
namespace w3c { 
namespace dom { 
namespace xpath { 


//static
::acdk::lang::RObject
XPathResultNodeList_create_array(int length)
{
  return new ObjectArrayImpl<RXPathResultNodeList>(length);
}

//static
::acdk::lang::RObject
XPathResultNodeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XPathResultNodeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResultNodeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XPathResultNodeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResultNodeList_method_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XPathResultNodeList((RXPathResult)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResultNodeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResultNodeList* This = dmi_cast<XPathResultNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XPathResultNodeList::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XPathResultNodeList_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XPathResultNodeList* This = dmi_cast<XPathResultNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XPathResultNodeList::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XPathResultNodeList_fields__result_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XPathResultNodeList* This = dmi_cast<XPathResultNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_result, flags);
    else
      This->_result = (RXPathResult)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XPathResultNodeList_fields__result = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_result", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathResult::clazzInfo(),
  XPathResultNodeList_MetainfoWrapper::XPathResultNodeList_fields__result_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XPathResultNodeList_fields[] = 
{
  &XPathResultNodeList_fields__result,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResultNodeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResultNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResultNodeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XPathResultNodeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XPathResultNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XPathResultNodeList_MetainfoWrapper::XPathResultNodeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXPathResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__args[] = 
{
  &XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResultNodeList_method_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XPathResultNodeList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XPathResultNodeList::clazzInfo(), // return type
  "_0_XPathResultNodeList", // alternative name of method
  -1, // altlabelHashCode
  XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__args, // the arguments
  0, //arguments count
  XPathResultNodeList_methods_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__exceptions, // the declared exceptions
  XPathResultNodeList_MetainfoWrapper::XPathResultNodeList_method_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResultNodeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResultNodeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResultNodeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLength", // alternative name of method
  -1, // altlabelHashCode
  XPathResultNodeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  XPathResultNodeList_methods_getLength__I_exceptions, // the declared exceptions
  XPathResultNodeList_MetainfoWrapper::XPathResultNodeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XPathResultNodeList_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XPathResultNodeList_methods_item_I_LRNode__args[] = 
{
  &XPathResultNodeList_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* XPathResultNodeList_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XPathResultNodeList_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_1_item", // alternative name of method
  -1, // altlabelHashCode
  XPathResultNodeList_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  XPathResultNodeList_methods_item_I_LRNode__exceptions, // the declared exceptions
  XPathResultNodeList_MetainfoWrapper::XPathResultNodeList_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XPathResultNodeList_methods[] = 
{
  &XPathResultNodeList_method_GetClass__L_acdk_lang_RClass_,
  &XPathResultNodeList_method_XPathResultNodeList_INLRXPathResult__LRXPathResultNodeList_,
  &XPathResultNodeList_method_getLength__I,
  &XPathResultNodeList_method_item_I_LRNode_,
  0
};


struct XPathResultNodeList_MetaInfoInitializer
{  XPathResultNodeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XPathResultNodeList::clazzInfo();
    ci->fields =  _XPathResultNodeList_fields;
    ci->methods =  _XPathResultNodeList_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XPathResultNodeList_MetaInfoInitializer XPathResultNodeList_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace xpath


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) xpath_dummyExportFunc() {}
#endif

