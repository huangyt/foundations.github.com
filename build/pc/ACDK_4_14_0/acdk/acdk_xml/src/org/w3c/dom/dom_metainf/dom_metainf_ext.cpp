// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../dom.h"
#include "../Attr.h"
#include "../Branch.h"
#include "../CDATASection.h"
#include "../CharacterData.h"
#include "../Comment.h"
#include "../Document.h"
#include "../DocumentFragment.h"
#include "../DocumentType.h"
#include "../dom.h"
#include "../DOMConfiguration.h"
#include "../DOMError.h"
#include "../DOMErrorHandler.h"
#include "../DOMException.h"
#include "../DOMImplementation.h"
#include "../DOMLocator.h"
#include "../DOMWriter.h"
#include "../Element.h"
#include "../Entity.h"
#include "../EntityReference.h"
#include "../NamedNodeMap.h"
#include "../Node.h"
#include "../NodeList.h"
#include "../Notation.h"
#include "../ProcessingInstruction.h"
#include "../Text.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo org_w3c_dom_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "dom", // name of unit
  -1, // hashCode
  "org/w3c", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_org_w3c_dom_unitInfo(&org_w3c_dom_unitInfo);


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
Attr_create_array(int length)
{
  return new ObjectArrayImpl<RAttr>(length);
}

//static
::acdk::lang::RObject
Attr_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Attr_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attr_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Attr::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attr_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attr* This = dmi_cast<Attr>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attr_method_getSpecified__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attr* This = dmi_cast<Attr>(This_);
  ret = This->getSpecified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attr_method_getValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attr* This = dmi_cast<Attr>(This_);
    ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attr_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attr* This = dmi_cast<Attr>(This_);
    This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Attr_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attr_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attr_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attr_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Attr_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Attr_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Attr_MetainfoWrapper::Attr_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attr_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attr_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attr_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getName", // alternative name of method
  -1, // altlabelHashCode
  Attr_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Attr_methods_getName__LRString__exceptions, // the declared exceptions
  Attr_MetainfoWrapper::Attr_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attr_methods_getSpecified__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attr_methods_getSpecified__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attr_method_getSpecified__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpecified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getSpecified", // alternative name of method
  -1, // altlabelHashCode
  Attr_methods_getSpecified__Z_args, // the arguments
  0, //arguments count
  Attr_methods_getSpecified__Z_exceptions, // the declared exceptions
  Attr_MetainfoWrapper::Attr_method_getSpecified__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attr_methods_getValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attr_methods_getValue__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attr_method_getValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getValue", // alternative name of method
  -1, // altlabelHashCode
  Attr_methods_getValue__LRString__args, // the arguments
  0, //arguments count
  Attr_methods_getValue__LRString__exceptions, // the declared exceptions
  Attr_MetainfoWrapper::Attr_method_getValue__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attr_methods_setValue_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attr_methods_setValue_INLRString__V_args[] = 
{
  &Attr_methods_setValue_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Attr_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attr_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setValue", // alternative name of method
  -1, // altlabelHashCode
  Attr_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  Attr_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  Attr_MetainfoWrapper::Attr_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Attr_methods[] = 
{
  &Attr_method_GetClass__L_acdk_lang_RClass_,
  &Attr_method_getName__LRString_,
  &Attr_method_getSpecified__Z,
  &Attr_method_getValue__LRString_,
  &Attr_method_setValue_INLRString__V,
  0
};


struct Attr_MetaInfoInitializer
{  Attr_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Attr::clazzInfo();
    ci->fields =  _Attr_fields;
    ci->methods =  _Attr_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Attr_MetaInfoInitializer Attr_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
Branch_create_array(int length)
{
  return new ObjectArrayImpl<RBranch>(length);
}

//static
::acdk::lang::RObject
Branch_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Branch_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Branch_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Branch::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Branch_method_addElement_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Branch* This = dmi_cast<Branch>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Branch::addElement((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addElement((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Branch_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Branch_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Branch_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Branch_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Branch_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Branch_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Branch_MetainfoWrapper::Branch_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Branch_methods_addElement_INLRString__LRElement__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Branch_methods_addElement_INLRString__LRElement__args[] = 
{
  &Branch_methods_addElement_INLRString__LRElement__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Branch_methods_addElement_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Branch_method_addElement_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_0_addElement", // alternative name of method
  -1, // altlabelHashCode
  Branch_methods_addElement_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Branch_methods_addElement_INLRString__LRElement__exceptions, // the declared exceptions
  Branch_MetainfoWrapper::Branch_method_addElement_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Branch_methods[] = 
{
  &Branch_method_GetClass__L_acdk_lang_RClass_,
  &Branch_method_addElement_INLRString__LRElement_,
  0
};


struct Branch_MetaInfoInitializer
{  Branch_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Branch::clazzInfo();
    ci->fields =  _Branch_fields;
    ci->methods =  _Branch_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Branch_MetaInfoInitializer Branch_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CDATASection_create_array(int length)
{
  return new ObjectArrayImpl<RCDATASection>(length);
}

//static
::acdk::lang::RObject
CDATASection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CDATASection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CDATASection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CDATASection::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CDATASection_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CDATASection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CDATASection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CDATASection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CDATASection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CDATASection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CDATASection_MetainfoWrapper::CDATASection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CDATASection_methods[] = 
{
  &CDATASection_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct CDATASection_MetaInfoInitializer
{  CDATASection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CDATASection::clazzInfo();
    ci->fields =  _CDATASection_fields;
    ci->methods =  _CDATASection_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CDATASection_MetaInfoInitializer CDATASection_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CharacterData_create_array(int length)
{
  return new ObjectArrayImpl<RCharacterData>(length);
}

//static
::acdk::lang::RObject
CharacterData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharacterData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharacterData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_appendData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    This->appendData((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_deleteData_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    This->deleteData(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_getData__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
  ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_insertData_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    This->insertData(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_replaceData_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    This->replaceData(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_setData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    This->setData((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterData_method_subStringData_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharacterData* This = dmi_cast<CharacterData>(This_);
    ret = (::acdk::lang::RObject)This->subStringData(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CharacterData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharacterData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_appendData_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_appendData_INLRString__V_args[] = 
{
  &CharacterData_methods_appendData_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_appendData_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_appendData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_appendData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_appendData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_appendData_INLRString__V_args, // the arguments
  0, //arguments count
  CharacterData_methods_appendData_INLRString__V_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_appendData_INLRString__V_dispatch, // invoke this method
  CharacterData_appendData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_deleteData_II_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_deleteData_II_V_arg_j = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "j", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_deleteData_II_V_args[] = 
{
  &CharacterData_methods_deleteData_II_V_arg_i,
  &CharacterData_methods_deleteData_II_V_arg_j,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_deleteData_II_V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_deleteData_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_deleteData_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_deleteData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_deleteData_II_V_args, // the arguments
  0, //arguments count
  CharacterData_methods_deleteData_II_V_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_deleteData_II_V_dispatch, // invoke this method
  CharacterData_deleteData_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_getData__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_getData__LRString__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_getData__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_getData__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_getData__LRString__args, // the arguments
  0, //arguments count
  CharacterData_methods_getData__LRString__exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_getData__LRString__dispatch, // invoke this method
  CharacterData_getData__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLength", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_getLength__I_args, // the arguments
  0, //arguments count
  CharacterData_methods_getLength__I_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_insertData_IINLRString__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_insertData_IINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_insertData_IINLRString__V_args[] = 
{
  &CharacterData_methods_insertData_IINLRString__V_arg_i,
  &CharacterData_methods_insertData_IINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_insertData_IINLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_insertData_IINLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_insertData_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_insertData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_insertData_IINLRString__V_args, // the arguments
  0, //arguments count
  CharacterData_methods_insertData_IINLRString__V_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_insertData_IINLRString__V_dispatch, // invoke this method
  CharacterData_insertData_IINLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_replaceData_IIINLRString__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_replaceData_IIINLRString__V_arg_j = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "j", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_replaceData_IIINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_replaceData_IIINLRString__V_args[] = 
{
  &CharacterData_methods_replaceData_IIINLRString__V_arg_i,
  &CharacterData_methods_replaceData_IIINLRString__V_arg_j,
  &CharacterData_methods_replaceData_IIINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_replaceData_IIINLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_replaceData_IIINLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_replaceData_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_replaceData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_replaceData_IIINLRString__V_args, // the arguments
  0, //arguments count
  CharacterData_methods_replaceData_IIINLRString__V_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_replaceData_IIINLRString__V_dispatch, // invoke this method
  CharacterData_replaceData_IIINLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_setData_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_setData_INLRString__V_args[] = 
{
  &CharacterData_methods_setData_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_setData_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_setData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_setData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_setData_INLRString__V_args, // the arguments
  0, //arguments count
  CharacterData_methods_setData_INLRString__V_exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_setData_INLRString__V_dispatch, // invoke this method
  CharacterData_setData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_subStringData_II_LRString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterData_methods_subStringData_II_LRString__arg_j = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "j", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterData_methods_subStringData_II_LRString__args[] = 
{
  &CharacterData_methods_subStringData_II_LRString__arg_i,
  &CharacterData_methods_subStringData_II_LRString__arg_j,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterData_methods_subStringData_II_LRString__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void CharacterData_subStringData_II_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CharacterData_method_subStringData_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subStringData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_subStringData", // alternative name of method
  -1, // altlabelHashCode
  CharacterData_methods_subStringData_II_LRString__args, // the arguments
  0, //arguments count
  CharacterData_methods_subStringData_II_LRString__exceptions, // the declared exceptions
  CharacterData_MetainfoWrapper::CharacterData_method_subStringData_II_LRString__dispatch, // invoke this method
  CharacterData_subStringData_II_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharacterData_methods[] = 
{
  &CharacterData_method_GetClass__L_acdk_lang_RClass_,
  &CharacterData_method_appendData_INLRString__V,
  &CharacterData_method_deleteData_II_V,
  &CharacterData_method_getData__LRString_,
  &CharacterData_method_getLength__I,
  &CharacterData_method_insertData_IINLRString__V,
  &CharacterData_method_replaceData_IIINLRString__V,
  &CharacterData_method_setData_INLRString__V,
  &CharacterData_method_subStringData_II_LRString_,
  0
};


struct CharacterData_MetaInfoInitializer
{  CharacterData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharacterData::clazzInfo();
    ci->fields =  _CharacterData_fields;
    ci->methods =  _CharacterData_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharacterData_MetaInfoInitializer CharacterData_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Comment_create_array(int length)
{
  return new ObjectArrayImpl<RComment>(length);
}

//static
::acdk::lang::RObject
Comment_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Comment_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Comment_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Comment::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Comment_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Comment_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Comment_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Comment_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Comment_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Comment_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Comment_MetainfoWrapper::Comment_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Comment_methods[] = 
{
  &Comment_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Comment_MetaInfoInitializer
{  Comment_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Comment::clazzInfo();
    ci->fields =  _Comment_fields;
    ci->methods =  _Comment_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Comment_MetaInfoInitializer Comment_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Document_create_array(int length)
{
  return new ObjectArrayImpl<RDocument>(length);
}

//static
::acdk::lang::RObject
Document_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Document_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Document::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_addComment_INLRString__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Document::addComment((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createAttribute_INLRString__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createCDATASection_INLRString__LRCDATASection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createCDATASection((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createComment_INLRString__LRComment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createDocumentFragment__LRDocumentFragment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createDocumentFragment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createElement_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createElement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createEntityReference_INLRString__LREntityReference__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createEntityReference((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createProcessingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_createTextNode_INLRString__LRText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->createTextNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_getDoctype__LRDocumentType__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->getDoctype();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_getDocumentElement__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->getDocumentElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_getElementsByTagName_INLRString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->getElementsByTagName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Document_method_getImplementation__LRDOMImplementation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Document* This = dmi_cast<Document>(This_);
    ret = (::acdk::lang::RObject)This->getImplementation();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Document_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Document_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_addComment_INLRString__LRDocument__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_addComment_INLRString__LRDocument__args[] = 
{
  &Document_methods_addComment_INLRString__LRDocument__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_addComment_INLRString__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_addComment_INLRString__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_c_addComment", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_addComment_INLRString__LRDocument__args, // the arguments
  0, //arguments count
  Document_methods_addComment_INLRString__LRDocument__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_addComment_INLRString__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createAttribute_INLRString__LRAttr__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createAttribute_INLRString__LRAttr__args[] = 
{
  &Document_methods_createAttribute_INLRString__LRAttr__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createAttribute_INLRString__LRAttr__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Document_createAttribute_INLRString__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Document_method_createAttribute_INLRString__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_9_createAttribute", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createAttribute_INLRString__LRAttr__args, // the arguments
  0, //arguments count
  Document_methods_createAttribute_INLRString__LRAttr__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createAttribute_INLRString__LRAttr__dispatch, // invoke this method
  Document_createAttribute_INLRString__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createCDATASection_INLRString__LRCDATASection__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createCDATASection_INLRString__LRCDATASection__args[] = 
{
  &Document_methods_createCDATASection_INLRString__LRCDATASection__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createCDATASection_INLRString__LRCDATASection__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Document_createCDATASection_INLRString__LRCDATASection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Document_method_createCDATASection_INLRString__LRCDATASection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCDATASection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCDATASection::clazzInfo(), // return type
  "_7_createCDATASection", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createCDATASection_INLRString__LRCDATASection__args, // the arguments
  0, //arguments count
  Document_methods_createCDATASection_INLRString__LRCDATASection__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createCDATASection_INLRString__LRCDATASection__dispatch, // invoke this method
  Document_createCDATASection_INLRString__LRCDATASection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createComment_INLRString__LRComment__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createComment_INLRString__LRComment__args[] = 
{
  &Document_methods_createComment_INLRString__LRComment__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createComment_INLRString__LRComment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_createComment_INLRString__LRComment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComment::clazzInfo(), // return type
  "_6_createComment", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createComment_INLRString__LRComment__args, // the arguments
  0, //arguments count
  Document_methods_createComment_INLRString__LRComment__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createComment_INLRString__LRComment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createDocumentFragment__LRDocumentFragment__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createDocumentFragment__LRDocumentFragment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_createDocumentFragment__LRDocumentFragment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDocumentFragment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentFragment::clazzInfo(), // return type
  "_4_createDocumentFragment", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createDocumentFragment__LRDocumentFragment__args, // the arguments
  0, //arguments count
  Document_methods_createDocumentFragment__LRDocumentFragment__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createDocumentFragment__LRDocumentFragment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createElement_INLRString__LRElement__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createElement_INLRString__LRElement__args[] = 
{
  &Document_methods_createElement_INLRString__LRElement__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createElement_INLRString__LRElement__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Document_createElement_INLRString__LRElement__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Document_method_createElement_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_3_createElement", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createElement_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Document_methods_createElement_INLRString__LRElement__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createElement_INLRString__LRElement__dispatch, // invoke this method
  Document_createElement_INLRString__LRElement__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createEntityReference_INLRString__LREntityReference__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createEntityReference_INLRString__LREntityReference__args[] = 
{
  &Document_methods_createEntityReference_INLRString__LREntityReference__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createEntityReference_INLRString__LREntityReference__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Document_createEntityReference_INLRString__LREntityReference__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Document_method_createEntityReference_INLRString__LREntityReference_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createEntityReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityReference::clazzInfo(), // return type
  "_a_createEntityReference", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createEntityReference_INLRString__LREntityReference__args, // the arguments
  0, //arguments count
  Document_methods_createEntityReference_INLRString__LREntityReference__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createEntityReference_INLRString__LREntityReference__dispatch, // invoke this method
  Document_createEntityReference_INLRString__LREntityReference__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__args[] = 
{
  &Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s,
  &Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Document_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Document_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createProcessingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcessingInstruction::clazzInfo(), // return type
  "_8_createProcessingInstruction", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__args, // the arguments
  0, //arguments count
  Document_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__dispatch, // invoke this method
  Document_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_createTextNode_INLRString__LRText__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_createTextNode_INLRString__LRText__args[] = 
{
  &Document_methods_createTextNode_INLRString__LRText__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_createTextNode_INLRString__LRText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_createTextNode_INLRString__LRText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTextNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RText::clazzInfo(), // return type
  "_5_createTextNode", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_createTextNode_INLRString__LRText__args, // the arguments
  0, //arguments count
  Document_methods_createTextNode_INLRString__LRText__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_createTextNode_INLRString__LRText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_getDoctype__LRDocumentType__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_getDoctype__LRDocumentType__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_getDoctype__LRDocumentType_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoctype", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentType::clazzInfo(), // return type
  "_0_getDoctype", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_getDoctype__LRDocumentType__args, // the arguments
  0, //arguments count
  Document_methods_getDoctype__LRDocumentType__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_getDoctype__LRDocumentType__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_getDocumentElement__LRElement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_getDocumentElement__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_getDocumentElement__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDocumentElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_2_getDocumentElement", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_getDocumentElement__LRElement__args, // the arguments
  0, //arguments count
  Document_methods_getDocumentElement__LRElement__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_getDocumentElement__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Document_methods_getElementsByTagName_INLRString__LRNodeList__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_getElementsByTagName_INLRString__LRNodeList__args[] = 
{
  &Document_methods_getElementsByTagName_INLRString__LRNodeList__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_getElementsByTagName_INLRString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_getElementsByTagName_INLRString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElementsByTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_b_getElementsByTagName", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_getElementsByTagName_INLRString__LRNodeList__args, // the arguments
  0, //arguments count
  Document_methods_getElementsByTagName_INLRString__LRNodeList__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_getElementsByTagName_INLRString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Document_methods_getImplementation__LRDOMImplementation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Document_methods_getImplementation__LRDOMImplementation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Document_method_getImplementation__LRDOMImplementation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImplementation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMImplementation::clazzInfo(), // return type
  "_1_getImplementation", // alternative name of method
  -1, // altlabelHashCode
  Document_methods_getImplementation__LRDOMImplementation__args, // the arguments
  0, //arguments count
  Document_methods_getImplementation__LRDOMImplementation__exceptions, // the declared exceptions
  Document_MetainfoWrapper::Document_method_getImplementation__LRDOMImplementation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Document_methods[] = 
{
  &Document_method_GetClass__L_acdk_lang_RClass_,
  &Document_method_addComment_INLRString__LRDocument_,
  &Document_method_createAttribute_INLRString__LRAttr_,
  &Document_method_createCDATASection_INLRString__LRCDATASection_,
  &Document_method_createComment_INLRString__LRComment_,
  &Document_method_createDocumentFragment__LRDocumentFragment_,
  &Document_method_createElement_INLRString__LRElement_,
  &Document_method_createEntityReference_INLRString__LREntityReference_,
  &Document_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction_,
  &Document_method_createTextNode_INLRString__LRText_,
  &Document_method_getDoctype__LRDocumentType_,
  &Document_method_getDocumentElement__LRElement_,
  &Document_method_getElementsByTagName_INLRString__LRNodeList_,
  &Document_method_getImplementation__LRDOMImplementation_,
  0
};


struct Document_MetaInfoInitializer
{  Document_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Document::clazzInfo();
    ci->fields =  _Document_fields;
    ci->methods =  _Document_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Document_MetaInfoInitializer Document_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DocumentFragment_create_array(int length)
{
  return new ObjectArrayImpl<RDocumentFragment>(length);
}

//static
::acdk::lang::RObject
DocumentFragment_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DocumentFragment_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentFragment_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DocumentFragment::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DocumentFragment_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentFragment_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentFragment_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentFragment_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DocumentFragment_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DocumentFragment_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DocumentFragment_MetainfoWrapper::DocumentFragment_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DocumentFragment_methods[] = 
{
  &DocumentFragment_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DocumentFragment_MetaInfoInitializer
{  DocumentFragment_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DocumentFragment::clazzInfo();
    ci->fields =  _DocumentFragment_fields;
    ci->methods =  _DocumentFragment_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DocumentFragment_MetaInfoInitializer DocumentFragment_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DocumentType_create_array(int length)
{
  return new ObjectArrayImpl<RDocumentType>(length);
}

//static
::acdk::lang::RObject
DocumentType_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DocumentType_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DocumentType::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_getEntities__LRNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    ret = (::acdk::lang::RObject)This->getEntities();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_getNotations__LRNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    ret = (::acdk::lang::RObject)This->getNotations();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_getPublicID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    ret = (::acdk::lang::RObject)This->getPublicID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_getSystemID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    ret = (::acdk::lang::RObject)This->getSystemID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentType_method_toXML__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentType* This = dmi_cast<DocumentType>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DocumentType::toXML();
    else
        ret = (::acdk::lang::RObject)This->toXML();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DocumentType_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DocumentType_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_getEntities__LRNamedNodeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_getEntities__LRNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_getEntities__LRNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntities", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedNodeMap::clazzInfo(), // return type
  "_1_getEntities", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_getEntities__LRNamedNodeMap__args, // the arguments
  0, //arguments count
  DocumentType_methods_getEntities__LRNamedNodeMap__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_getEntities__LRNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getName", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_getName__LRString__args, // the arguments
  0, //arguments count
  DocumentType_methods_getName__LRString__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_getNotations__LRNamedNodeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_getNotations__LRNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_getNotations__LRNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNotations", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedNodeMap::clazzInfo(), // return type
  "_2_getNotations", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_getNotations__LRNamedNodeMap__args, // the arguments
  0, //arguments count
  DocumentType_methods_getNotations__LRNamedNodeMap__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_getNotations__LRNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_getPublicID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_getPublicID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_getPublicID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getPublicID", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_getPublicID__LRString__args, // the arguments
  0, //arguments count
  DocumentType_methods_getPublicID__LRString__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_getPublicID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_getSystemID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_getSystemID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_getSystemID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getSystemID", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_getSystemID__LRString__args, // the arguments
  0, //arguments count
  DocumentType_methods_getSystemID__LRString__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_getSystemID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentType_methods_toXML__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentType_methods_toXML__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentType_method_toXML__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toXML", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toXML", // alternative name of method
  -1, // altlabelHashCode
  DocumentType_methods_toXML__LRString__args, // the arguments
  0, //arguments count
  DocumentType_methods_toXML__LRString__exceptions, // the declared exceptions
  DocumentType_MetainfoWrapper::DocumentType_method_toXML__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DocumentType_methods[] = 
{
  &DocumentType_method_GetClass__L_acdk_lang_RClass_,
  &DocumentType_method_getEntities__LRNamedNodeMap_,
  &DocumentType_method_getName__LRString_,
  &DocumentType_method_getNotations__LRNamedNodeMap_,
  &DocumentType_method_getPublicID__LRString_,
  &DocumentType_method_getSystemID__LRString_,
  &DocumentType_method_toXML__LRString_,
  0
};


struct DocumentType_MetaInfoInitializer
{  DocumentType_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DocumentType::clazzInfo();
    ci->fields =  _DocumentType_fields;
    ci->methods =  _DocumentType_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DocumentType_MetaInfoInitializer DocumentType_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMConfiguration_create_array(int length)
{
  return new ObjectArrayImpl<RDOMConfiguration>(length);
}

//static
::acdk::lang::RObject
DOMConfiguration_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMConfiguration_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMConfiguration_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMConfiguration::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMConfiguration_method_canSetParameter_INLRString_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMConfiguration* This = dmi_cast<DOMConfiguration>(This_);
  ret = This->canSetParameter((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMConfiguration_method_getParameter_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMConfiguration* This = dmi_cast<DOMConfiguration>(This_);
    ret = (::acdk::lang::RObject)This->getParameter((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMConfiguration_method_getParameterNames__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMConfiguration* This = dmi_cast<DOMConfiguration>(This_);
    ret = (::acdk::lang::RObject)This->getParameterNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMConfiguration_method_setParameter_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMConfiguration* This = dmi_cast<DOMConfiguration>(This_);
    This->setParameter((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMConfiguration_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMConfiguration_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMConfiguration_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMConfiguration_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMConfiguration_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMConfiguration_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMConfiguration_MetainfoWrapper::DOMConfiguration_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_args[] = 
{
  &DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_arg_name,
  &DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMConfiguration_method_canSetParameter_INLRString_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canSetParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_canSetParameter", // alternative name of method
  -1, // altlabelHashCode
  DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_args, // the arguments
  0, //arguments count
  DOMConfiguration_methods_canSetParameter_INLRString_INLRObject__Z_exceptions, // the declared exceptions
  DOMConfiguration_MetainfoWrapper::DOMConfiguration_method_canSetParameter_INLRString_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMConfiguration_methods_getParameter_INLRString__LRObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMConfiguration_methods_getParameter_INLRString__LRObject__args[] = 
{
  &DOMConfiguration_methods_getParameter_INLRString__LRObject__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMConfiguration_methods_getParameter_INLRString__LRObject__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void DOMConfiguration_getParameter_INLRString__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DOMConfiguration_method_getParameter_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_getParameter", // alternative name of method
  -1, // altlabelHashCode
  DOMConfiguration_methods_getParameter_INLRString__LRObject__args, // the arguments
  0, //arguments count
  DOMConfiguration_methods_getParameter_INLRString__LRObject__exceptions, // the declared exceptions
  DOMConfiguration_MetainfoWrapper::DOMConfiguration_method_getParameter_INLRString__LRObject__dispatch, // invoke this method
  DOMConfiguration_getParameter_INLRString__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMConfiguration_methods_getParameterNames__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMConfiguration_methods_getParameterNames__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMConfiguration_method_getParameterNames__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_3_getParameterNames", // alternative name of method
  -1, // altlabelHashCode
  DOMConfiguration_methods_getParameterNames__LRStringArray__args, // the arguments
  0, //arguments count
  DOMConfiguration_methods_getParameterNames__LRStringArray__exceptions, // the declared exceptions
  DOMConfiguration_MetainfoWrapper::DOMConfiguration_method_getParameterNames__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_args[] = 
{
  &DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_arg_name,
  &DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void DOMConfiguration_setParameter_INLRString_INLRObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DOMConfiguration_method_setParameter_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setParameter", // alternative name of method
  -1, // altlabelHashCode
  DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  DOMConfiguration_methods_setParameter_INLRString_INLRObject__V_exceptions, // the declared exceptions
  DOMConfiguration_MetainfoWrapper::DOMConfiguration_method_setParameter_INLRString_INLRObject__V_dispatch, // invoke this method
  DOMConfiguration_setParameter_INLRString_INLRObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMConfiguration_methods[] = 
{
  &DOMConfiguration_method_GetClass__L_acdk_lang_RClass_,
  &DOMConfiguration_method_canSetParameter_INLRString_INLRObject__Z,
  &DOMConfiguration_method_getParameter_INLRString__LRObject_,
  &DOMConfiguration_method_getParameterNames__LRStringArray_,
  &DOMConfiguration_method_setParameter_INLRString_INLRObject__V,
  0
};


struct DOMConfiguration_MetaInfoInitializer
{  DOMConfiguration_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMConfiguration::clazzInfo();
    ci->fields =  _DOMConfiguration_fields;
    ci->methods =  _DOMConfiguration_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMConfiguration_MetaInfoInitializer DOMConfiguration_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMError_create_array(int length)
{
  return new ObjectArrayImpl<RDOMError>(length);
}

//static
::acdk::lang::RObject
DOMError_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMError_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMError::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getLocation__LRDOMLocator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
    ret = (::acdk::lang::RObject)This->getLocation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
    ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getRelatedData__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
    ret = (::acdk::lang::RObject)This->getRelatedData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getRelatedException__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
    ret = (::acdk::lang::RObject)This->getRelatedException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getSeverity__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
  ret = This->getSeverity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMError_method_getType__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMError* This = dmi_cast<DOMError>(This_);
    ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMError_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMError_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getLocation__LRDOMLocator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getLocation__LRDOMLocator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getLocation__LRDOMLocator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMLocator::clazzInfo(), // return type
  "_5_getLocation", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getLocation__LRDOMLocator__args, // the arguments
  0, //arguments count
  DOMError_methods_getLocation__LRDOMLocator__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getLocation__LRDOMLocator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getMessage", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  DOMError_methods_getMessage__LRString__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getRelatedData__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getRelatedData__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getRelatedData__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRelatedData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_getRelatedData", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getRelatedData__LRObject__args, // the arguments
  0, //arguments count
  DOMError_methods_getRelatedData__LRObject__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getRelatedData__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getRelatedException__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getRelatedException__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getRelatedException__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRelatedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getRelatedException", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getRelatedException__LRObject__args, // the arguments
  0, //arguments count
  DOMError_methods_getRelatedException__LRObject__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getRelatedException__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getSeverity__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getSeverity__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getSeverity__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSeverity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_0_getSeverity", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getSeverity__S_args, // the arguments
  0, //arguments count
  DOMError_methods_getSeverity__S_exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getSeverity__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMError_methods_getType__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMError_methods_getType__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMError_method_getType__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getType", // alternative name of method
  -1, // altlabelHashCode
  DOMError_methods_getType__LRString__args, // the arguments
  0, //arguments count
  DOMError_methods_getType__LRString__exceptions, // the declared exceptions
  DOMError_MetainfoWrapper::DOMError_method_getType__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMError_methods[] = 
{
  &DOMError_method_GetClass__L_acdk_lang_RClass_,
  &DOMError_method_getLocation__LRDOMLocator_,
  &DOMError_method_getMessage__LRString_,
  &DOMError_method_getRelatedData__LRObject_,
  &DOMError_method_getRelatedException__LRObject_,
  &DOMError_method_getSeverity__S,
  &DOMError_method_getType__LRString_,
  0
};


struct DOMError_MetaInfoInitializer
{  DOMError_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMError::clazzInfo();
    ci->fields =  _DOMError_fields;
    ci->methods =  _DOMError_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMError_MetaInfoInitializer DOMError_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMErrorHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDOMErrorHandler>(length);
}

//static
::acdk::lang::RObject
DOMErrorHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMErrorHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMErrorHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMErrorHandler_method_handleError_INLRDOMError__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMErrorHandler* This = dmi_cast<DOMErrorHandler>(This_);
  ret = This->handleError((RDOMError)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMErrorHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMErrorHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMErrorHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMErrorHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMErrorHandler_MetainfoWrapper::DOMErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMErrorHandler_methods_handleError_INLRDOMError__Z_arg_error = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "error", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMError::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMErrorHandler_methods_handleError_INLRDOMError__Z_args[] = 
{
  &DOMErrorHandler_methods_handleError_INLRDOMError__Z_arg_error,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMErrorHandler_methods_handleError_INLRDOMError__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMErrorHandler_method_handleError_INLRDOMError__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_handleError", // alternative name of method
  -1, // altlabelHashCode
  DOMErrorHandler_methods_handleError_INLRDOMError__Z_args, // the arguments
  0, //arguments count
  DOMErrorHandler_methods_handleError_INLRDOMError__Z_exceptions, // the declared exceptions
  DOMErrorHandler_MetainfoWrapper::DOMErrorHandler_method_handleError_INLRDOMError__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMErrorHandler_methods[] = 
{
  &DOMErrorHandler_method_GetClass__L_acdk_lang_RClass_,
  &DOMErrorHandler_method_handleError_INLRDOMError__Z,
  0
};


struct DOMErrorHandler_MetaInfoInitializer
{  DOMErrorHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMErrorHandler::clazzInfo();
    ci->fields =  _DOMErrorHandler_fields;
    ci->methods =  _DOMErrorHandler_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMErrorHandler_MetaInfoInitializer DOMErrorHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMException_create_array(int length)
{
  return new ObjectArrayImpl<RDOMException>(length);
}

//static
::acdk::lang::RObject
DOMException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMException_method_DOMException_SINLRString__LRDOMException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DOMException(args[0].getShortVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMException_method_getCode__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMException* This = dmi_cast<DOMException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMException::getCode();
    else
      ret = This->getCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMException_fields__code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMException* This = dmi_cast<DOMException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_code, flags);
    else
      This->_code = var.getShortVar();
    return fieldinf;
  }
};


void ThrowException_DOMException(IN(::acdk::lang::RThrowable) ex)
{
  throw RDOMException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo DOMException_fields__code = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  DOMException_MetainfoWrapper::DOMException_fields__code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMException_fields[] = 
{
  &DOMException_fields__code,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMException_methods_DOMException_SINLRString__LRDOMException__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMException_methods_DOMException_SINLRString__LRDOMException__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMException_methods_DOMException_SINLRString__LRDOMException__args[] = 
{
  &DOMException_methods_DOMException_SINLRString__LRDOMException__arg_code,
  &DOMException_methods_DOMException_SINLRString__LRDOMException__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMException_methods_DOMException_SINLRString__LRDOMException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMException_method_DOMException_SINLRString__LRDOMException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DOMException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DOMException::clazzInfo(), // return type
  "_0_DOMException", // alternative name of method
  -1, // altlabelHashCode
  DOMException_methods_DOMException_SINLRString__LRDOMException__args, // the arguments
  0, //arguments count
  DOMException_methods_DOMException_SINLRString__LRDOMException__exceptions, // the declared exceptions
  DOMException_MetainfoWrapper::DOMException_method_DOMException_SINLRString__LRDOMException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMException_MetainfoWrapper::DOMException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMException_methods_getCode__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMException_methods_getCode__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMException_method_getCode__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_1_getCode", // alternative name of method
  -1, // altlabelHashCode
  DOMException_methods_getCode__S_args, // the arguments
  0, //arguments count
  DOMException_methods_getCode__S_exceptions, // the declared exceptions
  DOMException_MetainfoWrapper::DOMException_method_getCode__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMException_methods[] = 
{
  &DOMException_method_DOMException_SINLRString__LRDOMException_,
  &DOMException_method_GetClass__L_acdk_lang_RClass_,
  &DOMException_method_getCode__S,
  0
};


struct DOMException_MetaInfoInitializer
{  DOMException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMException::clazzInfo();
    ci->fields =  _DOMException_fields;
    ci->methods =  _DOMException_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMException_MetaInfoInitializer DOMException_MetaInfoInitializer_staticinstance__;


struct DOMException_clazzInfo_ClazzAttributesResInitializer1
{
  DOMException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DOMException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_DOMException));
  }
};

DOMException_clazzInfo_ClazzAttributesResInitializer1 DOMException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMImplementation_create_array(int length)
{
  return new ObjectArrayImpl<RDOMImplementation>(length);
}

//static
::acdk::lang::RObject
DOMImplementation_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMImplementation_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMImplementation_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMImplementation::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMImplementation_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMImplementation* This = dmi_cast<DOMImplementation>(This_);
    ret = (::acdk::lang::RObject)This->createDocument((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDocumentType)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMImplementation_method_hasFeature_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMImplementation* This = dmi_cast<DOMImplementation>(This_);
  ret = This->hasFeature((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMImplementation_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMImplementation_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMImplementation_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMImplementation_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMImplementation_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMImplementation_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMImplementation_MetainfoWrapper::DOMImplementation_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_namespaceURI = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namespaceURI", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_qualifiedName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qualifiedName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_doctype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doctype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentType::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__args[] = 
{
  &DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_namespaceURI,
  &DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_qualifiedName,
  &DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_doctype,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMImplementation_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_1_createDocument", // alternative name of method
  -1, // altlabelHashCode
  DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__args, // the arguments
  0, //arguments count
  DOMImplementation_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__exceptions, // the declared exceptions
  DOMImplementation_MetainfoWrapper::DOMImplementation_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_arg_feature = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "feature", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_arg_version = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "version", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_args[] = 
{
  &DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_arg_feature,
  &DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_arg_version,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMImplementation_method_hasFeature_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_hasFeature", // alternative name of method
  -1, // altlabelHashCode
  DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  DOMImplementation_methods_hasFeature_INLRString_INLRString__Z_exceptions, // the declared exceptions
  DOMImplementation_MetainfoWrapper::DOMImplementation_method_hasFeature_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMImplementation_methods[] = 
{
  &DOMImplementation_method_GetClass__L_acdk_lang_RClass_,
  &DOMImplementation_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument_,
  &DOMImplementation_method_hasFeature_INLRString_INLRString__Z,
  0
};


struct DOMImplementation_MetaInfoInitializer
{  DOMImplementation_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMImplementation::clazzInfo();
    ci->fields =  _DOMImplementation_fields;
    ci->methods =  _DOMImplementation_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMImplementation_MetaInfoInitializer DOMImplementation_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMLocator_create_array(int length)
{
  return new ObjectArrayImpl<RDOMLocator>(length);
}

//static
::acdk::lang::RObject
DOMLocator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMLocator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMLocator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getByteOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
  ret = This->getByteOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getColumnNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
  ret = This->getColumnNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getLineNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
  ret = This->getLineNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getRelatedNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
    ret = (::acdk::lang::RObject)This->getRelatedNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getUri__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
    ret = (::acdk::lang::RObject)This->getUri();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMLocator_method_getUtf16Offset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMLocator* This = dmi_cast<DOMLocator>(This_);
  ret = This->getUtf16Offset();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMLocator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMLocator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getByteOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getByteOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getByteOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByteOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getByteOffset", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getByteOffset__I_args, // the arguments
  0, //arguments count
  DOMLocator_methods_getByteOffset__I_exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getByteOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getColumnNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getColumnNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getColumnNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getColumnNumber", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getColumnNumber__I_args, // the arguments
  0, //arguments count
  DOMLocator_methods_getColumnNumber__I_exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getColumnNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getLineNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getLineNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getLineNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getLineNumber", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getLineNumber__I_args, // the arguments
  0, //arguments count
  DOMLocator_methods_getLineNumber__I_exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getLineNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getRelatedNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getRelatedNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getRelatedNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRelatedNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_4_getRelatedNode", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getRelatedNode__LRNode__args, // the arguments
  0, //arguments count
  DOMLocator_methods_getRelatedNode__LRNode__exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getRelatedNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getUri__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getUri__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getUri__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUri", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getUri", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getUri__LRString__args, // the arguments
  0, //arguments count
  DOMLocator_methods_getUri__LRString__exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getUri__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMLocator_methods_getUtf16Offset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMLocator_methods_getUtf16Offset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMLocator_method_getUtf16Offset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUtf16Offset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getUtf16Offset", // alternative name of method
  -1, // altlabelHashCode
  DOMLocator_methods_getUtf16Offset__I_args, // the arguments
  0, //arguments count
  DOMLocator_methods_getUtf16Offset__I_exceptions, // the declared exceptions
  DOMLocator_MetainfoWrapper::DOMLocator_method_getUtf16Offset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMLocator_methods[] = 
{
  &DOMLocator_method_GetClass__L_acdk_lang_RClass_,
  &DOMLocator_method_getByteOffset__I,
  &DOMLocator_method_getColumnNumber__I,
  &DOMLocator_method_getLineNumber__I,
  &DOMLocator_method_getRelatedNode__LRNode_,
  &DOMLocator_method_getUri__LRString_,
  &DOMLocator_method_getUtf16Offset__I,
  0
};


struct DOMLocator_MetaInfoInitializer
{  DOMLocator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMLocator::clazzInfo();
    ci->fields =  _DOMLocator_fields;
    ci->methods =  _DOMLocator_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMLocator_MetaInfoInitializer DOMLocator_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMWriterFormat_create_array(int length)
{
  return new ObjectArrayImpl<RDOMWriterFormat>(length);
}

//static
::acdk::lang::RObject
DOMWriterFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMWriterFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DOMWriterFormat(args[0].getIntVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_DOMWriterFormat__LRDOMWriterFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DOMWriterFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_DOMWriterFormat_I_LRDOMWriterFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DOMWriterFormat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMWriterFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method__escapeAttrValue_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriterFormat::_escapeAttrValue((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_escapeAttrValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_createCompact__LRDOMWriterFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMWriterFormat::createCompact();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_createPretty__LRDOMWriterFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMWriterFormat::createPretty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getEncoding__Lacdk_locale_REncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriterFormat::getEncoding();
    else
        ret = (::acdk::lang::RObject)This->getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getEncodingAsString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriterFormat::getEncodingAsString();
    else
        ret = (::acdk::lang::RObject)This->getEncodingAsString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getExpandEmptyElements__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getExpandEmptyElements();
    else
      ret = This->getExpandEmptyElements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getIndent__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriterFormat::getIndent();
    else
        ret = (::acdk::lang::RObject)This->getIndent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getLineSeperator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriterFormat::getLineSeperator();
    else
        ret = (::acdk::lang::RObject)This->getLineSeperator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getMaxUnescapedCharacter__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getMaxUnescapedCharacter();
    else
      ret = This->getMaxUnescapedCharacter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getNewLineAfterDecl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getNewLineAfterDecl();
    else
      ret = This->getNewLineAfterDecl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getNewLines__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getNewLines();
    else
      ret = This->getNewLines();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getPadText__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getPadText();
    else
      ret = This->getPadText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getSuppressEncodingDecl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getSuppressEncodingDecl();
    else
      ret = This->getSuppressEncodingDecl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getSuppressXmlDecl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getSuppressXmlDecl();
    else
      ret = This->getSuppressXmlDecl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_getTrimText__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriterFormat::getTrimText();
    else
      ret = This->getTrimText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setEncoding_INLacdk_locale_REncoding__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setEncoding((acdk::locale::REncoding)args[0].getObjectVar());
    else
        This->setEncoding((acdk::locale::REncoding)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setExpandEmptyElements_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setExpandEmptyElements(args[0].getBoolVar());
    else
        This->setExpandEmptyElements(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setIndent_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setIndent((RString)args[0].getObjectVar());
    else
        This->setIndent((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setNewLines_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setNewLines(args[0].getBoolVar());
    else
        This->setNewLines(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setPadText_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setPadText(args[0].getBoolVar());
    else
        This->setPadText(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setSuppressEncodingDecl_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setSuppressEncodingDecl(args[0].getBoolVar());
    else
        This->setSuppressEncodingDecl(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setSuppressXmlDecl_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setSuppressXmlDecl(args[0].getBoolVar());
    else
        This->setSuppressXmlDecl(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriterFormat_method_setTrimText_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriterFormat::setTrimText(args[0].getBoolVar());
    else
        This->setTrimText(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriterFormat_fields__doResolveEntityRefs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_doResolveEntityRefs, flags);
    else
      This->_doResolveEntityRefs = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriterFormat_fields__encoding_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoding, flags);
    else
      This->_encoding = (acdk::locale::REncoding)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriterFormat_fields__formatFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_formatFlags, flags);
    else
      This->_formatFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriterFormat_fields__indentString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_indentString, flags);
    else
      This->_indentString = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriterFormat_fields__lineSep_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriterFormat* This = dmi_cast<DOMWriterFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lineSep, flags);
    else
      This->_lineSep = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriterFormat_fields__doResolveEntityRefs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_doResolveEntityRefs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_fields__doResolveEntityRefs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriterFormat_fields__encoding = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoding", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo(),
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_fields__encoding_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriterFormat_fields__formatFlags = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_formatFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_fields__formatFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriterFormat_fields__indentString = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_indentString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_fields__indentString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriterFormat_fields__lineSep = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lineSep", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_fields__lineSep_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMWriterFormat_fields[] = 
{
  &DOMWriterFormat_fields__doResolveEntityRefs,
  &DOMWriterFormat_fields__encoding,
  &DOMWriterFormat_fields__formatFlags,
  &DOMWriterFormat_fields__indentString,
  &DOMWriterFormat_fields__lineSep,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__arg_fflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__args[] = 
{
  &DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__arg_fflags,
  &DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DOMWriterFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DOMWriterFormat::clazzInfo(), // return type
  "_0_DOMWriterFormat", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_DOMWriterFormat__LRDOMWriterFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_DOMWriterFormat__LRDOMWriterFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_DOMWriterFormat__LRDOMWriterFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DOMWriterFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DOMWriterFormat::clazzInfo(), // return type
  "_1_DOMWriterFormat", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_DOMWriterFormat__LRDOMWriterFormat__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_DOMWriterFormat__LRDOMWriterFormat__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_DOMWriterFormat__LRDOMWriterFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__arg_fflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__args[] = 
{
  &DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__arg_fflags,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_DOMWriterFormat_I_LRDOMWriterFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DOMWriterFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DOMWriterFormat::clazzInfo(), // return type
  "_2_DOMWriterFormat", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_DOMWriterFormat_I_LRDOMWriterFormat__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_DOMWriterFormat_I_LRDOMWriterFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__args[] = 
{
  &DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method__escapeAttrValue_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_escapeAttrValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_n__escapeAttrValue", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods__escapeAttrValue_INLRString__LRString__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method__escapeAttrValue_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_createCompact__LRDOMWriterFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_createCompact__LRDOMWriterFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_createCompact__LRDOMWriterFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCompact", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMWriterFormat::clazzInfo(), // return type
  "_k_createCompact", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_createCompact__LRDOMWriterFormat__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_createCompact__LRDOMWriterFormat__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_createCompact__LRDOMWriterFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_createPretty__LRDOMWriterFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_createPretty__LRDOMWriterFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_createPretty__LRDOMWriterFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createPretty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMWriterFormat::clazzInfo(), // return type
  "_l_createPretty", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_createPretty__LRDOMWriterFormat__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_createPretty__LRDOMWriterFormat__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_createPretty__LRDOMWriterFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getEncoding__Lacdk_locale_REncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getEncoding__Lacdk_locale_REncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getEncoding__Lacdk_locale_REncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo(), // return type
  "_3_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getEncoding__Lacdk_locale_REncoding__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getEncoding__Lacdk_locale_REncoding__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getEncoding__Lacdk_locale_REncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getEncodingAsString__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getEncodingAsString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getEncodingAsString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncodingAsString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_4_getEncodingAsString", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getEncodingAsString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getEncodingAsString__Lacdk_lang_RString__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getEncodingAsString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getExpandEmptyElements__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getExpandEmptyElements__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getExpandEmptyElements__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpandEmptyElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_getExpandEmptyElements", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getExpandEmptyElements__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getExpandEmptyElements__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getExpandEmptyElements__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getIndent__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getIndent__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getIndent__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_getIndent", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getIndent__LRString__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getIndent__LRString__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getIndent__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getLineSeperator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getLineSeperator__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getLineSeperator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineSeperator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getLineSeperator", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getLineSeperator__LRString__args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getLineSeperator__LRString__exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getLineSeperator__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getMaxUnescapedCharacter__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getMaxUnescapedCharacter__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getMaxUnescapedCharacter__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxUnescapedCharacter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getMaxUnescapedCharacter", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getMaxUnescapedCharacter__I_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getMaxUnescapedCharacter__I_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getMaxUnescapedCharacter__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getNewLineAfterDecl__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getNewLineAfterDecl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getNewLineAfterDecl__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNewLineAfterDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_getNewLineAfterDecl", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getNewLineAfterDecl__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getNewLineAfterDecl__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getNewLineAfterDecl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getNewLines__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getNewLines__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getNewLines__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNewLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getNewLines", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getNewLines__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getNewLines__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getNewLines__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getPadText__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getPadText__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getPadText__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPadText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_getPadText", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getPadText__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getPadText__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getPadText__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getSuppressEncodingDecl__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getSuppressEncodingDecl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getSuppressEncodingDecl__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuppressEncodingDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_getSuppressEncodingDecl", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getSuppressEncodingDecl__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getSuppressEncodingDecl__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getSuppressEncodingDecl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getSuppressXmlDecl__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getSuppressXmlDecl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getSuppressXmlDecl__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSuppressXmlDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_getSuppressXmlDecl", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getSuppressXmlDecl__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getSuppressXmlDecl__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getSuppressXmlDecl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_getTrimText__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_getTrimText__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_getTrimText__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTrimText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getTrimText", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_getTrimText__Z_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_getTrimText__Z_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_getTrimText__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_args[] = 
{
  &DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setEncoding_INLacdk_locale_REncoding__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setEncoding", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setEncoding_INLacdk_locale_REncoding__V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setEncoding_INLacdk_locale_REncoding__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setExpandEmptyElements_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setExpandEmptyElements_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setExpandEmptyElements_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setExpandEmptyElements_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setExpandEmptyElements_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setExpandEmptyElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setExpandEmptyElements", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setExpandEmptyElements_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setExpandEmptyElements_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setExpandEmptyElements_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setIndent_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setIndent_INLRString__V_args[] = 
{
  &DOMWriterFormat_methods_setIndent_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setIndent_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setIndent_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setIndent", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setIndent_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setIndent_INLRString__V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setIndent_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setNewLines_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setNewLines_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setNewLines_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setNewLines_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setNewLines_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNewLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setNewLines", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setNewLines_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setNewLines_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setNewLines_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setPadText_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setPadText_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setPadText_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setPadText_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setPadText_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPadText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setPadText", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setPadText_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setPadText_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setPadText_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setSuppressEncodingDecl_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSuppressEncodingDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setSuppressEncodingDecl", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setSuppressEncodingDecl_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setSuppressEncodingDecl_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setSuppressXmlDecl_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSuppressXmlDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setSuppressXmlDecl", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setSuppressXmlDecl_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setSuppressXmlDecl_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriterFormat_methods_setTrimText_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriterFormat_methods_setTrimText_Z_V_args[] = 
{
  &DOMWriterFormat_methods_setTrimText_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriterFormat_methods_setTrimText_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriterFormat_method_setTrimText_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTrimText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setTrimText", // alternative name of method
  -1, // altlabelHashCode
  DOMWriterFormat_methods_setTrimText_Z_V_args, // the arguments
  0, //arguments count
  DOMWriterFormat_methods_setTrimText_Z_V_exceptions, // the declared exceptions
  DOMWriterFormat_MetainfoWrapper::DOMWriterFormat_method_setTrimText_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMWriterFormat_methods[] = 
{
  &DOMWriterFormat_method_DOMWriterFormat_IINLacdk_lang_RString__LRDOMWriterFormat_,
  &DOMWriterFormat_method_DOMWriterFormat__LRDOMWriterFormat_,
  &DOMWriterFormat_method_DOMWriterFormat_I_LRDOMWriterFormat_,
  &DOMWriterFormat_method_GetClass__L_acdk_lang_RClass_,
  &DOMWriterFormat_method__escapeAttrValue_INLRString__LRString_,
  &DOMWriterFormat_method_createCompact__LRDOMWriterFormat_,
  &DOMWriterFormat_method_createPretty__LRDOMWriterFormat_,
  &DOMWriterFormat_method_getEncoding__Lacdk_locale_REncoding_,
  &DOMWriterFormat_method_getEncodingAsString__Lacdk_lang_RString_,
  &DOMWriterFormat_method_getExpandEmptyElements__Z,
  &DOMWriterFormat_method_getIndent__LRString_,
  &DOMWriterFormat_method_getLineSeperator__LRString_,
  &DOMWriterFormat_method_getMaxUnescapedCharacter__I,
  &DOMWriterFormat_method_getNewLineAfterDecl__Z,
  &DOMWriterFormat_method_getNewLines__Z,
  &DOMWriterFormat_method_getPadText__Z,
  &DOMWriterFormat_method_getSuppressEncodingDecl__Z,
  &DOMWriterFormat_method_getSuppressXmlDecl__Z,
  &DOMWriterFormat_method_getTrimText__Z,
  &DOMWriterFormat_method_setEncoding_INLacdk_locale_REncoding__V,
  &DOMWriterFormat_method_setExpandEmptyElements_Z_V,
  &DOMWriterFormat_method_setIndent_INLRString__V,
  &DOMWriterFormat_method_setNewLines_Z_V,
  &DOMWriterFormat_method_setPadText_Z_V,
  &DOMWriterFormat_method_setSuppressEncodingDecl_Z_V,
  &DOMWriterFormat_method_setSuppressXmlDecl_Z_V,
  &DOMWriterFormat_method_setTrimText_Z_V,
  0
};


struct DOMWriterFormat_MetaInfoInitializer
{  DOMWriterFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMWriterFormat::clazzInfo();
    ci->fields =  _DOMWriterFormat_fields;
    ci->methods =  _DOMWriterFormat_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMWriterFormat_MetaInfoInitializer DOMWriterFormat_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
DOMWriter_create_array(int length)
{
  return new ObjectArrayImpl<RDOMWriter>(length);
}

//static
::acdk::lang::RObject
DOMWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DOMWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DOMWriter((acdk::io::RWriter)args[0].getObjectVar(), (RDOMWriterFormat)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DOMWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__closeEmptyTag_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_closeEmptyTag((RString)args[0].getObjectVar());
    else
        This->_closeEmptyTag((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__escapeElementEntities_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DOMWriter::_escapeElementEntities((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_escapeElementEntities((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__writeAttributes_INLRElement__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_writeAttributes((RElement)args[0].getObjectVar());
    else
        This->_writeAttributes((RElement)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__writeDeclaration__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_writeDeclaration();
    else
        This->_writeDeclaration();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__writeElementContent_INLRElement__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_writeElementContent((RElement)args[0].getObjectVar());
    else
        This->_writeElementContent((RElement)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__writeEntityRef_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_writeEntityRef((RString)args[0].getObjectVar());
    else
        This->_writeEntityRef((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method__writeNodeValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::_writeNodeValue((RString)args[0].getObjectVar());
    else
        This->_writeNodeValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_getResolveEntityRefs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DOMWriter::getResolveEntityRefs();
    else
      ret = This->getResolveEntityRefs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_setResolveEntityRefs_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::setResolveEntityRefs(args[0].getBoolVar());
    else
        This->setResolveEntityRefs(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeAttribute_INLRAttr__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeAttribute((RAttr)args[0].getObjectVar());
    else
        This->writeAttribute((RAttr)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeCDATA_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeCDATA((RString)args[0].getObjectVar());
    else
        This->writeCDATA((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeComment_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeComment((RString)args[0].getObjectVar());
    else
        This->writeComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeDocType_INLRDocumentType__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeDocType((RDocumentType)args[0].getObjectVar());
    else
        This->writeDocType((RDocumentType)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeDocument_INLRDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeDocument((RDocument)args[0].getObjectVar());
    else
        This->writeDocument((RDocument)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeElement_INLRElement__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeElement((RElement)args[0].getObjectVar());
    else
        This->writeElement((RElement)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeEntity_INLREntity__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeEntity((REntity)args[0].getObjectVar());
    else
        This->writeEntity((REntity)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeIndent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeIndent();
    else
        This->writeIndent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeNode_INLRNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeNode((RNode)args[0].getObjectVar());
    else
        This->writeNode((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeProcessingInstruction_INLRProcessingInstruction__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeProcessingInstruction((RProcessingInstruction)args[0].getObjectVar());
    else
        This->writeProcessingInstruction((RProcessingInstruction)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeText_INLRText__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeText((RText)args[0].getObjectVar());
    else
        This->writeText((RText)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DOMWriter_method_writeln__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DOMWriter::writeln();
    else
        This->writeln();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__doResolveEntityRefs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_doResolveEntityRefs, flags);
    else
      This->_doResolveEntityRefs = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__escapeText_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_escapeText, flags);
    else
      This->_escapeText = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__format_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_format, flags);
    else
      This->_format = (RDOMWriterFormat)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__indentLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_indentLevel, flags);
    else
      This->_indentLevel = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__lastWrittenNodeType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastWrittenNodeType, flags);
    else
      This->_lastWrittenNodeType = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DOMWriter_fields__preserve_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DOMWriter* This = dmi_cast<DOMWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_preserve, flags);
    else
      This->_preserve = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__doResolveEntityRefs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_doResolveEntityRefs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__doResolveEntityRefs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__escapeText = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_escapeText", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__escapeText_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__format = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_format", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMWriterFormat::clazzInfo(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__format_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__indentLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_indentLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__indentLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__lastWrittenNodeType = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lastWrittenNodeType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__lastWrittenNodeType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DOMWriter_fields__preserve = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_preserve", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DOMWriter_MetainfoWrapper::DOMWriter_fields__preserve_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DOMWriter_fields[] = 
{
  &DOMWriter_fields__doResolveEntityRefs,
  &DOMWriter_fields__escapeText,
  &DOMWriter_fields__format,
  &DOMWriter_fields__indentLevel,
  &DOMWriter_fields__lastWrittenNodeType,
  &DOMWriter_fields__preserve,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMWriterFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__args[] = 
{
  &DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__arg_out,
  &DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DOMWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DOMWriter::clazzInfo(), // return type
  "_0_DOMWriter", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__args, // the arguments
  0, //arguments count
  DOMWriter_methods_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DOMWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__closeEmptyTag_INLRString__V_arg_tagname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tagname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__closeEmptyTag_INLRString__V_args[] = 
{
  &DOMWriter_methods__closeEmptyTag_INLRString__V_arg_tagname,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__closeEmptyTag_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__closeEmptyTag_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_closeEmptyTag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g__closeEmptyTag", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__closeEmptyTag_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__closeEmptyTag_INLRString__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__closeEmptyTag_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__escapeElementEntities_INLRString__LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__escapeElementEntities_INLRString__LRString__args[] = 
{
  &DOMWriter_methods__escapeElementEntities_INLRString__LRString__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__escapeElementEntities_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__escapeElementEntities_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_escapeElementEntities", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l__escapeElementEntities", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__escapeElementEntities_INLRString__LRString__args, // the arguments
  0, //arguments count
  DOMWriter_methods__escapeElementEntities_INLRString__LRString__exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__escapeElementEntities_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__writeAttributes_INLRElement__V_arg_element = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "element", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__writeAttributes_INLRElement__V_args[] = 
{
  &DOMWriter_methods__writeAttributes_INLRElement__V_arg_element,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__writeAttributes_INLRElement__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__writeAttributes_INLRElement__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h__writeAttributes", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__writeAttributes_INLRElement__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__writeAttributes_INLRElement__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__writeAttributes_INLRElement__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__writeDeclaration__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__writeDeclaration__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__writeDeclaration__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeDeclaration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f__writeDeclaration", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__writeDeclaration__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__writeDeclaration__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__writeDeclaration__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__writeElementContent_INLRElement__V_arg_element = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "element", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__writeElementContent_INLRElement__V_args[] = 
{
  &DOMWriter_methods__writeElementContent_INLRElement__V_arg_element,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__writeElementContent_INLRElement__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__writeElementContent_INLRElement__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeElementContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i__writeElementContent", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__writeElementContent_INLRElement__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__writeElementContent_INLRElement__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__writeElementContent_INLRElement__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__writeEntityRef_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__writeEntityRef_INLRString__V_args[] = 
{
  &DOMWriter_methods__writeEntityRef_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__writeEntityRef_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__writeEntityRef_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeEntityRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j__writeEntityRef", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__writeEntityRef_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__writeEntityRef_INLRString__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__writeEntityRef_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods__writeNodeValue_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods__writeNodeValue_INLRString__V_args[] = 
{
  &DOMWriter_methods__writeNodeValue_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods__writeNodeValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method__writeNodeValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k__writeNodeValue", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods__writeNodeValue_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods__writeNodeValue_INLRString__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method__writeNodeValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_getResolveEntityRefs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_getResolveEntityRefs__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_getResolveEntityRefs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResolveEntityRefs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_getResolveEntityRefs", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_getResolveEntityRefs__Z_args, // the arguments
  0, //arguments count
  DOMWriter_methods_getResolveEntityRefs__Z_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_getResolveEntityRefs__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_setResolveEntityRefs_Z_V_arg_resolve = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resolve", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_setResolveEntityRefs_Z_V_args[] = 
{
  &DOMWriter_methods_setResolveEntityRefs_Z_V_arg_resolve,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_setResolveEntityRefs_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_setResolveEntityRefs_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setResolveEntityRefs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setResolveEntityRefs", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_setResolveEntityRefs_Z_V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_setResolveEntityRefs_Z_V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_setResolveEntityRefs_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeAttribute_INLRAttr__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeAttribute_INLRAttr__V_args[] = 
{
  &DOMWriter_methods_writeAttribute_INLRAttr__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeAttribute_INLRAttr__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeAttribute_INLRAttr__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_writeAttribute", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeAttribute_INLRAttr__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeAttribute_INLRAttr__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeAttribute_INLRAttr__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeCDATA_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeCDATA_INLRString__V_args[] = 
{
  &DOMWriter_methods_writeCDATA_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeCDATA_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeCDATA_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeCDATA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeCDATA", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeCDATA_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeCDATA_INLRString__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeCDATA_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeComment_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeComment_INLRString__V_args[] = 
{
  &DOMWriter_methods_writeComment_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeComment_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeComment_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_writeComment", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeComment_INLRString__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeComment_INLRString__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeComment_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeDocType_INLRDocumentType__V_arg_doctype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doctype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentType::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeDocType_INLRDocumentType__V_args[] = 
{
  &DOMWriter_methods_writeDocType_INLRDocumentType__V_arg_doctype,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeDocType_INLRDocumentType__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeDocType_INLRDocumentType__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeDocType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_writeDocType", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeDocType_INLRDocumentType__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeDocType_INLRDocumentType__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeDocType_INLRDocumentType__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeDocument_INLRDocument__V_arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeDocument_INLRDocument__V_args[] = 
{
  &DOMWriter_methods_writeDocument_INLRDocument__V_arg_doc,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeDocument_INLRDocument__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeDocument_INLRDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_writeDocument", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeDocument_INLRDocument__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeDocument_INLRDocument__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeDocument_INLRDocument__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeElement_INLRElement__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeElement_INLRElement__V_args[] = 
{
  &DOMWriter_methods_writeElement_INLRElement__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeElement_INLRElement__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeElement_INLRElement__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_writeElement", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeElement_INLRElement__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeElement_INLRElement__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeElement_INLRElement__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeEntity_INLREntity__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntity::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeEntity_INLREntity__V_args[] = 
{
  &DOMWriter_methods_writeEntity_INLREntity__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeEntity_INLREntity__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeEntity_INLREntity__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_writeEntity", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeEntity_INLREntity__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeEntity_INLREntity__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeEntity_INLREntity__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeIndent__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeIndent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeIndent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeIndent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_writeIndent", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeIndent__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeIndent__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeIndent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeNode_INLRNode__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeNode_INLRNode__V_args[] = 
{
  &DOMWriter_methods_writeNode_INLRNode__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeNode_INLRNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeNode_INLRNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_writeNode", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeNode_INLRNode__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeNode_INLRNode__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeNode_INLRNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcessingInstruction::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_args[] = 
{
  &DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeProcessingInstruction_INLRProcessingInstruction__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeProcessingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_writeProcessingInstruction", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeProcessingInstruction_INLRProcessingInstruction__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeProcessingInstruction_INLRProcessingInstruction__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DOMWriter_methods_writeText_INLRText__V_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RText::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeText_INLRText__V_args[] = 
{
  &DOMWriter_methods_writeText_INLRText__V_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeText_INLRText__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeText_INLRText__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_writeText", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeText_INLRText__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeText_INLRText__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeText_INLRText__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DOMWriter_methods_writeln__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DOMWriter_methods_writeln__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DOMWriter_method_writeln__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeln", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_writeln", // alternative name of method
  -1, // altlabelHashCode
  DOMWriter_methods_writeln__V_args, // the arguments
  0, //arguments count
  DOMWriter_methods_writeln__V_exceptions, // the declared exceptions
  DOMWriter_MetainfoWrapper::DOMWriter_method_writeln__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DOMWriter_methods[] = 
{
  &DOMWriter_method_DOMWriter_INLacdk_io_RWriter_INLRDOMWriterFormat__LRDOMWriter_,
  &DOMWriter_method_GetClass__L_acdk_lang_RClass_,
  &DOMWriter_method__closeEmptyTag_INLRString__V,
  &DOMWriter_method__escapeElementEntities_INLRString__LRString_,
  &DOMWriter_method__writeAttributes_INLRElement__V,
  &DOMWriter_method__writeDeclaration__V,
  &DOMWriter_method__writeElementContent_INLRElement__V,
  &DOMWriter_method__writeEntityRef_INLRString__V,
  &DOMWriter_method__writeNodeValue_INLRString__V,
  &DOMWriter_method_getResolveEntityRefs__Z,
  &DOMWriter_method_setResolveEntityRefs_Z_V,
  &DOMWriter_method_writeAttribute_INLRAttr__V,
  &DOMWriter_method_writeCDATA_INLRString__V,
  &DOMWriter_method_writeComment_INLRString__V,
  &DOMWriter_method_writeDocType_INLRDocumentType__V,
  &DOMWriter_method_writeDocument_INLRDocument__V,
  &DOMWriter_method_writeElement_INLRElement__V,
  &DOMWriter_method_writeEntity_INLREntity__V,
  &DOMWriter_method_writeIndent__V,
  &DOMWriter_method_writeNode_INLRNode__V,
  &DOMWriter_method_writeProcessingInstruction_INLRProcessingInstruction__V,
  &DOMWriter_method_writeText_INLRText__V,
  &DOMWriter_method_writeln__V,
  0
};


struct DOMWriter_MetaInfoInitializer
{  DOMWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DOMWriter::clazzInfo();
    ci->fields =  _DOMWriter_fields;
    ci->methods =  _DOMWriter_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DOMWriter_MetaInfoInitializer DOMWriter_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Element_create_array(int length)
{
  return new ObjectArrayImpl<RElement>(length);
}

//static
::acdk::lang::RObject
Element_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Element_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Element::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_addAttribute_INLRString_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Element::addAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_addCDATA_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Element::addCDATA((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCDATA((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_addComment_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Element::addComment((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_addEntity_INLRString_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Element::addEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_addText_INLRString__LRElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Element::addText((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_attribute_I_LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->attribute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_attributeCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
  ret = This->attributeCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_getAttribute_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->getAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_getAttributeNode_INLRString__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->getAttributeNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_getElementsByTagName_INLRString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->getElementsByTagName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_getTagName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->getTagName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_normalize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    This->normalize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_removeAttribute_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    This->removeAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_removeAttributeNode_INLRAttr__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->removeAttributeNode((RAttr)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_setAttribute_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    This->setAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Element_method_setAttributeNode_INLRAttr__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Element* This = dmi_cast<Element>(This_);
    ret = (::acdk::lang::RObject)This->setAttributeNode((RAttr)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Element_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Element_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addAttribute_INLRString_INLRString__LRElement__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addAttribute_INLRString_INLRString__LRElement__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_addAttribute_INLRString_INLRString__LRElement__args[] = 
{
  &Element_methods_addAttribute_INLRString_INLRString__LRElement__arg_name,
  &Element_methods_addAttribute_INLRString_INLRString__LRElement__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_addAttribute_INLRString_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_addAttribute_INLRString_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_b_addAttribute", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_addAttribute_INLRString_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Element_methods_addAttribute_INLRString_INLRString__LRElement__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_addAttribute_INLRString_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addCDATA_INLRString__LRElement__arg_cdata = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cdata", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_addCDATA_INLRString__LRElement__args[] = 
{
  &Element_methods_addCDATA_INLRString__LRElement__arg_cdata,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_addCDATA_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_addCDATA_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addCDATA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_d_addCDATA", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_addCDATA_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Element_methods_addCDATA_INLRString__LRElement__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_addCDATA_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addComment_INLRString__LRElement__arg_comment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_addComment_INLRString__LRElement__args[] = 
{
  &Element_methods_addComment_INLRString__LRElement__arg_comment,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_addComment_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_addComment_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_c_addComment", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_addComment_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Element_methods_addComment_INLRString__LRElement__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_addComment_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addEntity_INLRString_INLRString__LRElement__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addEntity_INLRString_INLRString__LRElement__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_addEntity_INLRString_INLRString__LRElement__args[] = 
{
  &Element_methods_addEntity_INLRString_INLRString__LRElement__arg_name,
  &Element_methods_addEntity_INLRString_INLRString__LRElement__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_addEntity_INLRString_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_addEntity_INLRString_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_e_addEntity", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_addEntity_INLRString_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Element_methods_addEntity_INLRString_INLRString__LRElement__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_addEntity_INLRString_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_addText_INLRString__LRElement__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_addText_INLRString__LRElement__args[] = 
{
  &Element_methods_addText_INLRString__LRElement__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_addText_INLRString__LRElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_addText_INLRString__LRElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RElement::clazzInfo(), // return type
  "_f_addText", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_addText_INLRString__LRElement__args, // the arguments
  0, //arguments count
  Element_methods_addText_INLRString__LRElement__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_addText_INLRString__LRElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_attribute_I_LRAttr__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_attribute_I_LRAttr__args[] = 
{
  &Element_methods_attribute_I_LRAttr__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_attribute_I_LRAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_attribute_I_LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_a_attribute", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_attribute_I_LRAttr__args, // the arguments
  0, //arguments count
  Element_methods_attribute_I_LRAttr__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_attribute_I_LRAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_attributeCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_attributeCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_attributeCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attributeCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_attributeCount", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_attributeCount__I_args, // the arguments
  0, //arguments count
  Element_methods_attributeCount__I_exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_attributeCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_getAttribute_INLRString__LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_getAttribute_INLRString__LRString__args[] = 
{
  &Element_methods_getAttribute_INLRString__LRString__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_getAttribute_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_getAttribute_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getAttribute", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_getAttribute_INLRString__LRString__args, // the arguments
  0, //arguments count
  Element_methods_getAttribute_INLRString__LRString__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_getAttribute_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_getAttributeNode_INLRString__LRAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_getAttributeNode_INLRString__LRAttr__args[] = 
{
  &Element_methods_getAttributeNode_INLRString__LRAttr__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_getAttributeNode_INLRString__LRAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_getAttributeNode_INLRString__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_4_getAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_getAttributeNode_INLRString__LRAttr__args, // the arguments
  0, //arguments count
  Element_methods_getAttributeNode_INLRString__LRAttr__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_getAttributeNode_INLRString__LRAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_getElementsByTagName_INLRString__LRNodeList__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_getElementsByTagName_INLRString__LRNodeList__args[] = 
{
  &Element_methods_getElementsByTagName_INLRString__LRNodeList__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_getElementsByTagName_INLRString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_getElementsByTagName_INLRString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElementsByTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_7_getElementsByTagName", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_getElementsByTagName_INLRString__LRNodeList__args, // the arguments
  0, //arguments count
  Element_methods_getElementsByTagName_INLRString__LRNodeList__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_getElementsByTagName_INLRString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_getTagName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_getTagName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_getTagName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getTagName", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_getTagName__LRString__args, // the arguments
  0, //arguments count
  Element_methods_getTagName__LRString__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_getTagName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_normalize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_normalize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Element_method_normalize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "normalize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_normalize", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_normalize__V_args, // the arguments
  0, //arguments count
  Element_methods_normalize__V_exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_normalize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_removeAttribute_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_removeAttribute_INLRString__V_args[] = 
{
  &Element_methods_removeAttribute_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_removeAttribute_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Element_removeAttribute_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Element_method_removeAttribute_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_removeAttribute", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_removeAttribute_INLRString__V_args, // the arguments
  0, //arguments count
  Element_methods_removeAttribute_INLRString__V_exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_removeAttribute_INLRString__V_dispatch, // invoke this method
  Element_removeAttribute_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_removeAttributeNode_INLRAttr__LRAttr__arg_oldAttr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oldAttr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_removeAttributeNode_INLRAttr__LRAttr__args[] = 
{
  &Element_methods_removeAttributeNode_INLRAttr__LRAttr__arg_oldAttr,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_removeAttributeNode_INLRAttr__LRAttr__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Element_removeAttributeNode_INLRAttr__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Element_method_removeAttributeNode_INLRAttr__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_6_removeAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_removeAttributeNode_INLRAttr__LRAttr__args, // the arguments
  0, //arguments count
  Element_methods_removeAttributeNode_INLRAttr__LRAttr__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_removeAttributeNode_INLRAttr__LRAttr__dispatch, // invoke this method
  Element_removeAttributeNode_INLRAttr__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_setAttribute_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_setAttribute_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_setAttribute_INLRString_INLRString__V_args[] = 
{
  &Element_methods_setAttribute_INLRString_INLRString__V_arg_name,
  &Element_methods_setAttribute_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_setAttribute_INLRString_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Element_setAttribute_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Element_method_setAttribute_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setAttribute", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_setAttribute_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Element_methods_setAttribute_INLRString_INLRString__V_exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_setAttribute_INLRString_INLRString__V_dispatch, // invoke this method
  Element_setAttribute_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Element_methods_setAttributeNode_INLRAttr__LRAttr__arg_newAttr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newAttr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Element_methods_setAttributeNode_INLRAttr__LRAttr__args[] = 
{
  &Element_methods_setAttributeNode_INLRAttr__LRAttr__arg_newAttr,
  0
};

::acdk::lang::dmi::ClazzInfo* Element_methods_setAttributeNode_INLRAttr__LRAttr__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Element_setAttributeNode_INLRAttr__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Element_method_setAttributeNode_INLRAttr__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_5_setAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  Element_methods_setAttributeNode_INLRAttr__LRAttr__args, // the arguments
  0, //arguments count
  Element_methods_setAttributeNode_INLRAttr__LRAttr__exceptions, // the declared exceptions
  Element_MetainfoWrapper::Element_method_setAttributeNode_INLRAttr__LRAttr__dispatch, // invoke this method
  Element_setAttributeNode_INLRAttr__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Element_methods[] = 
{
  &Element_method_GetClass__L_acdk_lang_RClass_,
  &Element_method_addAttribute_INLRString_INLRString__LRElement_,
  &Element_method_addCDATA_INLRString__LRElement_,
  &Element_method_addComment_INLRString__LRElement_,
  &Element_method_addEntity_INLRString_INLRString__LRElement_,
  &Element_method_addText_INLRString__LRElement_,
  &Element_method_attribute_I_LRAttr_,
  &Element_method_attributeCount__I,
  &Element_method_getAttribute_INLRString__LRString_,
  &Element_method_getAttributeNode_INLRString__LRAttr_,
  &Element_method_getElementsByTagName_INLRString__LRNodeList_,
  &Element_method_getTagName__LRString_,
  &Element_method_normalize__V,
  &Element_method_removeAttribute_INLRString__V,
  &Element_method_removeAttributeNode_INLRAttr__LRAttr_,
  &Element_method_setAttribute_INLRString_INLRString__V,
  &Element_method_setAttributeNode_INLRAttr__LRAttr_,
  0
};


struct Element_MetaInfoInitializer
{  Element_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Element::clazzInfo();
    ci->fields =  _Element_fields;
    ci->methods =  _Element_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Element_MetaInfoInitializer Element_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Entity_create_array(int length)
{
  return new ObjectArrayImpl<REntity>(length);
}

//static
::acdk::lang::RObject
Entity_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Entity_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Entity_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Entity::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Entity_method_getNotationName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Entity* This = dmi_cast<Entity>(This_);
    ret = (::acdk::lang::RObject)This->getNotationName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Entity_method_getPublicId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Entity* This = dmi_cast<Entity>(This_);
    ret = (::acdk::lang::RObject)This->getPublicId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Entity_method_getSystemId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Entity* This = dmi_cast<Entity>(This_);
    ret = (::acdk::lang::RObject)This->getSystemId();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Entity_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Entity_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Entity_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Entity_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Entity_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Entity_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Entity_MetainfoWrapper::Entity_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Entity_methods_getNotationName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Entity_methods_getNotationName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Entity_method_getNotationName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNotationName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getNotationName", // alternative name of method
  -1, // altlabelHashCode
  Entity_methods_getNotationName__LRString__args, // the arguments
  0, //arguments count
  Entity_methods_getNotationName__LRString__exceptions, // the declared exceptions
  Entity_MetainfoWrapper::Entity_method_getNotationName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Entity_methods_getPublicId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Entity_methods_getPublicId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Entity_method_getPublicId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getPublicId", // alternative name of method
  -1, // altlabelHashCode
  Entity_methods_getPublicId__LRString__args, // the arguments
  0, //arguments count
  Entity_methods_getPublicId__LRString__exceptions, // the declared exceptions
  Entity_MetainfoWrapper::Entity_method_getPublicId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Entity_methods_getSystemId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Entity_methods_getSystemId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Entity_method_getSystemId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getSystemId", // alternative name of method
  -1, // altlabelHashCode
  Entity_methods_getSystemId__LRString__args, // the arguments
  0, //arguments count
  Entity_methods_getSystemId__LRString__exceptions, // the declared exceptions
  Entity_MetainfoWrapper::Entity_method_getSystemId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Entity_methods[] = 
{
  &Entity_method_GetClass__L_acdk_lang_RClass_,
  &Entity_method_getNotationName__LRString_,
  &Entity_method_getPublicId__LRString_,
  &Entity_method_getSystemId__LRString_,
  0
};


struct Entity_MetaInfoInitializer
{  Entity_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Entity::clazzInfo();
    ci->fields =  _Entity_fields;
    ci->methods =  _Entity_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Entity_MetaInfoInitializer Entity_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
EntityReference_create_array(int length)
{
  return new ObjectArrayImpl<REntityReference>(length);
}

//static
::acdk::lang::RObject
EntityReference_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EntityReference_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EntityReference_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EntityReference::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EntityReference_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EntityReference_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EntityReference_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EntityReference_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EntityReference_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EntityReference_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EntityReference_MetainfoWrapper::EntityReference_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EntityReference_methods[] = 
{
  &EntityReference_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct EntityReference_MetaInfoInitializer
{  EntityReference_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EntityReference::clazzInfo();
    ci->fields =  _EntityReference_fields;
    ci->methods =  _EntityReference_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EntityReference_MetaInfoInitializer EntityReference_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
NamedNodeMap_create_array(int length)
{
  return new ObjectArrayImpl<RNamedNodeMap>(length);
}

//static
::acdk::lang::RObject
NamedNodeMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NamedNodeMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamedNodeMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamedNodeMap* This = dmi_cast<NamedNodeMap>(This_);
  ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamedNodeMap* This = dmi_cast<NamedNodeMap>(This_);
    ret = (::acdk::lang::RObject)This->getNamedItem((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamedNodeMap* This = dmi_cast<NamedNodeMap>(This_);
    ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_removeNamedItem_INLacdk_lang_RString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamedNodeMap* This = dmi_cast<NamedNodeMap>(This_);
    ret = (::acdk::lang::RObject)This->removeNamedItem((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamedNodeMap_method_setNamedItem_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamedNodeMap* This = dmi_cast<NamedNodeMap>(This_);
    ret = (::acdk::lang::RObject)This->setNamedItem((RNode)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NamedNodeMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getLength", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_getLength__I_args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_getLength__I_exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__args[] = 
{
  &NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_0_getNamedItem", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamedNodeMap_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_item_I_LRNode__args[] = 
{
  &NamedNodeMap_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_3_item", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_item_I_LRNode__exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__args[] = 
{
  &NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void NamedNodeMap_removeNamedItem_INLacdk_lang_RString__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_removeNamedItem_INLacdk_lang_RString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_2_removeNamedItem", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_removeNamedItem_INLacdk_lang_RString__LRNode__exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_removeNamedItem_INLacdk_lang_RString__LRNode__dispatch, // invoke this method
  NamedNodeMap_removeNamedItem_INLacdk_lang_RString__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__arg_arg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "arg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__args[] = 
{
  &NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__arg_arg,
  0
};

::acdk::lang::dmi::ClazzInfo* NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void NamedNodeMap_setNamedItem_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NamedNodeMap_method_setNamedItem_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_1_setNamedItem", // alternative name of method
  -1, // altlabelHashCode
  NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  NamedNodeMap_methods_setNamedItem_INLRNode__LRNode__exceptions, // the declared exceptions
  NamedNodeMap_MetainfoWrapper::NamedNodeMap_method_setNamedItem_INLRNode__LRNode__dispatch, // invoke this method
  NamedNodeMap_setNamedItem_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NamedNodeMap_methods[] = 
{
  &NamedNodeMap_method_GetClass__L_acdk_lang_RClass_,
  &NamedNodeMap_method_getLength__I,
  &NamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode_,
  &NamedNodeMap_method_item_I_LRNode_,
  &NamedNodeMap_method_removeNamedItem_INLacdk_lang_RString__LRNode_,
  &NamedNodeMap_method_setNamedItem_INLRNode__LRNode_,
  0
};


struct NamedNodeMap_MetaInfoInitializer
{  NamedNodeMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NamedNodeMap::clazzInfo();
    ci->fields =  _NamedNodeMap_fields;
    ci->methods =  _NamedNodeMap_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NamedNodeMap_MetaInfoInitializer NamedNodeMap_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 


//static
::acdk::lang::RObject
Node_create_array(int length)
{
  return new ObjectArrayImpl<RNode>(length);
}

//static
::acdk::lang::RObject
Node_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Node_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Node::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_appendChild_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->appendChild((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_cloneNode_Z_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->cloneNode(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_detach__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::detach();
    else
        ret = (::acdk::lang::RObject)This->detach();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getAttributes__LRNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getAttributes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getBaseURI__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getBaseURI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getChild_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::getChild(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getChild(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getChildCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Node::getChildCount();
    else
      ret = This->getChildCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getChildNodes__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getChildNodes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getFirstChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getFirstChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getLastChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getLastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getLocalName__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getLocalName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getNamespaceURI__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getNamespaceURI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getNextSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getNextSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getNodeName__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getNodeType__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
  ret = This->getNodeType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getNodeValue__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getNodeValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getOwnerDocument__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getOwnerDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getParentNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getParentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getPrefix__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getPrefix();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getPreviousSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->getPreviousSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_getTextContent__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::getTextContent();
    else
        ret = (::acdk::lang::RObject)This->getTextContent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_hasChildNodes__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
  ret = This->hasChildNodes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_insertBefore_INLRNode_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->insertBefore((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_isEqualNode_INLRNode__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
  ret = This->isEqualNode((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_removeChild_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->removeChild((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_replaceChild_INLRNode_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->replaceChild((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::selectBoolean((acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectBoolean((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectNode_INLacdk_lang_RString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->selectNode((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectNodes_INLacdk_lang_RString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    ret = (::acdk::lang::RObject)This->selectNodes((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::selectNumber((acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectNumber((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::selectObject((acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectObject((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_selectText_INLacdk_lang_RString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::selectText((acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectText((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_setNodeValue_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    This->setNodeValue((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_setPrefix_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    This->setPrefix((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_setTextContent_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Node::setTextContent((acdk::lang::RString)args[0].getObjectVar());
    else
        This->setTextContent((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_toXML__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Node::toXML();
    else
        ret = (::acdk::lang::RObject)This->toXML();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Node::write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (acdk::lang::RString)args[3].getObjectVar());
    else
        This->write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (acdk::lang::RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_write_INLacdk_io_RWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Node::write((acdk::io::RWriter)args[0].getObjectVar());
    else
        This->write((acdk::io::RWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_write_INLacdk_io_RWriter_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Node::write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Node_method_write_INLacdk_io_RWriter_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Node* This = dmi_cast<Node>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Node::write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->write((acdk::io::RWriter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Node_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_E_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Node_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_appendChild_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_appendChild_INLRNode__LRNode__args[] = 
{
  &Node_methods_appendChild_INLRNode__LRNode__arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_appendChild_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_appendChild_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_appendChild_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_k_appendChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_appendChild_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_appendChild_INLRNode__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_appendChild_INLRNode__LRNode__dispatch, // invoke this method
  Node_appendChild_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_cloneNode_Z_LRNode__arg_deepCopy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "deepCopy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_cloneNode_Z_LRNode__args[] = 
{
  &Node_methods_cloneNode_Z_LRNode__arg_deepCopy,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_cloneNode_Z_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_cloneNode_Z_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cloneNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_m_cloneNode", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_cloneNode_Z_LRNode__args, // the arguments
  0, //arguments count
  Node_methods_cloneNode_Z_LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_cloneNode_Z_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_detach__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_detach__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_detach__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_D_detach", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_detach__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_detach__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_detach__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getAttributes__LRNamedNodeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getAttributes__LRNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getAttributes__LRNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedNodeMap::clazzInfo(), // return type
  "_f_getAttributes", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getAttributes__LRNamedNodeMap__args, // the arguments
  0, //arguments count
  Node_methods_getAttributes__LRNamedNodeMap__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getAttributes__LRNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getBaseURI__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getBaseURI__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getBaseURI__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_3_getBaseURI", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getBaseURI__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getBaseURI__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getBaseURI__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_getChild_I_LRNode__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getChild_I_LRNode__args[] = 
{
  &Node_methods_getChild_I_LRNode__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getChild_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getChild_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_B_getChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getChild_I_LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getChild_I_LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getChild_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getChildCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getChildCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getChildCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getChildCount", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getChildCount__I_args, // the arguments
  0, //arguments count
  Node_methods_getChildCount__I_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getChildCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getChildNodes__LRNodeList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getChildNodes__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getChildNodes__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_a_getChildNodes", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getChildNodes__LRNodeList__args, // the arguments
  0, //arguments count
  Node_methods_getChildNodes__LRNodeList__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getChildNodes__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getFirstChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getFirstChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getFirstChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_b_getFirstChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getFirstChild__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getFirstChild__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getFirstChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getLastChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getLastChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getLastChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_c_getLastChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getLastChild__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getLastChild__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getLastChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getLocalName__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getLocalName__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getLocalName__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_2_getLocalName", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getLocalName__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getLocalName__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getLocalName__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getNamespaceURI__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getNamespaceURI__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getNamespaceURI__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNamespaceURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_1_getNamespaceURI", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getNamespaceURI__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getNamespaceURI__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getNamespaceURI__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getNextSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getNextSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getNextSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_e_getNextSibling", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getNextSibling__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getNextSibling__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getNextSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getNodeName__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getNodeName__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getNodeName__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_0_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getNodeName__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getNodeName__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getNodeName__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getNodeType__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getNodeType__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getNodeType__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_8_getNodeType", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getNodeType__S_args, // the arguments
  0, //arguments count
  Node_methods_getNodeType__S_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getNodeType__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getNodeValue__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getNodeValue__Lacdk_lang_RString__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_getNodeValue__Lacdk_lang_RString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_getNodeValue__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_6_getNodeValue", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getNodeValue__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getNodeValue__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getNodeValue__Lacdk_lang_RString__dispatch, // invoke this method
  Node_getNodeValue__Lacdk_lang_RString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getOwnerDocument__LRDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getOwnerDocument__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getOwnerDocument__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_g_getOwnerDocument", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getOwnerDocument__LRDocument__args, // the arguments
  0, //arguments count
  Node_methods_getOwnerDocument__LRDocument__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getOwnerDocument__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getParentNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getParentNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getParentNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_9_getParentNode", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getParentNode__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getParentNode__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getParentNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getPrefix__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getPrefix__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getPrefix__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_4_getPrefix", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getPrefix__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getPrefix__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getPrefix__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getPreviousSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getPreviousSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_getPreviousSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPreviousSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_d_getPreviousSibling", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getPreviousSibling__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_getPreviousSibling__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getPreviousSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_getTextContent__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_getTextContent__Lacdk_lang_RString__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void Node_getTextContent__Lacdk_lang_RString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_getTextContent__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_n_getTextContent", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_getTextContent__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_getTextContent__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_getTextContent__Lacdk_lang_RString__dispatch, // invoke this method
  Node_getTextContent__Lacdk_lang_RString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_hasChildNodes__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_hasChildNodes__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_hasChildNodes__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasChildNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_hasChildNodes", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_hasChildNodes__Z_args, // the arguments
  0, //arguments count
  Node_methods_hasChildNodes__Z_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_hasChildNodes__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_node1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_insertBefore_INLRNode_INLRNode__LRNode__args[] = 
{
  &Node_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_node,
  &Node_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_node1,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_insertBefore_INLRNode_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_insertBefore_INLRNode_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_insertBefore_INLRNode_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertBefore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_h_insertBefore", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_insertBefore_INLRNode_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_insertBefore_INLRNode_INLRNode__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_insertBefore_INLRNode_INLRNode__LRNode__dispatch, // invoke this method
  Node_insertBefore_INLRNode_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_isEqualNode_INLRNode__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_isEqualNode_INLRNode__Z_args[] = 
{
  &Node_methods_isEqualNode_INLRNode__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_isEqualNode_INLRNode__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_isEqualNode_INLRNode__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEqualNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_isEqualNode", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_isEqualNode_INLRNode__Z_args, // the arguments
  0, //arguments count
  Node_methods_isEqualNode_INLRNode__Z_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_isEqualNode_INLRNode__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_removeChild_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_removeChild_INLRNode__LRNode__args[] = 
{
  &Node_methods_removeChild_INLRNode__LRNode__arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_removeChild_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_removeChild_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_removeChild_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_j_removeChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_removeChild_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_removeChild_INLRNode__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_removeChild_INLRNode__LRNode__dispatch, // invoke this method
  Node_removeChild_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_node1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_replaceChild_INLRNode_INLRNode__LRNode__args[] = 
{
  &Node_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_node,
  &Node_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_node1,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_replaceChild_INLRNode_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_replaceChild_INLRNode_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_replaceChild_INLRNode_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_i_replaceChild", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_replaceChild_INLRNode_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_replaceChild_INLRNode_INLRNode__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_replaceChild_INLRNode_INLRNode__LRNode__dispatch, // invoke this method
  Node_replaceChild_INLRNode_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__args[] = 
{
  &Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RBoolean::clazzInfo(), // return type
  "_u_selectBoolean", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__args, // the arguments
  0, //arguments count
  Node_methods_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectNode_INLacdk_lang_RString__LRNode__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectNode_INLacdk_lang_RString__LRNode__args[] = 
{
  &Node_methods_selectNode_INLacdk_lang_RString__LRNode__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectNode_INLacdk_lang_RString__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectNode_INLacdk_lang_RString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_p_selectNode", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectNode_INLacdk_lang_RString__LRNode__args, // the arguments
  0, //arguments count
  Node_methods_selectNode_INLacdk_lang_RString__LRNode__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectNode_INLacdk_lang_RString__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__args[] = 
{
  &Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectNodes_INLacdk_lang_RString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_q_selectNodes", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__args, // the arguments
  0, //arguments count
  Node_methods_selectNodes_INLacdk_lang_RString__LRNodeList__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectNodes_INLacdk_lang_RString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__args[] = 
{
  &Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RNumber::clazzInfo(), // return type
  "_t_selectNumber", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__args, // the arguments
  0, //arguments count
  Node_methods_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__args[] = 
{
  &Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RObject::clazzInfo(), // return type
  "_r_selectObject", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__args, // the arguments
  0, //arguments count
  Node_methods_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__args[] = 
{
  &Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_selectText_INLacdk_lang_RString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_s_selectText", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_selectText_INLacdk_lang_RString__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_selectText_INLacdk_lang_RString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_setNodeValue_INLacdk_lang_RString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_setNodeValue_INLacdk_lang_RString__V_args[] = 
{
  &Node_methods_setNodeValue_INLacdk_lang_RString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_setNodeValue_INLacdk_lang_RString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_setNodeValue_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_setNodeValue_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setNodeValue", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_setNodeValue_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  Node_methods_setNodeValue_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_setNodeValue_INLacdk_lang_RString__V_dispatch, // invoke this method
  Node_setNodeValue_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_setPrefix_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_setPrefix_INLacdk_lang_RString__V_args[] = 
{
  &Node_methods_setPrefix_INLacdk_lang_RString__V_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_setPrefix_INLacdk_lang_RString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Node_setPrefix_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_setPrefix_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setPrefix", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_setPrefix_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  Node_methods_setPrefix_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_setPrefix_INLacdk_lang_RString__V_dispatch, // invoke this method
  Node_setPrefix_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_setTextContent_INLacdk_lang_RString__V_arg_textContent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "textContent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_setTextContent_INLacdk_lang_RString__V_args[] = 
{
  &Node_methods_setTextContent_INLacdk_lang_RString__V_arg_textContent,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_setTextContent_INLacdk_lang_RString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void Node_setTextContent_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Node_method_setTextContent_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTextContent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setTextContent", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_setTextContent_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  Node_methods_setTextContent_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_setTextContent_INLacdk_lang_RString__V_dispatch, // invoke this method
  Node_setTextContent_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_toXML__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_toXML__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_toXML__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toXML", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_v_toXML", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_toXML__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Node_methods_toXML__Lacdk_lang_RString__exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_toXML__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_writeFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "writeFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_indentLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indentLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_args[] = 
{
  &Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_out,
  &Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_writeFlags,
  &Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_indentLevel,
  &Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_write", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  Node_methods_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_write_INLacdk_io_RWriter__V_args[] = 
{
  &Node_methods_write_INLacdk_io_RWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_write_INLacdk_io_RWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_write_INLacdk_io_RWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_write", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_write_INLacdk_io_RWriter__V_args, // the arguments
  0, //arguments count
  Node_methods_write_INLacdk_io_RWriter__V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_write_INLacdk_io_RWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_I_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_I_V_arg_writeFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "writeFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_write_INLacdk_io_RWriter_I_V_args[] = 
{
  &Node_methods_write_INLacdk_io_RWriter_I_V_arg_out,
  &Node_methods_write_INLacdk_io_RWriter_I_V_arg_writeFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_write_INLacdk_io_RWriter_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_write_INLacdk_io_RWriter_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_write", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_write_INLacdk_io_RWriter_I_V_args, // the arguments
  0, //arguments count
  Node_methods_write_INLacdk_io_RWriter_I_V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_write_INLacdk_io_RWriter_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_II_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_II_V_arg_writeFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "writeFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Node_methods_write_INLacdk_io_RWriter_II_V_arg_indentLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indentLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Node_methods_write_INLacdk_io_RWriter_II_V_args[] = 
{
  &Node_methods_write_INLacdk_io_RWriter_II_V_arg_out,
  &Node_methods_write_INLacdk_io_RWriter_II_V_arg_writeFlags,
  &Node_methods_write_INLacdk_io_RWriter_II_V_arg_indentLevel,
  0
};

::acdk::lang::dmi::ClazzInfo* Node_methods_write_INLacdk_io_RWriter_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Node_method_write_INLacdk_io_RWriter_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_write", // alternative name of method
  -1, // altlabelHashCode
  Node_methods_write_INLacdk_io_RWriter_II_V_args, // the arguments
  0, //arguments count
  Node_methods_write_INLacdk_io_RWriter_II_V_exceptions, // the declared exceptions
  Node_MetainfoWrapper::Node_method_write_INLacdk_io_RWriter_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Node_methods[] = 
{
  &Node_method_GetClass__L_acdk_lang_RClass_,
  &Node_method_appendChild_INLRNode__LRNode_,
  &Node_method_cloneNode_Z_LRNode_,
  &Node_method_detach__LRNode_,
  &Node_method_getAttributes__LRNamedNodeMap_,
  &Node_method_getBaseURI__Lacdk_lang_RString_,
  &Node_method_getChild_I_LRNode_,
  &Node_method_getChildCount__I,
  &Node_method_getChildNodes__LRNodeList_,
  &Node_method_getFirstChild__LRNode_,
  &Node_method_getLastChild__LRNode_,
  &Node_method_getLocalName__Lacdk_lang_RString_,
  &Node_method_getNamespaceURI__Lacdk_lang_RString_,
  &Node_method_getNextSibling__LRNode_,
  &Node_method_getNodeName__Lacdk_lang_RString_,
  &Node_method_getNodeType__S,
  &Node_method_getNodeValue__Lacdk_lang_RString_,
  &Node_method_getOwnerDocument__LRDocument_,
  &Node_method_getParentNode__LRNode_,
  &Node_method_getPrefix__Lacdk_lang_RString_,
  &Node_method_getPreviousSibling__LRNode_,
  &Node_method_getTextContent__Lacdk_lang_RString_,
  &Node_method_hasChildNodes__Z,
  &Node_method_insertBefore_INLRNode_INLRNode__LRNode_,
  &Node_method_isEqualNode_INLRNode__Z,
  &Node_method_removeChild_INLRNode__LRNode_,
  &Node_method_replaceChild_INLRNode_INLRNode__LRNode_,
  &Node_method_selectBoolean_INLacdk_lang_RString__Lacdk_lang_RBoolean_,
  &Node_method_selectNode_INLacdk_lang_RString__LRNode_,
  &Node_method_selectNodes_INLacdk_lang_RString__LRNodeList_,
  &Node_method_selectNumber_INLacdk_lang_RString__Lacdk_lang_RNumber_,
  &Node_method_selectObject_INLacdk_lang_RString__Lacdk_lang_RObject_,
  &Node_method_selectText_INLacdk_lang_RString__Lacdk_lang_RString_,
  &Node_method_setNodeValue_INLacdk_lang_RString__V,
  &Node_method_setPrefix_INLacdk_lang_RString__V,
  &Node_method_setTextContent_INLacdk_lang_RString__V,
  &Node_method_toXML__Lacdk_lang_RString_,
  &Node_method_write_INLacdk_io_RWriter_IIINLacdk_lang_RString__V,
  &Node_method_write_INLacdk_io_RWriter__V,
  &Node_method_write_INLacdk_io_RWriter_I_V,
  &Node_method_write_INLacdk_io_RWriter_II_V,
  0
};


struct Node_MetaInfoInitializer
{  Node_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Node::clazzInfo();
    ci->fields =  _Node_fields;
    ci->methods =  _Node_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Node_MetaInfoInitializer Node_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
NodeList_create_array(int length)
{
  return new ObjectArrayImpl<RNodeList>(length);
}

//static
::acdk::lang::RObject
NodeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeList* This = dmi_cast<NodeList>(This_);
  ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeList_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeList* This = dmi_cast<NodeList>(This_);
    ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeList_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeList* This = dmi_cast<NodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeList::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeList_MetainfoWrapper::NodeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getLength", // alternative name of method
  -1, // altlabelHashCode
  NodeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  NodeList_methods_getLength__I_exceptions, // the declared exceptions
  NodeList_MetainfoWrapper::NodeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeList_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeList_methods_item_I_LRNode__args[] = 
{
  &NodeList_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeList_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeList_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_0_item", // alternative name of method
  -1, // altlabelHashCode
  NodeList_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  NodeList_methods_item_I_LRNode__exceptions, // the declared exceptions
  NodeList_MetainfoWrapper::NodeList_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeList_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeList_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeList_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_2_iterator", // alternative name of method
  -1, // altlabelHashCode
  NodeList_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  NodeList_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  NodeList_MetainfoWrapper::NodeList_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeList_methods[] = 
{
  &NodeList_method_GetClass__L_acdk_lang_RClass_,
  &NodeList_method_getLength__I,
  &NodeList_method_item_I_LRNode_,
  &NodeList_method_iterator__Lacdk_util_RIterator_,
  0
};


struct NodeList_MetaInfoInitializer
{  NodeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeList::clazzInfo();
    ci->fields =  _NodeList_fields;
    ci->methods =  _NodeList_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeList_MetaInfoInitializer NodeList_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
NodeListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RNodeListIterator>(length);
}

//static
::acdk::lang::RObject
NodeListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_NodeListIterator_INLRNodeList__LRNodeListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NodeListIterator((RNodeList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_element__Lacdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeListIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NodeListIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_next__Lacdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeListIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeListIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NodeListIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeListIterator_fields__idx_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_idx, flags);
    else
      This->_idx = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeListIterator_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeListIterator* This = dmi_cast<NodeListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = (RNodeList)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NodeListIterator_fields__idx = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_idx", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NodeListIterator_MetainfoWrapper::NodeListIterator_fields__idx_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeListIterator_fields__list = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(),
  NodeListIterator_MetainfoWrapper::NodeListIterator_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeListIterator_fields[] = 
{
  &NodeListIterator_fields__idx,
  &NodeListIterator_fields__list,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__args[] = 
{
  &NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_NodeListIterator_INLRNodeList__LRNodeListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NodeListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NodeListIterator::clazzInfo(), // return type
  "_0_NodeListIterator", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__args, // the arguments
  0, //arguments count
  NodeListIterator_methods_NodeListIterator_INLRNodeList__LRNodeListIterator__exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_NodeListIterator_INLRNodeList__LRNodeListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_element__Lacdk_lang_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_element__Lacdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_element__Lacdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_element__Lacdk_lang_RObject__args, // the arguments
  0, //arguments count
  NodeListIterator_methods_element__Lacdk_lang_RObject__exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_element__Lacdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  NodeListIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_next__Lacdk_lang_RObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_next__Lacdk_lang_RObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_next__Lacdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_next__Lacdk_lang_RObject__args, // the arguments
  0, //arguments count
  NodeListIterator_methods_next__Lacdk_lang_RObject__exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_next__Lacdk_lang_RObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeListIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeListIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeListIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  NodeListIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  NodeListIterator_methods_remove__V_exceptions, // the declared exceptions
  NodeListIterator_MetainfoWrapper::NodeListIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeListIterator_methods[] = 
{
  &NodeListIterator_method_GetClass__L_acdk_lang_RClass_,
  &NodeListIterator_method_NodeListIterator_INLRNodeList__LRNodeListIterator_,
  &NodeListIterator_method_element__Lacdk_lang_RObject_,
  &NodeListIterator_method_hasNext__Z,
  &NodeListIterator_method_next__Lacdk_lang_RObject_,
  &NodeListIterator_method_remove__V,
  0
};


struct NodeListIterator_MetaInfoInitializer
{  NodeListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeListIterator::clazzInfo();
    ci->fields =  _NodeListIterator_fields;
    ci->methods =  _NodeListIterator_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeListIterator_MetaInfoInitializer NodeListIterator_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Notation_create_array(int length)
{
  return new ObjectArrayImpl<RNotation>(length);
}

//static
::acdk::lang::RObject
Notation_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Notation_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notation_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Notation::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notation_method_getPublicID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notation* This = dmi_cast<Notation>(This_);
    ret = (::acdk::lang::RObject)This->getPublicID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notation_method_getSystemID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notation* This = dmi_cast<Notation>(This_);
    ret = (::acdk::lang::RObject)This->getSystemID();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Notation_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notation_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notation_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notation_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Notation_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Notation_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Notation_MetainfoWrapper::Notation_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notation_methods_getPublicID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notation_methods_getPublicID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notation_method_getPublicID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getPublicID", // alternative name of method
  -1, // altlabelHashCode
  Notation_methods_getPublicID__LRString__args, // the arguments
  0, //arguments count
  Notation_methods_getPublicID__LRString__exceptions, // the declared exceptions
  Notation_MetainfoWrapper::Notation_method_getPublicID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notation_methods_getSystemID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notation_methods_getSystemID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notation_method_getSystemID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getSystemID", // alternative name of method
  -1, // altlabelHashCode
  Notation_methods_getSystemID__LRString__args, // the arguments
  0, //arguments count
  Notation_methods_getSystemID__LRString__exceptions, // the declared exceptions
  Notation_MetainfoWrapper::Notation_method_getSystemID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Notation_methods[] = 
{
  &Notation_method_GetClass__L_acdk_lang_RClass_,
  &Notation_method_getPublicID__LRString_,
  &Notation_method_getSystemID__LRString_,
  0
};


struct Notation_MetaInfoInitializer
{  Notation_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Notation::clazzInfo();
    ci->fields =  _Notation_fields;
    ci->methods =  _Notation_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Notation_MetaInfoInitializer Notation_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ProcessingInstruction_create_array(int length)
{
  return new ObjectArrayImpl<RProcessingInstruction>(length);
}

//static
::acdk::lang::RObject
ProcessingInstruction_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProcessingInstruction_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessingInstruction_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProcessingInstruction::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessingInstruction_method_getData__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessingInstruction* This = dmi_cast<ProcessingInstruction>(This_);
    ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessingInstruction_method_getTarget__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessingInstruction* This = dmi_cast<ProcessingInstruction>(This_);
    ret = (::acdk::lang::RObject)This->getTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessingInstruction_method_setData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessingInstruction* This = dmi_cast<ProcessingInstruction>(This_);
    This->setData((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ProcessingInstruction_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessingInstruction_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProcessingInstruction_MetainfoWrapper::ProcessingInstruction_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessingInstruction_methods_getData__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessingInstruction_methods_getData__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessingInstruction_method_getData__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getData", // alternative name of method
  -1, // altlabelHashCode
  ProcessingInstruction_methods_getData__LRString__args, // the arguments
  0, //arguments count
  ProcessingInstruction_methods_getData__LRString__exceptions, // the declared exceptions
  ProcessingInstruction_MetainfoWrapper::ProcessingInstruction_method_getData__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessingInstruction_methods_getTarget__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessingInstruction_methods_getTarget__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessingInstruction_method_getTarget__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getTarget", // alternative name of method
  -1, // altlabelHashCode
  ProcessingInstruction_methods_getTarget__LRString__args, // the arguments
  0, //arguments count
  ProcessingInstruction_methods_getTarget__LRString__exceptions, // the declared exceptions
  ProcessingInstruction_MetainfoWrapper::ProcessingInstruction_method_getTarget__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessingInstruction_methods_setData_INLRString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessingInstruction_methods_setData_INLRString__V_args[] = 
{
  &ProcessingInstruction_methods_setData_INLRString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessingInstruction_methods_setData_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void ProcessingInstruction_setData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ProcessingInstruction_method_setData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setData", // alternative name of method
  -1, // altlabelHashCode
  ProcessingInstruction_methods_setData_INLRString__V_args, // the arguments
  0, //arguments count
  ProcessingInstruction_methods_setData_INLRString__V_exceptions, // the declared exceptions
  ProcessingInstruction_MetainfoWrapper::ProcessingInstruction_method_setData_INLRString__V_dispatch, // invoke this method
  ProcessingInstruction_setData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProcessingInstruction_methods[] = 
{
  &ProcessingInstruction_method_GetClass__L_acdk_lang_RClass_,
  &ProcessingInstruction_method_getData__LRString_,
  &ProcessingInstruction_method_getTarget__LRString_,
  &ProcessingInstruction_method_setData_INLRString__V,
  0
};


struct ProcessingInstruction_MetaInfoInitializer
{  ProcessingInstruction_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProcessingInstruction::clazzInfo();
    ci->fields =  _ProcessingInstruction_fields;
    ci->methods =  _ProcessingInstruction_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProcessingInstruction_MetaInfoInitializer ProcessingInstruction_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


namespace org { 
namespace w3c { 
namespace dom { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Text_create_array(int length)
{
  return new ObjectArrayImpl<RText>(length);
}

//static
::acdk::lang::RObject
Text_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Text_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Text_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Text::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Text_method_splitText_I_LRText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Text* This = dmi_cast<Text>(This_);
    ret = (::acdk::lang::RObject)This->splitText(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Text_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Text_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Text_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Text_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Text_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Text_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Text_MetainfoWrapper::Text_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Text_methods_splitText_I_LRText__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Text_methods_splitText_I_LRText__args[] = 
{
  &Text_methods_splitText_I_LRText__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* Text_methods_splitText_I_LRText__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void Text_splitText_I_LRText__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Text_method_splitText_I_LRText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "splitText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RText::clazzInfo(), // return type
  "_0_splitText", // alternative name of method
  -1, // altlabelHashCode
  Text_methods_splitText_I_LRText__args, // the arguments
  0, //arguments count
  Text_methods_splitText_I_LRText__exceptions, // the declared exceptions
  Text_MetainfoWrapper::Text_method_splitText_I_LRText__dispatch, // invoke this method
  Text_splitText_I_LRText__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Text_methods[] = 
{
  &Text_method_GetClass__L_acdk_lang_RClass_,
  &Text_method_splitText_I_LRText_,
  0
};


struct Text_MetaInfoInitializer
{  Text_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Text::clazzInfo();
    ci->fields =  _Text_fields;
    ci->methods =  _Text_methods;
    ci->_scopeParent = org_w3c_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Text_MetaInfoInitializer Text_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) dom_dummyExportFunc() {}
#endif

