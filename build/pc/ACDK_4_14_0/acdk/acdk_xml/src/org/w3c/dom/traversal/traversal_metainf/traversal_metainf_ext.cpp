// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../traversal.h"
#include "../DocumentTraversal.h"
#include "../NodeFilter.h"
#include "../NodeIterator.h"
#include "../traversal.h"
#include "../TreeWalker.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace org { 
namespace w3c { 
namespace dom { 
namespace traversal { 


//static
::acdk::lang::RObject
DocumentTraversal_create_array(int length)
{
  return new ObjectArrayImpl<RDocumentTraversal>(length);
}

//static
::acdk::lang::RObject
DocumentTraversal_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DocumentTraversal_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentTraversal_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DocumentTraversal::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentTraversal_method_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentTraversal* This = dmi_cast<DocumentTraversal>(This_);
    ret = (::acdk::lang::RObject)This->createNodeIterator((RNode)args[0].getObjectVar(), args[1].getIntVar(), (RNodeFilter)args[2].getObjectVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentTraversal_method_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentTraversal* This = dmi_cast<DocumentTraversal>(This_);
    ret = (::acdk::lang::RObject)This->createTreeWalker((RNode)args[0].getObjectVar(), args[1].getIntVar(), (RNodeFilter)args[2].getObjectVar(), args[3].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DocumentTraversal_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentTraversal_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentTraversal_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentTraversal_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DocumentTraversal_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DocumentTraversal_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DocumentTraversal_MetainfoWrapper::DocumentTraversal_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_whatToShow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "whatToShow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_entityReferenceExpansion = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "entityReferenceExpansion", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__args[] = 
{
  &DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_root,
  &DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_whatToShow,
  &DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_filter,
  &DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__arg_entityReferenceExpansion,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void DocumentTraversal_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentTraversal_method_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createNodeIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeIterator::clazzInfo(), // return type
  "_0_createNodeIterator", // alternative name of method
  -1, // altlabelHashCode
  DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__args, // the arguments
  0, //arguments count
  DocumentTraversal_methods_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__exceptions, // the declared exceptions
  DocumentTraversal_MetainfoWrapper::DocumentTraversal_method_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__dispatch, // invoke this method
  DocumentTraversal_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_whatToShow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "whatToShow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_entityReferenceExpansion = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "entityReferenceExpansion", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__args[] = 
{
  &DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_root,
  &DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_whatToShow,
  &DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_filter,
  &DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__arg_entityReferenceExpansion,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void DocumentTraversal_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentTraversal_method_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTreeWalker", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeWalker::clazzInfo(), // return type
  "_1_createTreeWalker", // alternative name of method
  -1, // altlabelHashCode
  DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__args, // the arguments
  0, //arguments count
  DocumentTraversal_methods_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__exceptions, // the declared exceptions
  DocumentTraversal_MetainfoWrapper::DocumentTraversal_method_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__dispatch, // invoke this method
  DocumentTraversal_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DocumentTraversal_methods[] = 
{
  &DocumentTraversal_method_GetClass__L_acdk_lang_RClass_,
  &DocumentTraversal_method_createNodeIterator_INLRNode_IINLRNodeFilter_Z_LRNodeIterator_,
  &DocumentTraversal_method_createTreeWalker_INLRNode_IINLRNodeFilter_Z_LRTreeWalker_,
  0
};


struct DocumentTraversal_MetaInfoInitializer
{  DocumentTraversal_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DocumentTraversal::clazzInfo();
    ci->fields =  _DocumentTraversal_fields;
    ci->methods =  _DocumentTraversal_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DocumentTraversal_MetaInfoInitializer DocumentTraversal_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace traversal


namespace org { 
namespace w3c { 
namespace dom { 
namespace traversal { 


//static
::acdk::lang::RObject
NodeFilter_create_array(int length)
{
  return new ObjectArrayImpl<RNodeFilter>(length);
}

//static
::acdk::lang::RObject
NodeFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeFilter_method_acceptNode_INLRNode__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeFilter* This = dmi_cast<NodeFilter>(This_);
  ret = This->acceptNode((RNode)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeFilter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeFilter_MetainfoWrapper::NodeFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeFilter_methods_acceptNode_INLRNode__S_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeFilter_methods_acceptNode_INLRNode__S_args[] = 
{
  &NodeFilter_methods_acceptNode_INLRNode__S_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeFilter_methods_acceptNode_INLRNode__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeFilter_method_acceptNode_INLRNode__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_0_acceptNode", // alternative name of method
  -1, // altlabelHashCode
  NodeFilter_methods_acceptNode_INLRNode__S_args, // the arguments
  0, //arguments count
  NodeFilter_methods_acceptNode_INLRNode__S_exceptions, // the declared exceptions
  NodeFilter_MetainfoWrapper::NodeFilter_method_acceptNode_INLRNode__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeFilter_methods[] = 
{
  &NodeFilter_method_GetClass__L_acdk_lang_RClass_,
  &NodeFilter_method_acceptNode_INLRNode__S,
  0
};


struct NodeFilter_MetaInfoInitializer
{  NodeFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeFilter::clazzInfo();
    ci->fields =  _NodeFilter_fields;
    ci->methods =  _NodeFilter_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeFilter_MetaInfoInitializer NodeFilter_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace traversal


namespace org { 
namespace w3c { 
namespace dom { 
namespace traversal { 


//static
::acdk::lang::RObject
NodeIterator_create_array(int length)
{
  return new ObjectArrayImpl<RNodeIterator>(length);
}

//static
::acdk::lang::RObject
NodeIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_detach__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
    This->detach();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_getExpandEntityReferences__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
  ret = This->getExpandEntityReferences();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_getFilter__LRNodeFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
    ret = (::acdk::lang::RObject)This->getFilter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_getRoot__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
    ret = (::acdk::lang::RObject)This->getRoot();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_getWhatToShow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
  ret = This->getWhatToShow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_nextNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
    ret = (::acdk::lang::RObject)This->nextNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIterator_method_previousNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIterator* This = dmi_cast<NodeIterator>(This_);
    ret = (::acdk::lang::RObject)This->previousNode();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeIterator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_detach__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_detach__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_detach__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_detach", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_detach__V_args, // the arguments
  0, //arguments count
  NodeIterator_methods_detach__V_exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_detach__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_getExpandEntityReferences__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_getExpandEntityReferences__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_getExpandEntityReferences__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpandEntityReferences", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getExpandEntityReferences", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_getExpandEntityReferences__Z_args, // the arguments
  0, //arguments count
  NodeIterator_methods_getExpandEntityReferences__Z_exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_getExpandEntityReferences__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_getFilter__LRNodeFilter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_getFilter__LRNodeFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_getFilter__LRNodeFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeFilter::clazzInfo(), // return type
  "_2_getFilter", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_getFilter__LRNodeFilter__args, // the arguments
  0, //arguments count
  NodeIterator_methods_getFilter__LRNodeFilter__exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_getFilter__LRNodeFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_getRoot__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_getRoot__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_getRoot__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_0_getRoot", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_getRoot__LRNode__args, // the arguments
  0, //arguments count
  NodeIterator_methods_getRoot__LRNode__exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_getRoot__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_getWhatToShow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_getWhatToShow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_getWhatToShow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhatToShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getWhatToShow", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_getWhatToShow__I_args, // the arguments
  0, //arguments count
  NodeIterator_methods_getWhatToShow__I_exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_getWhatToShow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_nextNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_nextNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void NodeIterator_nextNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_nextNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_4_nextNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_nextNode__LRNode__args, // the arguments
  0, //arguments count
  NodeIterator_methods_nextNode__LRNode__exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_nextNode__LRNode__dispatch, // invoke this method
  NodeIterator_nextNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIterator_methods_previousNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIterator_methods_previousNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void NodeIterator_previousNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NodeIterator_method_previousNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_5_previousNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIterator_methods_previousNode__LRNode__args, // the arguments
  0, //arguments count
  NodeIterator_methods_previousNode__LRNode__exceptions, // the declared exceptions
  NodeIterator_MetainfoWrapper::NodeIterator_method_previousNode__LRNode__dispatch, // invoke this method
  NodeIterator_previousNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeIterator_methods[] = 
{
  &NodeIterator_method_GetClass__L_acdk_lang_RClass_,
  &NodeIterator_method_detach__V,
  &NodeIterator_method_getExpandEntityReferences__Z,
  &NodeIterator_method_getFilter__LRNodeFilter_,
  &NodeIterator_method_getRoot__LRNode_,
  &NodeIterator_method_getWhatToShow__I,
  &NodeIterator_method_nextNode__LRNode_,
  &NodeIterator_method_previousNode__LRNode_,
  0
};


struct NodeIterator_MetaInfoInitializer
{  NodeIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeIterator::clazzInfo();
    ci->fields =  _NodeIterator_fields;
    ci->methods =  _NodeIterator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeIterator_MetaInfoInitializer NodeIterator_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace traversal


namespace org { 
namespace w3c { 
namespace dom { 
namespace traversal { 


//static
::acdk::lang::RObject
TreeWalker_create_array(int length)
{
  return new ObjectArrayImpl<RTreeWalker>(length);
}

//static
::acdk::lang::RObject
TreeWalker_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeWalker_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeWalker::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_firstChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->firstChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_getCurrentNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->getCurrentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_getExpandEntityReferences__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
  ret = This->getExpandEntityReferences();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_getFilter__LRNodeFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->getFilter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_getRoot__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->getRoot();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_getWhatToShow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
  ret = This->getWhatToShow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_lastChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->lastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_nextNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->nextNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_nextSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->nextSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_parentNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->parentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_previousNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->previousNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_previousSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    ret = (::acdk::lang::RObject)This->previousSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeWalker_method_setCurrentNode_INLRNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeWalker* This = dmi_cast<TreeWalker>(This_);
    This->setCurrentNode((RNode)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeWalker_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeWalker_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_firstChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_firstChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_firstChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_7_firstChild", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_firstChild__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_firstChild__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_firstChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_getCurrentNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_getCurrentNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_getCurrentNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_4_getCurrentNode", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_getCurrentNode__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_getCurrentNode__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_getCurrentNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_getExpandEntityReferences__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_getExpandEntityReferences__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_getExpandEntityReferences__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpandEntityReferences", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getExpandEntityReferences", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_getExpandEntityReferences__Z_args, // the arguments
  0, //arguments count
  TreeWalker_methods_getExpandEntityReferences__Z_exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_getExpandEntityReferences__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_getFilter__LRNodeFilter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_getFilter__LRNodeFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_getFilter__LRNodeFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeFilter::clazzInfo(), // return type
  "_2_getFilter", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_getFilter__LRNodeFilter__args, // the arguments
  0, //arguments count
  TreeWalker_methods_getFilter__LRNodeFilter__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_getFilter__LRNodeFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_getRoot__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_getRoot__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_getRoot__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_0_getRoot", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_getRoot__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_getRoot__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_getRoot__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_getWhatToShow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_getWhatToShow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_getWhatToShow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhatToShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getWhatToShow", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_getWhatToShow__I_args, // the arguments
  0, //arguments count
  TreeWalker_methods_getWhatToShow__I_exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_getWhatToShow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_lastChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_lastChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_lastChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_8_lastChild", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_lastChild__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_lastChild__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_lastChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_nextNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_nextNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_nextNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_c_nextNode", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_nextNode__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_nextNode__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_nextNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_nextSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_nextSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_nextSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_a_nextSibling", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_nextSibling__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_nextSibling__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_nextSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_parentNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_parentNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_parentNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_6_parentNode", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_parentNode__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_parentNode__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_parentNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_previousNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_previousNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_previousNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_b_previousNode", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_previousNode__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_previousNode__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_previousNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_previousSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_previousSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_previousSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_9_previousSibling", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_previousSibling__LRNode__args, // the arguments
  0, //arguments count
  TreeWalker_methods_previousSibling__LRNode__exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_previousSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeWalker_methods_setCurrentNode_INLRNode__V_arg_currentNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "currentNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeWalker_methods_setCurrentNode_INLRNode__V_args[] = 
{
  &TreeWalker_methods_setCurrentNode_INLRNode__V_arg_currentNode,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeWalker_methods_setCurrentNode_INLRNode__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void TreeWalker_setCurrentNode_INLRNode__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo TreeWalker_method_setCurrentNode_INLRNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurrentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setCurrentNode", // alternative name of method
  -1, // altlabelHashCode
  TreeWalker_methods_setCurrentNode_INLRNode__V_args, // the arguments
  0, //arguments count
  TreeWalker_methods_setCurrentNode_INLRNode__V_exceptions, // the declared exceptions
  TreeWalker_MetainfoWrapper::TreeWalker_method_setCurrentNode_INLRNode__V_dispatch, // invoke this method
  TreeWalker_setCurrentNode_INLRNode__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeWalker_methods[] = 
{
  &TreeWalker_method_GetClass__L_acdk_lang_RClass_,
  &TreeWalker_method_firstChild__LRNode_,
  &TreeWalker_method_getCurrentNode__LRNode_,
  &TreeWalker_method_getExpandEntityReferences__Z,
  &TreeWalker_method_getFilter__LRNodeFilter_,
  &TreeWalker_method_getRoot__LRNode_,
  &TreeWalker_method_getWhatToShow__I,
  &TreeWalker_method_lastChild__LRNode_,
  &TreeWalker_method_nextNode__LRNode_,
  &TreeWalker_method_nextSibling__LRNode_,
  &TreeWalker_method_parentNode__LRNode_,
  &TreeWalker_method_previousNode__LRNode_,
  &TreeWalker_method_previousSibling__LRNode_,
  &TreeWalker_method_setCurrentNode_INLRNode__V,
  0
};


struct TreeWalker_MetaInfoInitializer
{  TreeWalker_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeWalker::clazzInfo();
    ci->fields =  _TreeWalker_fields;
    ci->methods =  _TreeWalker_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeWalker_MetaInfoInitializer TreeWalker_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace w3c
} // namespace dom
} // namespace traversal


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) traversal_dummyExportFunc() {}
#endif

