// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sax.h"
#include "../AttributeList.h"
#include "../Attributes.h"
#include "../Config.h"
#include "../ContentHandler.h"
#include "../DeclHandler.h"
#include "../DocumentHandler.h"
#include "../DTDHandler.h"
#include "../EntityResolver.h"
#include "../ErrorHandler.h"
#include "../HandlerBase.h"
#include "../InputSource.h"
#include "../LexicalHandler.h"
#include "../Locator.h"
#include "../Parser.h"
#include "../sax.h"
#include "../SAXException.h"
#include "../SAXNotRecognizedException.h"
#include "../SAXNotSupportedException.h"
#include "../SAXParseException.h"
#include "../XMLFilter.h"
#include "../XMLReader.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo org_xml_sax_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "sax", // name of unit
  -1, // hashCode
  "org/xml", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_org_xml_sax_unitInfo(&org_xml_sax_unitInfo);


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
AttributeList_create_array(int length)
{
  return new ObjectArrayImpl<RAttributeList>(length);
}

//static
::acdk::lang::RObject
AttributeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AttributeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AttributeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
  ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getName_I_L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
    ret = (::acdk::lang::RObject)This->getName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getType_I_L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
    ret = (::acdk::lang::RObject)This->getType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getType_INL_acdk_lang_RString__L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
    ret = (::acdk::lang::RObject)This->getType((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getValue_I_L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
    ret = (::acdk::lang::RObject)This->getValue(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributeList_method_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributeList* This = dmi_cast<AttributeList>(This_);
    ret = (::acdk::lang::RObject)This->getValue((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AttributeList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AttributeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getLength", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  AttributeList_methods_getLength__I_exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributeList_methods_getName_I_L_acdk_lang_RString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getName_I_L_acdk_lang_RString__args[] = 
{
  &AttributeList_methods_getName_I_L_acdk_lang_RString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getName_I_L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getName_I_L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getName_I_L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  AttributeList_methods_getName_I_L_acdk_lang_RString__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getName_I_L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributeList_methods_getType_I_L_acdk_lang_RString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getType_I_L_acdk_lang_RString__args[] = 
{
  &AttributeList_methods_getType_I_L_acdk_lang_RString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getType_I_L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getType_I_L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_2_getType", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getType_I_L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  AttributeList_methods_getType_I_L_acdk_lang_RString__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getType_I_L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__args[] = 
{
  &AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getType_INL_acdk_lang_RString__L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_4_getType", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  AttributeList_methods_getType_INL_acdk_lang_RString__L_acdk_lang_RString__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getType_INL_acdk_lang_RString__L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributeList_methods_getValue_I_L_acdk_lang_RString__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getValue_I_L_acdk_lang_RString__args[] = 
{
  &AttributeList_methods_getValue_I_L_acdk_lang_RString__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getValue_I_L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getValue_I_L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_3_getValue", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getValue_I_L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  AttributeList_methods_getValue_I_L_acdk_lang_RString__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getValue_I_L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__args[] = 
{
  &AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributeList_method_getValue_INL_acdk_lang_RString__L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  AttributeList_methods_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__exceptions, // the declared exceptions
  AttributeList_MetainfoWrapper::AttributeList_method_getValue_INL_acdk_lang_RString__L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AttributeList_methods[] = 
{
  &AttributeList_method_GetClass__L_acdk_lang_RClass_,
  &AttributeList_method_getLength__I,
  &AttributeList_method_getName_I_L_acdk_lang_RString_,
  &AttributeList_method_getType_I_L_acdk_lang_RString_,
  &AttributeList_method_getType_INL_acdk_lang_RString__L_acdk_lang_RString_,
  &AttributeList_method_getValue_I_L_acdk_lang_RString_,
  &AttributeList_method_getValue_INL_acdk_lang_RString__L_acdk_lang_RString_,
  0
};


struct AttributeList_MetaInfoInitializer
{  AttributeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AttributeList::clazzInfo();
    ci->fields =  _AttributeList_fields;
    ci->methods =  _AttributeList_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AttributeList_MetaInfoInitializer AttributeList_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
Attributes_create_array(int length)
{
  return new ObjectArrayImpl<RAttributes>(length);
}

//static
::acdk::lang::RObject
Attributes_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Attributes_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Attributes::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
  ret = This->getIndex((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getIndex_INLacdk_lang_RString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
  ret = This->getIndex((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
  ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getLocalName_I_Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getLocalName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getQName_I_Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getQName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getType_I_Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getType((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getType_INLacdk_lang_RString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getType((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getURI_I_Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getURI(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getValue_I_Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getValue(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getValue((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Attributes_method_getValue_INLacdk_lang_RString__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Attributes* This = dmi_cast<Attributes>(This_);
    ret = (::acdk::lang::RObject)This->getValue((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Attributes_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Attributes_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_args[] = 
{
  &Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_arg_uri,
  &Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getIndex", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_args, // the arguments
  0, //arguments count
  Attributes_methods_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getIndex_INLacdk_lang_RString__I_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getIndex_INLacdk_lang_RString__I_args[] = 
{
  &Attributes_methods_getIndex_INLacdk_lang_RString__I_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getIndex_INLacdk_lang_RString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getIndex_INLacdk_lang_RString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getIndex", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getIndex_INLacdk_lang_RString__I_args, // the arguments
  0, //arguments count
  Attributes_methods_getIndex_INLacdk_lang_RString__I_exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getIndex_INLacdk_lang_RString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getLength", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getLength__I_args, // the arguments
  0, //arguments count
  Attributes_methods_getLength__I_exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getLocalName_I_Lacdk_lang_RString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getLocalName_I_Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getLocalName_I_Lacdk_lang_RString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getLocalName_I_Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getLocalName_I_Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_2_getLocalName", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getLocalName_I_Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getLocalName_I_Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getLocalName_I_Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getQName_I_Lacdk_lang_RString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getQName_I_Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getQName_I_Lacdk_lang_RString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getQName_I_Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getQName_I_Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_3_getQName", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getQName_I_Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getQName_I_Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getQName_I_Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getType_I_Lacdk_lang_RString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getType_I_Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getType_I_Lacdk_lang_RString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getType_I_Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getType_I_Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_4_getType", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getType_I_Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getType_I_Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getType_I_Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_uri,
  &Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_8_getType", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getType_INLacdk_lang_RString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_9_getType", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getType_INLacdk_lang_RString__Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getType_INLacdk_lang_RString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getURI_I_Lacdk_lang_RString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getURI_I_Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getURI_I_Lacdk_lang_RString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getURI_I_Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getURI_I_Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_1_getURI", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getURI_I_Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getURI_I_Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getURI_I_Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getValue_I_Lacdk_lang_RString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getValue_I_Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getValue_I_Lacdk_lang_RString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getValue_I_Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getValue_I_Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getValue_I_Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getValue_I_Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getValue_I_Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_uri,
  &Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_a_getValue", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__args[] = 
{
  &Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Attributes_method_getValue_INLacdk_lang_RString__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_b_getValue", // alternative name of method
  -1, // altlabelHashCode
  Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  Attributes_methods_getValue_INLacdk_lang_RString__Lacdk_lang_RString__exceptions, // the declared exceptions
  Attributes_MetainfoWrapper::Attributes_method_getValue_INLacdk_lang_RString__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Attributes_methods[] = 
{
  &Attributes_method_GetClass__L_acdk_lang_RClass_,
  &Attributes_method_getIndex_INLacdk_lang_RString_INLacdk_lang_RString__I,
  &Attributes_method_getIndex_INLacdk_lang_RString__I,
  &Attributes_method_getLength__I,
  &Attributes_method_getLocalName_I_Lacdk_lang_RString_,
  &Attributes_method_getQName_I_Lacdk_lang_RString_,
  &Attributes_method_getType_I_Lacdk_lang_RString_,
  &Attributes_method_getType_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString_,
  &Attributes_method_getType_INLacdk_lang_RString__Lacdk_lang_RString_,
  &Attributes_method_getURI_I_Lacdk_lang_RString_,
  &Attributes_method_getValue_I_Lacdk_lang_RString_,
  &Attributes_method_getValue_INLacdk_lang_RString_INLacdk_lang_RString__Lacdk_lang_RString_,
  &Attributes_method_getValue_INLacdk_lang_RString__Lacdk_lang_RString_,
  0
};


struct Attributes_MetaInfoInitializer
{  Attributes_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Attributes::clazzInfo();
    ci->fields =  _Attributes_fields;
    ci->methods =  _Attributes_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Attributes_MetaInfoInitializer Attributes_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
ContentHandler_create_array(int length)
{
  return new ObjectArrayImpl<RContentHandler>(length);
}

//static
::acdk::lang::RObject
ContentHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ContentHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ContentHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_characters_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->characters((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->endElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_endPrefixMapping_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->endPrefixMapping((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->ignorableWhitespace((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->processingInstruction((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_setDocumentLocator_INLRLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->setDocumentLocator((RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_skippedEntity_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->skippedEntity((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_startDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->startElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar(), (RAttributes)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ContentHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ContentHandler* This = dmi_cast<ContentHandler>(This_);
    This->startPrefixMapping((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ContentHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ContentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_characters_INLacdk_lang_RString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_characters_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_characters_INLacdk_lang_RString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_characters_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_characters_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_characters_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_characters", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_characters_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_characters_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_characters_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_characters_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_endDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_endDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_endDocument", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_endDocument__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_endDocument__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_endDocument__V_dispatch, // invoke this method
  ContentHandler_endDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri,
  &ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_localName,
  &ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_endElement", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_endPrefixMapping_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_endPrefixMapping_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_endPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_endPrefixMapping_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_endPrefixMapping_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_ignorableWhitespace_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_target,
  &ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_setDocumentLocator_INLRLocator__V_args[] = 
{
  &ContentHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_setDocumentLocator_INLRLocator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_setDocumentLocator_INLRLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_setDocumentLocator_INLRLocator__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_setDocumentLocator_INLRLocator__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_setDocumentLocator_INLRLocator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_skippedEntity_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_skippedEntity_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skippedEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_skippedEntity", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_skippedEntity_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_skippedEntity_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_skippedEntity_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_startDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_startDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_startDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_startDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_startDocument", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_startDocument__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_startDocument__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_startDocument__V_dispatch, // invoke this method
  ContentHandler_startDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_atts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "atts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_args[] = 
{
  &ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_uri,
  &ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_localName,
  &ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_qName,
  &ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_atts,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_startElement", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_dispatch, // invoke this method
  ContentHandler_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_prefix,
  &ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ContentHandler_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ContentHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_startPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  ContentHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  ContentHandler_MetainfoWrapper::ContentHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  ContentHandler_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ContentHandler_methods[] = 
{
  &ContentHandler_method_GetClass__L_acdk_lang_RClass_,
  &ContentHandler_method_characters_INLacdk_lang_RString__V,
  &ContentHandler_method_endDocument__V,
  &ContentHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &ContentHandler_method_endPrefixMapping_INLacdk_lang_RString__V,
  &ContentHandler_method_ignorableWhitespace_INLacdk_lang_RString__V,
  &ContentHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &ContentHandler_method_setDocumentLocator_INLRLocator__V,
  &ContentHandler_method_skippedEntity_INLacdk_lang_RString__V,
  &ContentHandler_method_startDocument__V,
  &ContentHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V,
  &ContentHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V,
  0
};


struct ContentHandler_MetaInfoInitializer
{  ContentHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ContentHandler::clazzInfo();
    ci->fields =  _ContentHandler_fields;
    ci->methods =  _ContentHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ContentHandler_MetaInfoInitializer ContentHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
DeclHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDeclHandler>(length);
}

//static
::acdk::lang::RObject
DeclHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DeclHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DeclHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DeclHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DeclHandler_method_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DeclHandler* This = dmi_cast<DeclHandler>(This_);
    This->attributeDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DeclHandler_method_elementDecl_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DeclHandler* This = dmi_cast<DeclHandler>(This_);
    This->elementDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DeclHandler_method_externalEntityDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DeclHandler* This = dmi_cast<DeclHandler>(This_);
    This->externalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DeclHandler_method_internalEntityDecl_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DeclHandler* This = dmi_cast<DeclHandler>(This_);
    This->internalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DeclHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DeclHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DeclHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DeclHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DeclHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DeclHandler_MetainfoWrapper::DeclHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_eName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "eName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_aName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "aName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_eName,
  &DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_aName,
  &DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type,
  &DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_mode,
  &DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DeclHandler_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DeclHandler_method_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attributeDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_attributeDecl", // alternative name of method
  -1, // altlabelHashCode
  DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DeclHandler_methods_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  DeclHandler_MetainfoWrapper::DeclHandler_method_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  DeclHandler_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_elementDecl_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_elementDecl_INLRString_INLRString__V_arg_model = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "model", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DeclHandler_methods_elementDecl_INLRString_INLRString__V_args[] = 
{
  &DeclHandler_methods_elementDecl_INLRString_INLRString__V_arg_name,
  &DeclHandler_methods_elementDecl_INLRString_INLRString__V_arg_model,
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler_methods_elementDecl_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DeclHandler_elementDecl_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DeclHandler_method_elementDecl_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elementDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_elementDecl", // alternative name of method
  -1, // altlabelHashCode
  DeclHandler_methods_elementDecl_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DeclHandler_methods_elementDecl_INLRString_INLRString__V_exceptions, // the declared exceptions
  DeclHandler_MetainfoWrapper::DeclHandler_method_elementDecl_INLRString_INLRString__V_dispatch, // invoke this method
  DeclHandler_elementDecl_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_name,
  &DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_publicId,
  &DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DeclHandler_externalEntityDecl_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DeclHandler_method_externalEntityDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "externalEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_externalEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DeclHandler_methods_externalEntityDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  DeclHandler_MetainfoWrapper::DeclHandler_method_externalEntityDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  DeclHandler_externalEntityDecl_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_args[] = 
{
  &DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_arg_name,
  &DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DeclHandler_internalEntityDecl_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DeclHandler_method_internalEntityDecl_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "internalEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_internalEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DeclHandler_methods_internalEntityDecl_INLRString_INLRString__V_exceptions, // the declared exceptions
  DeclHandler_MetainfoWrapper::DeclHandler_method_internalEntityDecl_INLRString_INLRString__V_dispatch, // invoke this method
  DeclHandler_internalEntityDecl_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DeclHandler_methods[] = 
{
  &DeclHandler_method_GetClass__L_acdk_lang_RClass_,
  &DeclHandler_method_attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V,
  &DeclHandler_method_elementDecl_INLRString_INLRString__V,
  &DeclHandler_method_externalEntityDecl_INLRString_INLRString_INLRString__V,
  &DeclHandler_method_internalEntityDecl_INLRString_INLRString__V,
  0
};


struct DeclHandler_MetaInfoInitializer
{  DeclHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DeclHandler::clazzInfo();
    ci->fields =  _DeclHandler_fields;
    ci->methods =  _DeclHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DeclHandler_MetaInfoInitializer DeclHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
DocumentHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDocumentHandler>(length);
}

//static
::acdk::lang::RObject
DocumentHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DocumentHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DocumentHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_characters_INLRString_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->characters((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_endElement_INL_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->endElement((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_ignorableWhitespace_INLRString_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->ignorableWhitespace((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_processingInstruction_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_setDocumentLocator_INLRLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->setDocumentLocator((RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_startDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DocumentHandler_method_startElement_INL_acdk_lang_RString_INLRAttributeList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DocumentHandler* This = dmi_cast<DocumentHandler>(This_);
    This->startElement((::acdk::lang::RString)args[0].getObjectVar(), (RAttributeList)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DocumentHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DocumentHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_characters_INLRString_II_V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_characters_INLRString_II_V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_characters_INLRString_II_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_characters_INLRString_II_V_args[] = 
{
  &DocumentHandler_methods_characters_INLRString_II_V_arg_chars,
  &DocumentHandler_methods_characters_INLRString_II_V_arg_start,
  &DocumentHandler_methods_characters_INLRString_II_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_characters_INLRString_II_V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_characters_INLRString_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_characters_INLRString_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_characters", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_characters_INLRString_II_V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_characters_INLRString_II_V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_characters_INLRString_II_V_dispatch, // invoke this method
  DocumentHandler_characters_INLRString_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_endDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_endDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_endDocument", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_endDocument__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_endDocument__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_endDocument__V_dispatch, // invoke this method
  DocumentHandler_endDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_args[] = 
{
  &DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_endElement_INL_acdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_endElement_INL_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_endElement", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_endElement_INL_acdk_lang_RString__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_endElement_INL_acdk_lang_RString__V_dispatch, // invoke this method
  DocumentHandler_endElement_INL_acdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_args[] = 
{
  &DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_chars,
  &DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_start,
  &DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_ignorableWhitespace_INLRString_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_ignorableWhitespace_INLRString_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_ignorableWhitespace_INLRString_II_V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_ignorableWhitespace_INLRString_II_V_dispatch, // invoke this method
  DocumentHandler_ignorableWhitespace_INLRString_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_args[] = 
{
  &DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_arg_s,
  &DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_processingInstruction_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_processingInstruction_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_processingInstruction_INLRString_INLRString__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_processingInstruction_INLRString_INLRString__V_dispatch, // invoke this method
  DocumentHandler_processingInstruction_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_setDocumentLocator_INLRLocator__V_args[] = 
{
  &DocumentHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_setDocumentLocator_INLRLocator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_setDocumentLocator_INLRLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_setDocumentLocator_INLRLocator__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_setDocumentLocator_INLRLocator__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_setDocumentLocator_INLRLocator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_startDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_startDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_startDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_startDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_startDocument", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_startDocument__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_startDocument__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_startDocument__V_dispatch, // invoke this method
  DocumentHandler_startDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_arg_attributelist = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attributelist", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributeList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_args[] = 
{
  &DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_arg_s,
  &DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_arg_attributelist,
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DocumentHandler_startElement_INL_acdk_lang_RString_INLRAttributeList__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DocumentHandler_method_startElement_INL_acdk_lang_RString_INLRAttributeList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_startElement", // alternative name of method
  -1, // altlabelHashCode
  DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_args, // the arguments
  0, //arguments count
  DocumentHandler_methods_startElement_INL_acdk_lang_RString_INLRAttributeList__V_exceptions, // the declared exceptions
  DocumentHandler_MetainfoWrapper::DocumentHandler_method_startElement_INL_acdk_lang_RString_INLRAttributeList__V_dispatch, // invoke this method
  DocumentHandler_startElement_INL_acdk_lang_RString_INLRAttributeList__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DocumentHandler_methods[] = 
{
  &DocumentHandler_method_GetClass__L_acdk_lang_RClass_,
  &DocumentHandler_method_characters_INLRString_II_V,
  &DocumentHandler_method_endDocument__V,
  &DocumentHandler_method_endElement_INL_acdk_lang_RString__V,
  &DocumentHandler_method_ignorableWhitespace_INLRString_II_V,
  &DocumentHandler_method_processingInstruction_INLRString_INLRString__V,
  &DocumentHandler_method_setDocumentLocator_INLRLocator__V,
  &DocumentHandler_method_startDocument__V,
  &DocumentHandler_method_startElement_INL_acdk_lang_RString_INLRAttributeList__V,
  0
};


struct DocumentHandler_MetaInfoInitializer
{  DocumentHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DocumentHandler::clazzInfo();
    ci->fields =  _DocumentHandler_fields;
    ci->methods =  _DocumentHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DocumentHandler_MetaInfoInitializer DocumentHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

using namespace ::acdk::lang;

//static
::acdk::lang::RObject
DTDHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDTDHandler>(length);
}

//static
::acdk::lang::RObject
DTDHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DTDHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DTDHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DTDHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DTDHandler_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DTDHandler* This = dmi_cast<DTDHandler>(This_);
    This->notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DTDHandler_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DTDHandler* This = dmi_cast<DTDHandler>(This_);
    This->unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DTDHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DTDHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DTDHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DTDHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DTDHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DTDHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DTDHandler_MetainfoWrapper::DTDHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s,
  &DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s1,
  &DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s2,
  0
};

::acdk::lang::dmi::ClazzInfo* DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DTDHandler_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DTDHandler_method_notationDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notationDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_notationDecl", // alternative name of method
  -1, // altlabelHashCode
  DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DTDHandler_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  DTDHandler_MetainfoWrapper::DTDHandler_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  DTDHandler_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s,
  &DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s1,
  &DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s2,
  &DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s3,
  0
};

::acdk::lang::dmi::ClazzInfo* DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DTDHandler_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DTDHandler_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unparsedEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_unparsedEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  DTDHandler_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  DTDHandler_MetainfoWrapper::DTDHandler_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  DTDHandler_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DTDHandler_methods[] = 
{
  &DTDHandler_method_GetClass__L_acdk_lang_RClass_,
  &DTDHandler_method_notationDecl_INLRString_INLRString_INLRString__V,
  &DTDHandler_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V,
  0
};


struct DTDHandler_MetaInfoInitializer
{  DTDHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DTDHandler::clazzInfo();
    ci->fields =  _DTDHandler_fields;
    ci->methods =  _DTDHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DTDHandler_MetaInfoInitializer DTDHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
EntityResolver_create_array(int length)
{
  return new ObjectArrayImpl<REntityResolver>(length);
}

//static
::acdk::lang::RObject
EntityResolver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EntityResolver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EntityResolver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EntityResolver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EntityResolver_method_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EntityResolver* This = dmi_cast<EntityResolver>(This_);
    ret = (::acdk::lang::RObject)This->resolveEntity((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EntityResolver_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EntityResolver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EntityResolver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EntityResolver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EntityResolver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EntityResolver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EntityResolver_MetainfoWrapper::EntityResolver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__args[] = 
{
  &EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__arg_s,
  &EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void EntityResolver_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo EntityResolver_method_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo(), // return type
  "_0_resolveEntity", // alternative name of method
  -1, // altlabelHashCode
  EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__args, // the arguments
  0, //arguments count
  EntityResolver_methods_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__exceptions, // the declared exceptions
  EntityResolver_MetainfoWrapper::EntityResolver_method_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__dispatch, // invoke this method
  EntityResolver_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EntityResolver_methods[] = 
{
  &EntityResolver_method_GetClass__L_acdk_lang_RClass_,
  &EntityResolver_method_resolveEntity_INL_acdk_lang_RString_INL_acdk_lang_RString__LRInputSource_,
  0
};


struct EntityResolver_MetaInfoInitializer
{  EntityResolver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EntityResolver::clazzInfo();
    ci->fields =  _EntityResolver_fields;
    ci->methods =  _EntityResolver_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EntityResolver_MetaInfoInitializer EntityResolver_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
ErrorHandler_create_array(int length)
{
  return new ObjectArrayImpl<RErrorHandler>(length);
}

//static
::acdk::lang::RObject
ErrorHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ErrorHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ErrorHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ErrorHandler_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ErrorHandler* This = dmi_cast<ErrorHandler>(This_);
    This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ErrorHandler* This = dmi_cast<ErrorHandler>(This_);
    This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ErrorHandler_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ErrorHandler* This = dmi_cast<ErrorHandler>(This_);
    This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ErrorHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ErrorHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ErrorHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ErrorHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ErrorHandler_MetainfoWrapper::ErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ErrorHandler_methods_error_INLRSAXParseException__V_args[] = 
{
  &ErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* ErrorHandler_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ErrorHandler_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ErrorHandler_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_error", // alternative name of method
  -1, // altlabelHashCode
  ErrorHandler_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  ErrorHandler_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  ErrorHandler_MetainfoWrapper::ErrorHandler_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  ErrorHandler_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ErrorHandler_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &ErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* ErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ErrorHandler_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_fatalError", // alternative name of method
  -1, // altlabelHashCode
  ErrorHandler_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  ErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  ErrorHandler_MetainfoWrapper::ErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  ErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ErrorHandler_methods_warning_INLRSAXParseException__V_args[] = 
{
  &ErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* ErrorHandler_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void ErrorHandler_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ErrorHandler_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_warning", // alternative name of method
  -1, // altlabelHashCode
  ErrorHandler_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  ErrorHandler_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  ErrorHandler_MetainfoWrapper::ErrorHandler_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  ErrorHandler_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ErrorHandler_methods[] = 
{
  &ErrorHandler_method_GetClass__L_acdk_lang_RClass_,
  &ErrorHandler_method_error_INLRSAXParseException__V,
  &ErrorHandler_method_fatalError_INLRSAXParseException__V,
  &ErrorHandler_method_warning_INLRSAXParseException__V,
  0
};


struct ErrorHandler_MetaInfoInitializer
{  ErrorHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ErrorHandler::clazzInfo();
    ci->fields =  _ErrorHandler_fields;
    ci->methods =  _ErrorHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ErrorHandler_MetaInfoInitializer ErrorHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
HandlerBase_create_array(int length)
{
  return new ObjectArrayImpl<RHandlerBase>(length);
}

//static
::acdk::lang::RObject
HandlerBase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HandlerBase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HandlerBase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_HandlerBase__LRHandlerBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HandlerBase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_characters_INLRString_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::characters((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->characters((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::endDocument();
    else
        This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_endElement_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::endElement((RString)args[0].getObjectVar());
    else
        This->endElement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::error((RSAXParseException)args[0].getObjectVar());
    else
        This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::fatalError((RSAXParseException)args[0].getObjectVar());
    else
        This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_ignorableWhitespace_INLRString_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::ignorableWhitespace((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->ignorableWhitespace((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_processingInstruction_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_resolveEntity_INLRString_INLRString__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HandlerBase::resolveEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->resolveEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_setDocumentLocator_INLRLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::setDocumentLocator((RLocator)args[0].getObjectVar());
    else
        This->setDocumentLocator((RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_startDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::startDocument();
    else
        This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_startElement_INLRString_INLRAttributeList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::startElement((RString)args[0].getObjectVar(), (RAttributeList)args[1].getObjectVar());
    else
        This->startElement((RString)args[0].getObjectVar(), (RAttributeList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HandlerBase_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HandlerBase* This = dmi_cast<HandlerBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HandlerBase::warning((RSAXParseException)args[0].getObjectVar());
    else
        This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _HandlerBase_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HandlerBase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_HandlerBase__LRHandlerBase__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_HandlerBase__LRHandlerBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_HandlerBase__LRHandlerBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HandlerBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HandlerBase::clazzInfo(), // return type
  "_0_HandlerBase", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_HandlerBase__LRHandlerBase__args, // the arguments
  0, //arguments count
  HandlerBase_methods_HandlerBase__LRHandlerBase__exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_HandlerBase__LRHandlerBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_characters_INLRString_II_V_arg_ac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_characters_INLRString_II_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_characters_INLRString_II_V_arg_j = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "j", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_characters_INLRString_II_V_args[] = 
{
  &HandlerBase_methods_characters_INLRString_II_V_arg_ac,
  &HandlerBase_methods_characters_INLRString_II_V_arg_i,
  &HandlerBase_methods_characters_INLRString_II_V_arg_j,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_characters_INLRString_II_V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_characters_INLRString_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_characters_INLRString_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_characters", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_characters_INLRString_II_V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_characters_INLRString_II_V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_characters_INLRString_II_V_dispatch, // invoke this method
  HandlerBase_characters_INLRString_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_endDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_endDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_endDocument", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_endDocument__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_endDocument__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_endDocument__V_dispatch, // invoke this method
  HandlerBase_endDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_endElement_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_endElement_INLRString__V_args[] = 
{
  &HandlerBase_methods_endElement_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_endElement_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_endElement_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_endElement_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_endElement", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_endElement_INLRString__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_endElement_INLRString__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_endElement_INLRString__V_dispatch, // invoke this method
  HandlerBase_endElement_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_error_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_error_INLRSAXParseException__V_args[] = 
{
  &HandlerBase_methods_error_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_error", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  HandlerBase_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &HandlerBase_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_fatalError", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  HandlerBase_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_ac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_j = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "j", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_ignorableWhitespace_INLRString_II_V_args[] = 
{
  &HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_ac,
  &HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_i,
  &HandlerBase_methods_ignorableWhitespace_INLRString_II_V_arg_j,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_ignorableWhitespace_INLRString_II_V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_ignorableWhitespace_INLRString_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_ignorableWhitespace_INLRString_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_ignorableWhitespace_INLRString_II_V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_ignorableWhitespace_INLRString_II_V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_ignorableWhitespace_INLRString_II_V_dispatch, // invoke this method
  HandlerBase_ignorableWhitespace_INLRString_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s,
  &HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s1,
  &HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_s2,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_notationDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notationDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_notationDecl", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  HandlerBase_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_processingInstruction_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_processingInstruction_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_processingInstruction_INLRString_INLRString__V_args[] = 
{
  &HandlerBase_methods_processingInstruction_INLRString_INLRString__V_arg_s,
  &HandlerBase_methods_processingInstruction_INLRString_INLRString__V_arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_processingInstruction_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_processingInstruction_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_processingInstruction_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_processingInstruction_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_processingInstruction_INLRString_INLRString__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_processingInstruction_INLRString_INLRString__V_dispatch, // invoke this method
  HandlerBase_processingInstruction_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__args[] = 
{
  &HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_s,
  &HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_resolveEntity_INLRString_INLRString__LRInputSource__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_resolveEntity_INLRString_INLRString__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo(), // return type
  "_1_resolveEntity", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__args, // the arguments
  0, //arguments count
  HandlerBase_methods_resolveEntity_INLRString_INLRString__LRInputSource__exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_resolveEntity_INLRString_INLRString__LRInputSource__dispatch, // invoke this method
  HandlerBase_resolveEntity_INLRString_INLRString__LRInputSource__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_setDocumentLocator_INLRLocator__V_arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_setDocumentLocator_INLRLocator__V_args[] = 
{
  &HandlerBase_methods_setDocumentLocator_INLRLocator__V_arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_setDocumentLocator_INLRLocator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_setDocumentLocator_INLRLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_setDocumentLocator_INLRLocator__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_setDocumentLocator_INLRLocator__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_setDocumentLocator_INLRLocator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_startDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_startDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_startDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_startDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_startDocument", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_startDocument__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_startDocument__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_startDocument__V_dispatch, // invoke this method
  HandlerBase_startDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_arg_attributelist = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attributelist", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributeList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_args[] = 
{
  &HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_arg_s,
  &HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_arg_attributelist,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_startElement_INLRString_INLRAttributeList__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_startElement_INLRString_INLRAttributeList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_startElement", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_startElement_INLRString_INLRAttributeList__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_startElement_INLRString_INLRAttributeList__V_dispatch, // invoke this method
  HandlerBase_startElement_INLRString_INLRAttributeList__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s,
  &HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s1,
  &HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s2,
  &HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_s3,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unparsedEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unparsedEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  HandlerBase_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HandlerBase_methods_warning_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HandlerBase_methods_warning_INLRSAXParseException__V_args[] = 
{
  &HandlerBase_methods_warning_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void HandlerBase_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo HandlerBase_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_warning", // alternative name of method
  -1, // altlabelHashCode
  HandlerBase_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  HandlerBase_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  HandlerBase_MetainfoWrapper::HandlerBase_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  HandlerBase_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HandlerBase_methods[] = 
{
  &HandlerBase_method_GetClass__L_acdk_lang_RClass_,
  &HandlerBase_method_HandlerBase__LRHandlerBase_,
  &HandlerBase_method_characters_INLRString_II_V,
  &HandlerBase_method_endDocument__V,
  &HandlerBase_method_endElement_INLRString__V,
  &HandlerBase_method_error_INLRSAXParseException__V,
  &HandlerBase_method_fatalError_INLRSAXParseException__V,
  &HandlerBase_method_ignorableWhitespace_INLRString_II_V,
  &HandlerBase_method_notationDecl_INLRString_INLRString_INLRString__V,
  &HandlerBase_method_processingInstruction_INLRString_INLRString__V,
  &HandlerBase_method_resolveEntity_INLRString_INLRString__LRInputSource_,
  &HandlerBase_method_setDocumentLocator_INLRLocator__V,
  &HandlerBase_method_startDocument__V,
  &HandlerBase_method_startElement_INLRString_INLRAttributeList__V,
  &HandlerBase_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V,
  &HandlerBase_method_warning_INLRSAXParseException__V,
  0
};


struct HandlerBase_MetaInfoInitializer
{  HandlerBase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HandlerBase::clazzInfo();
    ci->fields =  _HandlerBase_fields;
    ci->methods =  _HandlerBase_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HandlerBase_MetaInfoInitializer HandlerBase_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
InputSource_create_array(int length)
{
  return new ObjectArrayImpl<RInputSource>(length);
}

//static
::acdk::lang::RObject
InputSource_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InputSource_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InputSource::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_InputSource__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InputSource();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_InputSource_INL_acdk_lang_RString__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InputSource((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_InputSource_INL_acdk_io_RReader__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InputSource((::acdk::io::RReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_getByteStream__L_acdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputSource::getByteStream();
    else
        ret = (::acdk::lang::RObject)This->getByteStream();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_getEncoding__L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputSource::getEncoding();
    else
        ret = (::acdk::lang::RObject)This->getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_getPublicId__L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputSource::getPublicId();
    else
        ret = (::acdk::lang::RObject)This->getPublicId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_getSystemId__L_acdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->InputSource::getSystemId();
    else
        ret = (::acdk::lang::RObject)This->getSystemId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_setByteStream_INL_acdk_io_RReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InputSource::setByteStream((::acdk::io::RReader)args[0].getObjectVar());
    else
        This->setByteStream((::acdk::io::RReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_setEncoding_INL_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InputSource::setEncoding((::acdk::lang::RString)args[0].getObjectVar());
    else
        This->setEncoding((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_setPublicId_INL_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InputSource::setPublicId((::acdk::lang::RString)args[0].getObjectVar());
    else
        This->setPublicId((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InputSource_method_setSystemId_INL_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->InputSource::setSystemId((::acdk::lang::RString)args[0].getObjectVar());
    else
        This->setSystemId((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InputSource_fields__encoding_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoding, flags);
    else
      This->_encoding = (::acdk::lang::RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InputSource_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = (::acdk::io::RReader)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InputSource_fields__publicId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_publicId, flags);
    else
      This->_publicId = (::acdk::lang::RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InputSource_fields__systemId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InputSource* This = dmi_cast<InputSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_systemId, flags);
    else
      This->_systemId = (::acdk::lang::RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InputSource_fields__encoding = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoding", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(),
  InputSource_MetainfoWrapper::InputSource_fields__encoding_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InputSource_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo(),
  InputSource_MetainfoWrapper::InputSource_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InputSource_fields__publicId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_publicId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(),
  InputSource_MetainfoWrapper::InputSource_fields__publicId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo InputSource_fields__systemId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_systemId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(),
  InputSource_MetainfoWrapper::InputSource_fields__systemId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InputSource_fields[] = 
{
  &InputSource_fields__encoding,
  &InputSource_fields__in,
  &InputSource_fields__publicId,
  &InputSource_fields__systemId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InputSource_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_InputSource__LRInputSource__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_InputSource__LRInputSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_InputSource__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InputSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InputSource::clazzInfo(), // return type
  "_0_InputSource", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_InputSource__LRInputSource__args, // the arguments
  0, //arguments count
  InputSource_methods_InputSource__LRInputSource__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_InputSource__LRInputSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__arg_sysId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sysId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__args[] = 
{
  &InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__arg_sysId,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_InputSource_INL_acdk_lang_RString__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InputSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InputSource::clazzInfo(), // return type
  "_1_InputSource", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__args, // the arguments
  0, //arguments count
  InputSource_methods_InputSource_INL_acdk_lang_RString__LRInputSource__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_InputSource_INL_acdk_lang_RString__LRInputSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__args[] = 
{
  &InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__arg_reader,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_InputSource_INL_acdk_io_RReader__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InputSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InputSource::clazzInfo(), // return type
  "_2_InputSource", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__args, // the arguments
  0, //arguments count
  InputSource_methods_InputSource_INL_acdk_io_RReader__LRInputSource__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_InputSource_INL_acdk_io_RReader__LRInputSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_getByteStream__L_acdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_getByteStream__L_acdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_getByteStream__L_acdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByteStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo(), // return type
  "_a_getByteStream", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_getByteStream__L_acdk_io_RReader__args, // the arguments
  0, //arguments count
  InputSource_methods_getByteStream__L_acdk_io_RReader__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_getByteStream__L_acdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_getEncoding__L_acdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_getEncoding__L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_getEncoding__L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_8_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_getEncoding__L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  InputSource_methods_getEncoding__L_acdk_lang_RString__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_getEncoding__L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_getPublicId__L_acdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_getPublicId__L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_getPublicId__L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_4_getPublicId", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_getPublicId__L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  InputSource_methods_getPublicId__L_acdk_lang_RString__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_getPublicId__L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_getSystemId__L_acdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_getSystemId__L_acdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_getSystemId__L_acdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo(), // return type
  "_6_getSystemId", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_getSystemId__L_acdk_lang_RString__args, // the arguments
  0, //arguments count
  InputSource_methods_getSystemId__L_acdk_lang_RString__exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_getSystemId__L_acdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_setByteStream_INL_acdk_io_RReader__V_arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_setByteStream_INL_acdk_io_RReader__V_args[] = 
{
  &InputSource_methods_setByteStream_INL_acdk_io_RReader__V_arg_reader,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_setByteStream_INL_acdk_io_RReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_setByteStream_INL_acdk_io_RReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByteStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setByteStream", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_setByteStream_INL_acdk_io_RReader__V_args, // the arguments
  0, //arguments count
  InputSource_methods_setByteStream_INL_acdk_io_RReader__V_exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_setByteStream_INL_acdk_io_RReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_setEncoding_INL_acdk_lang_RString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_setEncoding_INL_acdk_lang_RString__V_args[] = 
{
  &InputSource_methods_setEncoding_INL_acdk_lang_RString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_setEncoding_INL_acdk_lang_RString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_setEncoding_INL_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setEncoding", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_setEncoding_INL_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  InputSource_methods_setEncoding_INL_acdk_lang_RString__V_exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_setEncoding_INL_acdk_lang_RString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_setPublicId_INL_acdk_lang_RString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_setPublicId_INL_acdk_lang_RString__V_args[] = 
{
  &InputSource_methods_setPublicId_INL_acdk_lang_RString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_setPublicId_INL_acdk_lang_RString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_setPublicId_INL_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setPublicId", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_setPublicId_INL_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  InputSource_methods_setPublicId_INL_acdk_lang_RString__V_exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_setPublicId_INL_acdk_lang_RString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InputSource_methods_setSystemId_INL_acdk_lang_RString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InputSource_methods_setSystemId_INL_acdk_lang_RString__V_args[] = 
{
  &InputSource_methods_setSystemId_INL_acdk_lang_RString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource_methods_setSystemId_INL_acdk_lang_RString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InputSource_method_setSystemId_INL_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setSystemId", // alternative name of method
  -1, // altlabelHashCode
  InputSource_methods_setSystemId_INL_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  InputSource_methods_setSystemId_INL_acdk_lang_RString__V_exceptions, // the declared exceptions
  InputSource_MetainfoWrapper::InputSource_method_setSystemId_INL_acdk_lang_RString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InputSource_methods[] = 
{
  &InputSource_method_GetClass__L_acdk_lang_RClass_,
  &InputSource_method_InputSource__LRInputSource_,
  &InputSource_method_InputSource_INL_acdk_lang_RString__LRInputSource_,
  &InputSource_method_InputSource_INL_acdk_io_RReader__LRInputSource_,
  &InputSource_method_getByteStream__L_acdk_io_RReader_,
  &InputSource_method_getEncoding__L_acdk_lang_RString_,
  &InputSource_method_getPublicId__L_acdk_lang_RString_,
  &InputSource_method_getSystemId__L_acdk_lang_RString_,
  &InputSource_method_setByteStream_INL_acdk_io_RReader__V,
  &InputSource_method_setEncoding_INL_acdk_lang_RString__V,
  &InputSource_method_setPublicId_INL_acdk_lang_RString__V,
  &InputSource_method_setSystemId_INL_acdk_lang_RString__V,
  0
};


struct InputSource_MetaInfoInitializer
{  InputSource_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InputSource::clazzInfo();
    ci->fields =  _InputSource_fields;
    ci->methods =  _InputSource_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InputSource_MetaInfoInitializer InputSource_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
LexicalHandler_create_array(int length)
{
  return new ObjectArrayImpl<RLexicalHandler>(length);
}

//static
::acdk::lang::RObject
LexicalHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LexicalHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LexicalHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_comment_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->comment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_endCDATA__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->endCDATA();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_endDTD__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->endDTD();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_endEntity_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->endEntity((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_startCDATA__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->startCDATA();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_startDTD_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->startDTD((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LexicalHandler_method_startEntity_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LexicalHandler* This = dmi_cast<LexicalHandler>(This_);
    This->startEntity((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LexicalHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LexicalHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_comment_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_comment_INLRString__V_args[] = 
{
  &LexicalHandler_methods_comment_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_comment_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_comment_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_comment_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "comment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_comment", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_comment_INLRString__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_comment_INLRString__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_comment_INLRString__V_dispatch, // invoke this method
  LexicalHandler_comment_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_endCDATA__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_endCDATA__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_endCDATA__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_endCDATA__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endCDATA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_endCDATA", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_endCDATA__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_endCDATA__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_endCDATA__V_dispatch, // invoke this method
  LexicalHandler_endCDATA__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_endDTD__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_endDTD__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_endDTD__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_endDTD__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDTD", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_endDTD", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_endDTD__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_endDTD__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_endDTD__V_dispatch, // invoke this method
  LexicalHandler_endDTD__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_endEntity_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_endEntity_INLRString__V_args[] = 
{
  &LexicalHandler_methods_endEntity_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_endEntity_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_endEntity_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_endEntity_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_endEntity", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_endEntity_INLRString__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_endEntity_INLRString__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_endEntity_INLRString__V_dispatch, // invoke this method
  LexicalHandler_endEntity_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_startCDATA__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_startCDATA__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_startCDATA__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_startCDATA__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startCDATA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_startCDATA", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_startCDATA__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_startCDATA__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_startCDATA__V_dispatch, // invoke this method
  LexicalHandler_startCDATA__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_args[] = 
{
  &LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_name,
  &LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_publicId,
  &LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_startDTD_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_startDTD_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDTD", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_startDTD", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_startDTD_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_startDTD_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  LexicalHandler_startDTD_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LexicalHandler_methods_startEntity_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LexicalHandler_methods_startEntity_INLRString__V_args[] = 
{
  &LexicalHandler_methods_startEntity_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler_methods_startEntity_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void LexicalHandler_startEntity_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LexicalHandler_method_startEntity_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_startEntity", // alternative name of method
  -1, // altlabelHashCode
  LexicalHandler_methods_startEntity_INLRString__V_args, // the arguments
  0, //arguments count
  LexicalHandler_methods_startEntity_INLRString__V_exceptions, // the declared exceptions
  LexicalHandler_MetainfoWrapper::LexicalHandler_method_startEntity_INLRString__V_dispatch, // invoke this method
  LexicalHandler_startEntity_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LexicalHandler_methods[] = 
{
  &LexicalHandler_method_GetClass__L_acdk_lang_RClass_,
  &LexicalHandler_method_comment_INLRString__V,
  &LexicalHandler_method_endCDATA__V,
  &LexicalHandler_method_endDTD__V,
  &LexicalHandler_method_endEntity_INLRString__V,
  &LexicalHandler_method_startCDATA__V,
  &LexicalHandler_method_startDTD_INLRString_INLRString_INLRString__V,
  &LexicalHandler_method_startEntity_INLRString__V,
  0
};


struct LexicalHandler_MetaInfoInitializer
{  LexicalHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LexicalHandler::clazzInfo();
    ci->fields =  _LexicalHandler_fields;
    ci->methods =  _LexicalHandler_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LexicalHandler_MetaInfoInitializer LexicalHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
Locator_create_array(int length)
{
  return new ObjectArrayImpl<RLocator>(length);
}

//static
::acdk::lang::RObject
Locator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Locator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locator_method_getColumnNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locator* This = dmi_cast<Locator>(This_);
  ret = This->getColumnNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locator_method_getLineNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locator* This = dmi_cast<Locator>(This_);
  ret = This->getLineNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locator_method_getPublicId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locator* This = dmi_cast<Locator>(This_);
    ret = (::acdk::lang::RObject)This->getPublicId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locator_method_getSystemId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locator* This = dmi_cast<Locator>(This_);
    ret = (::acdk::lang::RObject)This->getSystemId();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Locator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Locator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Locator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Locator_MetainfoWrapper::Locator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locator_methods_getColumnNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator_methods_getColumnNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locator_method_getColumnNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getColumnNumber", // alternative name of method
  -1, // altlabelHashCode
  Locator_methods_getColumnNumber__I_args, // the arguments
  0, //arguments count
  Locator_methods_getColumnNumber__I_exceptions, // the declared exceptions
  Locator_MetainfoWrapper::Locator_method_getColumnNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locator_methods_getLineNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator_methods_getLineNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locator_method_getLineNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLineNumber", // alternative name of method
  -1, // altlabelHashCode
  Locator_methods_getLineNumber__I_args, // the arguments
  0, //arguments count
  Locator_methods_getLineNumber__I_exceptions, // the declared exceptions
  Locator_MetainfoWrapper::Locator_method_getLineNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locator_methods_getPublicId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator_methods_getPublicId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locator_method_getPublicId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getPublicId", // alternative name of method
  -1, // altlabelHashCode
  Locator_methods_getPublicId__LRString__args, // the arguments
  0, //arguments count
  Locator_methods_getPublicId__LRString__exceptions, // the declared exceptions
  Locator_MetainfoWrapper::Locator_method_getPublicId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locator_methods_getSystemId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator_methods_getSystemId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locator_method_getSystemId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getSystemId", // alternative name of method
  -1, // altlabelHashCode
  Locator_methods_getSystemId__LRString__args, // the arguments
  0, //arguments count
  Locator_methods_getSystemId__LRString__exceptions, // the declared exceptions
  Locator_MetainfoWrapper::Locator_method_getSystemId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Locator_methods[] = 
{
  &Locator_method_GetClass__L_acdk_lang_RClass_,
  &Locator_method_getColumnNumber__I,
  &Locator_method_getLineNumber__I,
  &Locator_method_getPublicId__LRString_,
  &Locator_method_getSystemId__LRString_,
  0
};


struct Locator_MetaInfoInitializer
{  Locator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Locator::clazzInfo();
    ci->fields =  _Locator_fields;
    ci->methods =  _Locator_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Locator_MetaInfoInitializer Locator_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
Parser_create_array(int length)
{
  return new ObjectArrayImpl<RParser>(length);
}

//static
::acdk::lang::RObject
Parser_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Parser_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Parser::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_parse_INL_acdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->parse((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_parse_INLRInputSource__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->parse((RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_setDTDHandler_INLRDTDHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->setDTDHandler((RDTDHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_setDocumentHandler_INLRDocumentHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->setDocumentHandler((RDocumentHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_setEntityResolver_INLREntityResolver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->setEntityResolver((REntityResolver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_setErrorHandler_INLRErrorHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->setErrorHandler((RErrorHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parser_method_setLocale_INLacdk_util_RLocale__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parser* This = dmi_cast<Parser>(This_);
    This->setLocale((acdk::util::RLocale)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Parser_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parser_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Parser_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_parse_INL_acdk_lang_RString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_parse_INL_acdk_lang_RString__V_args[] = 
{
  &Parser_methods_parse_INL_acdk_lang_RString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_parse_INL_acdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void Parser_parse_INL_acdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Parser_method_parse_INL_acdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_parse", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_parse_INL_acdk_lang_RString__V_args, // the arguments
  0, //arguments count
  Parser_methods_parse_INL_acdk_lang_RString__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_parse_INL_acdk_lang_RString__V_dispatch, // invoke this method
  Parser_parse_INL_acdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_parse_INLRInputSource__V_arg_inputsource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "inputsource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_parse_INLRInputSource__V_args[] = 
{
  &Parser_methods_parse_INLRInputSource__V_arg_inputsource,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_parse_INLRInputSource__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void Parser_parse_INLRInputSource__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Parser_method_parse_INLRInputSource__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_parse", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_parse_INLRInputSource__V_args, // the arguments
  0, //arguments count
  Parser_methods_parse_INLRInputSource__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_parse_INLRInputSource__V_dispatch, // invoke this method
  Parser_parse_INLRInputSource__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_setDTDHandler_INLRDTDHandler__V_arg_dtdhandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dtdhandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_setDTDHandler_INLRDTDHandler__V_args[] = 
{
  &Parser_methods_setDTDHandler_INLRDTDHandler__V_arg_dtdhandler,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_setDTDHandler_INLRDTDHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parser_method_setDTDHandler_INLRDTDHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_setDTDHandler_INLRDTDHandler__V_args, // the arguments
  0, //arguments count
  Parser_methods_setDTDHandler_INLRDTDHandler__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_setDTDHandler_INLRDTDHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_setDocumentHandler_INLRDocumentHandler__V_arg_documenthandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "documenthandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_setDocumentHandler_INLRDocumentHandler__V_args[] = 
{
  &Parser_methods_setDocumentHandler_INLRDocumentHandler__V_arg_documenthandler,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_setDocumentHandler_INLRDocumentHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parser_method_setDocumentHandler_INLRDocumentHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setDocumentHandler", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_setDocumentHandler_INLRDocumentHandler__V_args, // the arguments
  0, //arguments count
  Parser_methods_setDocumentHandler_INLRDocumentHandler__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_setDocumentHandler_INLRDocumentHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_setEntityResolver_INLREntityResolver__V_arg_entityresolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entityresolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_setEntityResolver_INLREntityResolver__V_args[] = 
{
  &Parser_methods_setEntityResolver_INLREntityResolver__V_arg_entityresolver,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_setEntityResolver_INLREntityResolver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parser_method_setEntityResolver_INLREntityResolver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_setEntityResolver_INLREntityResolver__V_args, // the arguments
  0, //arguments count
  Parser_methods_setEntityResolver_INLREntityResolver__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_setEntityResolver_INLREntityResolver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_setErrorHandler_INLRErrorHandler__V_arg_errorhandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "errorhandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_setErrorHandler_INLRErrorHandler__V_args[] = 
{
  &Parser_methods_setErrorHandler_INLRErrorHandler__V_arg_errorhandler,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_setErrorHandler_INLRErrorHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parser_method_setErrorHandler_INLRErrorHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_setErrorHandler_INLRErrorHandler__V_args, // the arguments
  0, //arguments count
  Parser_methods_setErrorHandler_INLRErrorHandler__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_setErrorHandler_INLRErrorHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parser_methods_setLocale_INLacdk_util_RLocale__V_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parser_methods_setLocale_INLacdk_util_RLocale__V_args[] = 
{
  &Parser_methods_setLocale_INLacdk_util_RLocale__V_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Parser_methods_setLocale_INLacdk_util_RLocale__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void Parser_setLocale_INLacdk_util_RLocale__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Parser_method_setLocale_INLacdk_util_RLocale__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setLocale", // alternative name of method
  -1, // altlabelHashCode
  Parser_methods_setLocale_INLacdk_util_RLocale__V_args, // the arguments
  0, //arguments count
  Parser_methods_setLocale_INLacdk_util_RLocale__V_exceptions, // the declared exceptions
  Parser_MetainfoWrapper::Parser_method_setLocale_INLacdk_util_RLocale__V_dispatch, // invoke this method
  Parser_setLocale_INLacdk_util_RLocale__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Parser_methods[] = 
{
  &Parser_method_GetClass__L_acdk_lang_RClass_,
  &Parser_method_parse_INL_acdk_lang_RString__V,
  &Parser_method_parse_INLRInputSource__V,
  &Parser_method_setDTDHandler_INLRDTDHandler__V,
  &Parser_method_setDocumentHandler_INLRDocumentHandler__V,
  &Parser_method_setEntityResolver_INLREntityResolver__V,
  &Parser_method_setErrorHandler_INLRErrorHandler__V,
  &Parser_method_setLocale_INLacdk_util_RLocale__V,
  0
};


struct Parser_MetaInfoInitializer
{  Parser_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Parser::clazzInfo();
    ci->fields =  _Parser_fields;
    ci->methods =  _Parser_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Parser_MetaInfoInitializer Parser_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
SAXException_create_array(int length)
{
  return new ObjectArrayImpl<RSAXException>(length);
}

//static
::acdk::lang::RObject
SAXException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SAXException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SAXException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_SAXException_INLRString__LRSAXException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXException((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_SAXException__LRSAXException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_SAXException_INLRException__LRSAXException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXException((RException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_SAXException_INLRString_INLRException__LRSAXException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXException((RString)args[0].getObjectVar(), (RException)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_getException__LRException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXException* This = dmi_cast<SAXException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXException::getException();
    else
        ret = (::acdk::lang::RObject)This->getException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXException* This = dmi_cast<SAXException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXException_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXException* This = dmi_cast<SAXException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXException::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXException_fields__exception_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXException* This = dmi_cast<SAXException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exception, flags);
    else
      This->_exception = (RException)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXException_fields__message_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXException* This = dmi_cast<SAXException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_message, flags);
    else
      This->_message = (RString)var.getObjectVar();
    return fieldinf;
  }
};


void ThrowException_SAXException(IN(::acdk::lang::RThrowable) ex)
{
  throw RSAXException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo SAXException_fields__exception = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exception", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo(),
  SAXException_MetainfoWrapper::SAXException_fields__exception_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SAXException_fields__message = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_message", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SAXException_MetainfoWrapper::SAXException_fields__message_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SAXException_fields[] = 
{
  &SAXException_fields__exception,
  &SAXException_fields__message,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SAXException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXException_methods_SAXException_INLRString__LRSAXException__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_SAXException_INLRString__LRSAXException__args[] = 
{
  &SAXException_methods_SAXException_INLRString__LRSAXException__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_SAXException_INLRString__LRSAXException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_SAXException_INLRString__LRSAXException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXException::clazzInfo(), // return type
  "_0_SAXException", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_SAXException_INLRString__LRSAXException__args, // the arguments
  0, //arguments count
  SAXException_methods_SAXException_INLRString__LRSAXException__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_SAXException_INLRString__LRSAXException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_SAXException__LRSAXException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_SAXException__LRSAXException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_SAXException__LRSAXException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXException::clazzInfo(), // return type
  "_1_SAXException", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_SAXException__LRSAXException__args, // the arguments
  0, //arguments count
  SAXException_methods_SAXException__LRSAXException__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_SAXException__LRSAXException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXException_methods_SAXException_INLRException__LRSAXException__arg_exception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_SAXException_INLRException__LRSAXException__args[] = 
{
  &SAXException_methods_SAXException_INLRException__LRSAXException__arg_exception,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_SAXException_INLRException__LRSAXException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_SAXException_INLRException__LRSAXException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXException::clazzInfo(), // return type
  "_2_SAXException", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_SAXException_INLRException__LRSAXException__args, // the arguments
  0, //arguments count
  SAXException_methods_SAXException_INLRException__LRSAXException__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_SAXException_INLRException__LRSAXException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__arg_exception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__args[] = 
{
  &SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__arg_msg,
  &SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__arg_exception,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_SAXException_INLRString_INLRException__LRSAXException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXException::clazzInfo(), // return type
  "_3_SAXException", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__args, // the arguments
  0, //arguments count
  SAXException_methods_SAXException_INLRString_INLRException__LRSAXException__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_SAXException_INLRString_INLRException__LRSAXException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_getException__LRException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_getException__LRException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_getException__LRException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo(), // return type
  "_5_getException", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_getException__LRException__args, // the arguments
  0, //arguments count
  SAXException_methods_getException__LRException__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_getException__LRException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getMessage", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  SAXException_methods_getMessage__LRString__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXException_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXException_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toString", // alternative name of method
  -1, // altlabelHashCode
  SAXException_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SAXException_methods_toString__LRString__exceptions, // the declared exceptions
  SAXException_MetainfoWrapper::SAXException_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SAXException_methods[] = 
{
  &SAXException_method_GetClass__L_acdk_lang_RClass_,
  &SAXException_method_SAXException_INLRString__LRSAXException_,
  &SAXException_method_SAXException__LRSAXException_,
  &SAXException_method_SAXException_INLRException__LRSAXException_,
  &SAXException_method_SAXException_INLRString_INLRException__LRSAXException_,
  &SAXException_method_getException__LRException_,
  &SAXException_method_getMessage__LRString_,
  &SAXException_method_toString__LRString_,
  0
};


struct SAXException_MetaInfoInitializer
{  SAXException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SAXException::clazzInfo();
    ci->fields =  _SAXException_fields;
    ci->methods =  _SAXException_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SAXException_MetaInfoInitializer SAXException_MetaInfoInitializer_staticinstance__;


struct SAXException_clazzInfo_ClazzAttributesResInitializer1
{
  SAXException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SAXException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SAXException));
  }
};

SAXException_clazzInfo_ClazzAttributesResInitializer1 SAXException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
SAXNotRecognizedException_create_array(int length)
{
  return new ObjectArrayImpl<RSAXNotRecognizedException>(length);
}

//static
::acdk::lang::RObject
SAXNotRecognizedException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SAXNotRecognizedException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotRecognizedException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SAXNotRecognizedException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotRecognizedException_method_SAXNotRecognizedException__LRSAXNotRecognizedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXNotRecognizedException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotRecognizedException_method_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXNotRecognizedException((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SAXNotRecognizedException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotRecognizedException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotRecognizedException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotRecognizedException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SAXNotRecognizedException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SAXNotRecognizedException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SAXNotRecognizedException_MetainfoWrapper::SAXNotRecognizedException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotRecognizedException_methods_SAXNotRecognizedException__LRSAXNotRecognizedException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotRecognizedException_methods_SAXNotRecognizedException__LRSAXNotRecognizedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotRecognizedException_method_SAXNotRecognizedException__LRSAXNotRecognizedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXNotRecognizedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXNotRecognizedException::clazzInfo(), // return type
  "_0_SAXNotRecognizedException", // alternative name of method
  -1, // altlabelHashCode
  SAXNotRecognizedException_methods_SAXNotRecognizedException__LRSAXNotRecognizedException__args, // the arguments
  0, //arguments count
  SAXNotRecognizedException_methods_SAXNotRecognizedException__LRSAXNotRecognizedException__exceptions, // the declared exceptions
  SAXNotRecognizedException_MetainfoWrapper::SAXNotRecognizedException_method_SAXNotRecognizedException__LRSAXNotRecognizedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__args[] = 
{
  &SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotRecognizedException_method_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXNotRecognizedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXNotRecognizedException::clazzInfo(), // return type
  "_1_SAXNotRecognizedException", // alternative name of method
  -1, // altlabelHashCode
  SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__args, // the arguments
  0, //arguments count
  SAXNotRecognizedException_methods_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__exceptions, // the declared exceptions
  SAXNotRecognizedException_MetainfoWrapper::SAXNotRecognizedException_method_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SAXNotRecognizedException_methods[] = 
{
  &SAXNotRecognizedException_method_GetClass__L_acdk_lang_RClass_,
  &SAXNotRecognizedException_method_SAXNotRecognizedException__LRSAXNotRecognizedException_,
  &SAXNotRecognizedException_method_SAXNotRecognizedException_INLRString__LRSAXNotRecognizedException_,
  0
};


struct SAXNotRecognizedException_MetaInfoInitializer
{  SAXNotRecognizedException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SAXNotRecognizedException::clazzInfo();
    ci->fields =  _SAXNotRecognizedException_fields;
    ci->methods =  _SAXNotRecognizedException_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SAXNotRecognizedException_MetaInfoInitializer SAXNotRecognizedException_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
SAXNotSupportedException_create_array(int length)
{
  return new ObjectArrayImpl<RSAXNotSupportedException>(length);
}

//static
::acdk::lang::RObject
SAXNotSupportedException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SAXNotSupportedException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotSupportedException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SAXNotSupportedException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotSupportedException_method_SAXNotSupportedException__LRSAXNotSupportedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXNotSupportedException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXNotSupportedException_method_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXNotSupportedException((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SAXNotSupportedException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotSupportedException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotSupportedException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotSupportedException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SAXNotSupportedException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SAXNotSupportedException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SAXNotSupportedException_MetainfoWrapper::SAXNotSupportedException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotSupportedException_methods_SAXNotSupportedException__LRSAXNotSupportedException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotSupportedException_methods_SAXNotSupportedException__LRSAXNotSupportedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotSupportedException_method_SAXNotSupportedException__LRSAXNotSupportedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXNotSupportedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXNotSupportedException::clazzInfo(), // return type
  "_0_SAXNotSupportedException", // alternative name of method
  -1, // altlabelHashCode
  SAXNotSupportedException_methods_SAXNotSupportedException__LRSAXNotSupportedException__args, // the arguments
  0, //arguments count
  SAXNotSupportedException_methods_SAXNotSupportedException__LRSAXNotSupportedException__exceptions, // the declared exceptions
  SAXNotSupportedException_MetainfoWrapper::SAXNotSupportedException_method_SAXNotSupportedException__LRSAXNotSupportedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__args[] = 
{
  &SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXNotSupportedException_method_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXNotSupportedException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXNotSupportedException::clazzInfo(), // return type
  "_1_SAXNotSupportedException", // alternative name of method
  -1, // altlabelHashCode
  SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__args, // the arguments
  0, //arguments count
  SAXNotSupportedException_methods_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__exceptions, // the declared exceptions
  SAXNotSupportedException_MetainfoWrapper::SAXNotSupportedException_method_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SAXNotSupportedException_methods[] = 
{
  &SAXNotSupportedException_method_GetClass__L_acdk_lang_RClass_,
  &SAXNotSupportedException_method_SAXNotSupportedException__LRSAXNotSupportedException_,
  &SAXNotSupportedException_method_SAXNotSupportedException_INLacdk_lang_RString__LRSAXNotSupportedException_,
  0
};


struct SAXNotSupportedException_MetaInfoInitializer
{  SAXNotSupportedException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SAXNotSupportedException::clazzInfo();
    ci->fields =  _SAXNotSupportedException_fields;
    ci->methods =  _SAXNotSupportedException_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SAXNotSupportedException_MetaInfoInitializer SAXNotSupportedException_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
SAXParseException_create_array(int length)
{
  return new ObjectArrayImpl<RSAXParseException>(length);
}

//static
::acdk::lang::RObject
SAXParseException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SAXParseException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SAXParseException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_SAXParseException_INLRString_INLRLocator__LRSAXParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXParseException((RString)args[0].getObjectVar(), (RLocator)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXParseException((RString)args[0].getObjectVar(), (RLocator)args[1].getObjectVar(), (RException)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXParseException((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar(), (RException)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SAXParseException((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_getColumnNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SAXParseException::getColumnNumber();
    else
      ret = This->getColumnNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_getLineNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SAXParseException::getLineNumber();
    else
      ret = This->getLineNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXParseException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_getPublicId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXParseException::getPublicId();
    else
        ret = (::acdk::lang::RObject)This->getPublicId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_getSystemId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXParseException::getSystemId();
    else
        ret = (::acdk::lang::RObject)This->getSystemId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_locator__LRLocator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXParseException::locator();
    else
        ret = (::acdk::lang::RObject)This->locator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SAXParseException_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SAXParseException::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXParseException_fields__columnNo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnNo, flags);
    else
      This->_columnNo = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXParseException_fields__lineNo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lineNo, flags);
    else
      This->_lineNo = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXParseException_fields__locator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_locator, flags);
    else
      This->_locator = (RLocator)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXParseException_fields__publicId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_publicId, flags);
    else
      This->_publicId = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SAXParseException_fields__systemId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SAXParseException* This = dmi_cast<SAXParseException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_systemId, flags);
    else
      This->_systemId = (RString)var.getObjectVar();
    return fieldinf;
  }
};


void ThrowException_SAXParseException(IN(::acdk::lang::RThrowable) ex)
{
  throw RSAXParseException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo SAXParseException_fields__columnNo = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnNo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SAXParseException_MetainfoWrapper::SAXParseException_fields__columnNo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SAXParseException_fields__lineNo = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lineNo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SAXParseException_MetainfoWrapper::SAXParseException_fields__lineNo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SAXParseException_fields__locator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_locator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo(),
  SAXParseException_MetainfoWrapper::SAXParseException_fields__locator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SAXParseException_fields__publicId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_publicId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SAXParseException_MetainfoWrapper::SAXParseException_fields__publicId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SAXParseException_fields__systemId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_systemId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SAXParseException_MetainfoWrapper::SAXParseException_fields__systemId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SAXParseException_fields[] = 
{
  &SAXParseException_fields__columnNo,
  &SAXParseException_fields__lineNo,
  &SAXParseException_fields__locator,
  &SAXParseException_fields__publicId,
  &SAXParseException_fields__systemId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SAXParseException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__args[] = 
{
  &SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__arg_s,
  &SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_SAXParseException_INLRString_INLRLocator__LRSAXParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXParseException::clazzInfo(), // return type
  "_0_SAXParseException", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__args, // the arguments
  0, //arguments count
  SAXParseException_methods_SAXParseException_INLRString_INLRLocator__LRSAXParseException__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_SAXParseException_INLRString_INLRLocator__LRSAXParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_exception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__args[] = 
{
  &SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_s,
  &SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_locator,
  &SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__arg_exception,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXParseException::clazzInfo(), // return type
  "_1_SAXParseException", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__args, // the arguments
  0, //arguments count
  SAXParseException_methods_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_lineno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_colno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "colno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__args[] = 
{
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_msg,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_publicId,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_systemId,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_lineno,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_colno,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXParseException::clazzInfo(), // return type
  "_2_SAXParseException", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__args, // the arguments
  0, //arguments count
  SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_lineno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_colno = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "colno", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__args[] = 
{
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_msg,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_publicId,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_systemId,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_lineno,
  &SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__arg_colno,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SAXParseException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SAXParseException::clazzInfo(), // return type
  "_3_SAXParseException", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__args, // the arguments
  0, //arguments count
  SAXParseException_methods_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_getColumnNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_getColumnNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_getColumnNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getColumnNumber", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_getColumnNumber__I_args, // the arguments
  0, //arguments count
  SAXParseException_methods_getColumnNumber__I_exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_getColumnNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_getLineNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_getLineNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_getLineNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getLineNumber", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_getLineNumber__I_args, // the arguments
  0, //arguments count
  SAXParseException_methods_getLineNumber__I_exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_getLineNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getMessage", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  SAXParseException_methods_getMessage__LRString__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_getPublicId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_getPublicId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_getPublicId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getPublicId", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_getPublicId__LRString__args, // the arguments
  0, //arguments count
  SAXParseException_methods_getPublicId__LRString__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_getPublicId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_getSystemId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_getSystemId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_getSystemId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getSystemId", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_getSystemId__LRString__args, // the arguments
  0, //arguments count
  SAXParseException_methods_getSystemId__LRString__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_getSystemId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_locator__LRLocator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_locator__LRLocator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_locator__LRLocator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "locator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo(), // return type
  "_4_locator", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_locator__LRLocator__args, // the arguments
  0, //arguments count
  SAXParseException_methods_locator__LRLocator__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_locator__LRLocator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SAXParseException_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SAXParseException_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  SAXParseException_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SAXParseException_methods_toString__LRString__exceptions, // the declared exceptions
  SAXParseException_MetainfoWrapper::SAXParseException_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SAXParseException_methods[] = 
{
  &SAXParseException_method_GetClass__L_acdk_lang_RClass_,
  &SAXParseException_method_SAXParseException_INLRString_INLRLocator__LRSAXParseException_,
  &SAXParseException_method_SAXParseException_INLRString_INLRLocator_INLRException__LRSAXParseException_,
  &SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_IIINLRException__LRSAXParseException_,
  &SAXParseException_method_SAXParseException_INLRString_INLRString_INLRString_II_LRSAXParseException_,
  &SAXParseException_method_getColumnNumber__I,
  &SAXParseException_method_getLineNumber__I,
  &SAXParseException_method_getMessage__LRString_,
  &SAXParseException_method_getPublicId__LRString_,
  &SAXParseException_method_getSystemId__LRString_,
  &SAXParseException_method_locator__LRLocator_,
  &SAXParseException_method_toString__LRString_,
  0
};


struct SAXParseException_MetaInfoInitializer
{  SAXParseException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SAXParseException::clazzInfo();
    ci->fields =  _SAXParseException_fields;
    ci->methods =  _SAXParseException_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SAXParseException_MetaInfoInitializer SAXParseException_MetaInfoInitializer_staticinstance__;


struct SAXParseException_clazzInfo_ClazzAttributesResInitializer2
{
  SAXParseException_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)SAXParseException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_SAXParseException));
  }
};

SAXParseException_clazzInfo_ClazzAttributesResInitializer2 SAXParseException_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
XMLFilter_create_array(int length)
{
  return new ObjectArrayImpl<RXMLFilter>(length);
}

//static
::acdk::lang::RObject
XMLFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilter_method_getParent__LRXMLReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilter* This = dmi_cast<XMLFilter>(This_);
    ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilter_method_setParent_INLRXMLReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilter* This = dmi_cast<XMLFilter>(This_);
    This->setParent((RXMLReader)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLFilter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLFilter_MetainfoWrapper::XMLFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilter_methods_getParent__LRXMLReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilter_methods_getParent__LRXMLReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilter_method_getParent__LRXMLReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo(), // return type
  "_1_getParent", // alternative name of method
  -1, // altlabelHashCode
  XMLFilter_methods_getParent__LRXMLReader__args, // the arguments
  0, //arguments count
  XMLFilter_methods_getParent__LRXMLReader__exceptions, // the declared exceptions
  XMLFilter_MetainfoWrapper::XMLFilter_method_getParent__LRXMLReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilter_methods_setParent_INLRXMLReader__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilter_methods_setParent_INLRXMLReader__V_args[] = 
{
  &XMLFilter_methods_setParent_INLRXMLReader__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilter_methods_setParent_INLRXMLReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilter_method_setParent_INLRXMLReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_setParent", // alternative name of method
  -1, // altlabelHashCode
  XMLFilter_methods_setParent_INLRXMLReader__V_args, // the arguments
  0, //arguments count
  XMLFilter_methods_setParent_INLRXMLReader__V_exceptions, // the declared exceptions
  XMLFilter_MetainfoWrapper::XMLFilter_method_setParent_INLRXMLReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLFilter_methods[] = 
{
  &XMLFilter_method_GetClass__L_acdk_lang_RClass_,
  &XMLFilter_method_getParent__LRXMLReader_,
  &XMLFilter_method_setParent_INLRXMLReader__V,
  0
};


struct XMLFilter_MetaInfoInitializer
{  XMLFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLFilter::clazzInfo();
    ci->fields =  _XMLFilter_fields;
    ci->methods =  _XMLFilter_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLFilter_MetaInfoInitializer XMLFilter_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
XMLReader_create_array(int length)
{
  return new ObjectArrayImpl<RXMLReader>(length);
}

//static
::acdk::lang::RObject
XMLReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getContentHandler__LRContentHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    ret = (::acdk::lang::RObject)This->getContentHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getDTDHandler__LRDTDHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    ret = (::acdk::lang::RObject)This->getDTDHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getEntityResolver__LREntityResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    ret = (::acdk::lang::RObject)This->getEntityResolver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getErrorHandler__LRErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    ret = (::acdk::lang::RObject)This->getErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getFeature_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
  ret = This->getFeature((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getProperty_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    ret = (::acdk::lang::RObject)This->getProperty((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parse_INLRInputSource__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->parse((RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setContentHandler_INLRContentHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setContentHandler((RContentHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setDTDHandler_INLRDTDHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setDTDHandler((RDTDHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setEntityResolver_INLREntityResolver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setEntityResolver((REntityResolver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setErrorHandler_INLRErrorHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setErrorHandler((RErrorHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setFeature_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setFeature((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setProperty_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    This->setProperty((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLReader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getContentHandler__LRContentHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getContentHandler__LRContentHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getContentHandler__LRContentHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo(), // return type
  "_9_getContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getContentHandler__LRContentHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getContentHandler__LRContentHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getContentHandler__LRContentHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getDTDHandler__LRDTDHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getDTDHandler__LRDTDHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getDTDHandler__LRDTDHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo(), // return type
  "_7_getDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getDTDHandler__LRDTDHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getDTDHandler__LRDTDHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getDTDHandler__LRDTDHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getEntityResolver__LREntityResolver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getEntityResolver__LREntityResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getEntityResolver__LREntityResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo(), // return type
  "_5_getEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getEntityResolver__LREntityResolver__args, // the arguments
  0, //arguments count
  XMLReader_methods_getEntityResolver__LREntityResolver__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getEntityResolver__LREntityResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getErrorHandler__LRErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getErrorHandler__LRErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getErrorHandler__LRErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo(), // return type
  "_b_getErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getErrorHandler__LRErrorHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getErrorHandler__LRErrorHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getErrorHandler__LRErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_getFeature_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getFeature_INLRString__Z_args[] = 
{
  &XMLReader_methods_getFeature_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getFeature_INLRString__Z_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_getFeature_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getFeature_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_getFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getFeature_INLRString__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_getFeature_INLRString__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getFeature_INLRString__Z_dispatch, // invoke this method
  XMLReader_getFeature_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_getProperty_INLRString__LRObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getProperty_INLRString__LRObject__args[] = 
{
  &XMLReader_methods_getProperty_INLRString__LRObject__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getProperty_INLRString__LRObject__exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_getProperty_INLRString__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getProperty_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_getProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getProperty_INLRString__LRObject__args, // the arguments
  0, //arguments count
  XMLReader_methods_getProperty_INLRString__LRObject__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getProperty_INLRString__LRObject__dispatch, // invoke this method
  XMLReader_getProperty_INLRString__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parse_INLRInputSource__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parse_INLRInputSource__V_args[] = 
{
  &XMLReader_methods_parse_INLRInputSource__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parse_INLRInputSource__V_exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  RSAXException::clazzInfo(), 
  0
};

void XMLReader_parse_INLRInputSource__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parse_INLRInputSource__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parse_INLRInputSource__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_parse_INLRInputSource__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parse_INLRInputSource__V_dispatch, // invoke this method
  XMLReader_parse_INLRInputSource__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parse_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parse_INLRString__V_args[] = 
{
  &XMLReader_methods_parse_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parse_INLRString__V_exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  RSAXException::clazzInfo(), 
  0
};

void XMLReader_parse_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_parse_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parse_INLRString__V_dispatch, // invoke this method
  XMLReader_parse_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setContentHandler_INLRContentHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setContentHandler_INLRContentHandler__V_args[] = 
{
  &XMLReader_methods_setContentHandler_INLRContentHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setContentHandler_INLRContentHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setContentHandler_INLRContentHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setContentHandler_INLRContentHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setContentHandler_INLRContentHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setContentHandler_INLRContentHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setDTDHandler_INLRDTDHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setDTDHandler_INLRDTDHandler__V_args[] = 
{
  &XMLReader_methods_setDTDHandler_INLRDTDHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setDTDHandler_INLRDTDHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setDTDHandler_INLRDTDHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setDTDHandler_INLRDTDHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setDTDHandler_INLRDTDHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setDTDHandler_INLRDTDHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setEntityResolver_INLREntityResolver__V_arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setEntityResolver_INLREntityResolver__V_args[] = 
{
  &XMLReader_methods_setEntityResolver_INLREntityResolver__V_arg_resolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setEntityResolver_INLREntityResolver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setEntityResolver_INLREntityResolver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setEntityResolver_INLREntityResolver__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setEntityResolver_INLREntityResolver__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setEntityResolver_INLREntityResolver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setErrorHandler_INLRErrorHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setErrorHandler_INLRErrorHandler__V_args[] = 
{
  &XMLReader_methods_setErrorHandler_INLRErrorHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setErrorHandler_INLRErrorHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setErrorHandler_INLRErrorHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setErrorHandler_INLRErrorHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setErrorHandler_INLRErrorHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setErrorHandler_INLRErrorHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setFeature_INLRString_Z_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setFeature_INLRString_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setFeature_INLRString_Z_V_args[] = 
{
  &XMLReader_methods_setFeature_INLRString_Z_V_arg_name,
  &XMLReader_methods_setFeature_INLRString_Z_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setFeature_INLRString_Z_V_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_setFeature_INLRString_Z_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setFeature_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setFeature_INLRString_Z_V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setFeature_INLRString_Z_V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setFeature_INLRString_Z_V_dispatch, // invoke this method
  XMLReader_setFeature_INLRString_Z_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setProperty_INLRString_INLRObject__V_args[] = 
{
  &XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_name,
  &XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setProperty_INLRString_INLRObject__V_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_setProperty_INLRString_INLRObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setProperty_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setProperty_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setProperty_INLRString_INLRObject__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setProperty_INLRString_INLRObject__V_dispatch, // invoke this method
  XMLReader_setProperty_INLRString_INLRObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLReader_methods[] = 
{
  &XMLReader_method_GetClass__L_acdk_lang_RClass_,
  &XMLReader_method_getContentHandler__LRContentHandler_,
  &XMLReader_method_getDTDHandler__LRDTDHandler_,
  &XMLReader_method_getEntityResolver__LREntityResolver_,
  &XMLReader_method_getErrorHandler__LRErrorHandler_,
  &XMLReader_method_getFeature_INLRString__Z,
  &XMLReader_method_getProperty_INLRString__LRObject_,
  &XMLReader_method_parse_INLRInputSource__V,
  &XMLReader_method_parse_INLRString__V,
  &XMLReader_method_setContentHandler_INLRContentHandler__V,
  &XMLReader_method_setDTDHandler_INLRDTDHandler__V,
  &XMLReader_method_setEntityResolver_INLREntityResolver__V,
  &XMLReader_method_setErrorHandler_INLRErrorHandler__V,
  &XMLReader_method_setFeature_INLRString_Z_V,
  &XMLReader_method_setProperty_INLRString_INLRObject__V,
  0
};


struct XMLReader_MetaInfoInitializer
{  XMLReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLReader::clazzInfo();
    ci->fields =  _XMLReader_fields;
    ci->methods =  _XMLReader_methods;
    ci->_scopeParent = org_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLReader_MetaInfoInitializer XMLReader_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) sax_dummyExportFunc() {}
#endif

