// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AttributeList.h"
#include "Attributes.h"
#include "Config.h"
#include "ContentHandler.h"
#include "DeclHandler.h"
#include "DocumentHandler.h"
#include "DTDHandler.h"
#include "EntityResolver.h"
#include "ErrorHandler.h"
#include "HandlerBase.h"
#include "InputSource.h"
#include "LexicalHandler.h"
#include "Locator.h"
#include "Parser.h"
#include "sax.h"
#include "SAXException.h"
#include "SAXNotRecognizedException.h"
#include "SAXNotSupportedException.h"
#include "SAXParseException.h"
#include "XMLFilter.h"
#include "XMLReader.h"

namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _AttributeList_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributeList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AttributeList", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AttributeList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AttributeList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AttributeList(AttributeList::clazzInfo());

::acdk::lang::RClass
AttributeList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AttributeList::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _Attributes_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Attributes::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Attributes", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Attributes_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Attributes::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Attributes(Attributes::clazzInfo());

::acdk::lang::RClass
Attributes::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Attributes::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _ContentHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ContentHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ContentHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ContentHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ContentHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ContentHandler(ContentHandler::clazzInfo());

::acdk::lang::RClass
ContentHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ContentHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _DeclHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DeclHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DeclHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DeclHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DeclHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DeclHandler(DeclHandler::clazzInfo());

::acdk::lang::RClass
DeclHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DeclHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _DocumentHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DocumentHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DocumentHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DocumentHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DocumentHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DocumentHandler(DocumentHandler::clazzInfo());

::acdk::lang::RClass
DocumentHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DocumentHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

using namespace ::acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _DTDHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DTDHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DTDHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DTDHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DTDHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DTDHandler(DTDHandler::clazzInfo());

::acdk::lang::RClass
DTDHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DTDHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _EntityResolver_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* EntityResolver::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "EntityResolver", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EntityResolver_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EntityResolver::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EntityResolver(EntityResolver::clazzInfo());

::acdk::lang::RClass
EntityResolver::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EntityResolver::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _ErrorHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ErrorHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ErrorHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ErrorHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ErrorHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ErrorHandler(ErrorHandler::clazzInfo());

::acdk::lang::RClass
ErrorHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ErrorHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _HandlerBase_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HandlerBase_super_EntityResolver =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  EntityResolver::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HandlerBase_super_DTDHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DTDHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HandlerBase_super_DocumentHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DocumentHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HandlerBase_super_ErrorHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ErrorHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HandlerBase_interfaces[] =
{
  &_HandlerBase_super_Object,
  &_HandlerBase_super_EntityResolver,
  &_HandlerBase_super_DTDHandler,
  &_HandlerBase_super_DocumentHandler,
  &_HandlerBase_super_ErrorHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* HandlerBase::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HandlerBase", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HandlerBase_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HandlerBase::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HandlerBase(HandlerBase::clazzInfo());

::acdk::lang::RClass
HandlerBase::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HandlerBase::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _InputSource_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InputSource_interfaces[] =
{
  &_InputSource_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* InputSource::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InputSource", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InputSource_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InputSource::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InputSource(InputSource::clazzInfo());

::acdk::lang::RClass
InputSource::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InputSource::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_encoding._ref_this()); // ::acdk::lang::RString _encoding 
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // ::acdk::io::RReader _in 
  fields.push_back((::acdk::lang::RObject*)this->_publicId._ref_this()); // ::acdk::lang::RString _publicId 
  fields.push_back((::acdk::lang::RObject*)this->_systemId._ref_this()); // ::acdk::lang::RString _systemId 
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _LexicalHandler_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* LexicalHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "LexicalHandler", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LexicalHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LexicalHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LexicalHandler(LexicalHandler::clazzInfo());

::acdk::lang::RClass
LexicalHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LexicalHandler::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _Locator_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Locator", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Locator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Locator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Locator(Locator::clazzInfo());

::acdk::lang::RClass
Locator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Locator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _Parser_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parser::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Parser", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Parser_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Parser::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Parser(Parser::clazzInfo());

::acdk::lang::RClass
Parser::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Parser::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _SAXException_super_Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SAXException_interfaces[] =
{
  &_SAXException_super_Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SAXException", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SAXException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SAXException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SAXException(SAXException::clazzInfo());

::acdk::lang::RClass
SAXException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SAXException::getCollectableFields(FieldReferences& fields)
{
  Exception::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_exception._ref_this()); // RException _exception 
  fields.push_back((::acdk::lang::RObject*)this->_message._ref_this()); // RString _message 
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _SAXNotRecognizedException_super_SAXException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SAXException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SAXNotRecognizedException_interfaces[] =
{
  &_SAXNotRecognizedException_super_SAXException,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotRecognizedException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SAXNotRecognizedException", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SAXNotRecognizedException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SAXNotRecognizedException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SAXNotRecognizedException(SAXNotRecognizedException::clazzInfo());

::acdk::lang::RClass
SAXNotRecognizedException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SAXNotRecognizedException::getCollectableFields(FieldReferences& fields)
{
  SAXException::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _SAXNotSupportedException_super_SAXException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SAXException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SAXNotSupportedException_interfaces[] =
{
  &_SAXNotSupportedException_super_SAXException,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXNotSupportedException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SAXNotSupportedException", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SAXNotSupportedException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SAXNotSupportedException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SAXNotSupportedException(SAXNotSupportedException::clazzInfo());

::acdk::lang::RClass
SAXNotSupportedException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SAXNotSupportedException::getCollectableFields(FieldReferences& fields)
{
  SAXException::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _SAXParseException_super_SAXException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SAXException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SAXParseException_interfaces[] =
{
  &_SAXParseException_super_SAXException,
  0
};

::acdk::lang::dmi::ClazzInfo* SAXParseException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SAXParseException", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SAXParseException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SAXParseException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SAXParseException(SAXParseException::clazzInfo());

::acdk::lang::RClass
SAXParseException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SAXParseException::getCollectableFields(FieldReferences& fields)
{
  SAXException::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_locator._ref_this()); // RLocator _locator 
  fields.push_back((::acdk::lang::RObject*)this->_publicId._ref_this()); // RString _publicId 
  fields.push_back((::acdk::lang::RObject*)this->_systemId._ref_this()); // RString _systemId 
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo _XMLFilter_super_XMLReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  XMLReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLFilter_interfaces[] =
{
  &_XMLFilter_super_XMLReader,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "XMLFilter", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLFilter(XMLFilter::clazzInfo());

::acdk::lang::RClass
XMLFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLFilter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax


namespace org { 
namespace xml { 
namespace sax { 

::acdk::lang::dmi::ClazzSuperInfo* _XMLReader_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "XMLReader", // name of class
  -1, // hashCode
  "org/xml/sax", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLReader(XMLReader::clazzInfo());

::acdk::lang::RClass
XMLReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace org
} // namespace xml
} // namespace sax

