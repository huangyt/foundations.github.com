// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AttributesImpl.h"
#include "CollectiveErrorHandler.h"
#include "DefaultHandler.h"
#include "helpers.h"
#include "LocatorImpl.h"
#include "MiscXmlUtils.h"
#include "NamespaceSupport.h"
#include "StdErrorHandler.h"
#include "XMLFilterImpl.h"

namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _AttributesImpl_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AttributesImpl_super_Attributes =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Attributes::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AttributesImpl_interfaces[] =
{
  &_AttributesImpl_super_Object,
  &_AttributesImpl_super_Attributes,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AttributesImpl", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AttributesImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AttributesImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AttributesImpl(AttributesImpl::clazzInfo());

::acdk::lang::RClass
AttributesImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AttributesImpl::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_data._ref_this()); // RStringArray _data 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _CollectiveErrorHandler_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CollectiveErrorHandler_super_ErrorHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ErrorHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CollectiveErrorHandler_interfaces[] =
{
  &_CollectiveErrorHandler_super___acdk__lang__Object,
  &_CollectiveErrorHandler_super_ErrorHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CollectiveErrorHandler", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CollectiveErrorHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CollectiveErrorHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CollectiveErrorHandler(CollectiveErrorHandler::clazzInfo());

::acdk::lang::RClass
CollectiveErrorHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CollectiveErrorHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_errors._ref_this()); // RSAXParseExceptionArray _errors 
  fields.push_back((::acdk::lang::RObject*)this->_fatalErrors._ref_this()); // RSAXParseExceptionArray _fatalErrors 
  fields.push_back((::acdk::lang::RObject*)this->_warnings._ref_this()); // RSAXParseExceptionArray _warnings 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _DefaultHandler_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DefaultHandler_super_EntityResolver =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  EntityResolver::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DefaultHandler_super_DTDHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DTDHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DefaultHandler_super_ContentHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ContentHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DefaultHandler_super_ErrorHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ErrorHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DefaultHandler_interfaces[] =
{
  &_DefaultHandler_super_acdk__lang__Object,
  &_DefaultHandler_super_EntityResolver,
  &_DefaultHandler_super_DTDHandler,
  &_DefaultHandler_super_ContentHandler,
  &_DefaultHandler_super_ErrorHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DefaultHandler", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DefaultHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DefaultHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DefaultHandler(DefaultHandler::clazzInfo());

::acdk::lang::RClass
DefaultHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DefaultHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _LocatorImpl_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LocatorImpl_super_org__xml__sax__Locator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::xml::sax::Locator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LocatorImpl_interfaces[] =
{
  &_LocatorImpl_super_acdk__lang__Object,
  &_LocatorImpl_super_org__xml__sax__Locator,
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LocatorImpl", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LocatorImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LocatorImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LocatorImpl(LocatorImpl::clazzInfo());

::acdk::lang::RClass
LocatorImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LocatorImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_publicId._ref_this()); // RString _publicId 
  fields.push_back((::acdk::lang::RObject*)this->_systemId._ref_this()); // RString _systemId 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _MiscXmlUtils_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MiscXmlUtils_interfaces[] =
{
  &_MiscXmlUtils_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* MiscXmlUtils::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MiscXmlUtils", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MiscXmlUtils_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MiscXmlUtils::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MiscXmlUtils(MiscXmlUtils::clazzInfo());

::acdk::lang::RClass
MiscXmlUtils::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MiscXmlUtils::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _Context_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Context_interfaces[] =
{
  &_Context_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Context::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Context", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Context_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Context::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Context(Context::clazzInfo());

::acdk::lang::RClass
Context::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Context::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->attributeNameTable._ref_this()); // acdk::util::RHashMap attributeNameTable 
  fields.push_back((::acdk::lang::RObject*)this->declarations._ref_this()); // RStringArray declarations 
  fields.push_back((::acdk::lang::RObject*)this->defaultNS._ref_this()); // RString defaultNS 
  fields.push_back((::acdk::lang::RObject*)this->elementNameTable._ref_this()); // acdk::util::RHashMap elementNameTable 
  fields.push_back((::acdk::lang::RObject*)this->parent._ref_this()); // RContext parent 
  fields.push_back((::acdk::lang::RObject*)this->prefixTable._ref_this()); // acdk::util::RHashMap prefixTable 
  fields.push_back((::acdk::lang::RObject*)this->uriTable._ref_this()); // acdk::util::RHashMap uriTable 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _NamespaceSupport_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NamespaceSupport_interfaces[] =
{
  &_NamespaceSupport_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NamespaceSupport", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NamespaceSupport_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NamespaceSupport::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NamespaceSupport(NamespaceSupport::clazzInfo());

::acdk::lang::RClass
NamespaceSupport::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NamespaceSupport::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->contexts._ref_this()); // RContextArray contexts 
  fields.push_back((::acdk::lang::RObject*)this->currentContext._ref_this()); // RContext currentContext 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _StdErrorHandler_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StdErrorHandler_super_ErrorHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ErrorHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StdErrorHandler_interfaces[] =
{
  &_StdErrorHandler_super___acdk__lang__Object,
  &_StdErrorHandler_super_ErrorHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StdErrorHandler", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StdErrorHandler_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StdErrorHandler::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StdErrorHandler(StdErrorHandler::clazzInfo());

::acdk::lang::RClass
StdErrorHandler::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StdErrorHandler::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_XMLFilter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  XMLFilter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_EntityResolver =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  EntityResolver::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_DTDHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DTDHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_ContentHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ContentHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLFilterImpl_super_ErrorHandler =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ErrorHandler::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLFilterImpl_interfaces[] =
{
  &_XMLFilterImpl_super_Object,
  &_XMLFilterImpl_super_XMLFilter,
  &_XMLFilterImpl_super_EntityResolver,
  &_XMLFilterImpl_super_DTDHandler,
  &_XMLFilterImpl_super_ContentHandler,
  &_XMLFilterImpl_super_ErrorHandler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLFilterImpl", // name of class
  -1, // hashCode
  "org/xml/sax/helpers", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLFilterImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 6, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLFilterImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLFilterImpl(XMLFilterImpl::clazzInfo());

::acdk::lang::RClass
XMLFilterImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLFilterImpl::getCollectableFields(FieldReferences& fields)
{
  Object::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_contentHandler._ref_this()); // RContentHandler _contentHandler 
  fields.push_back((::acdk::lang::RObject*)this->_dtdHandler._ref_this()); // RDTDHandler _dtdHandler 
  fields.push_back((::acdk::lang::RObject*)this->_entityResolver._ref_this()); // REntityResolver _entityResolver 
  fields.push_back((::acdk::lang::RObject*)this->_errorHandler._ref_this()); // RErrorHandler _errorHandler 
  fields.push_back((::acdk::lang::RObject*)this->_locator._ref_this()); // RLocator _locator 
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RXMLReader _parent 
}


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers

