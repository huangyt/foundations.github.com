// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../helpers.h"
#include "../AttributesImpl.h"
#include "../CollectiveErrorHandler.h"
#include "../DefaultHandler.h"
#include "../helpers.h"
#include "../LocatorImpl.h"
#include "../MiscXmlUtils.h"
#include "../NamespaceSupport.h"
#include "../StdErrorHandler.h"
#include "../XMLFilterImpl.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
AttributesImpl_create_array(int length)
{
  return new ObjectArrayImpl<RAttributesImpl>(length);
}

//static
::acdk::lang::RObject
AttributesImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AttributesImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_AttributesImpl__LRAttributesImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AttributesImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_AttributesImpl_INLRAttributes__LRAttributesImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AttributesImpl((RAttributes)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AttributesImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method__ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::_ensureCapacity(args[0].getIntVar());
    else
        This->_ensureCapacity(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::addAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->addAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_badIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::badIndex(args[0].getIntVar());
    else
        This->badIndex(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getIndex_INLRString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AttributesImpl::getIndex((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->getIndex((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getIndex_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AttributesImpl::getIndex((RString)args[0].getObjectVar());
    else
      ret = This->getIndex((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AttributesImpl::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getLocalName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getLocalName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getLocalName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getQName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getQName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getQName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getType_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getType(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getType_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getType((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getType((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getType_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getType((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getType((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getURI_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getURI(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getURI(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getValue_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getValue(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getValue(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getValue_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getValue((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getValue((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_getValue_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AttributesImpl::getValue((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_removeAttribute_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::removeAttribute(args[0].getIntVar());
    else
        This->removeAttribute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setAttribute(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    else
        This->setAttribute(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setAttributes_INLRAttributes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setAttributes((RAttributes)args[0].getObjectVar());
    else
        This->setAttributes((RAttributes)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setLocalName_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setLocalName(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setLocalName(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setQName_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setQName(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setQName(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setType_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setType(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setType(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setURI_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setURI(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setURI(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AttributesImpl_method_setValue_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AttributesImpl::setValue(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setValue(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributesImpl_fields__data_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_data, flags);
    else
      This->_data = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AttributesImpl_fields__length_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AttributesImpl* This = dmi_cast<AttributesImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_length, flags);
    else
      This->_length = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AttributesImpl_fields__data = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_data", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  AttributesImpl_MetainfoWrapper::AttributesImpl_fields__data_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AttributesImpl_fields__length = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_length", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AttributesImpl_MetainfoWrapper::AttributesImpl_fields__length_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AttributesImpl_fields[] = 
{
  &AttributesImpl_fields__data,
  &AttributesImpl_fields__length,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_AttributesImpl__LRAttributesImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_AttributesImpl__LRAttributesImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_AttributesImpl__LRAttributesImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AttributesImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributesImpl::clazzInfo(), // return type
  "_0_AttributesImpl", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_AttributesImpl__LRAttributesImpl__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_AttributesImpl__LRAttributesImpl__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_AttributesImpl__LRAttributesImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__arg_atts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "atts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__args[] = 
{
  &AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__arg_atts,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_AttributesImpl_INLRAttributes__LRAttributesImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AttributesImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AttributesImpl::clazzInfo(), // return type
  "_1_AttributesImpl", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_AttributesImpl_INLRAttributes__LRAttributesImpl__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_AttributesImpl_INLRAttributes__LRAttributesImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods__ensureCapacity_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods__ensureCapacity_I_V_args[] = 
{
  &AttributesImpl_methods__ensureCapacity_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods__ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method__ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o__ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods__ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods__ensureCapacity_I_V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method__ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_uri,
  &AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_localName,
  &AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_qName,
  &AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type,
  &AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_addAttribute", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_badIndex_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_badIndex_I_V_args[] = 
{
  &AttributesImpl_methods_badIndex_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_badIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_badIndex_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "badIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_badIndex", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_badIndex_I_V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_badIndex_I_V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_badIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_clear", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_clear__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_clear__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getIndex_INLRString_INLRString__I_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getIndex_INLRString_INLRString__I_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getIndex_INLRString_INLRString__I_args[] = 
{
  &AttributesImpl_methods_getIndex_INLRString_INLRString__I_arg_uri,
  &AttributesImpl_methods_getIndex_INLRString_INLRString__I_arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getIndex_INLRString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getIndex_INLRString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getIndex", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getIndex_INLRString_INLRString__I_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getIndex_INLRString_INLRString__I_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getIndex_INLRString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getIndex_INLRString__I_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getIndex_INLRString__I_args[] = 
{
  &AttributesImpl_methods_getIndex_INLRString__I_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getIndex_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getIndex_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getIndex", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getIndex_INLRString__I_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getIndex_INLRString__I_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getIndex_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLength", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getLength__I_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getLength__I_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getLocalName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getLocalName_I_LRString__args[] = 
{
  &AttributesImpl_methods_getLocalName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getLocalName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getLocalName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getLocalName", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getLocalName_I_LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getLocalName_I_LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getLocalName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getQName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getQName_I_LRString__args[] = 
{
  &AttributesImpl_methods_getQName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getQName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getQName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getQName", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getQName_I_LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getQName_I_LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getQName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getType_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getType_I_LRString__args[] = 
{
  &AttributesImpl_methods_getType_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getType_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getType_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getType", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getType_I_LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getType_I_LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getType_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getType_INLRString_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getType_INLRString_INLRString__LRString__arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getType_INLRString_INLRString__LRString__args[] = 
{
  &AttributesImpl_methods_getType_INLRString_INLRString__LRString__arg_uri,
  &AttributesImpl_methods_getType_INLRString_INLRString__LRString__arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getType_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getType_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getType", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getType_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getType_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getType_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getType_INLRString__LRString__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getType_INLRString__LRString__args[] = 
{
  &AttributesImpl_methods_getType_INLRString__LRString__arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getType_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getType_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getType", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getType_INLRString__LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getType_INLRString__LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getType_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getURI_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getURI_I_LRString__args[] = 
{
  &AttributesImpl_methods_getURI_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getURI_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getURI_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getURI", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getURI_I_LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getURI_I_LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getURI_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getValue_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getValue_I_LRString__args[] = 
{
  &AttributesImpl_methods_getValue_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getValue_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getValue_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getValue", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getValue_I_LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getValue_I_LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getValue_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getValue_INLRString_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getValue_INLRString_INLRString__LRString__arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getValue_INLRString_INLRString__LRString__args[] = 
{
  &AttributesImpl_methods_getValue_INLRString_INLRString__LRString__arg_uri,
  &AttributesImpl_methods_getValue_INLRString_INLRString__LRString__arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getValue_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getValue_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getValue", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getValue_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getValue_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getValue_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_getValue_INLRString__LRString__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_getValue_INLRString__LRString__args[] = 
{
  &AttributesImpl_methods_getValue_INLRString__LRString__arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_getValue_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_getValue_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getValue", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_getValue_INLRString__LRString__args, // the arguments
  0, //arguments count
  AttributesImpl_methods_getValue_INLRString__LRString__exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_getValue_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_removeAttribute_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_removeAttribute_I_V_args[] = 
{
  &AttributesImpl_methods_removeAttribute_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_removeAttribute_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_removeAttribute_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_removeAttribute", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_removeAttribute_I_V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_removeAttribute_I_V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_removeAttribute_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_index,
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_uri,
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_localName,
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_qName,
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type,
  &AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setAttribute", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setAttributes_INLRAttributes__V_arg_atts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "atts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setAttributes_INLRAttributes__V_args[] = 
{
  &AttributesImpl_methods_setAttributes_INLRAttributes__V_arg_atts,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setAttributes_INLRAttributes__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setAttributes_INLRAttributes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setAttributes", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setAttributes_INLRAttributes__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setAttributes_INLRAttributes__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setAttributes_INLRAttributes__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setLocalName_IINLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setLocalName_IINLRString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setLocalName_IINLRString__V_args[] = 
{
  &AttributesImpl_methods_setLocalName_IINLRString__V_arg_index,
  &AttributesImpl_methods_setLocalName_IINLRString__V_arg_localName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setLocalName_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setLocalName_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLocalName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setLocalName", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setLocalName_IINLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setLocalName_IINLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setLocalName_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setQName_IINLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setQName_IINLRString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setQName_IINLRString__V_args[] = 
{
  &AttributesImpl_methods_setQName_IINLRString__V_arg_index,
  &AttributesImpl_methods_setQName_IINLRString__V_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setQName_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setQName_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setQName", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setQName_IINLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setQName_IINLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setQName_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setType_IINLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setType_IINLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setType_IINLRString__V_args[] = 
{
  &AttributesImpl_methods_setType_IINLRString__V_arg_index,
  &AttributesImpl_methods_setType_IINLRString__V_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setType_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setType_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setType", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setType_IINLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setType_IINLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setType_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setURI_IINLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setURI_IINLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setURI_IINLRString__V_args[] = 
{
  &AttributesImpl_methods_setURI_IINLRString__V_arg_index,
  &AttributesImpl_methods_setURI_IINLRString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setURI_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setURI_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setURI", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setURI_IINLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setURI_IINLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setURI_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setValue_IINLRString__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AttributesImpl_methods_setValue_IINLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AttributesImpl_methods_setValue_IINLRString__V_args[] = 
{
  &AttributesImpl_methods_setValue_IINLRString__V_arg_index,
  &AttributesImpl_methods_setValue_IINLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AttributesImpl_methods_setValue_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AttributesImpl_method_setValue_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setValue", // alternative name of method
  -1, // altlabelHashCode
  AttributesImpl_methods_setValue_IINLRString__V_args, // the arguments
  0, //arguments count
  AttributesImpl_methods_setValue_IINLRString__V_exceptions, // the declared exceptions
  AttributesImpl_MetainfoWrapper::AttributesImpl_method_setValue_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AttributesImpl_methods[] = 
{
  &AttributesImpl_method_AttributesImpl__LRAttributesImpl_,
  &AttributesImpl_method_AttributesImpl_INLRAttributes__LRAttributesImpl_,
  &AttributesImpl_method_GetClass__L_acdk_lang_RClass_,
  &AttributesImpl_method__ensureCapacity_I_V,
  &AttributesImpl_method_addAttribute_INLRString_INLRString_INLRString_INLRString_INLRString__V,
  &AttributesImpl_method_badIndex_I_V,
  &AttributesImpl_method_clear__V,
  &AttributesImpl_method_getIndex_INLRString_INLRString__I,
  &AttributesImpl_method_getIndex_INLRString__I,
  &AttributesImpl_method_getLength__I,
  &AttributesImpl_method_getLocalName_I_LRString_,
  &AttributesImpl_method_getQName_I_LRString_,
  &AttributesImpl_method_getType_I_LRString_,
  &AttributesImpl_method_getType_INLRString_INLRString__LRString_,
  &AttributesImpl_method_getType_INLRString__LRString_,
  &AttributesImpl_method_getURI_I_LRString_,
  &AttributesImpl_method_getValue_I_LRString_,
  &AttributesImpl_method_getValue_INLRString_INLRString__LRString_,
  &AttributesImpl_method_getValue_INLRString__LRString_,
  &AttributesImpl_method_removeAttribute_I_V,
  &AttributesImpl_method_setAttribute_IINLRString_INLRString_INLRString_INLRString_INLRString__V,
  &AttributesImpl_method_setAttributes_INLRAttributes__V,
  &AttributesImpl_method_setLocalName_IINLRString__V,
  &AttributesImpl_method_setQName_IINLRString__V,
  &AttributesImpl_method_setType_IINLRString__V,
  &AttributesImpl_method_setURI_IINLRString__V,
  &AttributesImpl_method_setValue_IINLRString__V,
  0
};


struct AttributesImpl_MetaInfoInitializer
{  AttributesImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AttributesImpl::clazzInfo();
    ci->fields =  _AttributesImpl_fields;
    ci->methods =  _AttributesImpl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AttributesImpl_MetaInfoInitializer AttributesImpl_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
CollectiveErrorHandler_create_array(int length)
{
  return new ObjectArrayImpl<RCollectiveErrorHandler>(length);
}

//static
::acdk::lang::RObject
CollectiveErrorHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CollectiveErrorHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_CollectiveErrorHandler__LRCollectiveErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CollectiveErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CollectiveErrorHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CollectiveErrorHandler::error((RSAXParseException)args[0].getObjectVar());
    else
        This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CollectiveErrorHandler::fatalError((RSAXParseException)args[0].getObjectVar());
    else
        This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_hasAnyErrors__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CollectiveErrorHandler::hasAnyErrors();
    else
      ret = This->hasAnyErrors();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_hasErrors__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CollectiveErrorHandler::hasErrors();
    else
      ret = This->hasErrors();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_hasFatalErrors__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CollectiveErrorHandler::hasFatalErrors();
    else
      ret = This->hasFatalErrors();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_hasWarnings__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CollectiveErrorHandler::hasWarnings();
    else
      ret = This->hasWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CollectiveErrorHandler_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CollectiveErrorHandler::warning((RSAXParseException)args[0].getObjectVar());
    else
        This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CollectiveErrorHandler_fields__errors_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errors, flags);
    else
      This->_errors = (RSAXParseExceptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CollectiveErrorHandler_fields__fatalErrors_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fatalErrors, flags);
    else
      This->_fatalErrors = (RSAXParseExceptionArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CollectiveErrorHandler_fields__warnings_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CollectiveErrorHandler* This = dmi_cast<CollectiveErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_warnings, flags);
    else
      This->_warnings = (RSAXParseExceptionArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CollectiveErrorHandler_fields__errors = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errors", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseExceptionArray::clazzInfo(),
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_fields__errors_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CollectiveErrorHandler_fields__fatalErrors = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fatalErrors", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseExceptionArray::clazzInfo(),
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_fields__fatalErrors_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CollectiveErrorHandler_fields__warnings = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_warnings", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseExceptionArray::clazzInfo(),
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_fields__warnings_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CollectiveErrorHandler_fields[] = 
{
  &CollectiveErrorHandler_fields__errors,
  &CollectiveErrorHandler_fields__fatalErrors,
  &CollectiveErrorHandler_fields__warnings,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_CollectiveErrorHandler__LRCollectiveErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_CollectiveErrorHandler__LRCollectiveErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_CollectiveErrorHandler__LRCollectiveErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CollectiveErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CollectiveErrorHandler::clazzInfo(), // return type
  "_0_CollectiveErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_CollectiveErrorHandler__LRCollectiveErrorHandler__args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_CollectiveErrorHandler__LRCollectiveErrorHandler__exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_CollectiveErrorHandler__LRCollectiveErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CollectiveErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_error_INLRSAXParseException__V_args[] = 
{
  &CollectiveErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void CollectiveErrorHandler_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_error", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  CollectiveErrorHandler_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void CollectiveErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_fatalError", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  CollectiveErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_hasAnyErrors__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_hasAnyErrors__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_hasAnyErrors__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasAnyErrors", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_hasAnyErrors", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_hasAnyErrors__Z_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_hasAnyErrors__Z_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_hasAnyErrors__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_hasErrors__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_hasErrors__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_hasErrors__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasErrors", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasErrors", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_hasErrors__Z_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_hasErrors__Z_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_hasErrors__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_hasFatalErrors__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_hasFatalErrors__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_hasFatalErrors__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFatalErrors", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_hasFatalErrors", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_hasFatalErrors__Z_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_hasFatalErrors__Z_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_hasFatalErrors__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_hasWarnings__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_hasWarnings__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_hasWarnings__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_hasWarnings", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_hasWarnings__Z_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_hasWarnings__Z_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_hasWarnings__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_args[] = 
{
  &CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void CollectiveErrorHandler_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo CollectiveErrorHandler_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_warning", // alternative name of method
  -1, // altlabelHashCode
  CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  CollectiveErrorHandler_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  CollectiveErrorHandler_MetainfoWrapper::CollectiveErrorHandler_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  CollectiveErrorHandler_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CollectiveErrorHandler_methods[] = 
{
  &CollectiveErrorHandler_method_CollectiveErrorHandler__LRCollectiveErrorHandler_,
  &CollectiveErrorHandler_method_GetClass__L_acdk_lang_RClass_,
  &CollectiveErrorHandler_method_error_INLRSAXParseException__V,
  &CollectiveErrorHandler_method_fatalError_INLRSAXParseException__V,
  &CollectiveErrorHandler_method_hasAnyErrors__Z,
  &CollectiveErrorHandler_method_hasErrors__Z,
  &CollectiveErrorHandler_method_hasFatalErrors__Z,
  &CollectiveErrorHandler_method_hasWarnings__Z,
  &CollectiveErrorHandler_method_warning_INLRSAXParseException__V,
  0
};


struct CollectiveErrorHandler_MetaInfoInitializer
{  CollectiveErrorHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CollectiveErrorHandler::clazzInfo();
    ci->fields =  _CollectiveErrorHandler_fields;
    ci->methods =  _CollectiveErrorHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CollectiveErrorHandler_MetaInfoInitializer CollectiveErrorHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
DefaultHandler_create_array(int length)
{
  return new ObjectArrayImpl<RDefaultHandler>(length);
}

//static
::acdk::lang::RObject
DefaultHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DefaultHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DefaultHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_characters_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::characters((acdk::lang::RString)args[0].getObjectVar());
    else
        This->characters((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::endDocument();
    else
        This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::endElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar());
    else
        This->endElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_endPrefixMapping_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::endPrefixMapping((acdk::lang::RString)args[0].getObjectVar());
    else
        This->endPrefixMapping((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::error((RSAXParseException)args[0].getObjectVar());
    else
        This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::fatalError((RSAXParseException)args[0].getObjectVar());
    else
        This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::ignorableWhitespace((acdk::lang::RString)args[0].getObjectVar());
    else
        This->ignorableWhitespace((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::notationDecl((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar());
    else
        This->notationDecl((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::processingInstruction((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    else
        This->processingInstruction((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DefaultHandler::resolveEntity((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->resolveEntity((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_setDocumentLocator_INLRLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::setDocumentLocator((RLocator)args[0].getObjectVar());
    else
        This->setDocumentLocator((RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_skippedEntity_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::skippedEntity((acdk::lang::RString)args[0].getObjectVar());
    else
        This->skippedEntity((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_startDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::startDocument();
    else
        This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::startElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar(), (RAttributes)args[3].getObjectVar());
    else
        This->startElement((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar(), (RAttributes)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::startPrefixMapping((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    else
        This->startPrefixMapping((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::unparsedEntityDecl((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar(), (acdk::lang::RString)args[3].getObjectVar());
    else
        This->unparsedEntityDecl((acdk::lang::RString)args[0].getObjectVar(), (acdk::lang::RString)args[1].getObjectVar(), (acdk::lang::RString)args[2].getObjectVar(), (acdk::lang::RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DefaultHandler_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DefaultHandler* This = dmi_cast<DefaultHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DefaultHandler::warning((RSAXParseException)args[0].getObjectVar());
    else
        This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DefaultHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DefaultHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_characters_INLacdk_lang_RString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_characters_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_characters_INLacdk_lang_RString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_characters_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_characters_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_characters_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_characters", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_characters_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_characters_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_characters_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_characters_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_endDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_endDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_endDocument", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_endDocument__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_endDocument__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_endDocument__V_dispatch, // invoke this method
  DefaultHandler_endDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri,
  &DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_localName,
  &DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_endElement", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_endPrefixMapping_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_endPrefixMapping_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_endPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_endPrefixMapping_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_endPrefixMapping_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_endPrefixMapping_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_error_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_error_INLRSAXParseException__V_args[] = 
{
  &DefaultHandler_methods_error_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_error", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  DefaultHandler_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_fatalError_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &DefaultHandler_methods_fatalError_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_fatalError", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  DefaultHandler_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_ignorableWhitespace_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_name,
  &DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_publicId,
  &DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notationDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_notationDecl", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_target,
  &DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__args[] = 
{
  &DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__arg_publicId,
  &DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo(), // return type
  "_0_resolveEntity", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__args, // the arguments
  0, //arguments count
  DefaultHandler_methods_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__dispatch, // invoke this method
  DefaultHandler_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_setDocumentLocator_INLRLocator__V_args[] = 
{
  &DefaultHandler_methods_setDocumentLocator_INLRLocator__V_arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_setDocumentLocator_INLRLocator__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_setDocumentLocator_INLRLocator__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_setDocumentLocator_INLRLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_setDocumentLocator_INLRLocator__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_setDocumentLocator_INLRLocator__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_setDocumentLocator_INLRLocator__V_dispatch, // invoke this method
  DefaultHandler_setDocumentLocator_INLRLocator__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_skippedEntity_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_skippedEntity_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skippedEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_skippedEntity", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_skippedEntity_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_skippedEntity_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_skippedEntity_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_startDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_startDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_startDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_startDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_startDocument", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_startDocument__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_startDocument__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_startDocument__V_dispatch, // invoke this method
  DefaultHandler_startDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_attributes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attributes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_args[] = 
{
  &DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_uri,
  &DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_localName,
  &DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_qName,
  &DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_arg_attributes,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_startElement", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_dispatch, // invoke this method
  DefaultHandler_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_prefix,
  &DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_startPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_notationName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "notationName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args[] = 
{
  &DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_name,
  &DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_publicId,
  &DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_systemId,
  &DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_arg_notationName,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unparsedEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_unparsedEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_dispatch, // invoke this method
  DefaultHandler_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DefaultHandler_methods_warning_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DefaultHandler_methods_warning_INLRSAXParseException__V_args[] = 
{
  &DefaultHandler_methods_warning_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* DefaultHandler_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void DefaultHandler_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DefaultHandler_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_warning", // alternative name of method
  -1, // altlabelHashCode
  DefaultHandler_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  DefaultHandler_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  DefaultHandler_MetainfoWrapper::DefaultHandler_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  DefaultHandler_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DefaultHandler_methods[] = 
{
  &DefaultHandler_method_GetClass__L_acdk_lang_RClass_,
  &DefaultHandler_method_characters_INLacdk_lang_RString__V,
  &DefaultHandler_method_endDocument__V,
  &DefaultHandler_method_endElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &DefaultHandler_method_endPrefixMapping_INLacdk_lang_RString__V,
  &DefaultHandler_method_error_INLRSAXParseException__V,
  &DefaultHandler_method_fatalError_INLRSAXParseException__V,
  &DefaultHandler_method_ignorableWhitespace_INLacdk_lang_RString__V,
  &DefaultHandler_method_notationDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &DefaultHandler_method_processingInstruction_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &DefaultHandler_method_resolveEntity_INLacdk_lang_RString_INLacdk_lang_RString__LRInputSource_,
  &DefaultHandler_method_setDocumentLocator_INLRLocator__V,
  &DefaultHandler_method_skippedEntity_INLacdk_lang_RString__V,
  &DefaultHandler_method_startDocument__V,
  &DefaultHandler_method_startElement_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLRAttributes__V,
  &DefaultHandler_method_startPrefixMapping_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &DefaultHandler_method_unparsedEntityDecl_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString_INLacdk_lang_RString__V,
  &DefaultHandler_method_warning_INLRSAXParseException__V,
  0
};


struct DefaultHandler_MetaInfoInitializer
{  DefaultHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DefaultHandler::clazzInfo();
    ci->fields =  _DefaultHandler_fields;
    ci->methods =  _DefaultHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DefaultHandler_MetaInfoInitializer DefaultHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
LocatorImpl_create_array(int length)
{
  return new ObjectArrayImpl<RLocatorImpl>(length);
}

//static
::acdk::lang::RObject
LocatorImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LocatorImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LocatorImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LocatorImpl(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_getColumnNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LocatorImpl::getColumnNumber();
    else
      ret = This->getColumnNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_getLineNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LocatorImpl::getLineNumber();
    else
      ret = This->getLineNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_getPublicId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LocatorImpl::getPublicId();
    else
        ret = (::acdk::lang::RObject)This->getPublicId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LocatorImpl_method_getSystemId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LocatorImpl::getSystemId();
    else
        ret = (::acdk::lang::RObject)This->getSystemId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LocatorImpl_fields__columnNumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnNumber, flags);
    else
      This->_columnNumber = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LocatorImpl_fields__lineNumber_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lineNumber, flags);
    else
      This->_lineNumber = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LocatorImpl_fields__publicId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_publicId, flags);
    else
      This->_publicId = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LocatorImpl_fields__systemId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LocatorImpl* This = dmi_cast<LocatorImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_systemId, flags);
    else
      This->_systemId = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LocatorImpl_fields__columnNumber = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnNumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LocatorImpl_MetainfoWrapper::LocatorImpl_fields__columnNumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LocatorImpl_fields__lineNumber = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lineNumber", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LocatorImpl_MetainfoWrapper::LocatorImpl_fields__lineNumber_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LocatorImpl_fields__publicId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_publicId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LocatorImpl_MetainfoWrapper::LocatorImpl_fields__publicId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LocatorImpl_fields__systemId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_systemId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LocatorImpl_MetainfoWrapper::LocatorImpl_fields__systemId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LocatorImpl_fields[] = 
{
  &LocatorImpl_fields__columnNumber,
  &LocatorImpl_fields__lineNumber,
  &LocatorImpl_fields__publicId,
  &LocatorImpl_fields__systemId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LocatorImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_lineNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_columnNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__args[] = 
{
  &LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_lineNumber,
  &LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_columnNumber,
  &LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_publicId,
  &LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LocatorImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LocatorImpl::clazzInfo(), // return type
  "_0_LocatorImpl", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__args, // the arguments
  0, //arguments count
  LocatorImpl_methods_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_getColumnNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_getColumnNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_getColumnNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getColumnNumber", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_getColumnNumber__I_args, // the arguments
  0, //arguments count
  LocatorImpl_methods_getColumnNumber__I_exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_getColumnNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_getLineNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_getLineNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_getLineNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getLineNumber", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_getLineNumber__I_args, // the arguments
  0, //arguments count
  LocatorImpl_methods_getLineNumber__I_exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_getLineNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_getPublicId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_getPublicId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_getPublicId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getPublicId", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_getPublicId__LRString__args, // the arguments
  0, //arguments count
  LocatorImpl_methods_getPublicId__LRString__exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_getPublicId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LocatorImpl_methods_getSystemId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LocatorImpl_methods_getSystemId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LocatorImpl_method_getSystemId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getSystemId", // alternative name of method
  -1, // altlabelHashCode
  LocatorImpl_methods_getSystemId__LRString__args, // the arguments
  0, //arguments count
  LocatorImpl_methods_getSystemId__LRString__exceptions, // the declared exceptions
  LocatorImpl_MetainfoWrapper::LocatorImpl_method_getSystemId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LocatorImpl_methods[] = 
{
  &LocatorImpl_method_GetClass__L_acdk_lang_RClass_,
  &LocatorImpl_method_LocatorImpl_IIINLRString_INLRString__LRLocatorImpl_,
  &LocatorImpl_method_getColumnNumber__I,
  &LocatorImpl_method_getLineNumber__I,
  &LocatorImpl_method_getPublicId__LRString_,
  &LocatorImpl_method_getSystemId__LRString_,
  0
};


struct LocatorImpl_MetaInfoInitializer
{  LocatorImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LocatorImpl::clazzInfo();
    ci->fields =  _LocatorImpl_fields;
    ci->methods =  _LocatorImpl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LocatorImpl_MetaInfoInitializer LocatorImpl_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
MiscXmlUtils_create_array(int length)
{
  return new ObjectArrayImpl<RMiscXmlUtils>(length);
}

//static
::acdk::lang::RObject
MiscXmlUtils_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MiscXmlUtils_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MiscXmlUtils_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MiscXmlUtils::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MiscXmlUtils_method_MiscXmlUtils__LRMiscXmlUtils__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MiscXmlUtils();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MiscXmlUtils_method_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MiscXmlUtils::xmlEncodingNameToAcdkEncodingName((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MiscXmlUtils_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MiscXmlUtils_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MiscXmlUtils_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MiscXmlUtils_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MiscXmlUtils_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MiscXmlUtils_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MiscXmlUtils_MetainfoWrapper::MiscXmlUtils_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MiscXmlUtils_methods_MiscXmlUtils__LRMiscXmlUtils__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MiscXmlUtils_methods_MiscXmlUtils__LRMiscXmlUtils__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MiscXmlUtils_method_MiscXmlUtils__LRMiscXmlUtils_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MiscXmlUtils", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MiscXmlUtils::clazzInfo(), // return type
  "_0_MiscXmlUtils", // alternative name of method
  -1, // altlabelHashCode
  MiscXmlUtils_methods_MiscXmlUtils__LRMiscXmlUtils__args, // the arguments
  0, //arguments count
  MiscXmlUtils_methods_MiscXmlUtils__LRMiscXmlUtils__exceptions, // the declared exceptions
  MiscXmlUtils_MetainfoWrapper::MiscXmlUtils_method_MiscXmlUtils__LRMiscXmlUtils__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__arg_encname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__args[] = 
{
  &MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__arg_encname,
  0
};

::acdk::lang::dmi::ClazzInfo* MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MiscXmlUtils_method_xmlEncodingNameToAcdkEncodingName_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xmlEncodingNameToAcdkEncodingName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_xmlEncodingNameToAcdkEncodingName", // alternative name of method
  -1, // altlabelHashCode
  MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__args, // the arguments
  0, //arguments count
  MiscXmlUtils_methods_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__exceptions, // the declared exceptions
  MiscXmlUtils_MetainfoWrapper::MiscXmlUtils_method_xmlEncodingNameToAcdkEncodingName_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MiscXmlUtils_methods[] = 
{
  &MiscXmlUtils_method_GetClass__L_acdk_lang_RClass_,
  &MiscXmlUtils_method_MiscXmlUtils__LRMiscXmlUtils_,
  &MiscXmlUtils_method_xmlEncodingNameToAcdkEncodingName_INLRString__LRString_,
  0
};


struct MiscXmlUtils_MetaInfoInitializer
{  MiscXmlUtils_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MiscXmlUtils::clazzInfo();
    ci->fields =  _MiscXmlUtils_fields;
    ci->methods =  _MiscXmlUtils_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MiscXmlUtils_MetaInfoInitializer MiscXmlUtils_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
Context_create_array(int length)
{
  return new ObjectArrayImpl<RContext>(length);
}

//static
::acdk::lang::RObject
Context_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Context_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_Context__LRContext__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Context();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Context::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_copyTables__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Context::copyTables();
    else
        This->copyTables();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_declarePrefix_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Context::declarePrefix((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->declarePrefix((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_getDeclaredPrefixes__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Context::getDeclaredPrefixes();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredPrefixes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_getPrefix_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Context::getPrefix((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrefix((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_getPrefixes__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Context::getPrefixes();
    else
        ret = (::acdk::lang::RObject)This->getPrefixes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_getURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Context::getURI((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getURI((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_processName_INLRString_Z_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Context::processName((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->processName((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Context_method_setParent_INLRContext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Context::setParent((RContext)args[0].getObjectVar());
    else
        This->setParent((RContext)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_attributeNameTable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->attributeNameTable, flags);
    else
      This->attributeNameTable = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_declarations_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->declarations, flags);
    else
      This->declarations = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_defaultNS_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defaultNS, flags);
    else
      This->defaultNS = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_elementNameTable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->elementNameTable, flags);
    else
      This->elementNameTable = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->parent, flags);
    else
      This->parent = (RContext)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_prefixTable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->prefixTable, flags);
    else
      This->prefixTable = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_tablesDirty_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->tablesDirty, flags);
    else
      This->tablesDirty = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Context_fields_uriTable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Context* This = dmi_cast<Context>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->uriTable, flags);
    else
      This->uriTable = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_attributeNameTable = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "attributeNameTable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_attributeNameTable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_declarations = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "declarations", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_declarations_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_defaultNS = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defaultNS", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_defaultNS_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_elementNameTable = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "elementNameTable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_elementNameTable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_parent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContext::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_prefixTable = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "prefixTable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_prefixTable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_tablesDirty = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "tablesDirty", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Context_MetainfoWrapper::Context_fields_tablesDirty_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Context_fields_uriTable = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "uriTable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  Context_MetainfoWrapper::Context_fields_uriTable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Context_fields[] = 
{
  &Context_fields_attributeNameTable,
  &Context_fields_declarations,
  &Context_fields_defaultNS,
  &Context_fields_elementNameTable,
  &Context_fields_parent,
  &Context_fields_prefixTable,
  &Context_fields_tablesDirty,
  &Context_fields_uriTable,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_Context__LRContext__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_Context__LRContext__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_Context__LRContext_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Context", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Context::clazzInfo(), // return type
  "_0_Context", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_Context__LRContext__args, // the arguments
  0, //arguments count
  Context_methods_Context__LRContext__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_Context__LRContext__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Context_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_copyTables__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_copyTables__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_copyTables__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyTables", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_copyTables", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_copyTables__V_args, // the arguments
  0, //arguments count
  Context_methods_copyTables__V_exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_copyTables__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_declarePrefix_INLRString_INLRString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_declarePrefix_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_declarePrefix_INLRString_INLRString__V_args[] = 
{
  &Context_methods_declarePrefix_INLRString_INLRString__V_arg_prefix,
  &Context_methods_declarePrefix_INLRString_INLRString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_declarePrefix_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_declarePrefix_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "declarePrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_declarePrefix", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_declarePrefix_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Context_methods_declarePrefix_INLRString_INLRString__V_exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_declarePrefix_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_getDeclaredPrefixes__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_getDeclaredPrefixes__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_getDeclaredPrefixes__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredPrefixes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_6_getDeclaredPrefixes", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_getDeclaredPrefixes__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  Context_methods_getDeclaredPrefixes__Lacdk_util_RIterator__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_getDeclaredPrefixes__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_getPrefix_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_getPrefix_INLRString__LRString__args[] = 
{
  &Context_methods_getPrefix_INLRString__LRString__arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_getPrefix_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_getPrefix_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getPrefix", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_getPrefix_INLRString__LRString__args, // the arguments
  0, //arguments count
  Context_methods_getPrefix_INLRString__LRString__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_getPrefix_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_getPrefixes__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_getPrefixes__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_getPrefixes__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefixes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_7_getPrefixes", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_getPrefixes__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  Context_methods_getPrefixes__Lacdk_util_RIterator__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_getPrefixes__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_getURI_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_getURI_INLRString__LRString__args[] = 
{
  &Context_methods_getURI_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_getURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_getURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getURI", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_getURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  Context_methods_getURI_INLRString__LRString__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_getURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_processName_INLRString_Z_LRStringArray__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_processName_INLRString_Z_LRStringArray__arg_isAttribute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "isAttribute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_processName_INLRString_Z_LRStringArray__args[] = 
{
  &Context_methods_processName_INLRString_Z_LRStringArray__arg_qName,
  &Context_methods_processName_INLRString_Z_LRStringArray__arg_isAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_processName_INLRString_Z_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_processName_INLRString_Z_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_3_processName", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_processName_INLRString_Z_LRStringArray__args, // the arguments
  0, //arguments count
  Context_methods_processName_INLRString_Z_LRStringArray__exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_processName_INLRString_Z_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Context_methods_setParent_INLRContext__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContext::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Context_methods_setParent_INLRContext__V_args[] = 
{
  &Context_methods_setParent_INLRContext__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Context_methods_setParent_INLRContext__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Context_method_setParent_INLRContext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setParent", // alternative name of method
  -1, // altlabelHashCode
  Context_methods_setParent_INLRContext__V_args, // the arguments
  0, //arguments count
  Context_methods_setParent_INLRContext__V_exceptions, // the declared exceptions
  Context_MetainfoWrapper::Context_method_setParent_INLRContext__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Context_methods[] = 
{
  &Context_method_Context__LRContext_,
  &Context_method_GetClass__L_acdk_lang_RClass_,
  &Context_method_copyTables__V,
  &Context_method_declarePrefix_INLRString_INLRString__V,
  &Context_method_getDeclaredPrefixes__Lacdk_util_RIterator_,
  &Context_method_getPrefix_INLRString__LRString_,
  &Context_method_getPrefixes__Lacdk_util_RIterator_,
  &Context_method_getURI_INLRString__LRString_,
  &Context_method_processName_INLRString_Z_LRStringArray_,
  &Context_method_setParent_INLRContext__V,
  0
};


struct Context_MetaInfoInitializer
{  Context_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Context::clazzInfo();
    ci->fields =  _Context_fields;
    ci->methods =  _Context_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Context_MetaInfoInitializer Context_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
NamespaceSupport_create_array(int length)
{
  return new ObjectArrayImpl<RNamespaceSupport>(length);
}

//static
::acdk::lang::RObject
NamespaceSupport_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NamespaceSupport_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamespaceSupport::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_NamespaceSupport__LRNamespaceSupport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NamespaceSupport();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_declarePrefix_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NamespaceSupport::declarePrefix((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->declarePrefix((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getAbsoluteURI_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamespaceSupport::getAbsoluteURI((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getBaseURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NamespaceSupport::getBaseURI((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getDeclaredPrefixes__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::getDeclaredPrefixes();
    else
        ret = (::acdk::lang::RObject)This->getDeclaredPrefixes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getPrefix_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::getPrefix((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrefix((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getPrefixes__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::getPrefixes();
    else
        ret = (::acdk::lang::RObject)This->getPrefixes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getPrefixes_INLRString__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::getPrefixes((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrefixes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_getURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::getURI((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getURI((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_popContext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NamespaceSupport::popContext();
    else
        This->popContext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_processName_INLRString_INLRStringArray_Z_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NamespaceSupport::processName((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), args[2].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->processName((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_pushContext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NamespaceSupport::pushContext();
    else
        This->pushContext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NamespaceSupport_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NamespaceSupport::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NamespaceSupport_fields_contextPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->contextPos, flags);
    else
      This->contextPos = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NamespaceSupport_fields_contexts_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->contexts, flags);
    else
      This->contexts = (RContextArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NamespaceSupport_fields_currentContext_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NamespaceSupport* This = dmi_cast<NamespaceSupport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->currentContext, flags);
    else
      This->currentContext = (RContext)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NamespaceSupport_fields_contextPos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "contextPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_fields_contextPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NamespaceSupport_fields_contexts = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "contexts", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContextArray::clazzInfo(),
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_fields_contexts_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NamespaceSupport_fields_currentContext = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "currentContext", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContext::clazzInfo(),
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_fields_currentContext_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NamespaceSupport_fields[] = 
{
  &NamespaceSupport_fields_contextPos,
  &NamespaceSupport_fields_contexts,
  &NamespaceSupport_fields_currentContext,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_NamespaceSupport__LRNamespaceSupport__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_NamespaceSupport__LRNamespaceSupport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_NamespaceSupport__LRNamespaceSupport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NamespaceSupport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NamespaceSupport::clazzInfo(), // return type
  "_0_NamespaceSupport", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_NamespaceSupport__LRNamespaceSupport__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_NamespaceSupport__LRNamespaceSupport__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_NamespaceSupport__LRNamespaceSupport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_args[] = 
{
  &NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_arg_prefix,
  &NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_declarePrefix_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "declarePrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_declarePrefix", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_declarePrefix_INLRString_INLRString__Z_exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_declarePrefix_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__arg_base = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "base", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__args[] = 
{
  &NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__arg_base,
  &NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getAbsoluteURI_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAbsoluteURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getAbsoluteURI", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getAbsoluteURI_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getAbsoluteURI_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getBaseURI_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getBaseURI_INLRString__LRString__args[] = 
{
  &NamespaceSupport_methods_getBaseURI_INLRString__LRString__arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getBaseURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getBaseURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getBaseURI", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getBaseURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getBaseURI_INLRString__LRString__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getBaseURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getDeclaredPrefixes__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getDeclaredPrefixes__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getDeclaredPrefixes__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaredPrefixes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_a_getDeclaredPrefixes", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getDeclaredPrefixes__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getDeclaredPrefixes__Lacdk_util_RIterator__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getDeclaredPrefixes__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getPrefix_INLRString__LRString__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getPrefix_INLRString__LRString__args[] = 
{
  &NamespaceSupport_methods_getPrefix_INLRString__LRString__arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getPrefix_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getPrefix_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getPrefix", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getPrefix_INLRString__LRString__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getPrefix_INLRString__LRString__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getPrefix_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getPrefixes__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getPrefixes__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getPrefixes__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefixes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_7_getPrefixes", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getPrefixes__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getPrefixes__Lacdk_util_RIterator__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getPrefixes__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__args[] = 
{
  &NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getPrefixes_INLRString__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefixes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_9_getPrefixes", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getPrefixes_INLRString__Lacdk_util_RIterator__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getPrefixes_INLRString__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_getURI_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_getURI_INLRString__LRString__args[] = 
{
  &NamespaceSupport_methods_getURI_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_getURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_getURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getURI", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_getURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_getURI_INLRString__LRString__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_getURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_popContext__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_popContext__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_popContext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popContext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_popContext", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_popContext__V_args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_popContext__V_exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_popContext__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_parts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_isAttribute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "isAttribute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__args[] = 
{
  &NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_qName,
  &NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_parts,
  &NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__arg_isAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_processName_INLRString_INLRStringArray_Z_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_5_processName", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_processName_INLRString_INLRStringArray_Z_LRStringArray__exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_processName_INLRString_INLRStringArray_Z_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_pushContext__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_pushContext__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_pushContext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushContext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_pushContext", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_pushContext__V_args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_pushContext__V_exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_pushContext__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NamespaceSupport_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NamespaceSupport_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NamespaceSupport_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_reset", // alternative name of method
  -1, // altlabelHashCode
  NamespaceSupport_methods_reset__V_args, // the arguments
  0, //arguments count
  NamespaceSupport_methods_reset__V_exceptions, // the declared exceptions
  NamespaceSupport_MetainfoWrapper::NamespaceSupport_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NamespaceSupport_methods[] = 
{
  &NamespaceSupport_method_GetClass__L_acdk_lang_RClass_,
  &NamespaceSupport_method_NamespaceSupport__LRNamespaceSupport_,
  &NamespaceSupport_method_declarePrefix_INLRString_INLRString__Z,
  &NamespaceSupport_method_getAbsoluteURI_INLRString_INLRString__LRString_,
  &NamespaceSupport_method_getBaseURI_INLRString__LRString_,
  &NamespaceSupport_method_getDeclaredPrefixes__Lacdk_util_RIterator_,
  &NamespaceSupport_method_getPrefix_INLRString__LRString_,
  &NamespaceSupport_method_getPrefixes__Lacdk_util_RIterator_,
  &NamespaceSupport_method_getPrefixes_INLRString__Lacdk_util_RIterator_,
  &NamespaceSupport_method_getURI_INLRString__LRString_,
  &NamespaceSupport_method_popContext__V,
  &NamespaceSupport_method_processName_INLRString_INLRStringArray_Z_LRStringArray_,
  &NamespaceSupport_method_pushContext__V,
  &NamespaceSupport_method_reset__V,
  0
};


struct NamespaceSupport_MetaInfoInitializer
{  NamespaceSupport_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NamespaceSupport::clazzInfo();
    ci->fields =  _NamespaceSupport_fields;
    ci->methods =  _NamespaceSupport_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NamespaceSupport_MetaInfoInitializer NamespaceSupport_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
StdErrorHandler_create_array(int length)
{
  return new ObjectArrayImpl<RStdErrorHandler>(length);
}

//static
::acdk::lang::RObject
StdErrorHandler_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StdErrorHandler_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StdErrorHandler::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdErrorHandler_method_StdErrorHandler__LRStdErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StdErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdErrorHandler_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdErrorHandler* This = dmi_cast<StdErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StdErrorHandler::error((RSAXParseException)args[0].getObjectVar());
    else
        This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdErrorHandler* This = dmi_cast<StdErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StdErrorHandler::fatalError((RSAXParseException)args[0].getObjectVar());
    else
        This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdErrorHandler_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdErrorHandler* This = dmi_cast<StdErrorHandler>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StdErrorHandler::warning((RSAXParseException)args[0].getObjectVar());
    else
        This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StdErrorHandler_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdErrorHandler_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdErrorHandler_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StdErrorHandler_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StdErrorHandler_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StdErrorHandler_MetainfoWrapper::StdErrorHandler_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdErrorHandler_methods_StdErrorHandler__LRStdErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler_methods_StdErrorHandler__LRStdErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdErrorHandler_method_StdErrorHandler__LRStdErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StdErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StdErrorHandler::clazzInfo(), // return type
  "_0_StdErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  StdErrorHandler_methods_StdErrorHandler__LRStdErrorHandler__args, // the arguments
  0, //arguments count
  StdErrorHandler_methods_StdErrorHandler__LRStdErrorHandler__exceptions, // the declared exceptions
  StdErrorHandler_MetainfoWrapper::StdErrorHandler_method_StdErrorHandler__LRStdErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdErrorHandler_methods_error_INLRSAXParseException__V_args[] = 
{
  &StdErrorHandler_methods_error_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void StdErrorHandler_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StdErrorHandler_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_error", // alternative name of method
  -1, // altlabelHashCode
  StdErrorHandler_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  StdErrorHandler_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  StdErrorHandler_MetainfoWrapper::StdErrorHandler_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  StdErrorHandler_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdErrorHandler_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &StdErrorHandler_methods_fatalError_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void StdErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StdErrorHandler_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_fatalError", // alternative name of method
  -1, // altlabelHashCode
  StdErrorHandler_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  StdErrorHandler_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  StdErrorHandler_MetainfoWrapper::StdErrorHandler_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  StdErrorHandler_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "saxparseexception", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdErrorHandler_methods_warning_INLRSAXParseException__V_args[] = 
{
  &StdErrorHandler_methods_warning_INLRSAXParseException__V_arg_saxparseexception,
  0
};

::acdk::lang::dmi::ClazzInfo* StdErrorHandler_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void StdErrorHandler_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StdErrorHandler_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_warning", // alternative name of method
  -1, // altlabelHashCode
  StdErrorHandler_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  StdErrorHandler_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  StdErrorHandler_MetainfoWrapper::StdErrorHandler_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  StdErrorHandler_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StdErrorHandler_methods[] = 
{
  &StdErrorHandler_method_GetClass__L_acdk_lang_RClass_,
  &StdErrorHandler_method_StdErrorHandler__LRStdErrorHandler_,
  &StdErrorHandler_method_error_INLRSAXParseException__V,
  &StdErrorHandler_method_fatalError_INLRSAXParseException__V,
  &StdErrorHandler_method_warning_INLRSAXParseException__V,
  0
};


struct StdErrorHandler_MetaInfoInitializer
{  StdErrorHandler_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StdErrorHandler::clazzInfo();
    ci->fields =  _StdErrorHandler_fields;
    ci->methods =  _StdErrorHandler_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StdErrorHandler_MetaInfoInitializer StdErrorHandler_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


namespace org { 
namespace xml { 
namespace sax { 
namespace helpers { 


//static
::acdk::lang::RObject
XMLFilterImpl_create_array(int length)
{
  return new ObjectArrayImpl<RXMLFilterImpl>(length);
}

//static
::acdk::lang::RObject
XMLFilterImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLFilterImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLFilterImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_XMLFilterImpl__LRXMLFilterImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLFilterImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLFilterImpl((RXMLReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method__setupParse__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::_setupParse();
    else
        This->_setupParse();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_characters_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::characters((RString)args[0].getObjectVar());
    else
        This->characters((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::endDocument();
    else
        This->endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_endElement_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::endElement((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->endElement((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_endPrefixMapping_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::endPrefixMapping((RString)args[0].getObjectVar());
    else
        This->endPrefixMapping((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_error_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::error((RSAXParseException)args[0].getObjectVar());
    else
        This->error((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_fatalError_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::fatalError((RSAXParseException)args[0].getObjectVar());
    else
        This->fatalError((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getContentHandler__LRContentHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getContentHandler();
    else
        ret = (::acdk::lang::RObject)This->getContentHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getDTDHandler__LRDTDHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getDTDHandler();
    else
        ret = (::acdk::lang::RObject)This->getDTDHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getEntityResolver__LREntityResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getEntityResolver();
    else
        ret = (::acdk::lang::RObject)This->getEntityResolver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getErrorHandler__LRErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getErrorHandler();
    else
        ret = (::acdk::lang::RObject)This->getErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getFeature_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLFilterImpl::getFeature((RString)args[0].getObjectVar());
    else
      ret = This->getFeature((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getParent__LRXMLReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_getProperty_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::getProperty((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProperty((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::ignorableWhitespace((acdk::lang::RString)args[0].getObjectVar());
    else
        This->ignorableWhitespace((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_parse_INLRInputSource__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::parse((RInputSource)args[0].getObjectVar());
    else
        This->parse((RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::parse((RString)args[0].getObjectVar());
    else
        This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_processingInstruction_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_resolveEntity_INLRString_INLRString__LRInputSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLFilterImpl::resolveEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->resolveEntity((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setContentHandler_INLRContentHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setContentHandler((RContentHandler)args[0].getObjectVar());
    else
        This->setContentHandler((RContentHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setDTDHandler_INLRDTDHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setDTDHandler((RDTDHandler)args[0].getObjectVar());
    else
        This->setDTDHandler((RDTDHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setDocumentLocator_INLRLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setDocumentLocator((RLocator)args[0].getObjectVar());
    else
        This->setDocumentLocator((RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setEntityResolver_INLREntityResolver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setEntityResolver((REntityResolver)args[0].getObjectVar());
    else
        This->setEntityResolver((REntityResolver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setErrorHandler_INLRErrorHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setErrorHandler((RErrorHandler)args[0].getObjectVar());
    else
        This->setErrorHandler((RErrorHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setFeature_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setFeature((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setFeature((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setParent_INLRXMLReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setParent((RXMLReader)args[0].getObjectVar());
    else
        This->setParent((RXMLReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_setProperty_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::setProperty((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->setProperty((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_skippedEntity_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::skippedEntity((RString)args[0].getObjectVar());
    else
        This->skippedEntity((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_startDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::startDocument();
    else
        This->startDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::startElement((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RAttributes)args[3].getObjectVar());
    else
        This->startElement((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RAttributes)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_startPrefixMapping_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::startPrefixMapping((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->startPrefixMapping((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLFilterImpl_method_warning_INLRSAXParseException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLFilterImpl::warning((RSAXParseException)args[0].getObjectVar());
    else
        This->warning((RSAXParseException)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__contentHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_contentHandler, flags);
    else
      This->_contentHandler = (RContentHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__dtdHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dtdHandler, flags);
    else
      This->_dtdHandler = (RDTDHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__entityResolver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_entityResolver, flags);
    else
      This->_entityResolver = (REntityResolver)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__errorHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errorHandler, flags);
    else
      This->_errorHandler = (RErrorHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__locator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_locator, flags);
    else
      This->_locator = (RLocator)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLFilterImpl_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLFilterImpl* This = dmi_cast<XMLFilterImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = (RXMLReader)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__contentHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_contentHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__contentHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__dtdHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dtdHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__dtdHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__entityResolver = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_entityResolver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__entityResolver_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__errorHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errorHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__errorHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__locator = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_locator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__locator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLFilterImpl_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo(),
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLFilterImpl_fields[] = 
{
  &XMLFilterImpl_fields__contentHandler,
  &XMLFilterImpl_fields__dtdHandler,
  &XMLFilterImpl_fields__entityResolver,
  &XMLFilterImpl_fields__errorHandler,
  &XMLFilterImpl_fields__locator,
  &XMLFilterImpl_fields__parent,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_A_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_XMLFilterImpl__LRXMLFilterImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_XMLFilterImpl__LRXMLFilterImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_XMLFilterImpl__LRXMLFilterImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLFilterImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLFilterImpl::clazzInfo(), // return type
  "_0_XMLFilterImpl", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_XMLFilterImpl__LRXMLFilterImpl__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_XMLFilterImpl__LRXMLFilterImpl__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_XMLFilterImpl__LRXMLFilterImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__args[] = 
{
  &XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLFilterImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLFilterImpl::clazzInfo(), // return type
  "_1_XMLFilterImpl", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods__setupParse__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods__setupParse__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method__setupParse__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setupParse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z__setupParse", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods__setupParse__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods__setupParse__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method__setupParse__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_characters_INLRString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_characters_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_characters_INLRString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_characters_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_characters_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_characters_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_characters", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_characters_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_characters_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_characters_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_characters_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_endDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_endDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_endDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_endDocument__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_endDocument__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_endDocument__V_dispatch, // invoke this method
  XMLFilterImpl_endDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_uri,
  &XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_localName,
  &XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_arg_qName,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_endElement_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_endElement_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_endElement", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_endElement_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_endElement_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_endElement_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_endPrefixMapping_INLRString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_endPrefixMapping_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_endPrefixMapping_INLRString__V_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_endPrefixMapping_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_endPrefixMapping_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_endPrefixMapping_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_endPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_endPrefixMapping_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_endPrefixMapping_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_endPrefixMapping_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_endPrefixMapping_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_error_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_error_INLRSAXParseException__V_args[] = 
{
  &XMLFilterImpl_methods_error_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_error_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_error_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_error_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_error", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_error_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_error_INLRSAXParseException__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_error_INLRSAXParseException__V_dispatch, // invoke this method
  XMLFilterImpl_error_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_args[] = 
{
  &XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_fatalError_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_fatalError_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_fatalError", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_fatalError_INLRSAXParseException__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_fatalError_INLRSAXParseException__V_dispatch, // invoke this method
  XMLFilterImpl_fatalError_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getContentHandler__LRContentHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getContentHandler__LRContentHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getContentHandler__LRContentHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo(), // return type
  "_d_getContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getContentHandler__LRContentHandler__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getContentHandler__LRContentHandler__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getContentHandler__LRContentHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getDTDHandler__LRDTDHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getDTDHandler__LRDTDHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getDTDHandler__LRDTDHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo(), // return type
  "_b_getDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getDTDHandler__LRDTDHandler__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getDTDHandler__LRDTDHandler__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getDTDHandler__LRDTDHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getEntityResolver__LREntityResolver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getEntityResolver__LREntityResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getEntityResolver__LREntityResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo(), // return type
  "_9_getEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getEntityResolver__LREntityResolver__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getEntityResolver__LREntityResolver__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getEntityResolver__LREntityResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getErrorHandler__LRErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getErrorHandler__LRErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getErrorHandler__LRErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo(), // return type
  "_f_getErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getErrorHandler__LRErrorHandler__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getErrorHandler__LRErrorHandler__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getErrorHandler__LRErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_getFeature_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getFeature_INLRString__Z_args[] = 
{
  &XMLFilterImpl_methods_getFeature_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getFeature_INLRString__Z_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLFilterImpl_getFeature_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getFeature_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getFeature_INLRString__Z_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getFeature_INLRString__Z_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getFeature_INLRString__Z_dispatch, // invoke this method
  XMLFilterImpl_getFeature_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getParent__LRXMLReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getParent__LRXMLReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getParent__LRXMLReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo(), // return type
  "_3_getParent", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getParent__LRXMLReader__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getParent__LRXMLReader__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getParent__LRXMLReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_getProperty_INLRString__LRObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_getProperty_INLRString__LRObject__args[] = 
{
  &XMLFilterImpl_methods_getProperty_INLRString__LRObject__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_getProperty_INLRString__LRObject__exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLFilterImpl_getProperty_INLRString__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_getProperty_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_getProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_getProperty_INLRString__LRObject__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_getProperty_INLRString__LRObject__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_getProperty_INLRString__LRObject__dispatch, // invoke this method
  XMLFilterImpl_getProperty_INLRString__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "chars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_args[] = 
{
  &XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_arg_chars,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_ignorableWhitespace_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_ignorableWhitespace_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_ignorableWhitespace_INLacdk_lang_RString__V_dispatch, // invoke this method
  XMLFilterImpl_ignorableWhitespace_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_name,
  &XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_publicId,
  &XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_notationDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "notationDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_notationDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_notationDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_notationDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_notationDecl_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_parse_INLRInputSource__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_parse_INLRInputSource__V_args[] = 
{
  &XMLFilterImpl_methods_parse_INLRInputSource__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_parse_INLRInputSource__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLFilterImpl_parse_INLRInputSource__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_parse_INLRInputSource__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_parse_INLRInputSource__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_parse_INLRInputSource__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_parse_INLRInputSource__V_dispatch, // invoke this method
  XMLFilterImpl_parse_INLRInputSource__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_parse_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_parse_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_parse_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_parse_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLFilterImpl_parse_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_parse_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_parse_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_parse_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_arg_target,
  &XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_processingInstruction_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_processingInstruction_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_processingInstruction_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_processingInstruction_INLRString_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_processingInstruction_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__args[] = 
{
  &XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_publicId,
  &XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__exceptions[] =
{
  RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLFilterImpl_resolveEntity_INLRString_INLRString__LRInputSource__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_resolveEntity_INLRString_INLRString__LRInputSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInputSource::clazzInfo(), // return type
  "_i_resolveEntity", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_resolveEntity_INLRString_INLRString__LRInputSource__exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_resolveEntity_INLRString_INLRString__LRInputSource__dispatch, // invoke this method
  XMLFilterImpl_resolveEntity_INLRString_INLRString__LRInputSource__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RContentHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_args[] = 
{
  &XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setContentHandler_INLRContentHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setContentHandler_INLRContentHandler__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setContentHandler_INLRContentHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDTDHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_args[] = 
{
  &XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setDTDHandler_INLRDTDHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setDTDHandler_INLRDTDHandler__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setDTDHandler_INLRDTDHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_arg_locator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_args[] = 
{
  &XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_arg_locator,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setDocumentLocator_INLRLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setDocumentLocator_INLRLocator__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setDocumentLocator_INLRLocator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_args[] = 
{
  &XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_arg_resolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setEntityResolver_INLREntityResolver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setEntityResolver_INLREntityResolver__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setEntityResolver_INLREntityResolver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RErrorHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_args[] = 
{
  &XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setErrorHandler_INLRErrorHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setErrorHandler_INLRErrorHandler__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setErrorHandler_INLRErrorHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setFeature_INLRString_Z_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setFeature_INLRString_Z_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setFeature_INLRString_Z_V_args[] = 
{
  &XMLFilterImpl_methods_setFeature_INLRString_Z_V_arg_name,
  &XMLFilterImpl_methods_setFeature_INLRString_Z_V_arg_state,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setFeature_INLRString_Z_V_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLFilterImpl_setFeature_INLRString_Z_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setFeature_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setFeature_INLRString_Z_V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setFeature_INLRString_Z_V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setFeature_INLRString_Z_V_dispatch, // invoke this method
  XMLFilterImpl_setFeature_INLRString_Z_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setParent_INLRXMLReader__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setParent_INLRXMLReader__V_args[] = 
{
  &XMLFilterImpl_methods_setParent_INLRXMLReader__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setParent_INLRXMLReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setParent_INLRXMLReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setParent", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setParent_INLRXMLReader__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setParent_INLRXMLReader__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setParent_INLRXMLReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_args[] = 
{
  &XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_arg_name,
  &XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_exceptions[] =
{
  RSAXNotRecognizedException::clazzInfo(), 
  RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLFilterImpl_setProperty_INLRString_INLRObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXNotRecognizedException) == true)
    THROW_INSTANCE( RSAXNotRecognizedException(ex));
 if (instanceof(ex, SAXNotSupportedException) == true)
    THROW_INSTANCE( RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_setProperty_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_setProperty_INLRString_INLRObject__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_setProperty_INLRString_INLRObject__V_dispatch, // invoke this method
  XMLFilterImpl_setProperty_INLRString_INLRObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_skippedEntity_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_skippedEntity_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_skippedEntity_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_skippedEntity_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_skippedEntity_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_skippedEntity_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skippedEntity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_skippedEntity", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_skippedEntity_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_skippedEntity_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_skippedEntity_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_skippedEntity_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_startDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_startDocument__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_startDocument__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_startDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_startDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_startDocument__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_startDocument__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_startDocument__V_dispatch, // invoke this method
  XMLFilterImpl_startDocument__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_qName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_atts = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "atts", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_args[] = 
{
  &XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_uri,
  &XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_localName,
  &XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_qName,
  &XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_arg_atts,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_startElement_INLRString_INLRString_INLRString_INLRAttributes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_startElement", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_dispatch, // invoke this method
  XMLFilterImpl_startElement_INLRString_INLRString_INLRString_INLRAttributes__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_arg_prefix,
  &XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_startPrefixMapping_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_startPrefixMapping_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_startPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_startPrefixMapping_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_startPrefixMapping_INLRString_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_startPrefixMapping_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_notationName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "notationName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_name,
  &XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_publicId,
  &XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_systemId,
  &XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_notationName,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unparsedEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_unparsedEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  XMLFilterImpl_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLFilterImpl_methods_warning_INLRSAXParseException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSAXParseException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLFilterImpl_methods_warning_INLRSAXParseException__V_args[] = 
{
  &XMLFilterImpl_methods_warning_INLRSAXParseException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLFilterImpl_methods_warning_INLRSAXParseException__V_exceptions[] =
{
  RSAXException::clazzInfo(), 
  0
};

void XMLFilterImpl_warning_INLRSAXParseException__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SAXException) == true)
    THROW_INSTANCE( RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLFilterImpl_method_warning_INLRSAXParseException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_warning", // alternative name of method
  -1, // altlabelHashCode
  XMLFilterImpl_methods_warning_INLRSAXParseException__V_args, // the arguments
  0, //arguments count
  XMLFilterImpl_methods_warning_INLRSAXParseException__V_exceptions, // the declared exceptions
  XMLFilterImpl_MetainfoWrapper::XMLFilterImpl_method_warning_INLRSAXParseException__V_dispatch, // invoke this method
  XMLFilterImpl_warning_INLRSAXParseException__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLFilterImpl_methods[] = 
{
  &XMLFilterImpl_method_GetClass__L_acdk_lang_RClass_,
  &XMLFilterImpl_method_XMLFilterImpl__LRXMLFilterImpl_,
  &XMLFilterImpl_method_XMLFilterImpl_INLRXMLReader__LRXMLFilterImpl_,
  &XMLFilterImpl_method__setupParse__V,
  &XMLFilterImpl_method_characters_INLRString__V,
  &XMLFilterImpl_method_endDocument__V,
  &XMLFilterImpl_method_endElement_INLRString_INLRString_INLRString__V,
  &XMLFilterImpl_method_endPrefixMapping_INLRString__V,
  &XMLFilterImpl_method_error_INLRSAXParseException__V,
  &XMLFilterImpl_method_fatalError_INLRSAXParseException__V,
  &XMLFilterImpl_method_getContentHandler__LRContentHandler_,
  &XMLFilterImpl_method_getDTDHandler__LRDTDHandler_,
  &XMLFilterImpl_method_getEntityResolver__LREntityResolver_,
  &XMLFilterImpl_method_getErrorHandler__LRErrorHandler_,
  &XMLFilterImpl_method_getFeature_INLRString__Z,
  &XMLFilterImpl_method_getParent__LRXMLReader_,
  &XMLFilterImpl_method_getProperty_INLRString__LRObject_,
  &XMLFilterImpl_method_ignorableWhitespace_INLacdk_lang_RString__V,
  &XMLFilterImpl_method_notationDecl_INLRString_INLRString_INLRString__V,
  &XMLFilterImpl_method_parse_INLRInputSource__V,
  &XMLFilterImpl_method_parse_INLRString__V,
  &XMLFilterImpl_method_processingInstruction_INLRString_INLRString__V,
  &XMLFilterImpl_method_resolveEntity_INLRString_INLRString__LRInputSource_,
  &XMLFilterImpl_method_setContentHandler_INLRContentHandler__V,
  &XMLFilterImpl_method_setDTDHandler_INLRDTDHandler__V,
  &XMLFilterImpl_method_setDocumentLocator_INLRLocator__V,
  &XMLFilterImpl_method_setEntityResolver_INLREntityResolver__V,
  &XMLFilterImpl_method_setErrorHandler_INLRErrorHandler__V,
  &XMLFilterImpl_method_setFeature_INLRString_Z_V,
  &XMLFilterImpl_method_setParent_INLRXMLReader__V,
  &XMLFilterImpl_method_setProperty_INLRString_INLRObject__V,
  &XMLFilterImpl_method_skippedEntity_INLRString__V,
  &XMLFilterImpl_method_startDocument__V,
  &XMLFilterImpl_method_startElement_INLRString_INLRString_INLRString_INLRAttributes__V,
  &XMLFilterImpl_method_startPrefixMapping_INLRString_INLRString__V,
  &XMLFilterImpl_method_unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V,
  &XMLFilterImpl_method_warning_INLRSAXParseException__V,
  0
};


struct XMLFilterImpl_MetaInfoInitializer
{  XMLFilterImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLFilterImpl::clazzInfo();
    ci->fields =  _XMLFilterImpl_fields;
    ci->methods =  _XMLFilterImpl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLFilterImpl_MetaInfoInitializer XMLFilterImpl_MetaInfoInitializer_staticinstance__;


} // namespace org
} // namespace xml
} // namespace sax
} // namespace helpers


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) helpers_dummyExportFunc() {}
#endif

