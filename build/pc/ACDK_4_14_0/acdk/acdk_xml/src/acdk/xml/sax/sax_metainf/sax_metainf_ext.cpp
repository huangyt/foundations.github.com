// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sax.h"
#include "../AttributeListImpl.h"
#include "../LibXMLInternals.h"
#include "../NamedBufferReader.h"
#include "../sax.h"
#include "../XmlLibLocator.h"
#include "../XMLParser.h"
#include "../XMLReader.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_xml_sax_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "sax", // name of unit
  -1, // hashCode
  "acdk/xml", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_xml_sax_unitInfo(&acdk_xml_sax_unitInfo);


namespace acdk { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
XMLParser_create_array(int length)
{
  return new ObjectArrayImpl<RXMLParser>(length);
}

//static
::acdk::lang::RObject
XMLParser_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLParser_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLParser::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_XMLParser__LRXMLParser__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLParser();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_getDTDHandler__L_org_xml_sax_RDTDHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLParser::getDTDHandler();
    else
        ret = (::acdk::lang::RObject)This->getDTDHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_getDocumentHandler__L_org_xml_sax_RDocumentHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLParser::getDocumentHandler();
    else
        ret = (::acdk::lang::RObject)This->getDocumentHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_getEntityResolver__L_org_xml_sax_REntityResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLParser::getEntityResolver();
    else
        ret = (::acdk::lang::RObject)This->getEntityResolver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_getErrorHandler__L_org_xml_sax_RErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLParser::getErrorHandler();
    else
        ret = (::acdk::lang::RObject)This->getErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_parse_INL_org_xml_sax_RInputSource__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::parse((::org::xml::sax::RInputSource)args[0].getObjectVar());
    else
        This->parse((::org::xml::sax::RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::parse((RString)args[0].getObjectVar());
    else
        This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_parse_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::parse((RbyteArray)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->parse((RbyteArray)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_parse_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::parse((RbyteArray)args[0].getObjectVar());
    else
        This->parse((RbyteArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::setDTDHandler((::org::xml::sax::RDTDHandler)args[0].getObjectVar());
    else
        This->setDTDHandler((::org::xml::sax::RDTDHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::setDocumentHandler((::org::xml::sax::RDocumentHandler)args[0].getObjectVar());
    else
        This->setDocumentHandler((::org::xml::sax::RDocumentHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_setEntityResolver_INL_org_xml_sax_REntityResolver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::setEntityResolver((::org::xml::sax::REntityResolver)args[0].getObjectVar());
    else
        This->setEntityResolver((::org::xml::sax::REntityResolver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::setErrorHandler((::org::xml::sax::RErrorHandler)args[0].getObjectVar());
    else
        This->setErrorHandler((::org::xml::sax::RErrorHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLParser_method_setLocale_INLacdk_util_RLocale__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLParser::setLocale((acdk::util::RLocale)args[0].getObjectVar());
    else
        This->setLocale((acdk::util::RLocale)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLParser_fields__documentHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_documentHandler, flags);
    else
      This->_documentHandler = (::org::xml::sax::RDocumentHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLParser_fields__dtdHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dtdHandler, flags);
    else
      This->_dtdHandler = (::org::xml::sax::RDTDHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLParser_fields__entityResolver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_entityResolver, flags);
    else
      This->_entityResolver = (::org::xml::sax::REntityResolver)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLParser_fields__errorHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errorHandler, flags);
    else
      This->_errorHandler = (::org::xml::sax::RErrorHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLParser_fields__locale_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLParser* This = dmi_cast<XMLParser>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_locale, flags);
    else
      This->_locale = (::acdk::util::RLocale)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLParser_fields__documentHandler = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_documentHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDocumentHandler::clazzInfo(),
  XMLParser_MetainfoWrapper::XMLParser_fields__documentHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLParser_fields__dtdHandler = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dtdHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDTDHandler::clazzInfo(),
  XMLParser_MetainfoWrapper::XMLParser_fields__dtdHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLParser_fields__entityResolver = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_entityResolver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::REntityResolver::clazzInfo(),
  XMLParser_MetainfoWrapper::XMLParser_fields__entityResolver_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLParser_fields__errorHandler = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errorHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RErrorHandler::clazzInfo(),
  XMLParser_MetainfoWrapper::XMLParser_fields__errorHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLParser_fields__locale = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_locale", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RLocale::clazzInfo(),
  XMLParser_MetainfoWrapper::XMLParser_fields__locale_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLParser_fields[] = 
{
  &XMLParser_fields__documentHandler,
  &XMLParser_fields__dtdHandler,
  &XMLParser_fields__entityResolver,
  &XMLParser_fields__errorHandler,
  &XMLParser_fields__locale,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLParser_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_XMLParser__LRXMLParser__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_XMLParser__LRXMLParser__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_XMLParser__LRXMLParser_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLParser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLParser::clazzInfo(), // return type
  "_0_XMLParser", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_XMLParser__LRXMLParser__args, // the arguments
  0, //arguments count
  XMLParser_methods_XMLParser__LRXMLParser__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_XMLParser__LRXMLParser__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_getDTDHandler__L_org_xml_sax_RDTDHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_getDTDHandler__L_org_xml_sax_RDTDHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_getDTDHandler__L_org_xml_sax_RDTDHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDTDHandler::clazzInfo(), // return type
  "_b_getDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_getDTDHandler__L_org_xml_sax_RDTDHandler__args, // the arguments
  0, //arguments count
  XMLParser_methods_getDTDHandler__L_org_xml_sax_RDTDHandler__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_getDTDHandler__L_org_xml_sax_RDTDHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_getDocumentHandler__L_org_xml_sax_RDocumentHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_getDocumentHandler__L_org_xml_sax_RDocumentHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_getDocumentHandler__L_org_xml_sax_RDocumentHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDocumentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDocumentHandler::clazzInfo(), // return type
  "_c_getDocumentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_getDocumentHandler__L_org_xml_sax_RDocumentHandler__args, // the arguments
  0, //arguments count
  XMLParser_methods_getDocumentHandler__L_org_xml_sax_RDocumentHandler__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_getDocumentHandler__L_org_xml_sax_RDocumentHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_getEntityResolver__L_org_xml_sax_REntityResolver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_getEntityResolver__L_org_xml_sax_REntityResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_getEntityResolver__L_org_xml_sax_REntityResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::REntityResolver::clazzInfo(), // return type
  "_a_getEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_getEntityResolver__L_org_xml_sax_REntityResolver__args, // the arguments
  0, //arguments count
  XMLParser_methods_getEntityResolver__L_org_xml_sax_REntityResolver__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_getEntityResolver__L_org_xml_sax_REntityResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_getErrorHandler__L_org_xml_sax_RErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_getErrorHandler__L_org_xml_sax_RErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_getErrorHandler__L_org_xml_sax_RErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RErrorHandler::clazzInfo(), // return type
  "_d_getErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_getErrorHandler__L_org_xml_sax_RErrorHandler__args, // the arguments
  0, //arguments count
  XMLParser_methods_getErrorHandler__L_org_xml_sax_RErrorHandler__exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_getErrorHandler__L_org_xml_sax_RErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_arg_inputsource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "inputsource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_args[] = 
{
  &XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_arg_inputsource,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_exceptions[] =
{
  ::org::xml::sax::RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLParser_parse_INL_org_xml_sax_RInputSource__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::org::xml::sax::SAXException) == true)
    THROW_INSTANCE( ::org::xml::sax::RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_parse_INL_org_xml_sax_RInputSource__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_parse_INL_org_xml_sax_RInputSource__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_parse_INL_org_xml_sax_RInputSource__V_dispatch, // invoke this method
  XMLParser_parse_INL_org_xml_sax_RInputSource__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_parse_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_parse_INLRString__V_args[] = 
{
  &XMLParser_methods_parse_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_parse_INLRString__V_exceptions[] =
{
  ::org::xml::sax::RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLParser_parse_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::org::xml::sax::SAXException) == true)
    THROW_INSTANCE( ::org::xml::sax::RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_parse_INLRString__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_parse_INLRString__V_dispatch, // invoke this method
  XMLParser_parse_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_parse_INLRbyteArray_I_V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_parse_INLRbyteArray_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_parse_INLRbyteArray_I_V_args[] = 
{
  &XMLParser_methods_parse_INLRbyteArray_I_V_arg_s,
  &XMLParser_methods_parse_INLRbyteArray_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_parse_INLRbyteArray_I_V_exceptions[] =
{
  ::org::xml::sax::RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLParser_parse_INLRbyteArray_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::org::xml::sax::SAXException) == true)
    THROW_INSTANCE( ::org::xml::sax::RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_parse_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_parse_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  XMLParser_methods_parse_INLRbyteArray_I_V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_parse_INLRbyteArray_I_V_dispatch, // invoke this method
  XMLParser_parse_INLRbyteArray_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_parse_INLRbyteArray__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_parse_INLRbyteArray__V_args[] = 
{
  &XMLParser_methods_parse_INLRbyteArray__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_parse_INLRbyteArray__V_exceptions[] =
{
  ::org::xml::sax::RSAXException::clazzInfo(), 
  acdk::io::RIOException::clazzInfo(), 
  0
};

void XMLParser_parse_INLRbyteArray__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::org::xml::sax::SAXException) == true)
    THROW_INSTANCE( ::org::xml::sax::RSAXException(ex));
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_parse_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_parse_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_parse_INLRbyteArray__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_parse_INLRbyteArray__V_dispatch, // invoke this method
  XMLParser_parse_INLRbyteArray__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_arg_dtdhandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dtdhandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDTDHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_args[] = 
{
  &XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_arg_dtdhandler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_setDTDHandler_INL_org_xml_sax_RDTDHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_setDTDHandler_INL_org_xml_sax_RDTDHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_arg_documenthandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "documenthandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RDocumentHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_args[] = 
{
  &XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_arg_documenthandler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setDocumentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_arg_entityresolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entityresolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::REntityResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_args[] = 
{
  &XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_arg_entityresolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_setEntityResolver_INL_org_xml_sax_REntityResolver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_setEntityResolver_INL_org_xml_sax_REntityResolver__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_setEntityResolver_INL_org_xml_sax_REntityResolver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_arg_errorhandler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "errorhandler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::xml::sax::RErrorHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_args[] = 
{
  &XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_arg_errorhandler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_setErrorHandler_INL_org_xml_sax_RErrorHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_setErrorHandler_INL_org_xml_sax_RErrorHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLParser_methods_setLocale_INLacdk_util_RLocale__V_arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLParser_methods_setLocale_INLacdk_util_RLocale__V_args[] = 
{
  &XMLParser_methods_setLocale_INLacdk_util_RLocale__V_arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLParser_methods_setLocale_INLacdk_util_RLocale__V_exceptions[] =
{
  ::org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLParser_setLocale_INLacdk_util_RLocale__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::org::xml::sax::SAXException) == true)
    THROW_INSTANCE( ::org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLParser_method_setLocale_INLacdk_util_RLocale__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setLocale", // alternative name of method
  -1, // altlabelHashCode
  XMLParser_methods_setLocale_INLacdk_util_RLocale__V_args, // the arguments
  0, //arguments count
  XMLParser_methods_setLocale_INLacdk_util_RLocale__V_exceptions, // the declared exceptions
  XMLParser_MetainfoWrapper::XMLParser_method_setLocale_INLacdk_util_RLocale__V_dispatch, // invoke this method
  XMLParser_setLocale_INLacdk_util_RLocale__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLParser_methods[] = 
{
  &XMLParser_method_GetClass__L_acdk_lang_RClass_,
  &XMLParser_method_XMLParser__LRXMLParser_,
  &XMLParser_method_getDTDHandler__L_org_xml_sax_RDTDHandler_,
  &XMLParser_method_getDocumentHandler__L_org_xml_sax_RDocumentHandler_,
  &XMLParser_method_getEntityResolver__L_org_xml_sax_REntityResolver_,
  &XMLParser_method_getErrorHandler__L_org_xml_sax_RErrorHandler_,
  &XMLParser_method_parse_INL_org_xml_sax_RInputSource__V,
  &XMLParser_method_parse_INLRString__V,
  &XMLParser_method_parse_INLRbyteArray_I_V,
  &XMLParser_method_parse_INLRbyteArray__V,
  &XMLParser_method_setDTDHandler_INL_org_xml_sax_RDTDHandler__V,
  &XMLParser_method_setDocumentHandler_INL_org_xml_sax_RDocumentHandler__V,
  &XMLParser_method_setEntityResolver_INL_org_xml_sax_REntityResolver__V,
  &XMLParser_method_setErrorHandler_INL_org_xml_sax_RErrorHandler__V,
  &XMLParser_method_setLocale_INLacdk_util_RLocale__V,
  0
};


struct XMLParser_MetaInfoInitializer
{  XMLParser_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLParser::clazzInfo();
    ci->fields =  _XMLParser_fields;
    ci->methods =  _XMLParser_methods;
    ci->_scopeParent = acdk_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLParser_MetaInfoInitializer XMLParser_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace sax


namespace acdk { 
namespace xml { 
namespace sax { 


//static
::acdk::lang::RObject
XMLReader_create_array(int length)
{
  return new ObjectArrayImpl<RXMLReader>(length);
}

//static
::acdk::lang::RObject
XMLReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_XMLReader_ZI_LRXMLReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLReader(args[0].getBoolVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_XMLReader__LRXMLReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_XMLReader_Z_LRXMLReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLReader(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_attributeDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->_attributeDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__cdataBlock_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_cdataBlock((RString)args[0].getObjectVar());
    else
        This->_cdataBlock((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__characters_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_characters((RString)args[0].getObjectVar());
    else
        This->_characters((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__comment_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_comment((RString)args[0].getObjectVar());
    else
        This->_comment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__elementDecl_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_elementDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->_elementDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__endDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_endDocument();
    else
        This->_endDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__endElement_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_endElement((RString)args[0].getObjectVar());
    else
        This->_endElement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__error_INLRString_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_error((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->_error((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__externalEntityDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_externalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->_externalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__fatalError_INLRString_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_fatalError((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->_fatalError((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__ignorableWhitespace_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_ignorableWhitespace((RString)args[0].getObjectVar());
    else
        This->_ignorableWhitespace((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__internalEntityDecl_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_internalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->_internalEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__notationDecl_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->_notationDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__processingInstruction_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->_processingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__setDocumentLocator_INLorg_xml_sax_RLocator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_setDocumentLocator((org::xml::sax::RLocator)args[0].getObjectVar());
    else
        This->_setDocumentLocator((org::xml::sax::RLocator)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_splitName((RString)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RString >(args[1]),  ::acdk::lang::getTypedObjectRef< RString >(args[2]),  ::acdk::lang::getTypedObjectRef< RString >(args[3]));
    else
        This->_splitName((RString)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RString >(args[1]),  ::acdk::lang::getTypedObjectRef< RString >(args[2]),  ::acdk::lang::getTypedObjectRef< RString >(args[3]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__startDocument_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_startDocument(args[0].getBoolVar());
    else
        This->_startDocument(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__startElement_INLRString_INLorg_xml_sax_RAttributes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_startElement((RString)args[0].getObjectVar(), (org::xml::sax::RAttributes)args[1].getObjectVar());
    else
        This->_startElement((RString)args[0].getObjectVar(), (org::xml::sax::RAttributes)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__startElement_INLRString_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_startElement((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    else
        This->_startElement((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__startPrefixMapping_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_startPrefixMapping((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->_startPrefixMapping((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->_unparsedEntityDecl((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method__warning_INLRString_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::_warning((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->_warning((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getContentHandler__Lorg_xml_sax_RContentHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getContentHandler();
    else
        ret = (::acdk::lang::RObject)This->getContentHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getDTDHandler__Lorg_xml_sax_RDTDHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getDTDHandler();
    else
        ret = (::acdk::lang::RObject)This->getDTDHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getEntityResolver__Lorg_xml_sax_REntityResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getEntityResolver();
    else
        ret = (::acdk::lang::RObject)This->getEntityResolver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getErrorHandler__Lorg_xml_sax_RErrorHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getErrorHandler();
    else
        ret = (::acdk::lang::RObject)This->getErrorHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getExtendedFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::getExtendedFlags();
    else
      ret = This->getExtendedFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getFeature_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::getFeature((RString)args[0].getObjectVar());
    else
      ret = This->getFeature((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getProperty_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getProperty((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProperty((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_getURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::getURI((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getURI((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_hasAlreadyFatalError__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::hasAlreadyFatalError();
    else
      ret = This->hasAlreadyFatalError();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_isValidating__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::isValidating();
    else
      ret = This->isValidating();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parse_INLorg_xml_sax_RInputSource__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::parse((org::xml::sax::RInputSource)args[0].getObjectVar());
    else
        This->parse((org::xml::sax::RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::parse((RString)args[0].getObjectVar());
    else
        This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::parseInternal((org::xml::sax::RInputSource)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseInternal((org::xml::sax::RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parseInternal_INLRString__Lorg_w3c_dom_RDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::parseInternal((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseInternal((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLReader::parseInternalHtml((org::xml::sax::RInputSource)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseInternalHtml((org::xml::sax::RInputSource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setContentHandler_INLorg_xml_sax_RContentHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setContentHandler((org::xml::sax::RContentHandler)args[0].getObjectVar());
    else
        This->setContentHandler((org::xml::sax::RContentHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setDTDHandler((org::xml::sax::RDTDHandler)args[0].getObjectVar());
    else
        This->setDTDHandler((org::xml::sax::RDTDHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setEntityResolver_INLorg_xml_sax_REntityResolver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setEntityResolver((org::xml::sax::REntityResolver)args[0].getObjectVar());
    else
        This->setEntityResolver((org::xml::sax::REntityResolver)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setErrorHandler((org::xml::sax::RErrorHandler)args[0].getObjectVar());
    else
        This->setErrorHandler((org::xml::sax::RErrorHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setExtendedFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setExtendedFlags(args[0].getIntVar());
    else
        This->setExtendedFlags(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setFatalError__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::setFatalError();
    else
      ret = This->setFatalError();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setFeature_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setFeature((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->setFeature((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_setProperty_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLReader::setProperty((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->setProperty((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLReader_method_useNamespace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLReader::useNamespace();
    else
      ret = This->useNamespace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__baseURI_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_baseURI, flags);
    else
      This->_baseURI = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__contentHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_contentHandler, flags);
    else
      This->_contentHandler = (org::xml::sax::RContentHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__declarationHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_declarationHandler, flags);
    else
      This->_declarationHandler = (org::xml::sax::RDeclHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__dtdHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dtdHandler, flags);
    else
      This->_dtdHandler = (org::xml::sax::RDTDHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__entityResolver_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_entityResolver, flags);
    else
      This->_entityResolver = (org::xml::sax::REntityResolver)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__errorHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errorHandler, flags);
    else
      This->_errorHandler = (org::xml::sax::RErrorHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__extendedFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_extendedFlags, flags);
    else
      This->_extendedFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__hasAlreadyFatal_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hasAlreadyFatal, flags);
    else
      This->_hasAlreadyFatal = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__lexicalHandler_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lexicalHandler, flags);
    else
      This->_lexicalHandler = (org::xml::sax::RLexicalHandler)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__locator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_locator, flags);
    else
      This->_locator = (org::xml::sax::RLocator)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__ns_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ns, flags);
    else
      This->_ns = (org::xml::sax::helpers::RNamespaceSupport)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLReader_fields__seenStartDocument_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLReader* This = dmi_cast<XMLReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seenStartDocument, flags);
    else
      This->_seenStartDocument = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__baseURI = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_baseURI", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__baseURI_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__contentHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_contentHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RContentHandler::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__contentHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__declarationHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_declarationHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RDeclHandler::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__declarationHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__dtdHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dtdHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RDTDHandler::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__dtdHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__entityResolver = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_entityResolver", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::REntityResolver::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__entityResolver_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__errorHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errorHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RErrorHandler::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__errorHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__extendedFlags = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_extendedFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  XMLReader_MetainfoWrapper::XMLReader_fields__extendedFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__hasAlreadyFatal = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hasAlreadyFatal", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLReader_MetainfoWrapper::XMLReader_fields__hasAlreadyFatal_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__lexicalHandler = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lexicalHandler", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RLexicalHandler::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__lexicalHandler_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__locator = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_locator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RLocator::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__locator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__ns = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ns", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::helpers::RNamespaceSupport::clazzInfo(),
  XMLReader_MetainfoWrapper::XMLReader_fields__ns_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLReader_fields__seenStartDocument = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_seenStartDocument", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLReader_MetainfoWrapper::XMLReader_fields__seenStartDocument_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLReader_fields[] = 
{
  &XMLReader_fields__baseURI,
  &XMLReader_fields__contentHandler,
  &XMLReader_fields__declarationHandler,
  &XMLReader_fields__dtdHandler,
  &XMLReader_fields__entityResolver,
  &XMLReader_fields__errorHandler,
  &XMLReader_fields__extendedFlags,
  &XMLReader_fields__hasAlreadyFatal,
  &XMLReader_fields__lexicalHandler,
  &XMLReader_fields__locator,
  &XMLReader_fields__ns,
  &XMLReader_fields__seenStartDocument,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_N_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_XMLReader_ZI_LRXMLReader__arg_useNamespace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useNamespace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_XMLReader_ZI_LRXMLReader__arg_xmlFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xmlFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_XMLReader_ZI_LRXMLReader__args[] = 
{
  &XMLReader_methods_XMLReader_ZI_LRXMLReader__arg_useNamespace,
  &XMLReader_methods_XMLReader_ZI_LRXMLReader__arg_xmlFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_XMLReader_ZI_LRXMLReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_XMLReader_ZI_LRXMLReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLReader::clazzInfo(), // return type
  "_0_XMLReader", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_XMLReader_ZI_LRXMLReader__args, // the arguments
  0, //arguments count
  XMLReader_methods_XMLReader_ZI_LRXMLReader__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_XMLReader_ZI_LRXMLReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_XMLReader__LRXMLReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_XMLReader__LRXMLReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_XMLReader__LRXMLReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLReader::clazzInfo(), // return type
  "_1_XMLReader", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_XMLReader__LRXMLReader__args, // the arguments
  0, //arguments count
  XMLReader_methods_XMLReader__LRXMLReader__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_XMLReader__LRXMLReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_XMLReader_Z_LRXMLReader__arg_useNamespace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useNamespace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_XMLReader_Z_LRXMLReader__args[] = 
{
  &XMLReader_methods_XMLReader_Z_LRXMLReader__arg_useNamespace,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_XMLReader_Z_LRXMLReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_XMLReader_Z_LRXMLReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLReader::clazzInfo(), // return type
  "_2_XMLReader", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_XMLReader_Z_LRXMLReader__args, // the arguments
  0, //arguments count
  XMLReader_methods_XMLReader_Z_LRXMLReader__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_XMLReader_Z_LRXMLReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_elementName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "elementName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_attributeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attributeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_elementName,
  &XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_attributeName,
  &XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_type,
  &XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_mode,
  &XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_attributeDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v__attributeDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__cdataBlock_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__cdataBlock_INLRString__V_args[] = 
{
  &XMLReader_methods__cdataBlock_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__cdataBlock_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__cdataBlock_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_cdataBlock", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H__cdataBlock", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__cdataBlock_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__cdataBlock_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__cdataBlock_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__characters_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__characters_INLRString__V_args[] = 
{
  &XMLReader_methods__characters_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__characters_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__characters_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_characters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D__characters", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__characters_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__characters_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__characters_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__comment_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__comment_INLRString__V_args[] = 
{
  &XMLReader_methods__comment_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__comment_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__comment_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_comment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G__comment", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__comment_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__comment_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__comment_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__elementDecl_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__elementDecl_INLRString_INLRString__V_arg_model = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "model", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__elementDecl_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__elementDecl_INLRString_INLRString__V_arg_name,
  &XMLReader_methods__elementDecl_INLRString_INLRString__V_arg_model,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__elementDecl_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__elementDecl_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_elementDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w__elementDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__elementDecl_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__elementDecl_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__elementDecl_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__endDocument__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__endDocument__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__endDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_endDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r__endDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__endDocument__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__endDocument__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__endDocument__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__endElement_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__endElement_INLRString__V_args[] = 
{
  &XMLReader_methods__endElement_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__endElement_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__endElement_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_endElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B__endElement", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__endElement_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__endElement_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__endElement_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_lineNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_columnNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_message,
  &XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_lineNumber,
  &XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_columnNumber,
  &XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__error_INLRString_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_error", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J__error", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__error_INLRString_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__error_INLRString_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_name,
  &XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__externalEntityDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_externalEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t__externalEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__externalEntityDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__externalEntityDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_lineNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_columnNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_message,
  &XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_lineNumber,
  &XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_columnNumber,
  &XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__fatalError_INLRString_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_fatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K__fatalError", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__fatalError_INLRString_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__fatalError_INLRString_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__ignorableWhitespace_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__ignorableWhitespace_INLRString__V_args[] = 
{
  &XMLReader_methods__ignorableWhitespace_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__ignorableWhitespace_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__ignorableWhitespace_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_ignorableWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E__ignorableWhitespace", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__ignorableWhitespace_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__ignorableWhitespace_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__ignorableWhitespace_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_arg_name,
  &XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__internalEntityDecl_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_internalEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s__internalEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__internalEntityDecl_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__internalEntityDecl_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_name,
  &XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__notationDecl_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_notationDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u__notationDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__notationDecl_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__notationDecl_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__processingInstruction_INLRString_INLRString__V_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__processingInstruction_INLRString_INLRString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__processingInstruction_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__processingInstruction_INLRString_INLRString__V_arg_target,
  &XMLReader_methods__processingInstruction_INLRString_INLRString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__processingInstruction_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__processingInstruction_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_processingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F__processingInstruction", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__processingInstruction_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__processingInstruction_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__processingInstruction_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_arg_loc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RLocator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_args[] = 
{
  &XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_arg_loc,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__setDocumentLocator_INLorg_xml_sax_RLocator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setDocumentLocator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A__setDocumentLocator", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__setDocumentLocator_INLorg_xml_sax_RLocator__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__setDocumentLocator_INLorg_xml_sax_RLocator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_fqName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_localName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "localName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_args[] = 
{
  &XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_fqName,
  &XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_localName,
  &XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_prefix,
  &XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_splitName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p__splitName", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startDocument_Z_V_arg_isStandalone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "isStandalone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__startDocument_Z_V_args[] = 
{
  &XMLReader_methods__startDocument_Z_V_arg_isStandalone,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__startDocument_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__startDocument_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_startDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q__startDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__startDocument_Z_V_args, // the arguments
  0, //arguments count
  XMLReader_methods__startDocument_Z_V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__startDocument_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_arg_attrs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attrs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RAttributes::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_args[] = 
{
  &XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_arg_name,
  &XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_arg_attrs,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__startElement_INLRString_INLorg_xml_sax_RAttributes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y__startElement", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__startElement_INLRString_INLorg_xml_sax_RAttributes__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__startElement_INLRString_INLorg_xml_sax_RAttributes__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startElement_INLRString_INLRStringArray__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startElement_INLRString_INLRStringArray__V_arg_attrs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attrs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__startElement_INLRString_INLRStringArray__V_args[] = 
{
  &XMLReader_methods__startElement_INLRString_INLRStringArray__V_arg_name,
  &XMLReader_methods__startElement_INLRString_INLRStringArray__V_arg_attrs,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__startElement_INLRString_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__startElement_INLRString_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_startElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z__startElement", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__startElement_INLRString_INLRStringArray__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__startElement_INLRString_INLRStringArray__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__startElement_INLRString_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_arg_uri = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "uri", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_arg_prefix,
  &XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_arg_uri,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__startPrefixMapping_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_startPrefixMapping", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C__startPrefixMapping", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__startPrefixMapping_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__startPrefixMapping_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_notationName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "notationName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_name,
  &XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_systemId,
  &XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_arg_notationName,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_unparsedEntityDecl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x__unparsedEntityDecl", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_lineNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_columnNumber = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnNumber", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_publicId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "publicId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_args[] = 
{
  &XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_message,
  &XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_lineNumber,
  &XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_columnNumber,
  &XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_publicId,
  &XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method__warning_INLRString_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_warning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I__warning", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods__warning_INLRString_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method__warning_INLRString_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getContentHandler__Lorg_xml_sax_RContentHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getContentHandler__Lorg_xml_sax_RContentHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getContentHandler__Lorg_xml_sax_RContentHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RContentHandler::clazzInfo(), // return type
  "_c_getContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getContentHandler__Lorg_xml_sax_RContentHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getContentHandler__Lorg_xml_sax_RContentHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getContentHandler__Lorg_xml_sax_RContentHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getDTDHandler__Lorg_xml_sax_RDTDHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getDTDHandler__Lorg_xml_sax_RDTDHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getDTDHandler__Lorg_xml_sax_RDTDHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RDTDHandler::clazzInfo(), // return type
  "_a_getDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getDTDHandler__Lorg_xml_sax_RDTDHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getDTDHandler__Lorg_xml_sax_RDTDHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getDTDHandler__Lorg_xml_sax_RDTDHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getEntityResolver__Lorg_xml_sax_REntityResolver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getEntityResolver__Lorg_xml_sax_REntityResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getEntityResolver__Lorg_xml_sax_REntityResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::REntityResolver::clazzInfo(), // return type
  "_8_getEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getEntityResolver__Lorg_xml_sax_REntityResolver__args, // the arguments
  0, //arguments count
  XMLReader_methods_getEntityResolver__Lorg_xml_sax_REntityResolver__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getEntityResolver__Lorg_xml_sax_REntityResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getErrorHandler__Lorg_xml_sax_RErrorHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getErrorHandler__Lorg_xml_sax_RErrorHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getErrorHandler__Lorg_xml_sax_RErrorHandler_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RErrorHandler::clazzInfo(), // return type
  "_e_getErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getErrorHandler__Lorg_xml_sax_RErrorHandler__args, // the arguments
  0, //arguments count
  XMLReader_methods_getErrorHandler__Lorg_xml_sax_RErrorHandler__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getErrorHandler__Lorg_xml_sax_RErrorHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getExtendedFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getExtendedFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getExtendedFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtendedFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getExtendedFlags", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getExtendedFlags__I_args, // the arguments
  0, //arguments count
  XMLReader_methods_getExtendedFlags__I_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getExtendedFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_getFeature_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getFeature_INLRString__Z_args[] = 
{
  &XMLReader_methods_getFeature_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getFeature_INLRString__Z_exceptions[] =
{
  org::xml::sax::RSAXNotRecognizedException::clazzInfo(), 
  org::xml::sax::RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_getFeature_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::xml::sax::SAXNotRecognizedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotRecognizedException(ex));
 if (instanceof(ex, org::xml::sax::SAXNotSupportedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getFeature_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getFeature_INLRString__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_getFeature_INLRString__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getFeature_INLRString__Z_dispatch, // invoke this method
  XMLReader_getFeature_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_getProperty_INLRString__LRObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getProperty_INLRString__LRObject__args[] = 
{
  &XMLReader_methods_getProperty_INLRString__LRObject__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getProperty_INLRString__LRObject__exceptions[] =
{
  org::xml::sax::RSAXNotRecognizedException::clazzInfo(), 
  org::xml::sax::RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_getProperty_INLRString__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::xml::sax::SAXNotRecognizedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotRecognizedException(ex));
 if (instanceof(ex, org::xml::sax::SAXNotSupportedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getProperty_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_getProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getProperty_INLRString__LRObject__args, // the arguments
  0, //arguments count
  XMLReader_methods_getProperty_INLRString__LRObject__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getProperty_INLRString__LRObject__dispatch, // invoke this method
  XMLReader_getProperty_INLRString__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_getURI_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_getURI_INLRString__LRString__args[] = 
{
  &XMLReader_methods_getURI_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_getURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_getURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getURI", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_getURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  XMLReader_methods_getURI_INLRString__LRString__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_getURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_hasAlreadyFatalError__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_hasAlreadyFatalError__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_hasAlreadyFatalError__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasAlreadyFatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_hasAlreadyFatalError", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_hasAlreadyFatalError__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_hasAlreadyFatalError__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_hasAlreadyFatalError__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_isValidating__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_isValidating__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_isValidating__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isValidating", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_isValidating", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_isValidating__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_isValidating__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_isValidating__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_args[] = 
{
  &XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLReader_parse_INLorg_xml_sax_RInputSource__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, org::xml::sax::SAXException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parse_INLorg_xml_sax_RInputSource__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_parse_INLorg_xml_sax_RInputSource__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parse_INLorg_xml_sax_RInputSource__V_dispatch, // invoke this method
  XMLReader_parse_INLorg_xml_sax_RInputSource__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parse_INLRString__V_arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parse_INLRString__V_args[] = 
{
  &XMLReader_methods_parse_INLRString__V_arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parse_INLRString__V_exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLReader_parse_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, org::xml::sax::SAXException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_parse", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_parse_INLRString__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parse_INLRString__V_dispatch, // invoke this method
  XMLReader_parse_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__args[] = 
{
  &XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLReader_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, org::xml::sax::SAXException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInternal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RDocument::clazzInfo(), // return type
  "_h_parseInternal", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__args, // the arguments
  0, //arguments count
  XMLReader_methods_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__dispatch, // invoke this method
  XMLReader_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__arg_systemId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "systemId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__args[] = 
{
  &XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__arg_systemId,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLReader_parseInternal_INLRString__Lorg_w3c_dom_RDocument__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, org::xml::sax::SAXException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parseInternal_INLRString__Lorg_w3c_dom_RDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInternal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RDocument::clazzInfo(), // return type
  "_i_parseInternal", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__args, // the arguments
  0, //arguments count
  XMLReader_methods_parseInternal_INLRString__Lorg_w3c_dom_RDocument__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parseInternal_INLRString__Lorg_w3c_dom_RDocument__dispatch, // invoke this method
  XMLReader_parseInternal_INLRString__Lorg_w3c_dom_RDocument__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__arg_input = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "input", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RInputSource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__args[] = 
{
  &XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__arg_input,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  org::xml::sax::RSAXException::clazzInfo(), 
  0
};

void XMLReader_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
 if (instanceof(ex, org::xml::sax::SAXException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseInternalHtml", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RDocument::clazzInfo(), // return type
  "_j_parseInternalHtml", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__args, // the arguments
  0, //arguments count
  XMLReader_methods_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__dispatch, // invoke this method
  XMLReader_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RContentHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_args[] = 
{
  &XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setContentHandler_INLorg_xml_sax_RContentHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContentHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setContentHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setContentHandler_INLorg_xml_sax_RContentHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setContentHandler_INLorg_xml_sax_RContentHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RDTDHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_args[] = 
{
  &XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setDTDHandler_INLorg_xml_sax_RDTDHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDTDHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setDTDHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setDTDHandler_INLorg_xml_sax_RDTDHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::REntityResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_args[] = 
{
  &XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_arg_resolver,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setEntityResolver_INLorg_xml_sax_REntityResolver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEntityResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setEntityResolver", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setEntityResolver_INLorg_xml_sax_REntityResolver__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setEntityResolver_INLorg_xml_sax_REntityResolver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::xml::sax::RErrorHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_args[] = 
{
  &XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setErrorHandler_INLorg_xml_sax_RErrorHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrorHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setErrorHandler", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setErrorHandler_INLorg_xml_sax_RErrorHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setExtendedFlags_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setExtendedFlags_I_V_args[] = 
{
  &XMLReader_methods_setExtendedFlags_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setExtendedFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setExtendedFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setExtendedFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setExtendedFlags", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setExtendedFlags_I_V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setExtendedFlags_I_V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setExtendedFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setFatalError__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setFatalError__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setFatalError__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFatalError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_setFatalError", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setFatalError__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_setFatalError__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setFatalError__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setFeature_INLRString_Z_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setFeature_INLRString_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setFeature_INLRString_Z_V_args[] = 
{
  &XMLReader_methods_setFeature_INLRString_Z_V_arg_name,
  &XMLReader_methods_setFeature_INLRString_Z_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setFeature_INLRString_Z_V_exceptions[] =
{
  org::xml::sax::RSAXNotRecognizedException::clazzInfo(), 
  org::xml::sax::RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_setFeature_INLRString_Z_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::xml::sax::SAXNotRecognizedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotRecognizedException(ex));
 if (instanceof(ex, org::xml::sax::SAXNotSupportedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setFeature_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setFeature_INLRString_Z_V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setFeature_INLRString_Z_V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setFeature_INLRString_Z_V_dispatch, // invoke this method
  XMLReader_setFeature_INLRString_Z_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_setProperty_INLRString_INLRObject__V_args[] = 
{
  &XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_name,
  &XMLReader_methods_setProperty_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_setProperty_INLRString_INLRObject__V_exceptions[] =
{
  org::xml::sax::RSAXNotRecognizedException::clazzInfo(), 
  org::xml::sax::RSAXNotSupportedException::clazzInfo(), 
  0
};

void XMLReader_setProperty_INLRString_INLRObject__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::xml::sax::SAXNotRecognizedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotRecognizedException(ex));
 if (instanceof(ex, org::xml::sax::SAXNotSupportedException) == true)
    THROW_INSTANCE( org::xml::sax::RSAXNotSupportedException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_setProperty_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setProperty", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_setProperty_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  XMLReader_methods_setProperty_INLRString_INLRObject__V_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_setProperty_INLRString_INLRObject__V_dispatch, // invoke this method
  XMLReader_setProperty_INLRString_INLRObject__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLReader_methods_useNamespace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLReader_methods_useNamespace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLReader_method_useNamespace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "useNamespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_useNamespace", // alternative name of method
  -1, // altlabelHashCode
  XMLReader_methods_useNamespace__Z_args, // the arguments
  0, //arguments count
  XMLReader_methods_useNamespace__Z_exceptions, // the declared exceptions
  XMLReader_MetainfoWrapper::XMLReader_method_useNamespace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLReader_methods[] = 
{
  &XMLReader_method_GetClass__L_acdk_lang_RClass_,
  &XMLReader_method_XMLReader_ZI_LRXMLReader_,
  &XMLReader_method_XMLReader__LRXMLReader_,
  &XMLReader_method_XMLReader_Z_LRXMLReader_,
  &XMLReader_method__attributeDecl_INLRString_INLRString_INLRString_INLRString_INLRString__V,
  &XMLReader_method__cdataBlock_INLRString__V,
  &XMLReader_method__characters_INLRString__V,
  &XMLReader_method__comment_INLRString__V,
  &XMLReader_method__elementDecl_INLRString_INLRString__V,
  &XMLReader_method__endDocument__V,
  &XMLReader_method__endElement_INLRString__V,
  &XMLReader_method__error_INLRString_IIINLRString_INLRString__V,
  &XMLReader_method__externalEntityDecl_INLRString_INLRString_INLRString__V,
  &XMLReader_method__fatalError_INLRString_IIINLRString_INLRString__V,
  &XMLReader_method__ignorableWhitespace_INLRString__V,
  &XMLReader_method__internalEntityDecl_INLRString_INLRString__V,
  &XMLReader_method__notationDecl_INLRString_INLRString_INLRString__V,
  &XMLReader_method__processingInstruction_INLRString_INLRString__V,
  &XMLReader_method__setDocumentLocator_INLorg_xml_sax_RLocator__V,
  &XMLReader_method__splitName_INLRString_OUTLRString_OUTLRString_OUTLRString__V,
  &XMLReader_method__startDocument_Z_V,
  &XMLReader_method__startElement_INLRString_INLorg_xml_sax_RAttributes__V,
  &XMLReader_method__startElement_INLRString_INLRStringArray__V,
  &XMLReader_method__startPrefixMapping_INLRString_INLRString__V,
  &XMLReader_method__unparsedEntityDecl_INLRString_INLRString_INLRString_INLRString__V,
  &XMLReader_method__warning_INLRString_IIINLRString_INLRString__V,
  &XMLReader_method_getContentHandler__Lorg_xml_sax_RContentHandler_,
  &XMLReader_method_getDTDHandler__Lorg_xml_sax_RDTDHandler_,
  &XMLReader_method_getEntityResolver__Lorg_xml_sax_REntityResolver_,
  &XMLReader_method_getErrorHandler__Lorg_xml_sax_RErrorHandler_,
  &XMLReader_method_getExtendedFlags__I,
  &XMLReader_method_getFeature_INLRString__Z,
  &XMLReader_method_getProperty_INLRString__LRObject_,
  &XMLReader_method_getURI_INLRString__LRString_,
  &XMLReader_method_hasAlreadyFatalError__Z,
  &XMLReader_method_isValidating__Z,
  &XMLReader_method_parse_INLorg_xml_sax_RInputSource__V,
  &XMLReader_method_parse_INLRString__V,
  &XMLReader_method_parseInternal_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument_,
  &XMLReader_method_parseInternal_INLRString__Lorg_w3c_dom_RDocument_,
  &XMLReader_method_parseInternalHtml_INLorg_xml_sax_RInputSource__Lorg_w3c_dom_RDocument_,
  &XMLReader_method_setContentHandler_INLorg_xml_sax_RContentHandler__V,
  &XMLReader_method_setDTDHandler_INLorg_xml_sax_RDTDHandler__V,
  &XMLReader_method_setEntityResolver_INLorg_xml_sax_REntityResolver__V,
  &XMLReader_method_setErrorHandler_INLorg_xml_sax_RErrorHandler__V,
  &XMLReader_method_setExtendedFlags_I_V,
  &XMLReader_method_setFatalError__Z,
  &XMLReader_method_setFeature_INLRString_Z_V,
  &XMLReader_method_setProperty_INLRString_INLRObject__V,
  &XMLReader_method_useNamespace__Z,
  0
};


struct XMLReader_MetaInfoInitializer
{  XMLReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLReader::clazzInfo();
    ci->fields =  _XMLReader_fields;
    ci->methods =  _XMLReader_methods;
    ci->_scopeParent = acdk_xml_sax_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLReader_MetaInfoInitializer XMLReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace sax


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) sax_dummyExportFunc() {}
#endif

