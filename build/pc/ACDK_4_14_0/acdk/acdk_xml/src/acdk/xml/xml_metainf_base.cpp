// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "xml.h"
#include "XMLObjectReader.h"
#include "XMLObjectWriter.h"
#include "XMLTokenizer.h"

namespace acdk { 
namespace xml { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _RemoteInterface_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RemoteInterface_interfaces[] =
{
  &_RemoteInterface_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RemoteInterface", // name of class
  -1, // hashCode
  "acdk/xml", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RemoteInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RemoteInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RemoteInterface(RemoteInterface::clazzInfo());

::acdk::lang::RClass
RemoteInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RemoteInterface::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_objectId._ref_this()); // RString _objectId 
}


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _XMLObjectReader_super___acdk__io__AbstractObjectReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractObjectReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLObjectReader_interfaces[] =
{
  &_XMLObjectReader_super___acdk__io__AbstractObjectReader,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLObjectReader", // name of class
  -1, // hashCode
  "acdk/xml", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLObjectReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLObjectReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLObjectReader(XMLObjectReader::clazzInfo());

::acdk::lang::RClass
XMLObjectReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLObjectReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractObjectReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_tin._ref_this()); // RXMLTokenizer _tin 
}


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _XMLObjectWriter_super___acdk__io__AbstractObjectWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractObjectWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLObjectWriter_interfaces[] =
{
  &_XMLObjectWriter_super___acdk__io__AbstractObjectWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLObjectWriter", // name of class
  -1, // hashCode
  "acdk/xml", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLObjectWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLObjectWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLObjectWriter(XMLObjectWriter::clazzInfo());

::acdk::lang::RClass
XMLObjectWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLObjectWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractObjectWriter)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TestClass_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestClass_interfaces[] =
{
  &_TestClass_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TestClass::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestClass", // name of class
  -1, // hashCode
  "acdk/xml", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestClass_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &TestClass::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestClass::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestClass(TestClass::clazzInfo());

::acdk::lang::RClass
TestClass::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestClass::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_astring._ref_this()); // RString _astring 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RHashMap _map 
}


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace ::acdk::lang;
using namespace ::acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _XMLTokenizer_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLTokenizer_interfaces[] =
{
  &_XMLTokenizer_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLTokenizer", // name of class
  -1, // hashCode
  "acdk/xml", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLTokenizer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLTokenizer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLTokenizer(XMLTokenizer::clazzInfo());

::acdk::lang::RClass
XMLTokenizer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLTokenizer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_elem._ref_this()); // RStringBuffer _elem 
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RReader _in 
}


} // namespace acdk
} // namespace xml

