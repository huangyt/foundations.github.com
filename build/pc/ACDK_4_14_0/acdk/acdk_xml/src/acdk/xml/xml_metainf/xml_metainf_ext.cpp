// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../xml.h"
#include "../Config.h"
#include "../xml.h"
#include "../XMLObjectReader.h"
#include "../XMLObjectWriter.h"
#include "../XMLTokenizer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_xml_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "xml", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_xml_unitInfo(&acdk_xml_unitInfo);


namespace acdk { 
namespace xml { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
RemoteInterface_create_array(int length)
{
  return new ObjectArrayImpl<RRemoteInterface>(length);
}

//static
::acdk::lang::RObject
RemoteInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RemoteInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RemoteInterface::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteInterface_method_RemoteInterface_INLRString__LRRemoteInterface__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RemoteInterface((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RemoteInterface_method_objectId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RemoteInterface* This = dmi_cast<RemoteInterface>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RemoteInterface::objectId();
    else
        ret = (::acdk::lang::RObject)This->objectId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RemoteInterface_fields__objectId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RemoteInterface* This = dmi_cast<RemoteInterface>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_objectId, flags);
    else
      This->_objectId = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RemoteInterface_fields__objectId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_objectId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  RemoteInterface_MetainfoWrapper::RemoteInterface_fields__objectId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RemoteInterface_fields[] = 
{
  &RemoteInterface_fields__objectId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RemoteInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RemoteInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RemoteInterface_MetainfoWrapper::RemoteInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__arg_obid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__args[] = 
{
  &RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__arg_obid,
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteInterface_method_RemoteInterface_INLRString__LRRemoteInterface_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RemoteInterface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RemoteInterface::clazzInfo(), // return type
  "_0_RemoteInterface", // alternative name of method
  -1, // altlabelHashCode
  RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__args, // the arguments
  0, //arguments count
  RemoteInterface_methods_RemoteInterface_INLRString__LRRemoteInterface__exceptions, // the declared exceptions
  RemoteInterface_MetainfoWrapper::RemoteInterface_method_RemoteInterface_INLRString__LRRemoteInterface__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RemoteInterface_methods_objectId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RemoteInterface_methods_objectId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RemoteInterface_method_objectId__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "objectId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_objectId", // alternative name of method
  -1, // altlabelHashCode
  RemoteInterface_methods_objectId__LRString__args, // the arguments
  0, //arguments count
  RemoteInterface_methods_objectId__LRString__exceptions, // the declared exceptions
  RemoteInterface_MetainfoWrapper::RemoteInterface_method_objectId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RemoteInterface_methods[] = 
{
  &RemoteInterface_method_GetClass__L_acdk_lang_RClass_,
  &RemoteInterface_method_RemoteInterface_INLRString__LRRemoteInterface_,
  &RemoteInterface_method_objectId__LRString_,
  0
};


struct RemoteInterface_MetaInfoInitializer
{  RemoteInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RemoteInterface::clazzInfo();
    ci->fields =  _RemoteInterface_fields;
    ci->methods =  _RemoteInterface_methods;
    ci->_scopeParent = acdk_xml_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RemoteInterface_MetaInfoInitializer RemoteInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
XMLObjectReader_create_array(int length)
{
  return new ObjectArrayImpl<RXMLObjectReader>(length);
}

//static
::acdk::lang::RObject
XMLObjectReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLObjectReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLObjectReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_XMLObjectReader_INLRReader_I_LRXMLObjectReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectReader((RReader)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_XMLObjectReader_INLRReader__LRXMLObjectReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectReader((RReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectReader((RXMLTokenizer)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectReader((RXMLTokenizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method__readXMLText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLObjectReader::_readXMLText();
    else
        ret = (::acdk::lang::RObject)This->_readXMLText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_readBasicArray_INLRClass_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLObjectReader::readBasicArray((RClass)args[0].getObjectVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->readBasicArray((RClass)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_readFieldInfo__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLObjectReader::readFieldInfo();
    else
        ret = (::acdk::lang::RObject)This->readFieldInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_readSimpleEndToken_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLObjectReader::readSimpleEndToken((RString)args[0].getObjectVar());
    else
        This->readSimpleEndToken((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectReader_method_readSimpleStartToken_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLObjectReader::readSimpleStartToken((RString)args[0].getObjectVar());
    else
        This->readSimpleStartToken((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLObjectReader_fields__tin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLObjectReader* This = dmi_cast<XMLObjectReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tin, flags);
    else
      This->_tin = (RXMLTokenizer)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLObjectReader_fields__tin = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLTokenizer::clazzInfo(),
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_fields__tin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLObjectReader_fields[] = 
{
  &XMLObjectReader_fields__tin,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__args[] = 
{
  &XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__arg_in,
  &XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_XMLObjectReader_INLRReader_I_LRXMLObjectReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectReader::clazzInfo(), // return type
  "_0_XMLObjectReader", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_XMLObjectReader_INLRReader_I_LRXMLObjectReader__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_XMLObjectReader_INLRReader_I_LRXMLObjectReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__args[] = 
{
  &XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_XMLObjectReader_INLRReader__LRXMLObjectReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectReader::clazzInfo(), // return type
  "_1_XMLObjectReader", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_XMLObjectReader_INLRReader__LRXMLObjectReader__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_XMLObjectReader_INLRReader__LRXMLObjectReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__arg_tin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__args[] = 
{
  &XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__arg_tin,
  &XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectReader::clazzInfo(), // return type
  "_2_XMLObjectReader", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__arg_tin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__args[] = 
{
  &XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__arg_tin,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectReader::clazzInfo(), // return type
  "_3_XMLObjectReader", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods__readXMLText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods__readXMLText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method__readXMLText__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readXMLText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8__readXMLText", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods__readXMLText__LRString__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods__readXMLText__LRString__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method__readXMLText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__args[] = 
{
  &XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__arg_cls,
  &XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_readBasicArray_INLRClass_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readBasicArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_readBasicArray", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_readBasicArray_INLRClass_I_LRObject__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_readBasicArray_INLRClass_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_readFieldInfo__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_readFieldInfo__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_readFieldInfo__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readFieldInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_readFieldInfo", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_readFieldInfo__LRString__args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_readFieldInfo__LRString__exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_readFieldInfo__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_readSimpleEndToken_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_readSimpleEndToken_INLRString__V_args[] = 
{
  &XMLObjectReader_methods_readSimpleEndToken_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_readSimpleEndToken_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_readSimpleEndToken_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readSimpleEndToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_readSimpleEndToken", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_readSimpleEndToken_INLRString__V_args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_readSimpleEndToken_INLRString__V_exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_readSimpleEndToken_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectReader_methods_readSimpleStartToken_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectReader_methods_readSimpleStartToken_INLRString__V_args[] = 
{
  &XMLObjectReader_methods_readSimpleStartToken_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectReader_methods_readSimpleStartToken_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectReader_method_readSimpleStartToken_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readSimpleStartToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_readSimpleStartToken", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectReader_methods_readSimpleStartToken_INLRString__V_args, // the arguments
  0, //arguments count
  XMLObjectReader_methods_readSimpleStartToken_INLRString__V_exceptions, // the declared exceptions
  XMLObjectReader_MetainfoWrapper::XMLObjectReader_method_readSimpleStartToken_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLObjectReader_methods[] = 
{
  &XMLObjectReader_method_GetClass__L_acdk_lang_RClass_,
  &XMLObjectReader_method_XMLObjectReader_INLRReader_I_LRXMLObjectReader_,
  &XMLObjectReader_method_XMLObjectReader_INLRReader__LRXMLObjectReader_,
  &XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer_I_LRXMLObjectReader_,
  &XMLObjectReader_method_XMLObjectReader_INLRXMLTokenizer__LRXMLObjectReader_,
  &XMLObjectReader_method__readXMLText__LRString_,
  &XMLObjectReader_method_readBasicArray_INLRClass_I_LRObject_,
  &XMLObjectReader_method_readFieldInfo__LRString_,
  &XMLObjectReader_method_readSimpleEndToken_INLRString__V,
  &XMLObjectReader_method_readSimpleStartToken_INLRString__V,
  0
};


struct XMLObjectReader_MetaInfoInitializer
{  XMLObjectReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLObjectReader::clazzInfo();
    ci->fields =  _XMLObjectReader_fields;
    ci->methods =  _XMLObjectReader_methods;
    ci->_scopeParent = acdk_xml_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLObjectReader_MetaInfoInitializer XMLObjectReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
XMLObjectWriter_create_array(int length)
{
  return new ObjectArrayImpl<RXMLObjectWriter>(length);
}

//static
::acdk::lang::RObject
XMLObjectWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLObjectWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLObjectWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectWriter((RWriter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLObjectWriter((RWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method__dumpindend__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectWriter* This = dmi_cast<XMLObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLObjectWriter::_dumpindend();
    else
        This->_dumpindend();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_doIdent_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLObjectWriter* This = dmi_cast<XMLObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLObjectWriter::doIdent(args[0].getBoolVar());
    else
        This->doIdent(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_xmldecode_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLObjectWriter::xmldecode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLObjectWriter_method_xmlencode_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLObjectWriter::xmlencode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLObjectWriter_fields__doIndent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLObjectWriter* This = dmi_cast<XMLObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_doIndent, flags);
    else
      This->_doIndent = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLObjectWriter_fields__indent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLObjectWriter* This = dmi_cast<XMLObjectWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_indent, flags);
    else
      This->_indent = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLObjectWriter_fields__doIndent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_doIndent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_fields__doIndent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLObjectWriter_fields__indent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_indent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_fields__indent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLObjectWriter_fields[] = 
{
  &XMLObjectWriter_fields__doIndent,
  &XMLObjectWriter_fields__indent,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__args[] = 
{
  &XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__arg_out,
  &XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectWriter::clazzInfo(), // return type
  "_0_XMLObjectWriter", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__args[] = 
{
  &XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_XMLObjectWriter_INLRWriter__LRXMLObjectWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLObjectWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLObjectWriter::clazzInfo(), // return type
  "_1_XMLObjectWriter", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_XMLObjectWriter_INLRWriter__LRXMLObjectWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods__dumpindend__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods__dumpindend__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method__dumpindend__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_dumpindend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__dumpindend", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods__dumpindend__V_args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods__dumpindend__V_exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method__dumpindend__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_doIdent_Z_V_arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_doIdent_Z_V_args[] = 
{
  &XMLObjectWriter_methods_doIdent_Z_V_arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_doIdent_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_doIdent_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doIdent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_doIdent", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_doIdent_Z_V_args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_doIdent_Z_V_exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_doIdent_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_xmldecode_INLRString__LRString__arg_txt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "txt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_xmldecode_INLRString__LRString__args[] = 
{
  &XMLObjectWriter_methods_xmldecode_INLRString__LRString__arg_txt,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_xmldecode_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_xmldecode_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xmldecode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_xmldecode", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_xmldecode_INLRString__LRString__args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_xmldecode_INLRString__LRString__exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_xmldecode_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLObjectWriter_methods_xmlencode_INLRString__LRString__arg_txt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "txt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLObjectWriter_methods_xmlencode_INLRString__LRString__args[] = 
{
  &XMLObjectWriter_methods_xmlencode_INLRString__LRString__arg_txt,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLObjectWriter_methods_xmlencode_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLObjectWriter_method_xmlencode_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xmlencode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_xmlencode", // alternative name of method
  -1, // altlabelHashCode
  XMLObjectWriter_methods_xmlencode_INLRString__LRString__args, // the arguments
  0, //arguments count
  XMLObjectWriter_methods_xmlencode_INLRString__LRString__exceptions, // the declared exceptions
  XMLObjectWriter_MetainfoWrapper::XMLObjectWriter_method_xmlencode_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLObjectWriter_methods[] = 
{
  &XMLObjectWriter_method_GetClass__L_acdk_lang_RClass_,
  &XMLObjectWriter_method_XMLObjectWriter_INLRWriter_I_LRXMLObjectWriter_,
  &XMLObjectWriter_method_XMLObjectWriter_INLRWriter__LRXMLObjectWriter_,
  &XMLObjectWriter_method__dumpindend__V,
  &XMLObjectWriter_method_doIdent_Z_V,
  &XMLObjectWriter_method_xmldecode_INLRString__LRString_,
  &XMLObjectWriter_method_xmlencode_INLRString__LRString_,
  0
};


struct XMLObjectWriter_MetaInfoInitializer
{  XMLObjectWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLObjectWriter::clazzInfo();
    ci->fields =  _XMLObjectWriter_fields;
    ci->methods =  _XMLObjectWriter_methods;
    ci->_scopeParent = acdk_xml_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLObjectWriter_MetaInfoInitializer XMLObjectWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TestClass_create_array(int length)
{
  return new ObjectArrayImpl<RTestClass>(length);
}

//static
::acdk::lang::RObject
TestClass_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestClass_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestClass_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestClass::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestClass_method_TestClass__LRTestClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestClass_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestClass::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestClass_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestClass* This = dmi_cast<TestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestClass::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestClass_fields__astring_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestClass* This = dmi_cast<TestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_astring, flags);
    else
      This->_astring = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestClass_fields__ival_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestClass* This = dmi_cast<TestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ival, flags);
    else
      This->_ival = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestClass_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestClass* This = dmi_cast<TestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = (RHashMap)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestClass_fields__astring = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_astring", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestClass_MetainfoWrapper::TestClass_fields__astring_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestClass_fields__ival = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ival", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestClass_MetainfoWrapper::TestClass_fields__ival_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestClass_fields__map = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  TestClass_MetainfoWrapper::TestClass_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestClass_fields[] = 
{
  &TestClass_fields__astring,
  &TestClass_fields__ival,
  &TestClass_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestClass_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestClass_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestClass_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestClass_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestClass_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestClass_MetainfoWrapper::TestClass_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestClass_methods_TestClass__LRTestClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestClass_methods_TestClass__LRTestClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestClass_method_TestClass__LRTestClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestClass::clazzInfo(), // return type
  "_1_TestClass", // alternative name of method
  -1, // altlabelHashCode
  TestClass_methods_TestClass__LRTestClass__args, // the arguments
  0, //arguments count
  TestClass_methods_TestClass__LRTestClass__exceptions, // the declared exceptions
  TestClass_MetainfoWrapper::TestClass_method_TestClass__LRTestClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestClass_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestClass_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestClass_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  TestClass_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  TestClass_methods_create_instance__LRObject__exceptions, // the declared exceptions
  TestClass_MetainfoWrapper::TestClass_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestClass_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestClass_methods_equals_INLRObject__Z_args[] = 
{
  &TestClass_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* TestClass_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestClass_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_equals", // alternative name of method
  -1, // altlabelHashCode
  TestClass_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  TestClass_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  TestClass_MetainfoWrapper::TestClass_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestClass_methods[] = 
{
  &TestClass_method_GetClass__L_acdk_lang_RClass_,
  &TestClass_method_TestClass__LRTestClass_,
  &TestClass_method_create_instance__LRObject_,
  &TestClass_method_equals_INLRObject__Z,
  0
};


struct TestClass_MetaInfoInitializer
{  TestClass_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestClass::clazzInfo();
    ci->fields =  _TestClass_fields;
    ci->methods =  _TestClass_methods;
    ci->_scopeParent = acdk_xml_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestClass_MetaInfoInitializer TestClass_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml


namespace acdk { 
namespace xml { 

using namespace ::acdk::lang;
using namespace ::acdk::io;

//static
::acdk::lang::RObject
XMLTokenizer_create_array(int length)
{
  return new ObjectArrayImpl<RXMLTokenizer>(length);
}

//static
::acdk::lang::RObject
XMLTokenizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLTokenizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLTokenizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_XMLTokenizer_INLRReader__LRXMLTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLTokenizer((RReader)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::_read();
    else
      ret = This->_read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__readComment__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::_readComment();
    else
      ret = This->_readComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__readString__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::_readString();
    else
      ret = This->_readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__readSymbol__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::_readSymbol();
    else
      ret = This->_readSymbol();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__readText__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::_readText();
    else
      ret = This->_readText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method__skipWhitespace__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLTokenizer::_skipWhitespace();
    else
        This->_skipWhitespace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_element__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLTokenizer::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_getIn__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLTokenizer::getIn();
    else
        ret = (::acdk::lang::RObject)This->getIn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_nextToken__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLTokenizer::nextToken();
    else
      ret = This->nextToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLTokenizer_method_unread__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLTokenizer::unread();
    else
        This->unread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__elem_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_elem, flags);
    else
      This->_elem = (RStringBuffer)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = (RReader)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__isOpen_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isOpen, flags);
    else
      This->_isOpen = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__lastTok_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastTok, flags);
    else
      This->_lastTok = var.getShortVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__pushedBack_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pushedBack, flags);
    else
      This->_pushedBack = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLTokenizer_fields__useLast_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLTokenizer* This = dmi_cast<XMLTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_useLast, flags);
    else
      This->_useLast = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__elem = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_elem", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__elem_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__isOpen = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isOpen", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__isOpen_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__lastTok = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lastTok", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__lastTok_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__pushedBack = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pushedBack", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__pushedBack_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLTokenizer_fields__useLast = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_useLast", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_fields__useLast_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLTokenizer_fields[] = 
{
  &XMLTokenizer_fields__elem,
  &XMLTokenizer_fields__in,
  &XMLTokenizer_fields__isOpen,
  &XMLTokenizer_fields__lastTok,
  &XMLTokenizer_fields__pushedBack,
  &XMLTokenizer_fields__useLast,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__args[] = 
{
  &XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_XMLTokenizer_INLRReader__LRXMLTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLTokenizer::clazzInfo(), // return type
  "_0_XMLTokenizer", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_XMLTokenizer_INLRReader__LRXMLTokenizer__exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_XMLTokenizer_INLRReader__LRXMLTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__read__I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a__read", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__read__I_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__read__I_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__readComment__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__readComment__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__readComment__S = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_8__readComment", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__readComment__S_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__readComment__S_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__readComment__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__readString__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__readString__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__readString__S = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_7__readString", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__readString__S_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__readString__S_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__readString__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__readSymbol__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__readSymbol__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__readSymbol__S = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readSymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_6__readSymbol", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__readSymbol__S_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__readSymbol__S_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__readSymbol__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__readText__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__readText__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__readText__S = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9__readText", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__readText__S_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__readText__S_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__readText__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods__skipWhitespace__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods__skipWhitespace__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method__skipWhitespace__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_skipWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__skipWhitespace", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods__skipWhitespace__V_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods__skipWhitespace__V_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method__skipWhitespace__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_element__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_element__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_element__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_element", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_element__LRString__args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_element__LRString__exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_element__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_getIn__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_getIn__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_getIn__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_4_getIn", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_getIn__LRReader__args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_getIn__LRReader__exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_getIn__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_nextToken__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_nextToken__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_nextToken__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_1_nextToken", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_nextToken__S_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_nextToken__S_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_nextToken__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLTokenizer_methods_unread__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLTokenizer_methods_unread__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLTokenizer_method_unread__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unread", // alternative name of method
  -1, // altlabelHashCode
  XMLTokenizer_methods_unread__V_args, // the arguments
  0, //arguments count
  XMLTokenizer_methods_unread__V_exceptions, // the declared exceptions
  XMLTokenizer_MetainfoWrapper::XMLTokenizer_method_unread__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLTokenizer_methods[] = 
{
  &XMLTokenizer_method_GetClass__L_acdk_lang_RClass_,
  &XMLTokenizer_method_XMLTokenizer_INLRReader__LRXMLTokenizer_,
  &XMLTokenizer_method__read__I,
  &XMLTokenizer_method__readComment__S,
  &XMLTokenizer_method__readString__S,
  &XMLTokenizer_method__readSymbol__S,
  &XMLTokenizer_method__readText__S,
  &XMLTokenizer_method__skipWhitespace__V,
  &XMLTokenizer_method_element__LRString_,
  &XMLTokenizer_method_getIn__LRReader_,
  &XMLTokenizer_method_nextToken__S,
  &XMLTokenizer_method_unread__V,
  0
};


struct XMLTokenizer_MetaInfoInitializer
{  XMLTokenizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLTokenizer::clazzInfo();
    ci->fields =  _XMLTokenizer_fields;
    ci->methods =  _XMLTokenizer_methods;
    ci->_scopeParent = acdk_xml_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLTokenizer_MetaInfoInitializer XMLTokenizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) xml_dummyExportFunc() {}
#endif

