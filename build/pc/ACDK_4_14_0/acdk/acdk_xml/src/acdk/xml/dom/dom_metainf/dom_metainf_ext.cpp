// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../dom.h"
#include "../dom.h"
#include "../DOMParser.h"
#include "../NodeArrayList.h"
#include "../NodeIteratorWalker.h"
#include "../NodeUtil.h"
#include "../XMLAttr.h"
#include "../XMLCDATASection.h"
#include "../XMLCharacterData.h"
#include "../XMLComment.h"
#include "../XMLDocument.h"
#include "../XMLElement.h"
#include "../XMLNamedNodeMap.h"
#include "../XMLNode.h"
#include "../XMLNodeList.h"
#include "../XMLText.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_xml_dom_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "dom", // name of unit
  -1, // hashCode
  "acdk/xml", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_xml_dom_unitInfo(&acdk_xml_dom_unitInfo);


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace acdk::lang;
using namespace org::w3c::dom;

//static
::acdk::lang::RObject
NodeArrayList_create_array(int length)
{
  return new ObjectArrayImpl<RNodeArrayList>(length);
}

//static
::acdk::lang::RObject
NodeArrayList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeArrayList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeArrayList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeArrayList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeArrayList_method_NodeArrayList__LRNodeArrayList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NodeArrayList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeArrayList_method_append_INLRNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeArrayList* This = dmi_cast<NodeArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NodeArrayList::append((RNode)args[0].getObjectVar());
    else
        This->append((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeArrayList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeArrayList* This = dmi_cast<NodeArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NodeArrayList::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeArrayList_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeArrayList* This = dmi_cast<NodeArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeArrayList::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeArrayList_fields__childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeArrayList* This = dmi_cast<NodeArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_childs, flags);
    else
      This->_childs = (RNodeArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NodeArrayList_fields__childs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeArray::clazzInfo(),
  NodeArrayList_MetainfoWrapper::NodeArrayList_fields__childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeArrayList_fields[] = 
{
  &NodeArrayList_fields__childs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeArrayList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeArrayList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeArrayList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeArrayList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeArrayList_MetainfoWrapper::NodeArrayList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeArrayList_methods_NodeArrayList__LRNodeArrayList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList_methods_NodeArrayList__LRNodeArrayList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeArrayList_method_NodeArrayList__LRNodeArrayList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NodeArrayList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NodeArrayList::clazzInfo(), // return type
  "_0_NodeArrayList", // alternative name of method
  -1, // altlabelHashCode
  NodeArrayList_methods_NodeArrayList__LRNodeArrayList__args, // the arguments
  0, //arguments count
  NodeArrayList_methods_NodeArrayList__LRNodeArrayList__exceptions, // the declared exceptions
  NodeArrayList_MetainfoWrapper::NodeArrayList_method_NodeArrayList__LRNodeArrayList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeArrayList_methods_append_INLRNode__V_arg_xmln = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xmln", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeArrayList_methods_append_INLRNode__V_args[] = 
{
  &NodeArrayList_methods_append_INLRNode__V_arg_xmln,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList_methods_append_INLRNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeArrayList_method_append_INLRNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_append", // alternative name of method
  -1, // altlabelHashCode
  NodeArrayList_methods_append_INLRNode__V_args, // the arguments
  0, //arguments count
  NodeArrayList_methods_append_INLRNode__V_exceptions, // the declared exceptions
  NodeArrayList_MetainfoWrapper::NodeArrayList_method_append_INLRNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeArrayList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeArrayList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLength", // alternative name of method
  -1, // altlabelHashCode
  NodeArrayList_methods_getLength__I_args, // the arguments
  0, //arguments count
  NodeArrayList_methods_getLength__I_exceptions, // the declared exceptions
  NodeArrayList_MetainfoWrapper::NodeArrayList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeArrayList_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeArrayList_methods_item_I_LRNode__args[] = 
{
  &NodeArrayList_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeArrayList_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_1_item", // alternative name of method
  -1, // altlabelHashCode
  NodeArrayList_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  NodeArrayList_methods_item_I_LRNode__exceptions, // the declared exceptions
  NodeArrayList_MetainfoWrapper::NodeArrayList_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeArrayList_methods[] = 
{
  &NodeArrayList_method_GetClass__L_acdk_lang_RClass_,
  &NodeArrayList_method_NodeArrayList__LRNodeArrayList_,
  &NodeArrayList_method_append_INLRNode__V,
  &NodeArrayList_method_getLength__I,
  &NodeArrayList_method_item_I_LRNode_,
  0
};


struct NodeArrayList_MetaInfoInitializer
{  NodeArrayList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeArrayList::clazzInfo();
    ci->fields =  _NodeArrayList_fields;
    ci->methods =  _NodeArrayList_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeArrayList_MetaInfoInitializer NodeArrayList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 


//static
::acdk::lang::RObject
NodeIteratorWalker_create_array(int length)
{
  return new ObjectArrayImpl<RNodeIteratorWalker>(length);
}

//static
::acdk::lang::RObject
NodeIteratorWalker_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeIteratorWalker_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeIteratorWalker::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NodeIteratorWalker((org::w3c::dom::RNode)args[0].getObjectVar(), (org::w3c::dom::traversal::RNodeFilter)args[1].getObjectVar(), args[2].getIntVar(), args[3].getBoolVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method__noSkip_INLorg_w3c_dom_RNode__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NodeIteratorWalker::_noSkip((org::w3c::dom::RNode)args[0].getObjectVar());
    else
      ret = This->_noSkip((org::w3c::dom::RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_detach__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NodeIteratorWalker::detach();
    else
        This->detach();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_firstChild__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::firstChild();
    else
        ret = (::acdk::lang::RObject)This->firstChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_getCurrentNode__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::getCurrentNode();
    else
        ret = (::acdk::lang::RObject)This->getCurrentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_getExpandEntityReferences__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NodeIteratorWalker::getExpandEntityReferences();
    else
      ret = This->getExpandEntityReferences();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::getFilter();
    else
        ret = (::acdk::lang::RObject)This->getFilter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_getRoot__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::getRoot();
    else
        ret = (::acdk::lang::RObject)This->getRoot();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_getWhatToShow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NodeIteratorWalker::getWhatToShow();
    else
      ret = This->getWhatToShow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_lastChild__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::lastChild();
    else
        ret = (::acdk::lang::RObject)This->lastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_nextNode__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::nextNode();
    else
        ret = (::acdk::lang::RObject)This->nextNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_nextSibling__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::nextSibling();
    else
        ret = (::acdk::lang::RObject)This->nextSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_parentNode__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::parentNode();
    else
        ret = (::acdk::lang::RObject)This->parentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_previousNode__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::previousNode();
    else
        ret = (::acdk::lang::RObject)This->previousNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_previousSibling__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->NodeIteratorWalker::previousSibling();
    else
        ret = (::acdk::lang::RObject)This->previousSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeIteratorWalker_method_setCurrentNode_INLorg_w3c_dom_RNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NodeIteratorWalker::setCurrentNode((org::w3c::dom::RNode)args[0].getObjectVar());
    else
        This->setCurrentNode((org::w3c::dom::RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__curNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curNode, flags);
    else
      This->_curNode = (org::w3c::dom::RNode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__expandEntityReference_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_expandEntityReference, flags);
    else
      This->_expandEntityReference = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__nodeFilter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nodeFilter, flags);
    else
      This->_nodeFilter = (org::w3c::dom::traversal::RNodeFilter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__rootNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rootNode, flags);
    else
      This->_rootNode = (org::w3c::dom::RNode)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__showFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_showFlags, flags);
    else
      This->_showFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NodeIteratorWalker_fields__walkMode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    NodeIteratorWalker* This = dmi_cast<NodeIteratorWalker>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_walkMode, flags);
    else
      This->_walkMode = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__curNode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__curNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__expandEntityReference = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_expandEntityReference", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__expandEntityReference_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__nodeFilter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nodeFilter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::traversal::RNodeFilter::clazzInfo(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__nodeFilter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__rootNode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rootNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__rootNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__showFlags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_showFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__showFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NodeIteratorWalker_fields__walkMode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_walkMode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_fields__walkMode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeIteratorWalker_fields[] = 
{
  &NodeIteratorWalker_fields__curNode,
  &NodeIteratorWalker_fields__expandEntityReference,
  &NodeIteratorWalker_fields__nodeFilter,
  &NodeIteratorWalker_fields__rootNode,
  &NodeIteratorWalker_fields__showFlags,
  &NodeIteratorWalker_fields__walkMode,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_rootNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rootNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_nodeFilter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nodeFilter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::traversal::RNodeFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_showFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "showFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_expandEntity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "expandEntity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_walkMode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "walkMode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__args[] = 
{
  &NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_rootNode,
  &NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_nodeFilter,
  &NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_showFlags,
  &NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_expandEntity,
  &NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__arg_walkMode,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NodeIteratorWalker", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NodeIteratorWalker::clazzInfo(), // return type
  "_0_NodeIteratorWalker", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_args[] = 
{
  &NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method__noSkip_INLorg_w3c_dom_RNode__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_noSkip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f__noSkip", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods__noSkip_INLorg_w3c_dom_RNode__Z_exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method__noSkip_INLorg_w3c_dom_RNode__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_detach__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_detach__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_detach__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_detach", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_detach__V_args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_detach__V_exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_detach__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_firstChild__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_firstChild__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_firstChild__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_a_firstChild", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_firstChild__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_firstChild__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_firstChild__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_getCurrentNode__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_getCurrentNode__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_getCurrentNode__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_7_getCurrentNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_getCurrentNode__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_getCurrentNode__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_getCurrentNode__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_getExpandEntityReferences__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_getExpandEntityReferences__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_getExpandEntityReferences__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExpandEntityReferences", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_getExpandEntityReferences", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_getExpandEntityReferences__Z_args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_getExpandEntityReferences__Z_exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_getExpandEntityReferences__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_getFilter__Lorg_w3c_dom_traversal_RNodeFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::traversal::RNodeFilter::clazzInfo(), // return type
  "_3_getFilter", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_getFilter__Lorg_w3c_dom_traversal_RNodeFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_getRoot__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_getRoot__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_getRoot__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_1_getRoot", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_getRoot__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_getRoot__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_getRoot__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_getWhatToShow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_getWhatToShow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_getWhatToShow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhatToShow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getWhatToShow", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_getWhatToShow__I_args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_getWhatToShow__I_exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_getWhatToShow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_lastChild__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_lastChild__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_lastChild__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_b_lastChild", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_lastChild__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_lastChild__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_lastChild__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_nextNode__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_nextNode__Lorg_w3c_dom_RNode__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void NodeIteratorWalker_nextNode__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_nextNode__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_5_nextNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_nextNode__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_nextNode__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_nextNode__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  NodeIteratorWalker_nextNode__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_nextSibling__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_nextSibling__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_nextSibling__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_d_nextSibling", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_nextSibling__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_nextSibling__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_nextSibling__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_parentNode__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_parentNode__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_parentNode__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_9_parentNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_parentNode__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_parentNode__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_parentNode__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_previousNode__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_previousNode__Lorg_w3c_dom_RNode__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void NodeIteratorWalker_previousNode__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_previousNode__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_6_previousNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_previousNode__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_previousNode__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_previousNode__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  NodeIteratorWalker_previousNode__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_previousSibling__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_previousSibling__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_previousSibling__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_c_previousSibling", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_previousSibling__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_previousSibling__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_previousSibling__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_arg_curNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "curNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_args[] = 
{
  &NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_arg_curNode,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void NodeIteratorWalker_setCurrentNode_INLorg_w3c_dom_RNode__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo NodeIteratorWalker_method_setCurrentNode_INLorg_w3c_dom_RNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurrentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setCurrentNode", // alternative name of method
  -1, // altlabelHashCode
  NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_args, // the arguments
  0, //arguments count
  NodeIteratorWalker_methods_setCurrentNode_INLorg_w3c_dom_RNode__V_exceptions, // the declared exceptions
  NodeIteratorWalker_MetainfoWrapper::NodeIteratorWalker_method_setCurrentNode_INLorg_w3c_dom_RNode__V_dispatch, // invoke this method
  NodeIteratorWalker_setCurrentNode_INLorg_w3c_dom_RNode__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeIteratorWalker_methods[] = 
{
  &NodeIteratorWalker_method_GetClass__L_acdk_lang_RClass_,
  &NodeIteratorWalker_method_NodeIteratorWalker_INLorg_w3c_dom_RNode_INLorg_w3c_dom_traversal_RNodeFilter_IZZ_LRNodeIteratorWalker_,
  &NodeIteratorWalker_method__noSkip_INLorg_w3c_dom_RNode__Z,
  &NodeIteratorWalker_method_detach__V,
  &NodeIteratorWalker_method_firstChild__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_getCurrentNode__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_getExpandEntityReferences__Z,
  &NodeIteratorWalker_method_getFilter__Lorg_w3c_dom_traversal_RNodeFilter_,
  &NodeIteratorWalker_method_getRoot__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_getWhatToShow__I,
  &NodeIteratorWalker_method_lastChild__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_nextNode__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_nextSibling__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_parentNode__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_previousNode__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_previousSibling__Lorg_w3c_dom_RNode_,
  &NodeIteratorWalker_method_setCurrentNode_INLorg_w3c_dom_RNode__V,
  0
};


struct NodeIteratorWalker_MetaInfoInitializer
{  NodeIteratorWalker_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeIteratorWalker::clazzInfo();
    ci->fields =  _NodeIteratorWalker_fields;
    ci->methods =  _NodeIteratorWalker_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeIteratorWalker_MetaInfoInitializer NodeIteratorWalker_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 


//static
::acdk::lang::RObject
NodeUtil_create_array(int length)
{
  return new ObjectArrayImpl<RNodeUtil>(length);
}

//static
::acdk::lang::RObject
NodeUtil_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NodeUtil_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::selectNode((org::w3c::dom::RNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::selectNode((org::w3c::dom::RDocument)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::selectNodes((org::w3c::dom::RNode)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::selectNodes((org::w3c::dom::RDocument)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NodeUtil_method_toXml_INLorg_w3c_dom_RNode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NodeUtil::toXml((org::w3c::dom::RNode)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _NodeUtil_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NodeUtil_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__args[] = 
{
  &NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__arg_node,
  &NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_2_selectNode", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeUtil_methods_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__args[] = 
{
  &NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__arg_doc,
  &NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_3_selectNode", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  NodeUtil_methods_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__args[] = 
{
  &NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__arg_node,
  &NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNodeList::clazzInfo(), // return type
  "_0_selectNodes", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__args, // the arguments
  0, //arguments count
  NodeUtil_methods_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__args[] = 
{
  &NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__arg_doc,
  &NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNodeList::clazzInfo(), // return type
  "_1_selectNodes", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__args, // the arguments
  0, //arguments count
  NodeUtil_methods_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__args[] = 
{
  &NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NodeUtil_method_toXml_INLorg_w3c_dom_RNode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toXml", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toXml", // alternative name of method
  -1, // altlabelHashCode
  NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__args, // the arguments
  0, //arguments count
  NodeUtil_methods_toXml_INLorg_w3c_dom_RNode__LRString__exceptions, // the declared exceptions
  NodeUtil_MetainfoWrapper::NodeUtil_method_toXml_INLorg_w3c_dom_RNode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NodeUtil_methods[] = 
{
  &NodeUtil_method_GetClass__L_acdk_lang_RClass_,
  &NodeUtil_method_selectNode_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNode_,
  &NodeUtil_method_selectNode_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNode_,
  &NodeUtil_method_selectNodes_INLorg_w3c_dom_RNode_INLRString__Lorg_w3c_dom_RNodeList_,
  &NodeUtil_method_selectNodes_INLorg_w3c_dom_RDocument_INLRString__Lorg_w3c_dom_RNodeList_,
  &NodeUtil_method_toXml_INLorg_w3c_dom_RNode__LRString_,
  0
};


struct NodeUtil_MetaInfoInitializer
{  NodeUtil_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NodeUtil::clazzInfo();
    ci->fields =  _NodeUtil_fields;
    ci->methods =  _NodeUtil_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NodeUtil_MetaInfoInitializer NodeUtil_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLAttr_create_array(int length)
{
  return new ObjectArrayImpl<RXMLAttr>(length);
}

//static
::acdk::lang::RObject
XMLAttr_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLAttr_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLAttr::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_XMLAttr_INLRString_ZINLRString__LRXMLAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLAttr((RString)args[0].getObjectVar(), args[1].getBoolVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_XMLAttr_INLRString__LRXMLAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLAttr((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_XMLAttr_INLRString_Z_LRXMLAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLAttr((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLAttr::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_getSpecified__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLAttr::getSpecified();
    else
      ret = This->getSpecified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_getValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLAttr::getValue();
    else
        ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLAttr::setValue((RString)args[0].getObjectVar());
    else
        This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLAttr_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLAttr::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLAttr_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLAttr_fields__specified_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_specified, flags);
    else
      This->_specified = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLAttr_fields__value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLAttr* This = dmi_cast<XMLAttr>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_value, flags);
    else
      This->_value = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLAttr_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  XMLAttr_MetainfoWrapper::XMLAttr_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLAttr_fields__specified = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_specified", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  XMLAttr_MetainfoWrapper::XMLAttr_fields__specified_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLAttr_fields__value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  XMLAttr_MetainfoWrapper::XMLAttr_fields__value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLAttr_fields[] = 
{
  &XMLAttr_fields__name,
  &XMLAttr_fields__specified,
  &XMLAttr_fields__value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLAttr_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_specified = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "specified", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__args[] = 
{
  &XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_name,
  &XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_specified,
  &XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_XMLAttr_INLRString_ZINLRString__LRXMLAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLAttr::clazzInfo(), // return type
  "_0_XMLAttr", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__args, // the arguments
  0, //arguments count
  XMLAttr_methods_XMLAttr_INLRString_ZINLRString__LRXMLAttr__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_XMLAttr_INLRString_ZINLRString__LRXMLAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__args[] = 
{
  &XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_XMLAttr_INLRString__LRXMLAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLAttr::clazzInfo(), // return type
  "_1_XMLAttr", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__args, // the arguments
  0, //arguments count
  XMLAttr_methods_XMLAttr_INLRString__LRXMLAttr__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_XMLAttr_INLRString__LRXMLAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__arg_specified = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "specified", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__args[] = 
{
  &XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__arg_name,
  &XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__arg_specified,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_XMLAttr_INLRString_Z_LRXMLAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLAttr::clazzInfo(), // return type
  "_2_XMLAttr", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__args, // the arguments
  0, //arguments count
  XMLAttr_methods_XMLAttr_INLRString_Z_LRXMLAttr__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_XMLAttr_INLRString_Z_LRXMLAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getName", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_getName__LRString__args, // the arguments
  0, //arguments count
  XMLAttr_methods_getName__LRString__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_getSpecified__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_getSpecified__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_getSpecified__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSpecified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getSpecified", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_getSpecified__Z_args, // the arguments
  0, //arguments count
  XMLAttr_methods_getSpecified__Z_exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_getSpecified__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_getValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_getValue__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_getValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getValue", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_getValue__LRString__args, // the arguments
  0, //arguments count
  XMLAttr_methods_getValue__LRString__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_getValue__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLAttr_methods_setValue_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_setValue_INLRString__V_args[] = 
{
  &XMLAttr_methods_setValue_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setValue", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  XMLAttr_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLAttr_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLAttr_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  XMLAttr_methods_toString__LRString__args, // the arguments
  0, //arguments count
  XMLAttr_methods_toString__LRString__exceptions, // the declared exceptions
  XMLAttr_MetainfoWrapper::XMLAttr_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLAttr_methods[] = 
{
  &XMLAttr_method_GetClass__L_acdk_lang_RClass_,
  &XMLAttr_method_XMLAttr_INLRString_ZINLRString__LRXMLAttr_,
  &XMLAttr_method_XMLAttr_INLRString__LRXMLAttr_,
  &XMLAttr_method_XMLAttr_INLRString_Z_LRXMLAttr_,
  &XMLAttr_method_getName__LRString_,
  &XMLAttr_method_getSpecified__Z,
  &XMLAttr_method_getValue__LRString_,
  &XMLAttr_method_setValue_INLRString__V,
  &XMLAttr_method_toString__LRString_,
  0
};


struct XMLAttr_MetaInfoInitializer
{  XMLAttr_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLAttr::clazzInfo();
    ci->fields =  _XMLAttr_fields;
    ci->methods =  _XMLAttr_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLAttr_MetaInfoInitializer XMLAttr_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLCDATASection_create_array(int length)
{
  return new ObjectArrayImpl<RXMLCDATASection>(length);
}

//static
::acdk::lang::RObject
XMLCDATASection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLCDATASection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCDATASection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLCDATASection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCDATASection_method_XMLCDATASection_INLRString__LRXMLCDATASection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLCDATASection((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLCDATASection_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCDATASection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCDATASection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCDATASection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLCDATASection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLCDATASection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLCDATASection_MetainfoWrapper::XMLCDATASection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__args[] = 
{
  &XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCDATASection_method_XMLCDATASection_INLRString__LRXMLCDATASection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLCDATASection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLCDATASection::clazzInfo(), // return type
  "_0_XMLCDATASection", // alternative name of method
  -1, // altlabelHashCode
  XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__args, // the arguments
  0, //arguments count
  XMLCDATASection_methods_XMLCDATASection_INLRString__LRXMLCDATASection__exceptions, // the declared exceptions
  XMLCDATASection_MetainfoWrapper::XMLCDATASection_method_XMLCDATASection_INLRString__LRXMLCDATASection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLCDATASection_methods[] = 
{
  &XMLCDATASection_method_GetClass__L_acdk_lang_RClass_,
  &XMLCDATASection_method_XMLCDATASection_INLRString__LRXMLCDATASection_,
  0
};


struct XMLCDATASection_MetaInfoInitializer
{  XMLCDATASection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLCDATASection::clazzInfo();
    ci->fields =  _XMLCDATASection_fields;
    ci->methods =  _XMLCDATASection_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLCDATASection_MetaInfoInitializer XMLCDATASection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLCharacterData_create_array(int length)
{
  return new ObjectArrayImpl<RXMLCharacterData>(length);
}

//static
::acdk::lang::RObject
XMLCharacterData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLCharacterData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLCharacterData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_XMLCharacterData_INLRString_S_LRXMLCharacterData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLCharacterData((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_appendData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLCharacterData::appendData((RString)args[0].getObjectVar());
    else
        This->appendData((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_deleteData_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLCharacterData::deleteData(args[0].getIntVar(), args[1].getIntVar());
    else
        This->deleteData(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_getData__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLCharacterData::getData();
    else
        ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLCharacterData::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_getNodeValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLCharacterData::getNodeValue();
    else
        ret = (::acdk::lang::RObject)This->getNodeValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_insertData_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLCharacterData::insertData(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->insertData(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_replaceData_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLCharacterData::replaceData(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->replaceData(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_setData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLCharacterData::setData((RString)args[0].getObjectVar());
    else
        This->setData((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_subStringData_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLCharacterData::subStringData(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->subStringData(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLCharacterData_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLCharacterData::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLCharacterData_fields__data_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLCharacterData* This = dmi_cast<XMLCharacterData>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_data, flags);
    else
      This->_data = (RStringBuffer)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLCharacterData_fields__data = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_data", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(),
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_fields__data_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLCharacterData_fields[] = 
{
  &XMLCharacterData_fields__data,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__args[] = 
{
  &XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__arg_str,
  &XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_XMLCharacterData_INLRString_S_LRXMLCharacterData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLCharacterData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLCharacterData::clazzInfo(), // return type
  "_0_XMLCharacterData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_XMLCharacterData_INLRString_S_LRXMLCharacterData__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_XMLCharacterData_INLRString_S_LRXMLCharacterData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_appendData_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_appendData_INLRString__V_args[] = 
{
  &XMLCharacterData_methods_appendData_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_appendData_INLRString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_appendData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_appendData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_appendData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_appendData_INLRString__V_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_appendData_INLRString__V_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_appendData_INLRString__V_dispatch, // invoke this method
  XMLCharacterData_appendData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_deleteData_II_V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_deleteData_II_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_deleteData_II_V_args[] = 
{
  &XMLCharacterData_methods_deleteData_II_V_arg_start,
  &XMLCharacterData_methods_deleteData_II_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_deleteData_II_V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_deleteData_II_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_deleteData_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_deleteData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_deleteData_II_V_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_deleteData_II_V_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_deleteData_II_V_dispatch, // invoke this method
  XMLCharacterData_deleteData_II_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_getData__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_getData__LRString__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_getData__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_getData__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_getData__LRString__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_getData__LRString__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_getData__LRString__dispatch, // invoke this method
  XMLCharacterData_getData__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getLength", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_getLength__I_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_getLength__I_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_getNodeValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_getNodeValue__LRString__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_getNodeValue__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_getNodeValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getNodeValue", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_getNodeValue__LRString__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_getNodeValue__LRString__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_getNodeValue__LRString__dispatch, // invoke this method
  XMLCharacterData_getNodeValue__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_insertData_IINLRString__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_insertData_IINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_insertData_IINLRString__V_args[] = 
{
  &XMLCharacterData_methods_insertData_IINLRString__V_arg_i,
  &XMLCharacterData_methods_insertData_IINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_insertData_IINLRString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_insertData_IINLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_insertData_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_insertData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_insertData_IINLRString__V_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_insertData_IINLRString__V_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_insertData_IINLRString__V_dispatch, // invoke this method
  XMLCharacterData_insertData_IINLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_replaceData_IIINLRString__V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_replaceData_IIINLRString__V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_replaceData_IIINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_replaceData_IIINLRString__V_args[] = 
{
  &XMLCharacterData_methods_replaceData_IIINLRString__V_arg_start,
  &XMLCharacterData_methods_replaceData_IIINLRString__V_arg_length,
  &XMLCharacterData_methods_replaceData_IIINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_replaceData_IIINLRString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_replaceData_IIINLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_replaceData_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_replaceData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_replaceData_IIINLRString__V_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_replaceData_IIINLRString__V_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_replaceData_IIINLRString__V_dispatch, // invoke this method
  XMLCharacterData_replaceData_IIINLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_setData_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_setData_INLRString__V_args[] = 
{
  &XMLCharacterData_methods_setData_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_setData_INLRString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_setData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_setData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_setData_INLRString__V_args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_setData_INLRString__V_exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_setData_INLRString__V_dispatch, // invoke this method
  XMLCharacterData_setData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_subStringData_II_LRString__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLCharacterData_methods_subStringData_II_LRString__arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_subStringData_II_LRString__args[] = 
{
  &XMLCharacterData_methods_subStringData_II_LRString__arg_start,
  &XMLCharacterData_methods_subStringData_II_LRString__arg_count,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_subStringData_II_LRString__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLCharacterData_subStringData_II_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_subStringData_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subStringData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_subStringData", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_subStringData_II_LRString__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_subStringData_II_LRString__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_subStringData_II_LRString__dispatch, // invoke this method
  XMLCharacterData_subStringData_II_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLCharacterData_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLCharacterData_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  XMLCharacterData_methods_toString__LRString__args, // the arguments
  0, //arguments count
  XMLCharacterData_methods_toString__LRString__exceptions, // the declared exceptions
  XMLCharacterData_MetainfoWrapper::XMLCharacterData_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLCharacterData_methods[] = 
{
  &XMLCharacterData_method_GetClass__L_acdk_lang_RClass_,
  &XMLCharacterData_method_XMLCharacterData_INLRString_S_LRXMLCharacterData_,
  &XMLCharacterData_method_appendData_INLRString__V,
  &XMLCharacterData_method_deleteData_II_V,
  &XMLCharacterData_method_getData__LRString_,
  &XMLCharacterData_method_getLength__I,
  &XMLCharacterData_method_getNodeValue__LRString_,
  &XMLCharacterData_method_insertData_IINLRString__V,
  &XMLCharacterData_method_replaceData_IIINLRString__V,
  &XMLCharacterData_method_setData_INLRString__V,
  &XMLCharacterData_method_subStringData_II_LRString_,
  &XMLCharacterData_method_toString__LRString_,
  0
};


struct XMLCharacterData_MetaInfoInitializer
{  XMLCharacterData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLCharacterData::clazzInfo();
    ci->fields =  _XMLCharacterData_fields;
    ci->methods =  _XMLCharacterData_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLCharacterData_MetaInfoInitializer XMLCharacterData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLComment_create_array(int length)
{
  return new ObjectArrayImpl<RXMLComment>(length);
}

//static
::acdk::lang::RObject
XMLComment_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLComment_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLComment_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLComment::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLComment_method_XMLComment_INLRString__LRXMLComment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLComment_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLComment* This = dmi_cast<XMLComment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLComment::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLComment_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLComment_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLComment_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLComment_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLComment_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLComment_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLComment_MetainfoWrapper::XMLComment_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLComment_methods_XMLComment_INLRString__LRXMLComment__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLComment_methods_XMLComment_INLRString__LRXMLComment__args[] = 
{
  &XMLComment_methods_XMLComment_INLRString__LRXMLComment__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLComment_methods_XMLComment_INLRString__LRXMLComment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLComment_method_XMLComment_INLRString__LRXMLComment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLComment::clazzInfo(), // return type
  "_0_XMLComment", // alternative name of method
  -1, // altlabelHashCode
  XMLComment_methods_XMLComment_INLRString__LRXMLComment__args, // the arguments
  0, //arguments count
  XMLComment_methods_XMLComment_INLRString__LRXMLComment__exceptions, // the declared exceptions
  XMLComment_MetainfoWrapper::XMLComment_method_XMLComment_INLRString__LRXMLComment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLComment_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLComment_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLComment_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  XMLComment_methods_toString__LRString__args, // the arguments
  0, //arguments count
  XMLComment_methods_toString__LRString__exceptions, // the declared exceptions
  XMLComment_MetainfoWrapper::XMLComment_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLComment_methods[] = 
{
  &XMLComment_method_GetClass__L_acdk_lang_RClass_,
  &XMLComment_method_XMLComment_INLRString__LRXMLComment_,
  &XMLComment_method_toString__LRString_,
  0
};


struct XMLComment_MetaInfoInitializer
{  XMLComment_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLComment::clazzInfo();
    ci->fields =  _XMLComment_fields;
    ci->methods =  _XMLComment_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLComment_MetaInfoInitializer XMLComment_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 


//static
::acdk::lang::RObject
XMLDocument_create_array(int length)
{
  return new ObjectArrayImpl<RXMLDocument>(length);
}

//static
::acdk::lang::RObject
XMLDocument_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLDocument_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLDocument::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_XMLDocument__LRXMLDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createAttribute_INLRString__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createAttribute((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createCDATASection_INLRString__LRCDATASection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createCDATASection((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createCDATASection((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createComment_INLRString__LRComment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createComment((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createComment((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createDocument((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDocumentType)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createDocument((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RDocumentType)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createDocumentFragment();
    else
        ret = (::acdk::lang::RObject)This->createDocumentFragment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createElement_INLRString__Lorg_w3c_dom_RElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createElement((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createElement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createEntityReference_INLRString__LREntityReference__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createEntityReference((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createEntityReference((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createProcessingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createProcessingInstruction((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_createTextNode_INLRString__LRText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::createTextNode((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createTextNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_getDoctype__L_org_w3c_dom_RDocumentType__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::getDoctype();
    else
        ret = (::acdk::lang::RObject)This->getDoctype();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_getDocumentElement__L_org_w3c_dom_RElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::getDocumentElement();
    else
        ret = (::acdk::lang::RObject)This->getDocumentElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_getElementsByTagName_INLRString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::getElementsByTagName((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getElementsByTagName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_getImplementation__LRDOMImplementation__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::getImplementation();
    else
        ret = (::acdk::lang::RObject)This->getImplementation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_getOwnerDocument__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::getOwnerDocument();
    else
        ret = (::acdk::lang::RObject)This->getOwnerDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_hasFeature_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLDocument::hasFeature((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->hasFeature((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_setDocumentRoot_INLRXMLElement__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLDocument::setDocumentRoot((RXMLElement)args[0].getObjectVar());
    else
        This->setDocumentRoot((RXMLElement)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLDocument_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLDocument* This = dmi_cast<XMLDocument>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLDocument::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLDocument_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLDocument_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_XMLDocument__LRXMLDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_XMLDocument__LRXMLDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_XMLDocument__LRXMLDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLDocument::clazzInfo(), // return type
  "_0_XMLDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_XMLDocument__LRXMLDocument__args, // the arguments
  0, //arguments count
  XMLDocument_methods_XMLDocument__LRXMLDocument__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_XMLDocument__LRXMLDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createAttribute_INLRString__LRAttr__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createAttribute_INLRString__LRAttr__args[] = 
{
  &XMLDocument_methods_createAttribute_INLRString__LRAttr__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createAttribute_INLRString__LRAttr__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLDocument_createAttribute_INLRString__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createAttribute_INLRString__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_d_createAttribute", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createAttribute_INLRString__LRAttr__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createAttribute_INLRString__LRAttr__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createAttribute_INLRString__LRAttr__dispatch, // invoke this method
  XMLDocument_createAttribute_INLRString__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__args[] = 
{
  &XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLDocument_createCDATASection_INLRString__LRCDATASection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createCDATASection_INLRString__LRCDATASection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createCDATASection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCDATASection::clazzInfo(), // return type
  "_b_createCDATASection", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createCDATASection_INLRString__LRCDATASection__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createCDATASection_INLRString__LRCDATASection__dispatch, // invoke this method
  XMLDocument_createCDATASection_INLRString__LRCDATASection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createComment_INLRString__LRComment__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createComment_INLRString__LRComment__args[] = 
{
  &XMLDocument_methods_createComment_INLRString__LRComment__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createComment_INLRString__LRComment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createComment_INLRString__LRComment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComment::clazzInfo(), // return type
  "_a_createComment", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createComment_INLRString__LRComment__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createComment_INLRString__LRComment__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createComment_INLRString__LRComment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_namespaceURI = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namespaceURI", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_qualifiedName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "qualifiedName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_doctype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doctype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocumentType::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__args[] = 
{
  &XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_namespaceURI,
  &XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_qualifiedName,
  &XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__arg_doctype,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_h_createDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createDocumentFragment__L_org_w3c_dom_RDocumentFragment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDocumentFragment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::w3c::dom::RDocumentFragment::clazzInfo(), // return type
  "_8_createDocumentFragment", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createDocumentFragment__L_org_w3c_dom_RDocumentFragment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__args[] = 
{
  &XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLDocument_createElement_INLRString__Lorg_w3c_dom_RElement__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createElement_INLRString__Lorg_w3c_dom_RElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RElement::clazzInfo(), // return type
  "_7_createElement", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createElement_INLRString__Lorg_w3c_dom_RElement__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createElement_INLRString__Lorg_w3c_dom_RElement__dispatch, // invoke this method
  XMLDocument_createElement_INLRString__Lorg_w3c_dom_RElement__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createEntityReference_INLRString__LREntityReference__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createEntityReference_INLRString__LREntityReference__args[] = 
{
  &XMLDocument_methods_createEntityReference_INLRString__LREntityReference__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createEntityReference_INLRString__LREntityReference__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLDocument_createEntityReference_INLRString__LREntityReference__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createEntityReference_INLRString__LREntityReference_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createEntityReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REntityReference::clazzInfo(), // return type
  "_e_createEntityReference", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createEntityReference_INLRString__LREntityReference__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createEntityReference_INLRString__LREntityReference__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createEntityReference_INLRString__LREntityReference__dispatch, // invoke this method
  XMLDocument_createEntityReference_INLRString__LREntityReference__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__args[] = 
{
  &XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s,
  &XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLDocument_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createProcessingInstruction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProcessingInstruction::clazzInfo(), // return type
  "_c_createProcessingInstruction", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__dispatch, // invoke this method
  XMLDocument_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_createTextNode_INLRString__LRText__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_createTextNode_INLRString__LRText__args[] = 
{
  &XMLDocument_methods_createTextNode_INLRString__LRText__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_createTextNode_INLRString__LRText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_createTextNode_INLRString__LRText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTextNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RText::clazzInfo(), // return type
  "_9_createTextNode", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_createTextNode_INLRString__LRText__args, // the arguments
  0, //arguments count
  XMLDocument_methods_createTextNode_INLRString__LRText__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_createTextNode_INLRString__LRText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_getDoctype__L_org_w3c_dom_RDocumentType__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_getDoctype__L_org_w3c_dom_RDocumentType__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_getDoctype__L_org_w3c_dom_RDocumentType_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoctype", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::w3c::dom::RDocumentType::clazzInfo(), // return type
  "_3_getDoctype", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_getDoctype__L_org_w3c_dom_RDocumentType__args, // the arguments
  0, //arguments count
  XMLDocument_methods_getDoctype__L_org_w3c_dom_RDocumentType__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_getDoctype__L_org_w3c_dom_RDocumentType__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_getDocumentElement__L_org_w3c_dom_RElement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_getDocumentElement__L_org_w3c_dom_RElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_getDocumentElement__L_org_w3c_dom_RElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDocumentElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::org::w3c::dom::RElement::clazzInfo(), // return type
  "_5_getDocumentElement", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_getDocumentElement__L_org_w3c_dom_RElement__args, // the arguments
  0, //arguments count
  XMLDocument_methods_getDocumentElement__L_org_w3c_dom_RElement__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_getDocumentElement__L_org_w3c_dom_RElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__args[] = 
{
  &XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_getElementsByTagName_INLRString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElementsByTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_f_getElementsByTagName", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__args, // the arguments
  0, //arguments count
  XMLDocument_methods_getElementsByTagName_INLRString__LRNodeList__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_getElementsByTagName_INLRString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_getImplementation__LRDOMImplementation__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_getImplementation__LRDOMImplementation__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_getImplementation__LRDOMImplementation_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImplementation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDOMImplementation::clazzInfo(), // return type
  "_4_getImplementation", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_getImplementation__LRDOMImplementation__args, // the arguments
  0, //arguments count
  XMLDocument_methods_getImplementation__LRDOMImplementation__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_getImplementation__LRDOMImplementation__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_getOwnerDocument__LRDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_getOwnerDocument__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_getOwnerDocument__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_2_getOwnerDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_getOwnerDocument__LRDocument__args, // the arguments
  0, //arguments count
  XMLDocument_methods_getOwnerDocument__LRDocument__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_getOwnerDocument__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_hasFeature_INLRString_INLRString__Z_arg_feature = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "feature", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_hasFeature_INLRString_INLRString__Z_arg_version = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "version", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_hasFeature_INLRString_INLRString__Z_args[] = 
{
  &XMLDocument_methods_hasFeature_INLRString_INLRString__Z_arg_feature,
  &XMLDocument_methods_hasFeature_INLRString_INLRString__Z_arg_version,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_hasFeature_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_hasFeature_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFeature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_hasFeature", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_hasFeature_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  XMLDocument_methods_hasFeature_INLRString_INLRString__Z_exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_hasFeature_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_arg_el = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "el", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLElement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_args[] = 
{
  &XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_arg_el,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_setDocumentRoot_INLRXMLElement__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDocumentRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setDocumentRoot", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_args, // the arguments
  0, //arguments count
  XMLDocument_methods_setDocumentRoot_INLRXMLElement__V_exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_setDocumentRoot_INLRXMLElement__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLDocument_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLDocument_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  XMLDocument_methods_toString__LRString__args, // the arguments
  0, //arguments count
  XMLDocument_methods_toString__LRString__exceptions, // the declared exceptions
  XMLDocument_MetainfoWrapper::XMLDocument_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLDocument_methods[] = 
{
  &XMLDocument_method_GetClass__L_acdk_lang_RClass_,
  &XMLDocument_method_XMLDocument__LRXMLDocument_,
  &XMLDocument_method_createAttribute_INLRString__LRAttr_,
  &XMLDocument_method_createCDATASection_INLRString__LRCDATASection_,
  &XMLDocument_method_createComment_INLRString__LRComment_,
  &XMLDocument_method_createDocument_INLRString_INLRString_INLRDocumentType__LRDocument_,
  &XMLDocument_method_createDocumentFragment__L_org_w3c_dom_RDocumentFragment_,
  &XMLDocument_method_createElement_INLRString__Lorg_w3c_dom_RElement_,
  &XMLDocument_method_createEntityReference_INLRString__LREntityReference_,
  &XMLDocument_method_createProcessingInstruction_INLRString_INLRString__LRProcessingInstruction_,
  &XMLDocument_method_createTextNode_INLRString__LRText_,
  &XMLDocument_method_getDoctype__L_org_w3c_dom_RDocumentType_,
  &XMLDocument_method_getDocumentElement__L_org_w3c_dom_RElement_,
  &XMLDocument_method_getElementsByTagName_INLRString__LRNodeList_,
  &XMLDocument_method_getImplementation__LRDOMImplementation_,
  &XMLDocument_method_getOwnerDocument__LRDocument_,
  &XMLDocument_method_hasFeature_INLRString_INLRString__Z,
  &XMLDocument_method_setDocumentRoot_INLRXMLElement__V,
  &XMLDocument_method_toString__LRString_,
  0
};


struct XMLDocument_MetaInfoInitializer
{  XMLDocument_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLDocument::clazzInfo();
    ci->fields =  _XMLDocument_fields;
    ci->methods =  _XMLDocument_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLDocument_MetaInfoInitializer XMLDocument_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 


//static
::acdk::lang::RObject
XMLElement_create_array(int length)
{
  return new ObjectArrayImpl<RXMLElement>(length);
}

//static
::acdk::lang::RObject
XMLElement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLElement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLElement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_XMLElement_INLRString__LRXMLElement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLElement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method__getAttr_INLRString__LRXMLAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::_getAttr((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_getAttr((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_attribute_I_LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::attribute(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->attribute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_attributeCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLElement::attributeCount();
    else
      ret = This->attributeCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getAttribues__LRXMLAttrArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getAttribues();
    else
        ret = (::acdk::lang::RObject)This->getAttribues();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getAttribute_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getAttribute((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getAttributeNode_INLRString__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getAttributeNode((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAttributeNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getAttributes__LRNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getAttributes();
    else
        ret = (::acdk::lang::RObject)This->getAttributes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getElementsByTagName_INLRString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getElementsByTagName((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getElementsByTagName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getOwnerDocument__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getOwnerDocument();
    else
        ret = (::acdk::lang::RObject)This->getOwnerDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getOwnerDocumentRef__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->XMLElement::getOwnerDocumentRef());
    else
        ret = outOf(This->getOwnerDocumentRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_getTagName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::getTagName();
    else
        ret = (::acdk::lang::RObject)This->getTagName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_normalize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLElement::normalize();
    else
        This->normalize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_removeAttribute_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLElement::removeAttribute((RString)args[0].getObjectVar());
    else
        This->removeAttribute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_removeAttributeNode_INLRAttr__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::removeAttributeNode((RAttr)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->removeAttributeNode((RAttr)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_setAttribute_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLElement::setAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->setAttribute((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_setAttributeNode_INLRAttr__LRAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::setAttributeNode((RAttr)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->setAttributeNode((RAttr)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_setOwnerDocument_INLRDocument__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLElement::setOwnerDocument((RDocument)args[0].getObjectVar());
    else
        This->setOwnerDocument((RDocument)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLElement_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLElement::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLElement_fields__attributes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_attributes, flags);
    else
      This->_attributes = (RXMLAttrArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLElement_fields__document_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLElement* This = dmi_cast<XMLElement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_document, flags);
    else
      This->_document = (RDocument)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLElement_fields__attributes = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_attributes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLAttrArray::clazzInfo(),
  XMLElement_MetainfoWrapper::XMLElement_fields__attributes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLElement_fields__document = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_document", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(),
  XMLElement_MetainfoWrapper::XMLElement_fields__document_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLElement_fields[] = 
{
  &XMLElement_fields__attributes,
  &XMLElement_fields__document,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLElement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_XMLElement_INLRString__LRXMLElement__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_XMLElement_INLRString__LRXMLElement__args[] = 
{
  &XMLElement_methods_XMLElement_INLRString__LRXMLElement__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_XMLElement_INLRString__LRXMLElement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_XMLElement_INLRString__LRXMLElement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLElement::clazzInfo(), // return type
  "_0_XMLElement", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_XMLElement_INLRString__LRXMLElement__args, // the arguments
  0, //arguments count
  XMLElement_methods_XMLElement_INLRString__LRXMLElement__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_XMLElement_INLRString__LRXMLElement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods__getAttr_INLRString__LRXMLAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods__getAttr_INLRString__LRXMLAttr__args[] = 
{
  &XMLElement_methods__getAttr_INLRString__LRXMLAttr__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods__getAttr_INLRString__LRXMLAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method__getAttr_INLRString__LRXMLAttr_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLAttr::clazzInfo(), // return type
  "_i__getAttr", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods__getAttr_INLRString__LRXMLAttr__args, // the arguments
  0, //arguments count
  XMLElement_methods__getAttr_INLRString__LRXMLAttr__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method__getAttr_INLRString__LRXMLAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_attribute_I_LRAttr__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_attribute_I_LRAttr__args[] = 
{
  &XMLElement_methods_attribute_I_LRAttr__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_attribute_I_LRAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_attribute_I_LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_h_attribute", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_attribute_I_LRAttr__args, // the arguments
  0, //arguments count
  XMLElement_methods_attribute_I_LRAttr__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_attribute_I_LRAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_attributeCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_attributeCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_attributeCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attributeCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_attributeCount", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_attributeCount__I_args, // the arguments
  0, //arguments count
  XMLElement_methods_attributeCount__I_exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_attributeCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getAttribues__LRXMLAttrArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getAttribues__LRXMLAttrArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getAttribues__LRXMLAttrArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttribues", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLAttrArray::clazzInfo(), // return type
  "_f_getAttribues", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getAttribues__LRXMLAttrArray__args, // the arguments
  0, //arguments count
  XMLElement_methods_getAttribues__LRXMLAttrArray__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getAttribues__LRXMLAttrArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_getAttribute_INLRString__LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getAttribute_INLRString__LRString__args[] = 
{
  &XMLElement_methods_getAttribute_INLRString__LRString__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getAttribute_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getAttribute_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getAttribute", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getAttribute_INLRString__LRString__args, // the arguments
  0, //arguments count
  XMLElement_methods_getAttribute_INLRString__LRString__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getAttribute_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_getAttributeNode_INLRString__LRAttr__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getAttributeNode_INLRString__LRAttr__args[] = 
{
  &XMLElement_methods_getAttributeNode_INLRString__LRAttr__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getAttributeNode_INLRString__LRAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getAttributeNode_INLRString__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_a_getAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getAttributeNode_INLRString__LRAttr__args, // the arguments
  0, //arguments count
  XMLElement_methods_getAttributeNode_INLRString__LRAttr__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getAttributeNode_INLRString__LRAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getAttributes__LRNamedNodeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getAttributes__LRNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getAttributes__LRNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedNodeMap::clazzInfo(), // return type
  "_6_getAttributes", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getAttributes__LRNamedNodeMap__args, // the arguments
  0, //arguments count
  XMLElement_methods_getAttributes__LRNamedNodeMap__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getAttributes__LRNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__args[] = 
{
  &XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getElementsByTagName_INLRString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getElementsByTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_d_getElementsByTagName", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__args, // the arguments
  0, //arguments count
  XMLElement_methods_getElementsByTagName_INLRString__LRNodeList__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getElementsByTagName_INLRString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getOwnerDocument__LRDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getOwnerDocument__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getOwnerDocument__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_2_getOwnerDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getOwnerDocument__LRDocument__args, // the arguments
  0, //arguments count
  XMLElement_methods_getOwnerDocument__LRDocument__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getOwnerDocument__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getOwnerDocumentRef__LRDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getOwnerDocumentRef__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getOwnerDocumentRef__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerDocumentRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_3_getOwnerDocumentRef", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getOwnerDocumentRef__LRDocument__args, // the arguments
  0, //arguments count
  XMLElement_methods_getOwnerDocumentRef__LRDocument__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getOwnerDocumentRef__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_getTagName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_getTagName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_getTagName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTagName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getTagName", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_getTagName__LRString__args, // the arguments
  0, //arguments count
  XMLElement_methods_getTagName__LRString__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_getTagName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_normalize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_normalize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_normalize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "normalize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_normalize", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_normalize__V_args, // the arguments
  0, //arguments count
  XMLElement_methods_normalize__V_exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_normalize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_removeAttribute_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_removeAttribute_INLRString__V_args[] = 
{
  &XMLElement_methods_removeAttribute_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_removeAttribute_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLElement_removeAttribute_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_removeAttribute_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_removeAttribute", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_removeAttribute_INLRString__V_args, // the arguments
  0, //arguments count
  XMLElement_methods_removeAttribute_INLRString__V_exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_removeAttribute_INLRString__V_dispatch, // invoke this method
  XMLElement_removeAttribute_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__arg_oldAttr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oldAttr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__args[] = 
{
  &XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__arg_oldAttr,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLElement_removeAttributeNode_INLRAttr__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_removeAttributeNode_INLRAttr__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_c_removeAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__args, // the arguments
  0, //arguments count
  XMLElement_methods_removeAttributeNode_INLRAttr__LRAttr__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_removeAttributeNode_INLRAttr__LRAttr__dispatch, // invoke this method
  XMLElement_removeAttributeNode_INLRAttr__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_setAttribute_INLRString_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_setAttribute_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_setAttribute_INLRString_INLRString__V_args[] = 
{
  &XMLElement_methods_setAttribute_INLRString_INLRString__V_arg_name,
  &XMLElement_methods_setAttribute_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_setAttribute_INLRString_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLElement_setAttribute_INLRString_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_setAttribute_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setAttribute", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_setAttribute_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  XMLElement_methods_setAttribute_INLRString_INLRString__V_exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_setAttribute_INLRString_INLRString__V_dispatch, // invoke this method
  XMLElement_setAttribute_INLRString_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__arg_newAttr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newAttr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__args[] = 
{
  &XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__arg_newAttr,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLElement_setAttributeNode_INLRAttr__LRAttr__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_setAttributeNode_INLRAttr__LRAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAttributeNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAttr::clazzInfo(), // return type
  "_b_setAttributeNode", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__args, // the arguments
  0, //arguments count
  XMLElement_methods_setAttributeNode_INLRAttr__LRAttr__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_setAttributeNode_INLRAttr__LRAttr__dispatch, // invoke this method
  XMLElement_setAttributeNode_INLRAttr__LRAttr__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLElement_methods_setOwnerDocument_INLRDocument__V_arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_setOwnerDocument_INLRDocument__V_args[] = 
{
  &XMLElement_methods_setOwnerDocument_INLRDocument__V_arg_doc,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_setOwnerDocument_INLRDocument__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_setOwnerDocument_INLRDocument__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOwnerDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setOwnerDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_setOwnerDocument_INLRDocument__V_args, // the arguments
  0, //arguments count
  XMLElement_methods_setOwnerDocument_INLRDocument__V_exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_setOwnerDocument_INLRDocument__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLElement_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLElement_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  XMLElement_methods_toString__LRString__args, // the arguments
  0, //arguments count
  XMLElement_methods_toString__LRString__exceptions, // the declared exceptions
  XMLElement_MetainfoWrapper::XMLElement_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLElement_methods[] = 
{
  &XMLElement_method_GetClass__L_acdk_lang_RClass_,
  &XMLElement_method_XMLElement_INLRString__LRXMLElement_,
  &XMLElement_method__getAttr_INLRString__LRXMLAttr_,
  &XMLElement_method_attribute_I_LRAttr_,
  &XMLElement_method_attributeCount__I,
  &XMLElement_method_getAttribues__LRXMLAttrArray_,
  &XMLElement_method_getAttribute_INLRString__LRString_,
  &XMLElement_method_getAttributeNode_INLRString__LRAttr_,
  &XMLElement_method_getAttributes__LRNamedNodeMap_,
  &XMLElement_method_getElementsByTagName_INLRString__LRNodeList_,
  &XMLElement_method_getOwnerDocument__LRDocument_,
  &XMLElement_method_getOwnerDocumentRef__LRDocument_,
  &XMLElement_method_getTagName__LRString_,
  &XMLElement_method_normalize__V,
  &XMLElement_method_removeAttribute_INLRString__V,
  &XMLElement_method_removeAttributeNode_INLRAttr__LRAttr_,
  &XMLElement_method_setAttribute_INLRString_INLRString__V,
  &XMLElement_method_setAttributeNode_INLRAttr__LRAttr_,
  &XMLElement_method_setOwnerDocument_INLRDocument__V,
  &XMLElement_method_toString__LRString_,
  0
};


struct XMLElement_MetaInfoInitializer
{  XMLElement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLElement::clazzInfo();
    ci->fields =  _XMLElement_fields;
    ci->methods =  _XMLElement_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLElement_MetaInfoInitializer XMLElement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 


//static
::acdk::lang::RObject
XMLNamedNodeMap_create_array(int length)
{
  return new ObjectArrayImpl<RXMLNamedNodeMap>(length);
}

//static
::acdk::lang::RObject
XMLNamedNodeMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLNamedNodeMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLNamedNodeMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLNamedNodeMap((RXMLAttrArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLNamedNodeMap::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNamedNodeMap::getNamedItem((acdk::lang::RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getNamedItem((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNamedNodeMap::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_removeNamedItem_INLRString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNamedNodeMap::removeNamedItem((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->removeNamedItem((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNamedNodeMap_method_setNamedItem_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNamedNodeMap::setNamedItem((RNode)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->setNamedItem((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNamedNodeMap_fields__attributes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNamedNodeMap* This = dmi_cast<XMLNamedNodeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_attributes, flags);
    else
      This->_attributes = (RXMLAttrArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLNamedNodeMap_fields__attributes = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_attributes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLAttrArray::clazzInfo(),
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_fields__attributes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLNamedNodeMap_fields[] = 
{
  &XMLNamedNodeMap_fields__attributes,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__arg_attrs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "attrs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLAttrArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__args[] = 
{
  &XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__arg_attrs,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLNamedNodeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLNamedNodeMap::clazzInfo(), // return type
  "_0_XMLNamedNodeMap", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getLength", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_getLength__I_args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_getLength__I_exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__args[] = 
{
  &XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_1_getNamedItem", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_getNamedItem_INLacdk_lang_RString__LRNode__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNamedNodeMap_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_item_I_LRNode__args[] = 
{
  &XMLNamedNodeMap_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_4_item", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_item_I_LRNode__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__args[] = 
{
  &XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNamedNodeMap_removeNamedItem_INLRString__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_removeNamedItem_INLRString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_3_removeNamedItem", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_removeNamedItem_INLRString__LRNode__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_removeNamedItem_INLRString__LRNode__dispatch, // invoke this method
  XMLNamedNodeMap_removeNamedItem_INLRString__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__arg_arg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "arg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__args[] = 
{
  &XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__arg_arg,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNamedNodeMap_setNamedItem_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNamedNodeMap_method_setNamedItem_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNamedItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_2_setNamedItem", // alternative name of method
  -1, // altlabelHashCode
  XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNamedNodeMap_methods_setNamedItem_INLRNode__LRNode__exceptions, // the declared exceptions
  XMLNamedNodeMap_MetainfoWrapper::XMLNamedNodeMap_method_setNamedItem_INLRNode__LRNode__dispatch, // invoke this method
  XMLNamedNodeMap_setNamedItem_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLNamedNodeMap_methods[] = 
{
  &XMLNamedNodeMap_method_GetClass__L_acdk_lang_RClass_,
  &XMLNamedNodeMap_method_XMLNamedNodeMap_INLRXMLAttrArray__LRXMLNamedNodeMap_,
  &XMLNamedNodeMap_method_getLength__I,
  &XMLNamedNodeMap_method_getNamedItem_INLacdk_lang_RString__LRNode_,
  &XMLNamedNodeMap_method_item_I_LRNode_,
  &XMLNamedNodeMap_method_removeNamedItem_INLRString__LRNode_,
  &XMLNamedNodeMap_method_setNamedItem_INLRNode__LRNode_,
  0
};


struct XMLNamedNodeMap_MetaInfoInitializer
{  XMLNamedNodeMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLNamedNodeMap::clazzInfo();
    ci->fields =  _XMLNamedNodeMap_fields;
    ci->methods =  _XMLNamedNodeMap_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLNamedNodeMap_MetaInfoInitializer XMLNamedNodeMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLNode_create_array(int length)
{
  return new ObjectArrayImpl<RXMLNode>(length);
}

//static
::acdk::lang::RObject
XMLNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_XMLNode_INLRString_S_LRXMLNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLNode((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method__childsToString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::_childsToString();
    else
        ret = (::acdk::lang::RObject)This->_childsToString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_appendChild_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::appendChild((RNode)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->appendChild((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_cloneNode_Z_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::cloneNode(args[0].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->cloneNode(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getAttributes__LRNamedNodeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getAttributes();
    else
        ret = (::acdk::lang::RObject)This->getAttributes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getBaseURI__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getBaseURI();
    else
        ret = (::acdk::lang::RObject)This->getBaseURI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getChildNodes__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getChildNodes();
    else
        ret = (::acdk::lang::RObject)This->getChildNodes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getFirstChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getFirstChild();
    else
        ret = (::acdk::lang::RObject)This->getFirstChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getLastChild__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getLastChild();
    else
        ret = (::acdk::lang::RObject)This->getLastChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getLocalName__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getLocalName();
    else
        ret = (::acdk::lang::RObject)This->getLocalName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getNamespaceURI__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getNamespaceURI();
    else
        ret = (::acdk::lang::RObject)This->getNamespaceURI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getNextSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getNextSibling();
    else
        ret = (::acdk::lang::RObject)This->getNextSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getNodeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getNodeName();
    else
        ret = (::acdk::lang::RObject)This->getNodeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getNodeType__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLNode::getNodeType();
    else
      ret = This->getNodeType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getNodeValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getNodeValue();
    else
        ret = (::acdk::lang::RObject)This->getNodeValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getOwnerDocument__LRDocument__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getOwnerDocument();
    else
        ret = (::acdk::lang::RObject)This->getOwnerDocument();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getParentNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getParentNode();
    else
        ret = (::acdk::lang::RObject)This->getParentNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getPrefix__Lacdk_lang_RString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getPrefix();
    else
        ret = (::acdk::lang::RObject)This->getPrefix();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_getPreviousSibling__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::getPreviousSibling();
    else
        ret = (::acdk::lang::RObject)This->getPreviousSibling();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_hasChildNodes__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLNode::hasChildNodes();
    else
      ret = This->hasChildNodes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_insertBefore_INLRNode_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::insertBefore((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertBefore((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_isEqualNode_INLorg_w3c_dom_RNode__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLNode::isEqualNode((org::w3c::dom::RNode)args[0].getObjectVar());
    else
      ret = This->isEqualNode((org::w3c::dom::RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_removeChild_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::removeChild((RNode)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->removeChild((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_replaceChild_INLRNode_INLRNode__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::replaceChild((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->replaceChild((RNode)args[0].getObjectVar(), (RNode)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_selectNode_INLRString__LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::selectNode((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectNode((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_selectNodes_INLRString__LRNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNode::selectNodes((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->selectNodes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_setNodeValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLNode::setNodeValue((RString)args[0].getObjectVar());
    else
        This->setNodeValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_setParentNode_INLRNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLNode::setParentNode((RNode)args[0].getObjectVar());
    else
        This->setParentNode((RNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNode_method_setPrefix_INLacdk_lang_RString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLNode::setPrefix((acdk::lang::RString)args[0].getObjectVar());
    else
        This->setPrefix((acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNode_fields__childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_childs, flags);
    else
      This->_childs = (RXMLNodeArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNode_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNode_fields__nodeType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nodeType, flags);
    else
      This->_nodeType = var.getShortVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNode_fields__value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNode* This = dmi_cast<XMLNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_value, flags);
    else
      This->_value = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLNode_fields__childs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLNodeArray::clazzInfo(),
  XMLNode_MetainfoWrapper::XMLNode_fields__childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLNode_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  XMLNode_MetainfoWrapper::XMLNode_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLNode_fields__nodeType = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nodeType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  XMLNode_MetainfoWrapper::XMLNode_fields__nodeType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo XMLNode_fields__value = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  XMLNode_MetainfoWrapper::XMLNode_fields__value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLNode_fields[] = 
{
  &XMLNode_fields__childs,
  &XMLNode_fields__name,
  &XMLNode_fields__nodeType,
  &XMLNode_fields__value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__args[] = 
{
  &XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__arg_name,
  &XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_XMLNode_INLRString_S_LRXMLNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLNode::clazzInfo(), // return type
  "_0_XMLNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_XMLNode_INLRString_S_LRXMLNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_XMLNode_INLRString_S_LRXMLNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods__childsToString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods__childsToString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method__childsToString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_childsToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r__childsToString", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods__childsToString__LRString__args, // the arguments
  0, //arguments count
  XMLNode_methods__childsToString__LRString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method__childsToString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_appendChild_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_appendChild_INLRNode__LRNode__args[] = 
{
  &XMLNode_methods_appendChild_INLRNode__LRNode__arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_appendChild_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_appendChild_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_appendChild_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_m_appendChild", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_appendChild_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_appendChild_INLRNode__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_appendChild_INLRNode__LRNode__dispatch, // invoke this method
  XMLNode_appendChild_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_cloneNode_Z_LRNode__arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_cloneNode_Z_LRNode__args[] = 
{
  &XMLNode_methods_cloneNode_Z_LRNode__arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_cloneNode_Z_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_cloneNode_Z_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cloneNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_o_cloneNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_cloneNode_Z_LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_cloneNode_Z_LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_cloneNode_Z_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getAttributes__LRNamedNodeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getAttributes__LRNamedNodeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getAttributes__LRNamedNodeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedNodeMap::clazzInfo(), // return type
  "_h_getAttributes", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getAttributes__LRNamedNodeMap__args, // the arguments
  0, //arguments count
  XMLNode_methods_getAttributes__LRNamedNodeMap__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getAttributes__LRNamedNodeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getBaseURI__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getBaseURI__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getBaseURI__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBaseURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_4_getBaseURI", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getBaseURI__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getBaseURI__Lacdk_lang_RString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getBaseURI__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getChildNodes__LRNodeList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getChildNodes__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getChildNodes__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChildNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_c_getChildNodes", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getChildNodes__LRNodeList__args, // the arguments
  0, //arguments count
  XMLNode_methods_getChildNodes__LRNodeList__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getChildNodes__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getFirstChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getFirstChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getFirstChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_d_getFirstChild", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getFirstChild__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_getFirstChild__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getFirstChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getLastChild__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getLastChild__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getLastChild__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_e_getLastChild", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getLastChild__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_getLastChild__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getLastChild__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getLocalName__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getLocalName__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getLocalName__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocalName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_3_getLocalName", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getLocalName__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getLocalName__Lacdk_lang_RString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getLocalName__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getNamespaceURI__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getNamespaceURI__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getNamespaceURI__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNamespaceURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_2_getNamespaceURI", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getNamespaceURI__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getNamespaceURI__Lacdk_lang_RString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getNamespaceURI__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getNextSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getNextSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getNextSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNextSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_g_getNextSibling", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getNextSibling__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_getNextSibling__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getNextSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getNodeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getNodeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getNodeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getNodeName", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getNodeName__LRString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getNodeName__LRString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getNodeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getNodeType__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getNodeType__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getNodeType__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9_getNodeType", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getNodeType__S_args, // the arguments
  0, //arguments count
  XMLNode_methods_getNodeType__S_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getNodeType__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getNodeValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getNodeValue__LRString__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_getNodeValue__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getNodeValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getNodeValue", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getNodeValue__LRString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getNodeValue__LRString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getNodeValue__LRString__dispatch, // invoke this method
  XMLNode_getNodeValue__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getOwnerDocument__LRDocument__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getOwnerDocument__LRDocument__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getOwnerDocument__LRDocument_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOwnerDocument", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDocument::clazzInfo(), // return type
  "_i_getOwnerDocument", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getOwnerDocument__LRDocument__args, // the arguments
  0, //arguments count
  XMLNode_methods_getOwnerDocument__LRDocument__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getOwnerDocument__LRDocument__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getParentNode__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getParentNode__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getParentNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_a_getParentNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getParentNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_getParentNode__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getParentNode__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getPrefix__Lacdk_lang_RString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getPrefix__Lacdk_lang_RString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getPrefix__Lacdk_lang_RString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo(), // return type
  "_5_getPrefix", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getPrefix__Lacdk_lang_RString__args, // the arguments
  0, //arguments count
  XMLNode_methods_getPrefix__Lacdk_lang_RString__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getPrefix__Lacdk_lang_RString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_getPreviousSibling__LRNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_getPreviousSibling__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_getPreviousSibling__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPreviousSibling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_f_getPreviousSibling", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_getPreviousSibling__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_getPreviousSibling__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_getPreviousSibling__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_hasChildNodes__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_hasChildNodes__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_hasChildNodes__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasChildNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_hasChildNodes", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_hasChildNodes__Z_args, // the arguments
  0, //arguments count
  XMLNode_methods_hasChildNodes__Z_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_hasChildNodes__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_newChild = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newChild", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_refChild = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "refChild", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__args[] = 
{
  &XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_newChild,
  &XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__arg_refChild,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_insertBefore_INLRNode_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_insertBefore_INLRNode_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertBefore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_j_insertBefore", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_insertBefore_INLRNode_INLRNode__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_insertBefore_INLRNode_INLRNode__LRNode__dispatch, // invoke this method
  XMLNode_insertBefore_INLRNode_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_arg_arg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "arg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_args[] = 
{
  &XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_arg_arg,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_isEqualNode_INLorg_w3c_dom_RNode__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEqualNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_isEqualNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_args, // the arguments
  0, //arguments count
  XMLNode_methods_isEqualNode_INLorg_w3c_dom_RNode__Z_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_isEqualNode_INLorg_w3c_dom_RNode__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_removeChild_INLRNode__LRNode__arg_node = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "node", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_removeChild_INLRNode__LRNode__args[] = 
{
  &XMLNode_methods_removeChild_INLRNode__LRNode__arg_node,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_removeChild_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_removeChild_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_removeChild_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_l_removeChild", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_removeChild_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_removeChild_INLRNode__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_removeChild_INLRNode__LRNode__dispatch, // invoke this method
  XMLNode_removeChild_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_newChild = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newChild", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_oldChild = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "oldChild", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__args[] = 
{
  &XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_newChild,
  &XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__arg_oldChild,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_replaceChild_INLRNode_INLRNode__LRNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_replaceChild_INLRNode_INLRNode__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_k_replaceChild", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_replaceChild_INLRNode_INLRNode__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_replaceChild_INLRNode_INLRNode__LRNode__dispatch, // invoke this method
  XMLNode_replaceChild_INLRNode_INLRNode__LRNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_selectNode_INLRString__LRNode__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_selectNode_INLRString__LRNode__args[] = 
{
  &XMLNode_methods_selectNode_INLRString__LRNode__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_selectNode_INLRString__LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_selectNode_INLRString__LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_p_selectNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_selectNode_INLRString__LRNode__args, // the arguments
  0, //arguments count
  XMLNode_methods_selectNode_INLRString__LRNode__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_selectNode_INLRString__LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_selectNodes_INLRString__LRNodeList__arg_xpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_selectNodes_INLRString__LRNodeList__args[] = 
{
  &XMLNode_methods_selectNodes_INLRString__LRNodeList__arg_xpath,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_selectNodes_INLRString__LRNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_selectNodes_INLRString__LRNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectNodes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNodeList::clazzInfo(), // return type
  "_q_selectNodes", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_selectNodes_INLRString__LRNodeList__args, // the arguments
  0, //arguments count
  XMLNode_methods_selectNodes_INLRString__LRNodeList__exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_selectNodes_INLRString__LRNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_setNodeValue_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_setNodeValue_INLRString__V_args[] = 
{
  &XMLNode_methods_setNodeValue_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_setNodeValue_INLRString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_setNodeValue_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_setNodeValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setNodeValue", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_setNodeValue_INLRString__V_args, // the arguments
  0, //arguments count
  XMLNode_methods_setNodeValue_INLRString__V_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_setNodeValue_INLRString__V_dispatch, // invoke this method
  XMLNode_setNodeValue_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_setParentNode_INLRNode__V_arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_setParentNode_INLRNode__V_args[] = 
{
  &XMLNode_methods_setParentNode_INLRNode__V_arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_setParentNode_INLRNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_setParentNode_INLRNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParentNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setParentNode", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_setParentNode_INLRNode__V_args, // the arguments
  0, //arguments count
  XMLNode_methods_setParentNode_INLRNode__V_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_setParentNode_INLRNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNode_methods_setPrefix_INLacdk_lang_RString__V_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNode_methods_setPrefix_INLacdk_lang_RString__V_args[] = 
{
  &XMLNode_methods_setPrefix_INLacdk_lang_RString__V_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode_methods_setPrefix_INLacdk_lang_RString__V_exceptions[] =
{
  RDOMException::clazzInfo(), 
  0
};

void XMLNode_setPrefix_INLacdk_lang_RString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, DOMException) == true)
    THROW_INSTANCE( RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLNode_method_setPrefix_INLacdk_lang_RString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPrefix", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setPrefix", // alternative name of method
  -1, // altlabelHashCode
  XMLNode_methods_setPrefix_INLacdk_lang_RString__V_args, // the arguments
  0, //arguments count
  XMLNode_methods_setPrefix_INLacdk_lang_RString__V_exceptions, // the declared exceptions
  XMLNode_MetainfoWrapper::XMLNode_method_setPrefix_INLacdk_lang_RString__V_dispatch, // invoke this method
  XMLNode_setPrefix_INLacdk_lang_RString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLNode_methods[] = 
{
  &XMLNode_method_GetClass__L_acdk_lang_RClass_,
  &XMLNode_method_XMLNode_INLRString_S_LRXMLNode_,
  &XMLNode_method__childsToString__LRString_,
  &XMLNode_method_appendChild_INLRNode__LRNode_,
  &XMLNode_method_cloneNode_Z_LRNode_,
  &XMLNode_method_getAttributes__LRNamedNodeMap_,
  &XMLNode_method_getBaseURI__Lacdk_lang_RString_,
  &XMLNode_method_getChildNodes__LRNodeList_,
  &XMLNode_method_getFirstChild__LRNode_,
  &XMLNode_method_getLastChild__LRNode_,
  &XMLNode_method_getLocalName__Lacdk_lang_RString_,
  &XMLNode_method_getNamespaceURI__Lacdk_lang_RString_,
  &XMLNode_method_getNextSibling__LRNode_,
  &XMLNode_method_getNodeName__LRString_,
  &XMLNode_method_getNodeType__S,
  &XMLNode_method_getNodeValue__LRString_,
  &XMLNode_method_getOwnerDocument__LRDocument_,
  &XMLNode_method_getParentNode__LRNode_,
  &XMLNode_method_getPrefix__Lacdk_lang_RString_,
  &XMLNode_method_getPreviousSibling__LRNode_,
  &XMLNode_method_hasChildNodes__Z,
  &XMLNode_method_insertBefore_INLRNode_INLRNode__LRNode_,
  &XMLNode_method_isEqualNode_INLorg_w3c_dom_RNode__Z,
  &XMLNode_method_removeChild_INLRNode__LRNode_,
  &XMLNode_method_replaceChild_INLRNode_INLRNode__LRNode_,
  &XMLNode_method_selectNode_INLRString__LRNode_,
  &XMLNode_method_selectNodes_INLRString__LRNodeList_,
  &XMLNode_method_setNodeValue_INLRString__V,
  &XMLNode_method_setParentNode_INLRNode__V,
  &XMLNode_method_setPrefix_INLacdk_lang_RString__V,
  0
};


struct XMLNode_MetaInfoInitializer
{  XMLNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLNode::clazzInfo();
    ci->fields =  _XMLNode_fields;
    ci->methods =  _XMLNode_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLNode_MetaInfoInitializer XMLNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace acdk::lang;
using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLNodeList_create_array(int length)
{
  return new ObjectArrayImpl<RXMLNodeList>(length);
}

//static
::acdk::lang::RObject
XMLNodeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLNodeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNodeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLNodeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNodeList_method_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLNodeList((RXMLNodeArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNodeList_method__add_INLRXMLNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNodeList* This = dmi_cast<XMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XMLNodeList::_add((RXMLNode)args[0].getObjectVar());
    else
        This->_add((RXMLNode)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNodeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNodeList* This = dmi_cast<XMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XMLNodeList::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLNodeList_method_item_I_LRNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLNodeList* This = dmi_cast<XMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLNodeList::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  XMLNodeList_fields__childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    XMLNodeList* This = dmi_cast<XMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_childs, flags);
    else
      This->_childs = (RXMLNodeArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo XMLNodeList_fields__childs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLNodeArray::clazzInfo(),
  XMLNodeList_MetainfoWrapper::XMLNodeList_fields__childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLNodeList_fields[] = 
{
  &XMLNodeList_fields__childs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNodeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNodeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLNodeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLNodeList_MetainfoWrapper::XMLNodeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__arg_childs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "childs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLNodeArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__args[] = 
{
  &XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__arg_childs,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNodeList_method_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLNodeList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLNodeList::clazzInfo(), // return type
  "_0_XMLNodeList", // alternative name of method
  -1, // altlabelHashCode
  XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__args, // the arguments
  0, //arguments count
  XMLNodeList_methods_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__exceptions, // the declared exceptions
  XMLNodeList_MetainfoWrapper::XMLNodeList_method_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNodeList_methods__add_INLRXMLNode__V_arg_xmln = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "xmln", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXMLNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNodeList_methods__add_INLRXMLNode__V_args[] = 
{
  &XMLNodeList_methods__add_INLRXMLNode__V_arg_xmln,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList_methods__add_INLRXMLNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNodeList_method__add_INLRXMLNode__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3__add", // alternative name of method
  -1, // altlabelHashCode
  XMLNodeList_methods__add_INLRXMLNode__V_args, // the arguments
  0, //arguments count
  XMLNodeList_methods__add_INLRXMLNode__V_exceptions, // the declared exceptions
  XMLNodeList_MetainfoWrapper::XMLNodeList_method__add_INLRXMLNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNodeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNodeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getLength", // alternative name of method
  -1, // altlabelHashCode
  XMLNodeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  XMLNodeList_methods_getLength__I_exceptions, // the declared exceptions
  XMLNodeList_MetainfoWrapper::XMLNodeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLNodeList_methods_item_I_LRNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLNodeList_methods_item_I_LRNode__args[] = 
{
  &XMLNodeList_methods_item_I_LRNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList_methods_item_I_LRNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLNodeList_method_item_I_LRNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNode::clazzInfo(), // return type
  "_1_item", // alternative name of method
  -1, // altlabelHashCode
  XMLNodeList_methods_item_I_LRNode__args, // the arguments
  0, //arguments count
  XMLNodeList_methods_item_I_LRNode__exceptions, // the declared exceptions
  XMLNodeList_MetainfoWrapper::XMLNodeList_method_item_I_LRNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLNodeList_methods[] = 
{
  &XMLNodeList_method_GetClass__L_acdk_lang_RClass_,
  &XMLNodeList_method_XMLNodeList_INLRXMLNodeArray__LRXMLNodeList_,
  &XMLNodeList_method__add_INLRXMLNode__V,
  &XMLNodeList_method_getLength__I,
  &XMLNodeList_method_item_I_LRNode_,
  0
};


struct XMLNodeList_MetaInfoInitializer
{  XMLNodeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLNodeList::clazzInfo();
    ci->fields =  _XMLNodeList_fields;
    ci->methods =  _XMLNodeList_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLNodeList_MetaInfoInitializer XMLNodeList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;

//static
::acdk::lang::RObject
XMLText_create_array(int length)
{
  return new ObjectArrayImpl<RXMLText>(length);
}

//static
::acdk::lang::RObject
XMLText_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XMLText_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLText_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XMLText::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLText_method_XMLText_INLRString_S_LRXMLText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XMLText((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XMLText_method_splitText_I_LRText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XMLText* This = dmi_cast<XMLText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XMLText::splitText(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->splitText(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XMLText_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLText_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XMLText_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLText_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XMLText_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XMLText_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XMLText_MetainfoWrapper::XMLText_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLText_methods_XMLText_INLRString_S_LRXMLText__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLText_methods_XMLText_INLRString_S_LRXMLText__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLText_methods_XMLText_INLRString_S_LRXMLText__args[] = 
{
  &XMLText_methods_XMLText_INLRString_S_LRXMLText__arg_text,
  &XMLText_methods_XMLText_INLRString_S_LRXMLText__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLText_methods_XMLText_INLRString_S_LRXMLText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XMLText_method_XMLText_INLRString_S_LRXMLText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XMLText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XMLText::clazzInfo(), // return type
  "_0_XMLText", // alternative name of method
  -1, // altlabelHashCode
  XMLText_methods_XMLText_INLRString_S_LRXMLText__args, // the arguments
  0, //arguments count
  XMLText_methods_XMLText_INLRString_S_LRXMLText__exceptions, // the declared exceptions
  XMLText_MetainfoWrapper::XMLText_method_XMLText_INLRString_S_LRXMLText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XMLText_methods_splitText_I_LRText__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XMLText_methods_splitText_I_LRText__args[] = 
{
  &XMLText_methods_splitText_I_LRText__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLText_methods_splitText_I_LRText__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void XMLText_splitText_I_LRText__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo XMLText_method_splitText_I_LRText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "splitText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RText::clazzInfo(), // return type
  "_1_splitText", // alternative name of method
  -1, // altlabelHashCode
  XMLText_methods_splitText_I_LRText__args, // the arguments
  0, //arguments count
  XMLText_methods_splitText_I_LRText__exceptions, // the declared exceptions
  XMLText_MetainfoWrapper::XMLText_method_splitText_I_LRText__dispatch, // invoke this method
  XMLText_splitText_I_LRText__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XMLText_methods[] = 
{
  &XMLText_method_GetClass__L_acdk_lang_RClass_,
  &XMLText_method_XMLText_INLRString_S_LRXMLText_,
  &XMLText_method_splitText_I_LRText_,
  0
};


struct XMLText_MetaInfoInitializer
{  XMLText_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XMLText::clazzInfo();
    ci->fields =  _XMLText_fields;
    ci->methods =  _XMLText_methods;
    ci->_scopeParent = acdk_xml_dom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XMLText_MetaInfoInitializer XMLText_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace dom


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) dom_dummyExportFunc() {}
#endif

