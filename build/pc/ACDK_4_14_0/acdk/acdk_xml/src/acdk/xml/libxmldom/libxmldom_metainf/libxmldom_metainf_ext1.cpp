// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../libxmldom.h"
#include "../LibXMLAttr.h"
#include "../LibXMLCDATASection.h"
#include "../LibXMLCharacterData.h"
#include "../LibXMLComment.h"
#include "../LibXMLDocument.h"
#include "../LibXMLDocumentBuilder.h"
#include "../LibXMLDocumentFragment.h"
#include "../LibXMLDocumentType.h"
#include "../libxmldom.h"
#include "../LibXMLDOMInternals.h"
#include "../LibXMLElement.h"
#include "../LibXMLEntity.h"
#include "../LibXMLEntityReference.h"
#include "../LibXMLNamedNodeMap.h"
#include "../LibXMLNode.h"
#include "../LibXMLNodeList.h"
#include "../LibXMLNotation.h"
#include "../LibXMLPathNodeList.h"
#include "../LibXMLProcessingInstruction.h"
#include "../LibXMLText.h"
#include "../LibXMLXPathExpression.h"
#include "../LibXMLXPathNSResolver.h"
#include "../LibXMLXPathResult.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLNodeList_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLNodeList>(length);
}

//static
::acdk::lang::RObject
LibXMLNodeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLNodeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNodeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLNodeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNodeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLNodeList* This = dmi_cast<LibXMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLNodeList::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNodeList_method_item_I_Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLNodeList* This = dmi_cast<LibXMLNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLNodeList::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLNodeList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNodeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNodeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNodeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLNodeList_MetainfoWrapper::LibXMLNodeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNodeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNodeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNodeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getLength", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNodeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  LibXMLNodeList_methods_getLength__I_exceptions, // the declared exceptions
  LibXMLNodeList_MetainfoWrapper::LibXMLNodeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__args[] = 
{
  &LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNodeList_method_item_I_Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_0_item", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  LibXMLNodeList_methods_item_I_Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  LibXMLNodeList_MetainfoWrapper::LibXMLNodeList_method_item_I_Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLNodeList_methods[] = 
{
  &LibXMLNodeList_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLNodeList_method_getLength__I,
  &LibXMLNodeList_method_item_I_Lorg_w3c_dom_RNode_,
  0
};


struct LibXMLNodeList_MetaInfoInitializer
{  LibXMLNodeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLNodeList::clazzInfo();
    ci->fields =  _LibXMLNodeList_fields;
    ci->methods =  _LibXMLNodeList_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLNodeList_MetaInfoInitializer LibXMLNodeList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLNotation_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLNotation>(length);
}

//static
::acdk::lang::RObject
LibXMLNotation_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLNotation_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNotation_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLNotation::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNotation_method_getPublicID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLNotation* This = dmi_cast<LibXMLNotation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLNotation::getPublicID();
    else
        ret = (::acdk::lang::RObject)This->getPublicID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNotation_method_getSystemID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLNotation* This = dmi_cast<LibXMLNotation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLNotation::getSystemID();
    else
        ret = (::acdk::lang::RObject)This->getSystemID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLNotation_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLNotation* This = dmi_cast<LibXMLNotation>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLNotation::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLNotation_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNotation_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNotation_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNotation_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNotation_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLNotation_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLNotation_MetainfoWrapper::LibXMLNotation_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNotation_methods_getPublicID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNotation_methods_getPublicID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNotation_method_getPublicID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPublicID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getPublicID", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNotation_methods_getPublicID__LRString__args, // the arguments
  0, //arguments count
  LibXMLNotation_methods_getPublicID__LRString__exceptions, // the declared exceptions
  LibXMLNotation_MetainfoWrapper::LibXMLNotation_method_getPublicID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNotation_methods_getSystemID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNotation_methods_getSystemID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNotation_method_getSystemID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getSystemID", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNotation_methods_getSystemID__LRString__args, // the arguments
  0, //arguments count
  LibXMLNotation_methods_getSystemID__LRString__exceptions, // the declared exceptions
  LibXMLNotation_MetainfoWrapper::LibXMLNotation_method_getSystemID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLNotation_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLNotation_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLNotation_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  LibXMLNotation_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LibXMLNotation_methods_toString__LRString__exceptions, // the declared exceptions
  LibXMLNotation_MetainfoWrapper::LibXMLNotation_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLNotation_methods[] = 
{
  &LibXMLNotation_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLNotation_method_getPublicID__LRString_,
  &LibXMLNotation_method_getSystemID__LRString_,
  &LibXMLNotation_method_toString__LRString_,
  0
};


struct LibXMLNotation_MetaInfoInitializer
{  LibXMLNotation_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLNotation::clazzInfo();
    ci->fields =  _LibXMLNotation_fields;
    ci->methods =  _LibXMLNotation_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLNotation_MetaInfoInitializer LibXMLNotation_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLPathNodeList_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLPathNodeList>(length);
}

//static
::acdk::lang::RObject
LibXMLPathNodeList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLPathNodeList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLPathNodeList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLPathNodeList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLPathNodeList_method__free__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLPathNodeList* This = dmi_cast<LibXMLPathNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LibXMLPathNodeList::_free();
    else
        This->_free();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLPathNodeList_method_getLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLPathNodeList* This = dmi_cast<LibXMLPathNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLPathNodeList::getLength();
    else
      ret = This->getLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLPathNodeList_method_item_I_Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLPathNodeList* This = dmi_cast<LibXMLPathNodeList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLPathNodeList::item(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->item(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLPathNodeList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLPathNodeList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLPathNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLPathNodeList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLPathNodeList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLPathNodeList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLPathNodeList_MetainfoWrapper::LibXMLPathNodeList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLPathNodeList_methods__free__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLPathNodeList_methods__free__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLPathNodeList_method__free__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_free", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2__free", // alternative name of method
  -1, // altlabelHashCode
  LibXMLPathNodeList_methods__free__V_args, // the arguments
  0, //arguments count
  LibXMLPathNodeList_methods__free__V_exceptions, // the declared exceptions
  LibXMLPathNodeList_MetainfoWrapper::LibXMLPathNodeList_method__free__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLPathNodeList_methods_getLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLPathNodeList_methods_getLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLPathNodeList_method_getLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getLength", // alternative name of method
  -1, // altlabelHashCode
  LibXMLPathNodeList_methods_getLength__I_args, // the arguments
  0, //arguments count
  LibXMLPathNodeList_methods_getLength__I_exceptions, // the declared exceptions
  LibXMLPathNodeList_MetainfoWrapper::LibXMLPathNodeList_method_getLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__args[] = 
{
  &LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLPathNodeList_method_item_I_Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "item", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_1_item", // alternative name of method
  -1, // altlabelHashCode
  LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  LibXMLPathNodeList_methods_item_I_Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  LibXMLPathNodeList_MetainfoWrapper::LibXMLPathNodeList_method_item_I_Lorg_w3c_dom_RNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLPathNodeList_methods[] = 
{
  &LibXMLPathNodeList_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLPathNodeList_method__free__V,
  &LibXMLPathNodeList_method_getLength__I,
  &LibXMLPathNodeList_method_item_I_Lorg_w3c_dom_RNode_,
  0
};


struct LibXMLPathNodeList_MetaInfoInitializer
{  LibXMLPathNodeList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLPathNodeList::clazzInfo();
    ci->fields =  _LibXMLPathNodeList_fields;
    ci->methods =  _LibXMLPathNodeList_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLPathNodeList_MetaInfoInitializer LibXMLPathNodeList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLProcessingInstruction_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLProcessingInstruction>(length);
}

//static
::acdk::lang::RObject
LibXMLProcessingInstruction_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLProcessingInstruction_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLProcessingInstruction_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLProcessingInstruction::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLProcessingInstruction_method_getData__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLProcessingInstruction* This = dmi_cast<LibXMLProcessingInstruction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLProcessingInstruction::getData();
    else
        ret = (::acdk::lang::RObject)This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLProcessingInstruction_method_getTarget__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLProcessingInstruction* This = dmi_cast<LibXMLProcessingInstruction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLProcessingInstruction::getTarget();
    else
        ret = (::acdk::lang::RObject)This->getTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLProcessingInstruction_method_setData_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLProcessingInstruction* This = dmi_cast<LibXMLProcessingInstruction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LibXMLProcessingInstruction::setData((RString)args[0].getObjectVar());
    else
        This->setData((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLProcessingInstruction_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLProcessingInstruction* This = dmi_cast<LibXMLProcessingInstruction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLProcessingInstruction::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLProcessingInstruction_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLProcessingInstruction_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLProcessingInstruction_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLProcessingInstruction_MetainfoWrapper::LibXMLProcessingInstruction_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLProcessingInstruction_methods_getData__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLProcessingInstruction_methods_getData__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLProcessingInstruction_method_getData__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getData", // alternative name of method
  -1, // altlabelHashCode
  LibXMLProcessingInstruction_methods_getData__LRString__args, // the arguments
  0, //arguments count
  LibXMLProcessingInstruction_methods_getData__LRString__exceptions, // the declared exceptions
  LibXMLProcessingInstruction_MetainfoWrapper::LibXMLProcessingInstruction_method_getData__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLProcessingInstruction_methods_getTarget__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLProcessingInstruction_methods_getTarget__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLProcessingInstruction_method_getTarget__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getTarget", // alternative name of method
  -1, // altlabelHashCode
  LibXMLProcessingInstruction_methods_getTarget__LRString__args, // the arguments
  0, //arguments count
  LibXMLProcessingInstruction_methods_getTarget__LRString__exceptions, // the declared exceptions
  LibXMLProcessingInstruction_MetainfoWrapper::LibXMLProcessingInstruction_method_getTarget__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLProcessingInstruction_methods_setData_INLRString__V_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLProcessingInstruction_methods_setData_INLRString__V_args[] = 
{
  &LibXMLProcessingInstruction_methods_setData_INLRString__V_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLProcessingInstruction_methods_setData_INLRString__V_exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void LibXMLProcessingInstruction_setData_INLRString__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLProcessingInstruction_method_setData_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setData", // alternative name of method
  -1, // altlabelHashCode
  LibXMLProcessingInstruction_methods_setData_INLRString__V_args, // the arguments
  0, //arguments count
  LibXMLProcessingInstruction_methods_setData_INLRString__V_exceptions, // the declared exceptions
  LibXMLProcessingInstruction_MetainfoWrapper::LibXMLProcessingInstruction_method_setData_INLRString__V_dispatch, // invoke this method
  LibXMLProcessingInstruction_setData_INLRString__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLProcessingInstruction_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLProcessingInstruction_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLProcessingInstruction_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  LibXMLProcessingInstruction_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LibXMLProcessingInstruction_methods_toString__LRString__exceptions, // the declared exceptions
  LibXMLProcessingInstruction_MetainfoWrapper::LibXMLProcessingInstruction_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLProcessingInstruction_methods[] = 
{
  &LibXMLProcessingInstruction_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLProcessingInstruction_method_getData__LRString_,
  &LibXMLProcessingInstruction_method_getTarget__LRString_,
  &LibXMLProcessingInstruction_method_setData_INLRString__V,
  &LibXMLProcessingInstruction_method_toString__LRString_,
  0
};


struct LibXMLProcessingInstruction_MetaInfoInitializer
{  LibXMLProcessingInstruction_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLProcessingInstruction::clazzInfo();
    ci->fields =  _LibXMLProcessingInstruction_fields;
    ci->methods =  _LibXMLProcessingInstruction_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLProcessingInstruction_MetaInfoInitializer LibXMLProcessingInstruction_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLText_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLText>(length);
}

//static
::acdk::lang::RObject
LibXMLText_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLText_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLText_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLText::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLText_method_getWholeText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLText* This = dmi_cast<LibXMLText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLText::getWholeText();
    else
        ret = (::acdk::lang::RObject)This->getWholeText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLText_method_isElementContentWhitespace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLText* This = dmi_cast<LibXMLText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLText::isElementContentWhitespace();
    else
      ret = This->isElementContentWhitespace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLText_method_replaceWholeText_LRString__Lorg_w3c_dom_RText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLText* This = dmi_cast<LibXMLText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLText::replaceWholeText((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->replaceWholeText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLText_method_splitText_I_Lorg_w3c_dom_RText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLText* This = dmi_cast<LibXMLText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLText::splitText(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->splitText(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLText_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLText_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLText_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLText_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLText_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLText_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLText_MetainfoWrapper::LibXMLText_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLText_methods_getWholeText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLText_methods_getWholeText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLText_method_getWholeText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWholeText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getWholeText", // alternative name of method
  -1, // altlabelHashCode
  LibXMLText_methods_getWholeText__LRString__args, // the arguments
  0, //arguments count
  LibXMLText_methods_getWholeText__LRString__exceptions, // the declared exceptions
  LibXMLText_MetainfoWrapper::LibXMLText_method_getWholeText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLText_methods_isElementContentWhitespace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLText_methods_isElementContentWhitespace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLText_method_isElementContentWhitespace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isElementContentWhitespace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isElementContentWhitespace", // alternative name of method
  -1, // altlabelHashCode
  LibXMLText_methods_isElementContentWhitespace__Z_args, // the arguments
  0, //arguments count
  LibXMLText_methods_isElementContentWhitespace__Z_exceptions, // the declared exceptions
  LibXMLText_MetainfoWrapper::LibXMLText_method_isElementContentWhitespace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__arg_content = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "content", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__args[] = 
{
  &LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__arg_content,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void LibXMLText_replaceWholeText_LRString__Lorg_w3c_dom_RText__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLText_method_replaceWholeText_LRString__Lorg_w3c_dom_RText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceWholeText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RText::clazzInfo(), // return type
  "_3_replaceWholeText", // alternative name of method
  -1, // altlabelHashCode
  LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__args, // the arguments
  0, //arguments count
  LibXMLText_methods_replaceWholeText_LRString__Lorg_w3c_dom_RText__exceptions, // the declared exceptions
  LibXMLText_MetainfoWrapper::LibXMLText_method_replaceWholeText_LRString__Lorg_w3c_dom_RText__dispatch, // invoke this method
  LibXMLText_replaceWholeText_LRString__Lorg_w3c_dom_RText__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__args[] = 
{
  &LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__exceptions[] =
{
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void LibXMLText_splitText_I_Lorg_w3c_dom_RText__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLText_method_splitText_I_Lorg_w3c_dom_RText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "splitText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RText::clazzInfo(), // return type
  "_0_splitText", // alternative name of method
  -1, // altlabelHashCode
  LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__args, // the arguments
  0, //arguments count
  LibXMLText_methods_splitText_I_Lorg_w3c_dom_RText__exceptions, // the declared exceptions
  LibXMLText_MetainfoWrapper::LibXMLText_method_splitText_I_Lorg_w3c_dom_RText__dispatch, // invoke this method
  LibXMLText_splitText_I_Lorg_w3c_dom_RText__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLText_methods[] = 
{
  &LibXMLText_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLText_method_getWholeText__LRString_,
  &LibXMLText_method_isElementContentWhitespace__Z,
  &LibXMLText_method_replaceWholeText_LRString__Lorg_w3c_dom_RText_,
  &LibXMLText_method_splitText_I_Lorg_w3c_dom_RText_,
  0
};


struct LibXMLText_MetaInfoInitializer
{  LibXMLText_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLText::clazzInfo();
    ci->fields =  _LibXMLText_fields;
    ci->methods =  _LibXMLText_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLText_MetaInfoInitializer LibXMLText_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLXPathExpression_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLXPathExpression>(length);
}

//static
::acdk::lang::RObject
LibXMLXPathExpression_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLXPathExpression_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathExpression_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLXPathExpression::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathExpression_method_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LibXMLXPathExpression((RLibXMLDocument)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (org::w3c::dom::xpath::RXPathNSResolver)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathExpression_method_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathExpression* This = dmi_cast<LibXMLXPathExpression>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathExpression::evaluate((org::w3c::dom::RNode)args[0].getObjectVar(), args[1].getShortVar(), (RObject)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->evaluate((org::w3c::dom::RNode)args[0].getObjectVar(), args[1].getShortVar(), (RObject)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLXPathExpression_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathExpression_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathExpression_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathExpression_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathExpression_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLXPathExpression_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLXPathExpression_MetainfoWrapper::LibXMLXPathExpression_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLibXMLDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_expression = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expression", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_resolver = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "resolver", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::xpath::RXPathNSResolver::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__args[] = 
{
  &LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_doc,
  &LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_expression,
  &LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__arg_resolver,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathExpression_method_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LibXMLXPathExpression", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LibXMLXPathExpression::clazzInfo(), // return type
  "_0_LibXMLXPathExpression", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__args, // the arguments
  0, //arguments count
  LibXMLXPathExpression_methods_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__exceptions, // the declared exceptions
  LibXMLXPathExpression_MetainfoWrapper::LibXMLXPathExpression_method_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_contextNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "contextNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__args[] = 
{
  &LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_contextNode,
  &LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_type,
  &LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void LibXMLXPathExpression_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathExpression_method_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evaluate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RObject::clazzInfo(), // return type
  "_1_evaluate", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__args, // the arguments
  0, //arguments count
  LibXMLXPathExpression_methods_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__exceptions, // the declared exceptions
  LibXMLXPathExpression_MetainfoWrapper::LibXMLXPathExpression_method_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__dispatch, // invoke this method
  LibXMLXPathExpression_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLXPathExpression_methods[] = 
{
  &LibXMLXPathExpression_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLXPathExpression_method_LibXMLXPathExpression_INLRLibXMLDocument_INLRString_INLorg_w3c_dom_xpath_RXPathNSResolver__LRLibXMLXPathExpression_,
  &LibXMLXPathExpression_method_evaluate_INLorg_w3c_dom_RNode_SINLRObject__Lacdk_lang_RObject_,
  0
};


struct LibXMLXPathExpression_MetaInfoInitializer
{  LibXMLXPathExpression_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLXPathExpression::clazzInfo();
    ci->fields =  _LibXMLXPathExpression_fields;
    ci->methods =  _LibXMLXPathExpression_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLXPathExpression_MetaInfoInitializer LibXMLXPathExpression_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLXPathNSResolver_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLXPathNSResolver>(length);
}

//static
::acdk::lang::RObject
LibXMLXPathNSResolver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLXPathNSResolver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathNSResolver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLXPathNSResolver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathNSResolver_method_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LibXMLXPathNSResolver((RLibXMLDocument)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathNSResolver_method_lookupNamespaceURI_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathNSResolver* This = dmi_cast<LibXMLXPathNSResolver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathNSResolver::lookupNamespaceURI((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookupNamespaceURI((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LibXMLXPathNSResolver_fields__doc_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LibXMLXPathNSResolver* This = dmi_cast<LibXMLXPathNSResolver>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_doc, flags);
    else
      This->_doc = (RLibXMLDocument)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LibXMLXPathNSResolver_fields__doc = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_doc", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLibXMLDocument::clazzInfo(),
  LibXMLXPathNSResolver_MetainfoWrapper::LibXMLXPathNSResolver_fields__doc_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLXPathNSResolver_fields[] = 
{
  &LibXMLXPathNSResolver_fields__doc,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathNSResolver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathNSResolver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathNSResolver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathNSResolver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLXPathNSResolver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLXPathNSResolver_MetainfoWrapper::LibXMLXPathNSResolver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__arg_doc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "doc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLibXMLDocument::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__args[] = 
{
  &LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__arg_doc,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathNSResolver_method_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LibXMLXPathNSResolver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LibXMLXPathNSResolver::clazzInfo(), // return type
  "_0_LibXMLXPathNSResolver", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__args, // the arguments
  0, //arguments count
  LibXMLXPathNSResolver_methods_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__exceptions, // the declared exceptions
  LibXMLXPathNSResolver_MetainfoWrapper::LibXMLXPathNSResolver_method_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__args[] = 
{
  &LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathNSResolver_method_lookupNamespaceURI_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupNamespaceURI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_lookupNamespaceURI", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__args, // the arguments
  0, //arguments count
  LibXMLXPathNSResolver_methods_lookupNamespaceURI_INLRString__LRString__exceptions, // the declared exceptions
  LibXMLXPathNSResolver_MetainfoWrapper::LibXMLXPathNSResolver_method_lookupNamespaceURI_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLXPathNSResolver_methods[] = 
{
  &LibXMLXPathNSResolver_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLXPathNSResolver_method_LibXMLXPathNSResolver_INLRLibXMLDocument__LRLibXMLXPathNSResolver_,
  &LibXMLXPathNSResolver_method_lookupNamespaceURI_INLRString__LRString_,
  0
};


struct LibXMLXPathNSResolver_MetaInfoInitializer
{  LibXMLXPathNSResolver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLXPathNSResolver::clazzInfo();
    ci->fields =  _LibXMLXPathNSResolver_fields;
    ci->methods =  _LibXMLXPathNSResolver_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLXPathNSResolver_MetaInfoInitializer LibXMLXPathNSResolver_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom


namespace acdk { 
namespace xml { 
namespace libxmldom { 


//static
::acdk::lang::RObject
LibXMLXPathResult_create_array(int length)
{
  return new ObjectArrayImpl<RLibXMLXPathResult>(length);
}

//static
::acdk::lang::RObject
LibXMLXPathResult_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LibXMLXPathResult_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LibXMLXPathResult::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getBooleanValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLXPathResult::getBooleanValue();
    else
      ret = This->getBooleanValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getInvalidIteratorState__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLXPathResult::getInvalidIteratorState();
    else
      ret = This->getInvalidIteratorState();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getNumberValue__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLXPathResult::getNumberValue();
    else
      ret = This->getNumberValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getObjectValue__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathResult::getObjectValue();
    else
        ret = (::acdk::lang::RObject)This->getObjectValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getResultType__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLXPathResult::getResultType();
    else
      ret = This->getResultType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathResult::getSingleNodeValue();
    else
        ret = (::acdk::lang::RObject)This->getSingleNodeValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getSnapshotLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LibXMLXPathResult::getSnapshotLength();
    else
      ret = This->getSnapshotLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_getStringValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathResult::getStringValue();
    else
        ret = (::acdk::lang::RObject)This->getStringValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_iterateNext__Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathResult::iterateNext();
    else
        ret = (::acdk::lang::RObject)This->iterateNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LibXMLXPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LibXMLXPathResult::snapshotItem(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->snapshotItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LibXMLXPathResult_fields__curIdx_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LibXMLXPathResult* This = dmi_cast<LibXMLXPathResult>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curIdx, flags);
    else
      This->_curIdx = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LibXMLXPathResult_fields__curIdx = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curIdx", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_fields__curIdx_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LibXMLXPathResult_fields[] = 
{
  &LibXMLXPathResult_fields__curIdx,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getBooleanValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getBooleanValue__Z_exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getBooleanValue__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getBooleanValue__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBooleanValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_getBooleanValue", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getBooleanValue__Z_args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getBooleanValue__Z_exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getBooleanValue__Z_dispatch, // invoke this method
  LibXMLXPathResult_getBooleanValue__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getInvalidIteratorState__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getInvalidIteratorState__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getInvalidIteratorState__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInvalidIteratorState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getInvalidIteratorState", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getInvalidIteratorState__Z_args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getInvalidIteratorState__Z_exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getInvalidIteratorState__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getNumberValue__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getNumberValue__D_exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getNumberValue__D_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getNumberValue__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_1_getNumberValue", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getNumberValue__D_args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getNumberValue__D_exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getNumberValue__D_dispatch, // invoke this method
  LibXMLXPathResult_getNumberValue__D_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getObjectValue__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getObjectValue__LRObject__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getObjectValue__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getObjectValue__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_9_getObjectValue", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getObjectValue__LRObject__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getObjectValue__LRObject__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getObjectValue__LRObject__dispatch, // invoke this method
  LibXMLXPathResult_getObjectValue__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getResultType__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getResultType__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getResultType__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_0_getResultType", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getResultType__S_args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getResultType__S_exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getResultType__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getSingleNodeValue__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSingleNodeValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_4_getSingleNodeValue", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getSingleNodeValue__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  LibXMLXPathResult_getSingleNodeValue__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getSnapshotLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getSnapshotLength__I_exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getSnapshotLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getSnapshotLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSnapshotLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getSnapshotLength", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getSnapshotLength__I_args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getSnapshotLength__I_exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getSnapshotLength__I_dispatch, // invoke this method
  LibXMLXPathResult_getSnapshotLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_getStringValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_getStringValue__LRString__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_getStringValue__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_getStringValue__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getStringValue", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_getStringValue__LRString__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_getStringValue__LRString__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_getStringValue__LRString__dispatch, // invoke this method
  LibXMLXPathResult_getStringValue__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  org::w3c::dom::RDOMException::clazzInfo(), 
  0
};

void LibXMLXPathResult_iterateNext__Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
 if (instanceof(ex, org::w3c::dom::DOMException) == true)
    THROW_INSTANCE( org::w3c::dom::RDOMException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_iterateNext__Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterateNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_7_iterateNext", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_iterateNext__Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_iterateNext__Lorg_w3c_dom_RNode__dispatch, // invoke this method
  LibXMLXPathResult_iterateNext__Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__args[] = 
{
  &LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__exceptions[] =
{
  org::w3c::dom::xpath::RXPathException::clazzInfo(), 
  0
};

void LibXMLXPathResult_snapshotItem_I_Lorg_w3c_dom_RNode__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, org::w3c::dom::xpath::XPathException) == true)
    THROW_INSTANCE( org::w3c::dom::xpath::RXPathException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LibXMLXPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "snapshotItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  org::w3c::dom::RNode::clazzInfo(), // return type
  "_8_snapshotItem", // alternative name of method
  -1, // altlabelHashCode
  LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__args, // the arguments
  0, //arguments count
  LibXMLXPathResult_methods_snapshotItem_I_Lorg_w3c_dom_RNode__exceptions, // the declared exceptions
  LibXMLXPathResult_MetainfoWrapper::LibXMLXPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode__dispatch, // invoke this method
  LibXMLXPathResult_snapshotItem_I_Lorg_w3c_dom_RNode__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LibXMLXPathResult_methods[] = 
{
  &LibXMLXPathResult_method_GetClass__L_acdk_lang_RClass_,
  &LibXMLXPathResult_method_getBooleanValue__Z,
  &LibXMLXPathResult_method_getInvalidIteratorState__Z,
  &LibXMLXPathResult_method_getNumberValue__D,
  &LibXMLXPathResult_method_getObjectValue__LRObject_,
  &LibXMLXPathResult_method_getResultType__S,
  &LibXMLXPathResult_method_getSingleNodeValue__Lorg_w3c_dom_RNode_,
  &LibXMLXPathResult_method_getSnapshotLength__I,
  &LibXMLXPathResult_method_getStringValue__LRString_,
  &LibXMLXPathResult_method_iterateNext__Lorg_w3c_dom_RNode_,
  &LibXMLXPathResult_method_snapshotItem_I_Lorg_w3c_dom_RNode_,
  0
};


struct LibXMLXPathResult_MetaInfoInitializer
{  LibXMLXPathResult_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LibXMLXPathResult::clazzInfo();
    ci->fields =  _LibXMLXPathResult_fields;
    ci->methods =  _LibXMLXPathResult_methods;
    ci->_scopeParent = acdk_xml_libxmldom_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LibXMLXPathResult_MetaInfoInitializer LibXMLXPathResult_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace xml
} // namespace libxmldom

