// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "dom.h"
#include "DOMParser.h"
#include "NodeArrayList.h"
#include "NodeIteratorWalker.h"
#include "NodeUtil.h"
#include "XMLAttr.h"
#include "XMLCDATASection.h"
#include "XMLCharacterData.h"
#include "XMLComment.h"
#include "XMLDocument.h"
#include "XMLElement.h"
#include "XMLNamedNodeMap.h"
#include "XMLNode.h"
#include "XMLNodeList.h"
#include "XMLText.h"

namespace acdk { 
namespace xml { 
namespace dom { 

using namespace acdk::lang;
using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _NodeArrayList_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NodeArrayList_super_org__w3c__dom__NodeList =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::NodeList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NodeArrayList_interfaces[] =
{
  &_NodeArrayList_super_acdk__lang__Object,
  &_NodeArrayList_super_org__w3c__dom__NodeList,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeArrayList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NodeArrayList", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NodeArrayList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NodeArrayList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NodeArrayList(NodeArrayList::clazzInfo());

::acdk::lang::RClass
NodeArrayList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NodeArrayList::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_childs._ref_this()); // RNodeArray _childs 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

::acdk::lang::dmi::ClazzSuperInfo _NodeIteratorWalker_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NodeIteratorWalker_super_org__w3c__dom__traversal__TreeWalker =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::traversal::TreeWalker::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _NodeIteratorWalker_super_org__w3c__dom__traversal__NodeIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::traversal::NodeIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NodeIteratorWalker_interfaces[] =
{
  &_NodeIteratorWalker_super_acdk__lang__Object,
  &_NodeIteratorWalker_super_org__w3c__dom__traversal__TreeWalker,
  &_NodeIteratorWalker_super_org__w3c__dom__traversal__NodeIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeIteratorWalker::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NodeIteratorWalker", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NodeIteratorWalker_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NodeIteratorWalker::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NodeIteratorWalker(NodeIteratorWalker::clazzInfo());

::acdk::lang::RClass
NodeIteratorWalker::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NodeIteratorWalker::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_curNode._ref_this()); // org::w3c::dom::RNode _curNode 
  fields.push_back((::acdk::lang::RObject*)this->_nodeFilter._ref_this()); // org::w3c::dom::traversal::RNodeFilter _nodeFilter 
  fields.push_back((::acdk::lang::RObject*)this->_rootNode._ref_this()); // org::w3c::dom::RNode _rootNode 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

::acdk::lang::dmi::ClazzSuperInfo _NodeUtil_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NodeUtil_interfaces[] =
{
  &_NodeUtil_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* NodeUtil::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NodeUtil", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NodeUtil_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NodeUtil::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NodeUtil(NodeUtil::clazzInfo());

::acdk::lang::RClass
NodeUtil::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NodeUtil::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLAttr_super_XMLNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLAttr_super_org__w3c__dom__Attr =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Attr::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLAttr_interfaces[] =
{
  &_XMLAttr_super_XMLNode,
  &_XMLAttr_super_org__w3c__dom__Attr,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLAttr::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLAttr", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLAttr_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLAttr::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLAttr(XMLAttr::clazzInfo());

::acdk::lang::RClass
XMLAttr::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLAttr::getCollectableFields(FieldReferences& fields)
{
  XMLNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_value._ref_this()); // RString _value 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLCDATASection_super_XMLText =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLText::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLCDATASection_super_org__w3c__dom__CDATASection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::CDATASection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLCDATASection_interfaces[] =
{
  &_XMLCDATASection_super_XMLText,
  &_XMLCDATASection_super_org__w3c__dom__CDATASection,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCDATASection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLCDATASection", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLCDATASection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLCDATASection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLCDATASection(XMLCDATASection::clazzInfo());

::acdk::lang::RClass
XMLCDATASection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLCDATASection::getCollectableFields(FieldReferences& fields)
{
  XMLText::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLCharacterData_super_XMLNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLCharacterData_super_org__w3c__dom__CharacterData =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::CharacterData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLCharacterData_interfaces[] =
{
  &_XMLCharacterData_super_XMLNode,
  &_XMLCharacterData_super_org__w3c__dom__CharacterData,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLCharacterData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLCharacterData", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLCharacterData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLCharacterData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLCharacterData(XMLCharacterData::clazzInfo());

::acdk::lang::RClass
XMLCharacterData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLCharacterData::getCollectableFields(FieldReferences& fields)
{
  XMLNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_data._ref_this()); // RStringBuffer _data 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLComment_super_XMLCharacterData =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLCharacterData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLComment_super_org__w3c__dom__Comment =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Comment::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLComment_interfaces[] =
{
  &_XMLComment_super_XMLCharacterData,
  &_XMLComment_super_org__w3c__dom__Comment,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLComment::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLComment", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLComment_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLComment::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLComment(XMLComment::clazzInfo());

::acdk::lang::RClass
XMLComment::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLComment::getCollectableFields(FieldReferences& fields)
{
  XMLCharacterData::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

::acdk::lang::dmi::ClazzSuperInfo _XMLDocument_super_XMLNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLDocument_super_org__w3c__dom__Document =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Document::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLDocument_super_org__w3c__dom__DOMImplementation =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::DOMImplementation::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLDocument_interfaces[] =
{
  &_XMLDocument_super_XMLNode,
  &_XMLDocument_super_org__w3c__dom__Document,
  &_XMLDocument_super_org__w3c__dom__DOMImplementation,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLDocument::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLDocument", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLDocument_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLDocument::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLDocument(XMLDocument::clazzInfo());

::acdk::lang::RClass
XMLDocument::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLDocument::getCollectableFields(FieldReferences& fields)
{
  XMLNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

::acdk::lang::dmi::ClazzSuperInfo _XMLElement_super_XMLNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLElement_super_org__w3c__dom__Element =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Element::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLElement_interfaces[] =
{
  &_XMLElement_super_XMLNode,
  &_XMLElement_super_org__w3c__dom__Element,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLElement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLElement", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLElement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLElement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLElement(XMLElement::clazzInfo());

::acdk::lang::RClass
XMLElement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLElement::getCollectableFields(FieldReferences& fields)
{
  XMLNode::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_attributes._ref_this()); // RXMLAttrArray _attributes 
  fields.push_back((::acdk::lang::RObject*)this->_document._ref_this()); // RDocument _document 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

::acdk::lang::dmi::ClazzSuperInfo _XMLNamedNodeMap_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLNamedNodeMap_super_org__w3c__dom__NamedNodeMap =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::NamedNodeMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLNamedNodeMap_interfaces[] =
{
  &_XMLNamedNodeMap_super_acdk__lang__Object,
  &_XMLNamedNodeMap_super_org__w3c__dom__NamedNodeMap,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNamedNodeMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLNamedNodeMap", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLNamedNodeMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLNamedNodeMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLNamedNodeMap(XMLNamedNodeMap::clazzInfo());

::acdk::lang::RClass
XMLNamedNodeMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLNamedNodeMap::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_attributes._ref_this()); // RXMLAttrArray _attributes 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLNode_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLNode_super_org__w3c__dom__Node =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Node::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLNode_interfaces[] =
{
  &_XMLNode_super_acdk__lang__Object,
  &_XMLNode_super_org__w3c__dom__Node,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLNode", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLNode(XMLNode::clazzInfo());

::acdk::lang::RClass
XMLNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLNode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_childs._ref_this()); // RXMLNodeArray _childs 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_value._ref_this()); // RString _value 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace acdk::lang;
using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLNodeList_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLNodeList_super_org__w3c__dom__NodeList =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::NodeList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLNodeList_interfaces[] =
{
  &_XMLNodeList_super_acdk__lang__Object,
  &_XMLNodeList_super_org__w3c__dom__NodeList,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLNodeList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLNodeList", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLNodeList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLNodeList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLNodeList(XMLNodeList::clazzInfo());

::acdk::lang::RClass
XMLNodeList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLNodeList::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_childs._ref_this()); // RXMLNodeArray _childs 
}


} // namespace acdk
} // namespace xml
} // namespace dom


namespace acdk { 
namespace xml { 
namespace dom { 

using namespace org::w3c::dom;
::acdk::lang::dmi::ClazzSuperInfo _XMLText_super_XMLCharacterData =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  XMLCharacterData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _XMLText_super_org__w3c__dom__Text =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  org::w3c::dom::Text::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _XMLText_interfaces[] =
{
  &_XMLText_super_XMLCharacterData,
  &_XMLText_super_org__w3c__dom__Text,
  0
};

::acdk::lang::dmi::ClazzInfo* XMLText::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "XMLText", // name of class
  -1, // hashCode
  "acdk/xml/dom", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _XMLText_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    XMLText::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_XMLText(XMLText::clazzInfo());

::acdk::lang::RClass
XMLText::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
XMLText::getCollectableFields(FieldReferences& fields)
{
  XMLCharacterData::getCollectableFields(fields);
}


} // namespace acdk
} // namespace xml
} // namespace dom

