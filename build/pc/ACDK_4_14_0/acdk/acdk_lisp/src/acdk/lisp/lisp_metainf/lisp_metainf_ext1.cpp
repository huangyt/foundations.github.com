// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lisp.h"
#include "../acdk_lisp_decl.h"
#include "../Config.h"
#include "../Function.h"
#include "../lisp.h"
#include "../LispArray.h"
#include "../LispAtom.h"
#include "../LispBinaryCode.h"
#include "../LispBuildInFunction.h"
#include "../LispCallBack.h"
#include "../LispClass.h"
#include "../LispCode.h"
#include "../LispDmiClient.h"
#include "../LispEnvironment.h"
#include "../LispException.h"
#include "../LispFunction.h"
#include "../LispInterpreter.h"
#include "../LispList.h"
#include "../LispObject.h"
#include "../LispSymbol.h"
#include "../LispTemplateFilter.h"
#include "../LispTokenizer.h"
#include "../LispVar.h"
#include "../StackFrame.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::lang::sys;
using namespace acdk::lang::dmi;

//static
::acdk::lang::RObject
LispVar_create_array(int length)
{
  return new ObjectArrayImpl<RLispVar>(length);
}

//static
::acdk::lang::RObject
LispVar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispVar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispVar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispVar* This = dmi_cast<LispVar>(This_);
    ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_getObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispVar* This = dmi_cast<LispVar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispVar::getObject();
    else
        ret = (::acdk::lang::RObject)This->getObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_getStringToken__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispVar* This = dmi_cast<LispVar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispVar::getStringToken();
    else
        ret = (::acdk::lang::RObject)This->getStringToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispVar* This = dmi_cast<LispVar>(This_);
    ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispVar_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispVar* This = dmi_cast<LispVar>(This_);
    ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LispVar_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispVar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_LispVar__LRLispVar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_LispVar__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_LispVar__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispVar::clazzInfo(), // return type
  "_0_LispVar", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_LispVar__LRLispVar__args, // the arguments
  0, //arguments count
  LispVar_methods_LispVar__LRLispVar__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispVar_methods_clone__LRObject__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_getObject__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_getObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_getObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_getObject", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_getObject__LRObject__args, // the arguments
  0, //arguments count
  LispVar_methods_getObject__LRObject__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_getObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_getStringToken__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_getStringToken__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_getStringToken__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getStringToken", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_getStringToken__LRString__args, // the arguments
  0, //arguments count
  LispVar_methods_getStringToken__LRString__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_getStringToken__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispVar_methods_toCode__LRString__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispVar_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispVar_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toString", // alternative name of method
  -1, // altlabelHashCode
  LispVar_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispVar_methods_toString__LRString__exceptions, // the declared exceptions
  LispVar_MetainfoWrapper::LispVar_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispVar_methods[] = 
{
  &LispVar_method_GetClass__L_acdk_lang_RClass_,
  &LispVar_method_LispVar__LRLispVar_,
  &LispVar_method_clone__LRObject_,
  &LispVar_method_getObject__LRObject_,
  &LispVar_method_getStringToken__LRString_,
  &LispVar_method_toCode__LRString_,
  &LispVar_method_toString__LRString_,
  0
};


struct LispVar_MetaInfoInitializer
{  LispVar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispVar::clazzInfo();
    ci->fields =  _LispVar_fields;
    ci->methods =  _LispVar_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispVar_MetaInfoInitializer LispVar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp

