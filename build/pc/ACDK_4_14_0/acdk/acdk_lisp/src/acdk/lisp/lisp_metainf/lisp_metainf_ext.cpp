// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../lisp.h"
#include "../acdk_lisp_decl.h"
#include "../Config.h"
#include "../Function.h"
#include "../lisp.h"
#include "../LispArray.h"
#include "../LispAtom.h"
#include "../LispBinaryCode.h"
#include "../LispBuildInFunction.h"
#include "../LispCallBack.h"
#include "../LispClass.h"
#include "../LispCode.h"
#include "../LispDmiClient.h"
#include "../LispEnvironment.h"
#include "../LispException.h"
#include "../LispFunction.h"
#include "../LispInterpreter.h"
#include "../LispList.h"
#include "../LispObject.h"
#include "../LispSymbol.h"
#include "../LispTemplateFilter.h"
#include "../LispTokenizer.h"
#include "../LispVar.h"
#include "../StackFrame.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_java_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "java", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_java_unitInfo(&acdk_java_unitInfo);


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
Function_create_array(int length)
{
  return new ObjectArrayImpl<RFunction>(length);
}

//static
::acdk::lang::RObject
Function_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Function_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Function::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Function* This = dmi_cast<Function>(This_);
    ret = (::acdk::lang::RObject)This->eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_functionName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Function* This = dmi_cast<Function>(This_);
    ret = (::acdk::lang::RObject)This->functionName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_getDeclDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Function* This = dmi_cast<Function>(This_);
    ret = (::acdk::lang::RObject)This->getDeclDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_getDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Function* This = dmi_cast<Function>(This_);
    ret = (::acdk::lang::RObject)This->getDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Function_method_getHelpText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Function* This = dmi_cast<Function>(This_);
    ret = (::acdk::lang::RObject)This->getHelpText();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Function_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Function_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args[] = 
{
  &Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env,
  &Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_1_eval", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  Function_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_functionName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_functionName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_functionName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "functionName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_functionName", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_functionName__LRString__args, // the arguments
  0, //arguments count
  Function_methods_functionName__LRString__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_functionName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_getDeclDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_getDeclDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_getDeclDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_4_getDeclDefinition", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_getDeclDefinition__LRLispList__args, // the arguments
  0, //arguments count
  Function_methods_getDeclDefinition__LRLispList__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_getDeclDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_getDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_getDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_getDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_3_getDefinition", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_getDefinition__LRLispList__args, // the arguments
  0, //arguments count
  Function_methods_getDefinition__LRLispList__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_getDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Function_methods_getHelpText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function_methods_getHelpText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Function_method_getHelpText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getHelpText", // alternative name of method
  -1, // altlabelHashCode
  Function_methods_getHelpText__LRString__args, // the arguments
  0, //arguments count
  Function_methods_getHelpText__LRString__exceptions, // the declared exceptions
  Function_MetainfoWrapper::Function_method_getHelpText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Function_methods[] = 
{
  &Function_method_GetClass__L_acdk_lang_RClass_,
  &Function_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_,
  &Function_method_functionName__LRString_,
  &Function_method_getDeclDefinition__LRLispList_,
  &Function_method_getDefinition__LRLispList_,
  &Function_method_getHelpText__LRString_,
  0
};


struct Function_MetaInfoInitializer
{  Function_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Function::clazzInfo();
    ci->fields =  _Function_fields;
    ci->methods =  _Function_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Function_MetaInfoInitializer Function_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispArray_create_array(int length)
{
  return new ObjectArrayImpl<RLispArray>(length);
}

//static
::acdk::lang::RObject
LispArray_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispArray_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispArray::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_LispArray_I_LRLispArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispArray(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_LispArray__LRLispArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_LispArray_INLRLispList__LRLispArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispArray((RLispList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_append_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispArray::append((RLispVar)args[0].getObjectVar());
    else
        This->append((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispArray::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_get_I_LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispArray::get(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->get(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_last__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispArray::last();
    else
        ret = (::acdk::lang::RObject)This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispArray::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_set_IINLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispArray::set(args[0].getIntVar(), (RLispVar)args[1].getObjectVar());
    else
        This->set(args[0].getIntVar(), (RLispVar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispArray::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispArray_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispArray::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispArray_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispArray* This = dmi_cast<LispArray>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = (RLispVarArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispArray_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVarArray::clazzInfo(),
  LispArray_MetainfoWrapper::LispArray_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispArray_fields[] = 
{
  &LispArray_fields__list,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispArray_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_LispArray_I_LRLispArray__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_LispArray_I_LRLispArray__args[] = 
{
  &LispArray_methods_LispArray_I_LRLispArray__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_LispArray_I_LRLispArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_LispArray_I_LRLispArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispArray::clazzInfo(), // return type
  "_0_LispArray", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_LispArray_I_LRLispArray__args, // the arguments
  0, //arguments count
  LispArray_methods_LispArray_I_LRLispArray__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_LispArray_I_LRLispArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_LispArray__LRLispArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_LispArray__LRLispArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_LispArray__LRLispArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispArray::clazzInfo(), // return type
  "_1_LispArray", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_LispArray__LRLispArray__args, // the arguments
  0, //arguments count
  LispArray_methods_LispArray__LRLispArray__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_LispArray__LRLispArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_LispArray_INLRLispList__LRLispArray__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_LispArray_INLRLispList__LRLispArray__args[] = 
{
  &LispArray_methods_LispArray_INLRLispList__LRLispArray__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_LispArray_INLRLispList__LRLispArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_LispArray_INLRLispList__LRLispArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispArray::clazzInfo(), // return type
  "_2_LispArray", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_LispArray_INLRLispList__LRLispArray__args, // the arguments
  0, //arguments count
  LispArray_methods_LispArray_INLRLispList__LRLispArray__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_LispArray_INLRLispList__LRLispArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_append_INLRLispVar__V_arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_append_INLRLispVar__V_args[] = 
{
  &LispArray_methods_append_INLRLispVar__V_arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_append_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_append_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_append", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_append_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispArray_methods_append_INLRLispVar__V_exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_append_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_clone", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispArray_methods_clone__LRObject__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_get_I_LRLispVar__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_get_I_LRLispVar__args[] = 
{
  &LispArray_methods_get_I_LRLispVar__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_get_I_LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_get_I_LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_9_get", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_get_I_LRLispVar__args, // the arguments
  0, //arguments count
  LispArray_methods_get_I_LRLispVar__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_get_I_LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_last__LRLispVar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_last__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_last__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_5_last", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_last__LRLispVar__args, // the arguments
  0, //arguments count
  LispArray_methods_last__LRLispVar__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_last__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_length", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_length__I_args, // the arguments
  0, //arguments count
  LispArray_methods_length__I_exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_set_IINLRLispVar__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispArray_methods_set_IINLRLispVar__V_arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_set_IINLRLispVar__V_args[] = 
{
  &LispArray_methods_set_IINLRLispVar__V_arg_i,
  &LispArray_methods_set_IINLRLispVar__V_arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_set_IINLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_set_IINLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_set", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_set_IINLRLispVar__V_args, // the arguments
  0, //arguments count
  LispArray_methods_set_IINLRLispVar__V_exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_set_IINLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispArray_methods_toCode__LRString__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispArray_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispArray_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toString", // alternative name of method
  -1, // altlabelHashCode
  LispArray_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispArray_methods_toString__LRString__exceptions, // the declared exceptions
  LispArray_MetainfoWrapper::LispArray_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispArray_methods[] = 
{
  &LispArray_method_GetClass__L_acdk_lang_RClass_,
  &LispArray_method_LispArray_I_LRLispArray_,
  &LispArray_method_LispArray__LRLispArray_,
  &LispArray_method_LispArray_INLRLispList__LRLispArray_,
  &LispArray_method_append_INLRLispVar__V,
  &LispArray_method_clone__LRObject_,
  &LispArray_method_get_I_LRLispVar_,
  &LispArray_method_last__LRLispVar_,
  &LispArray_method_length__I,
  &LispArray_method_set_IINLRLispVar__V,
  &LispArray_method_toCode__LRString_,
  &LispArray_method_toString__LRString_,
  0
};


struct LispArray_MetaInfoInitializer
{  LispArray_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispArray::clazzInfo();
    ci->fields =  _LispArray_fields;
    ci->methods =  _LispArray_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispArray_MetaInfoInitializer LispArray_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispAtom_create_array(int length)
{
  return new ObjectArrayImpl<RLispAtom>(length);
}

//static
::acdk::lang::RObject
LispAtom_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispAtom_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispAtom::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_LispAtom_J_LRLispAtom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispAtom(args[0].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_LispAtom_D_LRLispAtom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispAtom(args[0].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_LispAtom_INLRString__LRLispAtom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispAtom((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispAtom::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispAtom::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_getObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispAtom::getObject();
    else
        ret = (::acdk::lang::RObject)This->getObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispAtom::readObject((::acdk::io::RObjectReader)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    else
        This->readObject((::acdk::io::RObjectReader)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispAtom::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispAtom::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispAtom_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispAtom* This = dmi_cast<LispAtom>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispAtom::writeObject((::acdk::io::RObjectWriter)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    else
        This->writeObject((::acdk::io::RObjectWriter)args[0].getObjectVar(), (RClass)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LispAtom_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispAtom_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_LispAtom_J_LRLispAtom__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_LispAtom_J_LRLispAtom__args[] = 
{
  &LispAtom_methods_LispAtom_J_LRLispAtom__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_LispAtom_J_LRLispAtom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_LispAtom_J_LRLispAtom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispAtom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispAtom::clazzInfo(), // return type
  "_2_LispAtom", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_LispAtom_J_LRLispAtom__args, // the arguments
  0, //arguments count
  LispAtom_methods_LispAtom_J_LRLispAtom__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_LispAtom_J_LRLispAtom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_LispAtom_D_LRLispAtom__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_LispAtom_D_LRLispAtom__args[] = 
{
  &LispAtom_methods_LispAtom_D_LRLispAtom__arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_LispAtom_D_LRLispAtom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_LispAtom_D_LRLispAtom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispAtom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispAtom::clazzInfo(), // return type
  "_3_LispAtom", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_LispAtom_D_LRLispAtom__args, // the arguments
  0, //arguments count
  LispAtom_methods_LispAtom_D_LRLispAtom__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_LispAtom_D_LRLispAtom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_LispAtom_INLRString__LRLispAtom__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_LispAtom_INLRString__LRLispAtom__args[] = 
{
  &LispAtom_methods_LispAtom_INLRString__LRLispAtom__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_LispAtom_INLRString__LRLispAtom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_LispAtom_INLRString__LRLispAtom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispAtom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispAtom::clazzInfo(), // return type
  "_1_LispAtom", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_LispAtom_INLRString__LRLispAtom__args, // the arguments
  0, //arguments count
  LispAtom_methods_LispAtom_INLRString__LRLispAtom__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_LispAtom_INLRString__LRLispAtom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_clone", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispAtom_methods_clone__LRObject__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispAtom_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_getObject__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_getObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_getObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_getObject", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_getObject__LRObject__args, // the arguments
  0, //arguments count
  LispAtom_methods_getObject__LRObject__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_getObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_args[] = 
{
  &LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_in,
  &LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_readObject", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_args, // the arguments
  0, //arguments count
  LispAtom_methods_readObject_INL_acdk_io_RObjectReader_INLRClass__V_exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispAtom_methods_toCode__LRString__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toString", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispAtom_methods_toString__LRString__exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RObjectWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_args[] = 
{
  &LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_out,
  &LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispAtom_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_writeObject", // alternative name of method
  -1, // altlabelHashCode
  LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_args, // the arguments
  0, //arguments count
  LispAtom_methods_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_exceptions, // the declared exceptions
  LispAtom_MetainfoWrapper::LispAtom_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispAtom_methods[] = 
{
  &LispAtom_method_GetClass__L_acdk_lang_RClass_,
  &LispAtom_method_LispAtom_J_LRLispAtom_,
  &LispAtom_method_LispAtom_D_LRLispAtom_,
  &LispAtom_method_LispAtom_INLRString__LRLispAtom_,
  &LispAtom_method_clone__LRObject_,
  &LispAtom_method_create_instance__LRObject_,
  &LispAtom_method_getObject__LRObject_,
  &LispAtom_method_readObject_INL_acdk_io_RObjectReader_INLRClass__V,
  &LispAtom_method_toCode__LRString_,
  &LispAtom_method_toString__LRString_,
  &LispAtom_method_writeObject_INL_acdk_io_RObjectWriter_INLRClass__V,
  0
};


struct LispAtom_MetaInfoInitializer
{  LispAtom_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispAtom::clazzInfo();
    ci->fields =  _LispAtom_fields;
    ci->methods =  _LispAtom_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispAtom_MetaInfoInitializer LispAtom_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispBinaryCode_create_array(int length)
{
  return new ObjectArrayImpl<RLispBinaryCode>(length);
}

//static
::acdk::lang::RObject
LispBinaryCode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispBinaryCode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBinaryCode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispBinaryCode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBinaryCode_method_LispBinaryCode__LRLispBinaryCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispBinaryCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispBinaryCode_fields_defuns_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispBinaryCode* This = dmi_cast<LispBinaryCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->defuns, flags);
    else
      This->defuns = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispBinaryCode_fields_globals_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispBinaryCode* This = dmi_cast<LispBinaryCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->globals, flags);
    else
      This->globals = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispBinaryCode_fields_macros_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispBinaryCode* This = dmi_cast<LispBinaryCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->macros, flags);
    else
      This->macros = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispBinaryCode_fields_defuns = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "defuns", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispBinaryCode_MetainfoWrapper::LispBinaryCode_fields_defuns_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispBinaryCode_fields_globals = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "globals", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispBinaryCode_MetainfoWrapper::LispBinaryCode_fields_globals_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispBinaryCode_fields_macros = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "macros", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispBinaryCode_MetainfoWrapper::LispBinaryCode_fields_macros_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispBinaryCode_fields[] = 
{
  &LispBinaryCode_fields_defuns,
  &LispBinaryCode_fields_globals,
  &LispBinaryCode_fields_macros,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBinaryCode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBinaryCode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBinaryCode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispBinaryCode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispBinaryCode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispBinaryCode_MetainfoWrapper::LispBinaryCode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBinaryCode_methods_LispBinaryCode__LRLispBinaryCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBinaryCode_methods_LispBinaryCode__LRLispBinaryCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBinaryCode_method_LispBinaryCode__LRLispBinaryCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispBinaryCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispBinaryCode::clazzInfo(), // return type
  "_0_LispBinaryCode", // alternative name of method
  -1, // altlabelHashCode
  LispBinaryCode_methods_LispBinaryCode__LRLispBinaryCode__args, // the arguments
  0, //arguments count
  LispBinaryCode_methods_LispBinaryCode__LRLispBinaryCode__exceptions, // the declared exceptions
  LispBinaryCode_MetainfoWrapper::LispBinaryCode_method_LispBinaryCode__LRLispBinaryCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispBinaryCode_methods[] = 
{
  &LispBinaryCode_method_GetClass__L_acdk_lang_RClass_,
  &LispBinaryCode_method_LispBinaryCode__LRLispBinaryCode_,
  0
};


struct LispBinaryCode_MetaInfoInitializer
{  LispBinaryCode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispBinaryCode::clazzInfo();
    ci->fields =  _LispBinaryCode_fields;
    ci->methods =  _LispBinaryCode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispBinaryCode_MetaInfoInitializer LispBinaryCode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispBuildInFunction_create_array(int length)
{
  return new ObjectArrayImpl<RLispBuildInFunction>(length);
}

//static
::acdk::lang::RObject
LispBuildInFunction_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispBuildInFunction_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispBuildInFunction::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispBuildInFunction((RString)args[0].getObjectVar(), (RFunction)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_functionName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::functionName();
    else
        ret = (::acdk::lang::RObject)This->functionName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_getDeclDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::getDeclDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDeclDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_getDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::getDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_getFunction__LRFunction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::getFunction();
    else
        ret = (::acdk::lang::RObject)This->getFunction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_getHelpText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::getHelpText();
    else
        ret = (::acdk::lang::RObject)This->getHelpText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_name__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::name();
    else
        ret = (::acdk::lang::RObject)This->name();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispBuildInFunction_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispBuildInFunction::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispBuildInFunction_fields__function_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_function, flags);
    else
      This->_function = (RFunction)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispBuildInFunction_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispBuildInFunction* This = dmi_cast<LispBuildInFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispBuildInFunction_fields__function = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_function", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFunction::clazzInfo(),
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_fields__function_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispBuildInFunction_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispBuildInFunction_fields[] = 
{
  &LispBuildInFunction_fields__function,
  &LispBuildInFunction_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__arg_function = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "function", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFunction::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__args[] = 
{
  &LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__arg_name,
  &LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__arg_function,
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispBuildInFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispBuildInFunction::clazzInfo(), // return type
  "_0_LispBuildInFunction", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_clone", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_clone__LRObject__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args[] = 
{
  &LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env,
  &LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_a_eval", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_functionName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_functionName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_functionName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "functionName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_functionName", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_functionName__LRString__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_functionName__LRString__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_functionName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_getDeclDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_getDeclDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_getDeclDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_9_getDeclDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_getDeclDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_getDeclDefinition__LRLispList__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_getDeclDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_getDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_getDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_getDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_8_getDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_getDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_getDefinition__LRLispList__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_getDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_getFunction__LRFunction__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_getFunction__LRFunction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_getFunction__LRFunction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFunction::clazzInfo(), // return type
  "_5_getFunction", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_getFunction__LRFunction__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_getFunction__LRFunction__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_getFunction__LRFunction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_getHelpText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_getHelpText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_getHelpText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getHelpText", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_getHelpText__LRString__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_getHelpText__LRString__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_getHelpText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_name__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_name__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_name__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "name", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_name", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_name__LRString__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_name__LRString__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_name__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_toCode__LRString__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispBuildInFunction_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispBuildInFunction_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  LispBuildInFunction_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispBuildInFunction_methods_toString__LRString__exceptions, // the declared exceptions
  LispBuildInFunction_MetainfoWrapper::LispBuildInFunction_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispBuildInFunction_methods[] = 
{
  &LispBuildInFunction_method_GetClass__L_acdk_lang_RClass_,
  &LispBuildInFunction_method_LispBuildInFunction_INLRString_INLRFunction__LRLispBuildInFunction_,
  &LispBuildInFunction_method_clone__LRObject_,
  &LispBuildInFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_,
  &LispBuildInFunction_method_functionName__LRString_,
  &LispBuildInFunction_method_getDeclDefinition__LRLispList_,
  &LispBuildInFunction_method_getDefinition__LRLispList_,
  &LispBuildInFunction_method_getFunction__LRFunction_,
  &LispBuildInFunction_method_getHelpText__LRString_,
  &LispBuildInFunction_method_name__LRString_,
  &LispBuildInFunction_method_toCode__LRString_,
  &LispBuildInFunction_method_toString__LRString_,
  0
};


struct LispBuildInFunction_MetaInfoInitializer
{  LispBuildInFunction_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispBuildInFunction::clazzInfo();
    ci->fields =  _LispBuildInFunction_fields;
    ci->methods =  _LispBuildInFunction_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispBuildInFunction_MetaInfoInitializer LispBuildInFunction_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispCallBack_create_array(int length)
{
  return new ObjectArrayImpl<RLispCallBack>(length);
}

//static
::acdk::lang::RObject
LispCallBack_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispCallBack_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispCallBack::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCallBack::eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_functionName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCallBack::functionName();
    else
        ret = (::acdk::lang::RObject)This->functionName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_getDeclDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCallBack::getDeclDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDeclDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_getDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCallBack::getDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_getHelpText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCallBack::getHelpText();
    else
        ret = (::acdk::lang::RObject)This->getHelpText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_ownScope__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispCallBack::ownScope();
    else
      ret = This->ownScope();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCallBack_method_ownScope_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispCallBack::ownScope(args[0].getBoolVar());
    else
        This->ownScope(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCallBack_fields__declCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_declCode, flags);
    else
      This->_declCode = (RLispList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCallBack_fields__evalargs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_evalargs, flags);
    else
      This->_evalargs = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCallBack_fields__ownScope_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCallBack* This = dmi_cast<LispCallBack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ownScope, flags);
    else
      This->_ownScope = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispCallBack_fields__declCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_declCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(),
  LispCallBack_MetainfoWrapper::LispCallBack_fields__declCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispCallBack_fields__evalargs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_evalargs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispCallBack_MetainfoWrapper::LispCallBack_fields__evalargs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispCallBack_fields__ownScope = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_ownScope", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispCallBack_MetainfoWrapper::LispCallBack_fields__ownScope_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispCallBack_fields[] = 
{
  &LispCallBack_fields__declCode,
  &LispCallBack_fields__evalargs,
  &LispCallBack_fields__ownScope,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispCallBack_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args[] = 
{
  &LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env,
  &LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_1_eval", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  LispCallBack_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_functionName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_functionName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_functionName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "functionName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_functionName", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_functionName__LRString__args, // the arguments
  0, //arguments count
  LispCallBack_methods_functionName__LRString__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_functionName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_getDeclDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_getDeclDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_getDeclDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_4_getDeclDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_getDeclDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispCallBack_methods_getDeclDefinition__LRLispList__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_getDeclDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_getDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_getDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_getDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_3_getDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_getDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispCallBack_methods_getDefinition__LRLispList__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_getDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_getHelpText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_getHelpText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_getHelpText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getHelpText", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_getHelpText__LRString__args, // the arguments
  0, //arguments count
  LispCallBack_methods_getHelpText__LRString__exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_getHelpText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_ownScope__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_ownScope__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_ownScope__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownScope", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_ownScope", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_ownScope__Z_args, // the arguments
  0, //arguments count
  LispCallBack_methods_ownScope__Z_exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_ownScope__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispCallBack_methods_ownScope_Z_V_arg_own = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "own", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCallBack_methods_ownScope_Z_V_args[] = 
{
  &LispCallBack_methods_ownScope_Z_V_arg_own,
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack_methods_ownScope_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCallBack_method_ownScope_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownScope", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_ownScope", // alternative name of method
  -1, // altlabelHashCode
  LispCallBack_methods_ownScope_Z_V_args, // the arguments
  0, //arguments count
  LispCallBack_methods_ownScope_Z_V_exceptions, // the declared exceptions
  LispCallBack_MetainfoWrapper::LispCallBack_method_ownScope_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispCallBack_methods[] = 
{
  &LispCallBack_method_GetClass__L_acdk_lang_RClass_,
  &LispCallBack_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_,
  &LispCallBack_method_functionName__LRString_,
  &LispCallBack_method_getDeclDefinition__LRLispList_,
  &LispCallBack_method_getDefinition__LRLispList_,
  &LispCallBack_method_getHelpText__LRString_,
  &LispCallBack_method_ownScope__Z,
  &LispCallBack_method_ownScope_Z_V,
  0
};


struct LispCallBack_MetaInfoInitializer
{  LispCallBack_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispCallBack::clazzInfo();
    ci->fields =  _LispCallBack_fields;
    ci->methods =  _LispCallBack_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispCallBack_MetaInfoInitializer LispCallBack_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispSlot_create_array(int length)
{
  return new ObjectArrayImpl<RLispSlot>(length);
}

//static
::acdk::lang::RObject
LispSlot_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispSlot_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispSlot::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_LispSlot_INLRString__LRLispSlot__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispSlot((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_LispSlot_INLRString_Z_LRLispSlot__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispSlot((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispSlot((RString)args[0].getObjectVar(), args[1].getBoolVar(), (RString)args[2].getObjectVar(), (RLispVar)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_LispSlot_INLRString_ZINLRString__LRLispSlot__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispSlot((RString)args[0].getObjectVar(), args[1].getBoolVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispSlot::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSlot_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispSlot* This = dmi_cast<LispSlot>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispSlot::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispSlot_fields_initarg_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispSlot* This = dmi_cast<LispSlot>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->initarg, flags);
    else
      This->initarg = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispSlot_fields_initform_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispSlot* This = dmi_cast<LispSlot>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->initform, flags);
    else
      This->initform = (RLispVar)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispSlot_fields_isStatic_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispSlot* This = dmi_cast<LispSlot>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->isStatic, flags);
    else
      This->isStatic = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispSlot_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispSlot* This = dmi_cast<LispSlot>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispSlot_fields_initarg = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "initarg", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispSlot_MetainfoWrapper::LispSlot_fields_initarg_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispSlot_fields_initform = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "initform", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(),
  LispSlot_MetainfoWrapper::LispSlot_fields_initform_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispSlot_fields_isStatic = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "isStatic", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispSlot_MetainfoWrapper::LispSlot_fields_isStatic_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispSlot_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispSlot_MetainfoWrapper::LispSlot_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispSlot_fields[] = 
{
  &LispSlot_fields_initarg,
  &LispSlot_fields_initform,
  &LispSlot_fields_isStatic,
  &LispSlot_fields_name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispSlot_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString__LRLispSlot__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_LispSlot_INLRString__LRLispSlot__args[] = 
{
  &LispSlot_methods_LispSlot_INLRString__LRLispSlot__arg_nam,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_LispSlot_INLRString__LRLispSlot__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_LispSlot_INLRString__LRLispSlot_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispSlot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispSlot::clazzInfo(), // return type
  "_2_LispSlot", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_LispSlot_INLRString__LRLispSlot__args, // the arguments
  0, //arguments count
  LispSlot_methods_LispSlot_INLRString__LRLispSlot__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_LispSlot_INLRString__LRLispSlot__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__arg_isstatic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isstatic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__args[] = 
{
  &LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__arg_nam,
  &LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__arg_isstatic,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_LispSlot_INLRString_Z_LRLispSlot_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispSlot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispSlot::clazzInfo(), // return type
  "_3_LispSlot", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__args, // the arguments
  0, //arguments count
  LispSlot_methods_LispSlot_INLRString_Z_LRLispSlot__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_LispSlot_INLRString_Z_LRLispSlot__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_isstatic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isstatic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_inita = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "inita", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_initval = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initval", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__args[] = 
{
  &LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_nam,
  &LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_isstatic,
  &LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_inita,
  &LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__arg_initval,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispSlot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispSlot::clazzInfo(), // return type
  "_1_LispSlot", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__args, // the arguments
  0, //arguments count
  LispSlot_methods_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_isstatic = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "isstatic", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_inita = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "inita", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__args[] = 
{
  &LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_nam,
  &LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_isstatic,
  &LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__arg_inita,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_LispSlot_INLRString_ZINLRString__LRLispSlot_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispSlot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispSlot::clazzInfo(), // return type
  "_4_LispSlot", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__args, // the arguments
  0, //arguments count
  LispSlot_methods_LispSlot_INLRString_ZINLRString__LRLispSlot__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_LispSlot_INLRString_ZINLRString__LRLispSlot__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispSlot_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSlot_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSlot_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispSlot_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispSlot_methods_toCode__LRString__exceptions, // the declared exceptions
  LispSlot_MetainfoWrapper::LispSlot_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispSlot_methods[] = 
{
  &LispSlot_method_GetClass__L_acdk_lang_RClass_,
  &LispSlot_method_LispSlot_INLRString__LRLispSlot_,
  &LispSlot_method_LispSlot_INLRString_Z_LRLispSlot_,
  &LispSlot_method_LispSlot_INLRString_ZINLRString_INLRLispVar__LRLispSlot_,
  &LispSlot_method_LispSlot_INLRString_ZINLRString__LRLispSlot_,
  &LispSlot_method_create_instance__LRObject_,
  &LispSlot_method_toCode__LRString_,
  0
};


struct LispSlot_MetaInfoInitializer
{  LispSlot_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispSlot::clazzInfo();
    ci->fields =  _LispSlot_fields;
    ci->methods =  _LispSlot_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispSlot_MetaInfoInitializer LispSlot_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispClass_create_array(int length)
{
  return new ObjectArrayImpl<RLispClass>(length);
}

//static
::acdk::lang::RObject
LispClass_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispClass_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispClass::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_LispClass_INLRString__LRLispClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispClass((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_addClass_INLRLispClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispClass::addClass((RLispClass)args[0].getObjectVar());
    else
        This->addClass((RLispClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_addSlot_INLRLispSlot__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispClass::addSlot((RLispSlot)args[0].getObjectVar());
    else
        This->addSlot((RLispSlot)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_className__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispClass::className();
    else
        ret = (::acdk::lang::RObject)This->className();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispClass::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_slots__LRLispSlotArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispClass::slots();
    else
        ret = (::acdk::lang::RObject)This->slots();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispClass_method_supers__LRLispClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispClass::supers();
    else
        ret = (::acdk::lang::RObject)This->supers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispClass_fields__className_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_className, flags);
    else
      This->_className = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispClass_fields__slots_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_slots, flags);
    else
      This->_slots = (RLispSlotArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispClass_fields__superClasses_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispClass* This = dmi_cast<LispClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_superClasses, flags);
    else
      This->_superClasses = (RLispClassArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispClass_fields__className = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_className", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispClass_MetainfoWrapper::LispClass_fields__className_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispClass_fields__slots = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_slots", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispSlotArray::clazzInfo(),
  LispClass_MetainfoWrapper::LispClass_fields__slots_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispClass_fields__superClasses = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_superClasses", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispClassArray::clazzInfo(),
  LispClass_MetainfoWrapper::LispClass_fields__superClasses_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispClass_fields[] = 
{
  &LispClass_fields__className,
  &LispClass_fields__slots,
  &LispClass_fields__superClasses,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispClass_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispClass_methods_LispClass_INLRString__LRLispClass__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_LispClass_INLRString__LRLispClass__args[] = 
{
  &LispClass_methods_LispClass_INLRString__LRLispClass__arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_LispClass_INLRString__LRLispClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_LispClass_INLRString__LRLispClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispClass::clazzInfo(), // return type
  "_1_LispClass", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_LispClass_INLRString__LRLispClass__args, // the arguments
  0, //arguments count
  LispClass_methods_LispClass_INLRString__LRLispClass__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_LispClass_INLRString__LRLispClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispClass_methods_addClass_INLRLispClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_addClass_INLRLispClass__V_args[] = 
{
  &LispClass_methods_addClass_INLRLispClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_addClass_INLRLispClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_addClass_INLRLispClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addClass", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_addClass_INLRLispClass__V_args, // the arguments
  0, //arguments count
  LispClass_methods_addClass_INLRLispClass__V_exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_addClass_INLRLispClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispClass_methods_addSlot_INLRLispSlot__V_arg_slot = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "slot", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispSlot::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_addSlot_INLRLispSlot__V_args[] = 
{
  &LispClass_methods_addSlot_INLRLispSlot__V_arg_slot,
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_addSlot_INLRLispSlot__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_addSlot_INLRLispSlot__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSlot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addSlot", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_addSlot_INLRLispSlot__V_args, // the arguments
  0, //arguments count
  LispClass_methods_addSlot_INLRLispSlot__V_exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_addSlot_INLRLispSlot__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_className__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_className__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_className__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "className", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_className", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_className__LRString__args, // the arguments
  0, //arguments count
  LispClass_methods_className__LRString__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_className__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispClass_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_slots__LRLispSlotArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_slots__LRLispSlotArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_slots__LRLispSlotArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "slots", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispSlotArray::clazzInfo(), // return type
  "_4_slots", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_slots__LRLispSlotArray__args, // the arguments
  0, //arguments count
  LispClass_methods_slots__LRLispSlotArray__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_slots__LRLispSlotArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispClass_methods_supers__LRLispClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass_methods_supers__LRLispClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispClass_method_supers__LRLispClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispClassArray::clazzInfo(), // return type
  "_3_supers", // alternative name of method
  -1, // altlabelHashCode
  LispClass_methods_supers__LRLispClassArray__args, // the arguments
  0, //arguments count
  LispClass_methods_supers__LRLispClassArray__exceptions, // the declared exceptions
  LispClass_MetainfoWrapper::LispClass_method_supers__LRLispClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispClass_methods[] = 
{
  &LispClass_method_GetClass__L_acdk_lang_RClass_,
  &LispClass_method_LispClass_INLRString__LRLispClass_,
  &LispClass_method_addClass_INLRLispClass__V,
  &LispClass_method_addSlot_INLRLispSlot__V,
  &LispClass_method_className__LRString_,
  &LispClass_method_create_instance__LRObject_,
  &LispClass_method_slots__LRLispSlotArray_,
  &LispClass_method_supers__LRLispClassArray_,
  0
};


struct LispClass_MetaInfoInitializer
{  LispClass_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispClass::clazzInfo();
    ci->fields =  _LispClass_fields;
    ci->methods =  _LispClass_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispClass_MetaInfoInitializer LispClass_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispCode_create_array(int length)
{
  return new ObjectArrayImpl<RLispCode>(length);
}

//static
::acdk::lang::RObject
LispCode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispCode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispCode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_LispCode__LRLispCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_append_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispCode::append((RLispVar)args[0].getObjectVar());
    else
        This->append((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_code__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCode::code();
    else
        ret = (::acdk::lang::RObject)This->code();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispCode::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispCode_method_last__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispCode::last();
    else
        ret = (::acdk::lang::RObject)This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCode_fields__code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_code, flags);
    else
      This->_code = (RLispList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCode_fields__last_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_last, flags);
    else
      This->_last = (RLispList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispCode_fields_quotech_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispCode* This = dmi_cast<LispCode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->quotech, flags);
    else
      This->quotech = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispCode_fields__code = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(),
  LispCode_MetainfoWrapper::LispCode_fields__code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispCode_fields__last = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_last", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(),
  LispCode_MetainfoWrapper::LispCode_fields__last_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispCode_fields_quotech = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "quotech", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LispCode_MetainfoWrapper::LispCode_fields_quotech_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispCode_fields[] = 
{
  &LispCode_fields__code,
  &LispCode_fields__last,
  &LispCode_fields_quotech,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispCode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_LispCode__LRLispCode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_LispCode__LRLispCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_LispCode__LRLispCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispCode::clazzInfo(), // return type
  "_1_LispCode", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_LispCode__LRLispCode__args, // the arguments
  0, //arguments count
  LispCode_methods_LispCode__LRLispCode__exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_LispCode__LRLispCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispCode_methods_append_INLRLispVar__V_arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_append_INLRLispVar__V_args[] = 
{
  &LispCode_methods_append_INLRLispVar__V_arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_append_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_append_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_append", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_append_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispCode_methods_append_INLRLispVar__V_exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_append_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_code__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_code__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_code__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "code", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_4_code", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_code__LRLispList__args, // the arguments
  0, //arguments count
  LispCode_methods_code__LRLispList__exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_code__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispCode_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispCode_methods_last__LRLispVar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode_methods_last__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispCode_method_last__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_3_last", // alternative name of method
  -1, // altlabelHashCode
  LispCode_methods_last__LRLispVar__args, // the arguments
  0, //arguments count
  LispCode_methods_last__LRLispVar__exceptions, // the declared exceptions
  LispCode_MetainfoWrapper::LispCode_method_last__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispCode_methods[] = 
{
  &LispCode_method_GetClass__L_acdk_lang_RClass_,
  &LispCode_method_LispCode__LRLispCode_,
  &LispCode_method_append_INLRLispVar__V,
  &LispCode_method_code__LRLispList_,
  &LispCode_method_create_instance__LRObject_,
  &LispCode_method_last__LRLispVar_,
  0
};


struct LispCode_MetaInfoInitializer
{  LispCode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispCode::clazzInfo();
    ci->fields =  _LispCode_fields;
    ci->methods =  _LispCode_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispCode_MetaInfoInitializer LispCode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::io;
using namespace acdk::util;

//static
::acdk::lang::RObject
LispEnvironment_create_array(int length)
{
  return new ObjectArrayImpl<RLispEnvironment>(length);
}

//static
::acdk::lang::RObject
LispEnvironment_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispEnvironment_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispEnvironment::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispEnvironment((acdk::util::RProperties)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_LispEnvironment__LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispEnvironment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispEnvironment((acdk::util::RProperties)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispEnvironment((acdk::util::RProperties)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method__eval_INLRLispVar__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::_eval((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_eval((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method__eval_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::_eval((RLispList)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_eval((RLispList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method__eval_INLRLispSymbol__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::_eval((RLispSymbol)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_eval((RLispSymbol)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method__eval_INLRLispAtom__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::_eval((RLispAtom)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_eval((RLispAtom)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method__staticFuncs__Lacdk_util_RHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispEnvironment::_staticFuncs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindGlobal_INLRString_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindGlobal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    else
        This->bindGlobal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindGlobal_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindGlobal((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->bindGlobal((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindLocal_INLRString_INLRLispVar_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindLocal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar(), args[2].getBoolVar());
    else
        This->bindLocal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindLocal_INLRString_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindLocal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    else
        This->bindLocal((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindToEnv_INLRString_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindToEnv((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    else
        This->bindToEnv((RString)args[0].getObjectVar(), (RLispVar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_bindToEnv_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::bindToEnv((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->bindToEnv((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_buildinsIterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::buildinsIterator();
    else
        ret = (::acdk::lang::RObject)This->buildinsIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_debug_interactive_INLRLispVar__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::debug_interactive((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->debug_interactive((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_defunsIterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::defunsIterator();
    else
        ret = (::acdk::lang::RObject)This->defunsIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_deinit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::deinit();
    else
        This->deinit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_dumpEnv_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::dumpEnv((acdk::io::RCharWriter)args[0].getObjectVar());
    else
        This->dumpEnv((acdk::io::RCharWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_environment__Lacdk_util_RProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::environment();
    else
        ret = (::acdk::lang::RObject)This->environment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_eval_INLRLispVar__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::eval((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_exitNow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::exitNow(args[0].getIntVar());
    else
        This->exitNow(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_exitNow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::exitNow();
    else
      ret = This->exitNow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_exitValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::exitValue();
    else
      ret = This->exitValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_functionIterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::functionIterator();
    else
        ret = (::acdk::lang::RObject)This->functionIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_getBreak__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::getBreak();
    else
      ret = This->getBreak();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_globals__Lacdk_util_RHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::globals();
    else
        ret = (::acdk::lang::RObject)This->globals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_includes__Lacdk_util_RHashSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::includes();
    else
        ret = (::acdk::lang::RObject)This->includes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_init_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::init(args[0].getBoolVar());
    else
        This->init(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_init__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::init();
    else
        This->init();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_initEnv__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::initEnv();
    else
        This->initEnv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::interactive((acdk::io::RCharReader)args[0].getObjectVar(), (acdk::io::RCharWriter)args[1].getObjectVar());
    else
        This->interactive((acdk::io::RCharReader)args[0].getObjectVar(), (acdk::io::RCharWriter)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_isMacro_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::isMacro((RString)args[0].getObjectVar());
    else
      ret = This->isMacro((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lastEvaled__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lastEvaled();
    else
        ret = (::acdk::lang::RObject)This->lastEvaled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lastEvaledString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lastEvaledString();
    else
        ret = (::acdk::lang::RObject)This->lastEvaledString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lenv__LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispEnvironment::lenv();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_load_INLRLispTokenizer__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::load((RLispTokenizer)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->load((RLispTokenizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_load_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::load((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->load((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_loadCompiled_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::loadCompiled((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->loadCompiled((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_loadCompiled_INL_acdk_io_RReader_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::loadCompiled((::acdk::io::RReader)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->loadCompiled((::acdk::io::RReader)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_loadUnparsedFile_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::loadUnparsedFile((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadUnparsedFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lookupFunction_INLRString__LRFunction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lookupFunction((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookupFunction((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lookupLocalVar_INLRString__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lookupLocalVar((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookupLocalVar((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lookupVar_INLRString_Z_LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lookupVar((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->lookupVar((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_lookupVar_INLRString__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::lookupVar((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->lookupVar((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar(), args[2].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar(), args[2].getBoolVar(), args[3].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar(), args[2].getBoolVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parse((RLispTokenizer)args[0].getObjectVar(), (acdk::io::RPrintWriter)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_parseEval_INLRString__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispEnvironment::parseEval((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->parseEval((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_parseToList_INLRString__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispEnvironment::parseToList((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_registerDefun_INLRLispFunction__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::registerDefun((RLispFunction)args[0].getObjectVar());
    else
        This->registerDefun((RLispFunction)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_returnNow_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::returnNow(args[0].getBoolVar());
    else
        This->returnNow(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_returnNow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::returnNow();
    else
      ret = This->returnNow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_setBreak_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::setBreak(args[0].getIntVar());
    else
        This->setBreak(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::setInOut((RCharReader)args[0].getObjectVar(), (RCharWriter)args[1].getObjectVar(), (RCharWriter)args[2].getObjectVar());
    else
        This->setInOut((RCharReader)args[0].getObjectVar(), (RCharWriter)args[1].getObjectVar(), (RCharWriter)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_storeCompiled_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::storeCompiled((RString)args[0].getObjectVar());
    else
        This->storeCompiled((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_storeCompiled_INL_acdk_io_RWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::storeCompiled((::acdk::io::RWriter)args[0].getObjectVar());
    else
        This->storeCompiled((::acdk::io::RWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_t__LRLispAtom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispEnvironment::t();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::trace();
    else
      ret = This->trace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::trace(args[0].getBoolVar());
    else
        This->trace(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispEnvironment::trace((RString)args[0].getObjectVar());
    else
      ret = This->trace((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::trace((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->trace((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace_begin_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::trace_begin((RString)args[0].getObjectVar());
    else
        This->trace_begin((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_trace_end_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::trace_end((RString)args[0].getObjectVar());
    else
        This->trace_end((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_traceflush_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::traceflush((RString)args[0].getObjectVar());
    else
        This->traceflush((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispEnvironment_method_traceln_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispEnvironment::traceln((RString)args[0].getObjectVar());
    else
        This->traceln((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields___staticFuncs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LispEnvironment::__staticFuncs, flags);
    else
      LispEnvironment::__staticFuncs = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields___trueVar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LispEnvironment::__trueVar, flags);
    else
      LispEnvironment::__trueVar = (RLispAtom)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__break_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_break, flags);
    else
      This->_break = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__cmlineArgs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cmlineArgs, flags);
    else
      This->_cmlineArgs = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__defuns_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_defuns, flags);
    else
      This->_defuns = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__environment_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_environment, flags);
    else
      This->_environment = (acdk::util::RProperties)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__exitNow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exitNow, flags);
    else
      This->_exitNow = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__exitValue_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exitValue, flags);
    else
      This->_exitValue = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__glenv_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LispEnvironment::_glenv, flags);
    else
      LispEnvironment::_glenv = (RLispEnvironment)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__globals_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_globals, flags);
    else
      This->_globals = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__includes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_includes, flags);
    else
      This->_includes = (acdk::util::RHashSet)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__lastEvaled_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastEvaled, flags);
    else
      This->_lastEvaled = (RLispVar)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__macros_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_macros, flags);
    else
      This->_macros = (acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__returnNow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_returnNow, flags);
    else
      This->_returnNow = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__trace_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_trace, flags);
    else
      This->_trace = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__tracedSymbols_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tracedSymbols, flags);
    else
      This->_tracedSymbols = (acdk::util::RHashSet)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields__tracelevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tracelevel, flags);
    else
      This->_tracelevel = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields_err_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->err, flags);
    else
      This->err = (acdk::io::RPrintWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->in, flags);
    else
      This->in = (acdk::io::RInputReader)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispEnvironment_fields_out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispEnvironment* This = dmi_cast<LispEnvironment>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->out, flags);
    else
      This->out = (acdk::io::RPrintWriter)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields___staticFuncs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__staticFuncs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields___staticFuncs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields___trueVar = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "__trueVar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispAtom::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields___trueVar_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__break = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_break", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__break_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__cmlineArgs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cmlineArgs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__cmlineArgs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__defuns = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defuns", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__defuns_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__environment = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_environment", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__environment_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__exitNow = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exitNow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__exitNow_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__exitValue = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exitValue", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__exitValue_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__glenv = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_glenv", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__glenv_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__globals = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_globals", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__globals_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__includes = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_includes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashSet::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__includes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__lastEvaled = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lastEvaled", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__lastEvaled_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__macros = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_macros", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__macros_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__returnNow = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_returnNow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__returnNow_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__trace = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_trace", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__trace_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__tracedSymbols = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tracedSymbols", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashSet::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__tracedSymbols_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields__tracelevel = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tracelevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields__tracelevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields_err = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "err", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields_err_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RInputReader::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields_in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispEnvironment_fields_out = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  LispEnvironment_MetainfoWrapper::LispEnvironment_fields_out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispEnvironment_fields[] = 
{
  &LispEnvironment_fields___staticFuncs,
  &LispEnvironment_fields___trueVar,
  &LispEnvironment_fields__break,
  &LispEnvironment_fields__cmlineArgs,
  &LispEnvironment_fields__defuns,
  &LispEnvironment_fields__environment,
  &LispEnvironment_fields__exitNow,
  &LispEnvironment_fields__exitValue,
  &LispEnvironment_fields__glenv,
  &LispEnvironment_fields__globals,
  &LispEnvironment_fields__includes,
  &LispEnvironment_fields__lastEvaled,
  &LispEnvironment_fields__macros,
  &LispEnvironment_fields__returnNow,
  &LispEnvironment_fields__trace,
  &LispEnvironment_fields__tracedSymbols,
  &LispEnvironment_fields__tracelevel,
  &LispEnvironment_fields_err,
  &LispEnvironment_fields_in,
  &LispEnvironment_fields_out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_15_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_environment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "environment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_trace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "trace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__args[] = 
{
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_environment,
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_args,
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__arg_trace,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispEnvironment::clazzInfo(), // return type
  "_0_LispEnvironment", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_LispEnvironment__LRLispEnvironment__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_LispEnvironment__LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_LispEnvironment__LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispEnvironment::clazzInfo(), // return type
  "_1_LispEnvironment", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_LispEnvironment__LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_LispEnvironment__LRLispEnvironment__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_LispEnvironment__LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__arg_environment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "environment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__args[] = 
{
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__arg_environment,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispEnvironment::clazzInfo(), // return type
  "_2_LispEnvironment", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__arg_environment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "environment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__args[] = 
{
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__arg_environment,
  &LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispEnvironment::clazzInfo(), // return type
  "_3_LispEnvironment", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods__eval_INLRLispVar__LRLispVar__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods__eval_INLRLispVar__LRLispVar__args[] = 
{
  &LispEnvironment_methods__eval_INLRLispVar__LRLispVar__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods__eval_INLRLispVar__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method__eval_INLRLispVar__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_W__eval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods__eval_INLRLispVar__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods__eval_INLRLispVar__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method__eval_INLRLispVar__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods__eval_INLRLispList__LRLispVar__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods__eval_INLRLispList__LRLispVar__args[] = 
{
  &LispEnvironment_methods__eval_INLRLispList__LRLispVar__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods__eval_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method__eval_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_X__eval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods__eval_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods__eval_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method__eval_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispSymbol::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__args[] = 
{
  &LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method__eval_INLRLispSymbol__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_Y__eval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods__eval_INLRLispSymbol__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method__eval_INLRLispSymbol__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispAtom::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__args[] = 
{
  &LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method__eval_INLRLispAtom__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_Z__eval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods__eval_INLRLispAtom__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method__eval_INLRLispAtom__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods__staticFuncs__Lacdk_util_RHashMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods__staticFuncs__Lacdk_util_RHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method__staticFuncs__Lacdk_util_RHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_staticFuncs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(), // return type
  "_T__staticFuncs", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods__staticFuncs__Lacdk_util_RHashMap__args, // the arguments
  0, //arguments count
  LispEnvironment_methods__staticFuncs__Lacdk_util_RHashMap__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method__staticFuncs__Lacdk_util_RHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_args[] = 
{
  &LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_arg_symbol,
  &LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindGlobal_INLRString_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindGlobal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_bindGlobal", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindGlobal_INLRString_INLRLispVar__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindGlobal_INLRString_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_args[] = 
{
  &LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_arg_symbol,
  &LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindGlobal_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindGlobal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_bindGlobal", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindGlobal_INLRString_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindGlobal_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_forcelocal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "forcelocal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_args[] = 
{
  &LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_symbol,
  &LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_value,
  &LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_arg_forcelocal,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindLocal_INLRString_INLRLispVar_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindLocal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_bindLocal", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindLocal_INLRString_INLRLispVar_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindLocal_INLRString_INLRLispVar_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_args[] = 
{
  &LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_arg_symbol,
  &LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindLocal_INLRString_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "bindLocal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_bindLocal", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindLocal_INLRString_INLRLispVar__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindLocal_INLRString_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_args[] = 
{
  &LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_arg_symbol,
  &LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindToEnv_INLRString_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindToEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_bindToEnv", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindToEnv_INLRString_INLRLispVar__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindToEnv_INLRString_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_args[] = 
{
  &LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_arg_symbol,
  &LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_bindToEnv_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindToEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_bindToEnv", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_bindToEnv_INLRString_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_bindToEnv_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_buildinsIterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_buildinsIterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_buildinsIterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "buildinsIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_P_buildinsIterator", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_buildinsIterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_buildinsIterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_buildinsIterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__args[] = 
{
  &LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_debug_interactive_INLRLispVar__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "debug_interactive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_G_debug_interactive", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_debug_interactive_INLRLispVar__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_debug_interactive_INLRLispVar__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_defunsIterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_defunsIterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_defunsIterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defunsIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_Q_defunsIterator", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_defunsIterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_defunsIterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_defunsIterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_deinit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_deinit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_deinit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deinit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_deinit", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_deinit__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_deinit__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_deinit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_args[] = 
{
  &LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_dumpEnv_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dumpEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_dumpEnv", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_dumpEnv_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_dumpEnv_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_environment__Lacdk_util_RProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_environment__Lacdk_util_RProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_environment__Lacdk_util_RProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "environment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(), // return type
  "_R_environment", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_environment__Lacdk_util_RProperties__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_environment__Lacdk_util_RProperties__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_environment__Lacdk_util_RProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_eval_INLRLispVar__LRLispVar__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_eval_INLRLispVar__LRLispVar__args[] = 
{
  &LispEnvironment_methods_eval_INLRLispVar__LRLispVar__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_eval_INLRLispVar__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_eval_INLRLispVar__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_e_eval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_eval_INLRLispVar__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_eval_INLRLispVar__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_eval_INLRLispVar__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_exitNow_I_V_arg_exitval = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exitval", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_exitNow_I_V_args[] = 
{
  &LispEnvironment_methods_exitNow_I_V_arg_exitval,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_exitNow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_exitNow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exitNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_exitNow", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_exitNow_I_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_exitNow_I_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_exitNow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_exitNow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_exitNow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_exitNow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exitNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_exitNow", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_exitNow__Z_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_exitNow__Z_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_exitNow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_exitValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_exitValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_exitValue__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exitValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_N_exitValue", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_exitValue__I_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_exitValue__I_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_exitValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_functionIterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_functionIterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_functionIterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "functionIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_O_functionIterator", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_functionIterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_functionIterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_functionIterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_getBreak__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_getBreak__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_getBreak__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_F_getBreak", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_getBreak__I_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_getBreak__I_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_getBreak__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_globals__Lacdk_util_RHashMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_globals__Lacdk_util_RHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_globals__Lacdk_util_RHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "globals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashMap::clazzInfo(), // return type
  "_S_globals", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_globals__Lacdk_util_RHashMap__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_globals__Lacdk_util_RHashMap__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_globals__Lacdk_util_RHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_includes__Lacdk_util_RHashSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_includes__Lacdk_util_RHashSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_includes__Lacdk_util_RHashSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "includes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RHashSet::clazzInfo(), // return type
  "_U_includes", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_includes__Lacdk_util_RHashSet__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_includes__Lacdk_util_RHashSet__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_includes__Lacdk_util_RHashSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_init_Z_V_arg_loadCode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "loadCode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_init_Z_V_args[] = 
{
  &LispEnvironment_methods_init_Z_V_arg_loadCode,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_init_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_init_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_init", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_init_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_init_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_init_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_init__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_init__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_init__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_init", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_init__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_init__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_init__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_initEnv__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_initEnv__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_initEnv__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initEnv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_initEnv", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_initEnv__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_initEnv__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_initEnv__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_args[] = 
{
  &LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_arg_in,
  &LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interactive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_interactive", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_isMacro_INLRString__Z_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_isMacro_INLRString__Z_args[] = 
{
  &LispEnvironment_methods_isMacro_INLRString__Z_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_isMacro_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_isMacro_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isMacro", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isMacro", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_isMacro_INLRString__Z_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_isMacro_INLRString__Z_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_isMacro_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lastEvaled__LRLispVar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lastEvaled__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lastEvaled__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastEvaled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_H_lastEvaled", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lastEvaled__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lastEvaled__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lastEvaled__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lastEvaledString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lastEvaledString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lastEvaledString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastEvaledString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_I_lastEvaledString", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lastEvaledString__LRString__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lastEvaledString__LRString__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lastEvaledString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lenv__LRLispEnvironment__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lenv__LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lenv__LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lenv", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo(), // return type
  "_14_lenv", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lenv__LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lenv__LRLispEnvironment__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lenv__LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_load_INLRLispTokenizer__LRString__arg_tok = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tok", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_load_INLRLispTokenizer__LRString__args[] = 
{
  &LispEnvironment_methods_load_INLRLispTokenizer__LRString__arg_tok,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_load_INLRLispTokenizer__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_load_INLRLispTokenizer__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "load", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_load", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_load_INLRLispTokenizer__LRString__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_load_INLRLispTokenizer__LRString__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_load_INLRLispTokenizer__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_load_INLRString__LRString__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_load_INLRString__LRString__args[] = 
{
  &LispEnvironment_methods_load_INLRString__LRString__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_load_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_load_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "load", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_load", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_load_INLRString__LRString__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_load_INLRString__LRString__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_load_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_loadCompiled_INLRString_Z_V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_loadCompiled_INLRString_Z_V_arg_replace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "replace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_loadCompiled_INLRString_Z_V_args[] = 
{
  &LispEnvironment_methods_loadCompiled_INLRString_Z_V_arg_file,
  &LispEnvironment_methods_loadCompiled_INLRString_Z_V_arg_replace,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_loadCompiled_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_loadCompiled_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadCompiled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_loadCompiled", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_loadCompiled_INLRString_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_loadCompiled_INLRString_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_loadCompiled_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_arg_replace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "replace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_args[] = 
{
  &LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_arg_in,
  &LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_arg_replace,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_loadCompiled_INL_acdk_io_RReader_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadCompiled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_loadCompiled", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_loadCompiled_INL_acdk_io_RReader_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_loadCompiled_INL_acdk_io_RReader_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__args[] = 
{
  &LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_loadUnparsedFile_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadUnparsedFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_loadUnparsedFile", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_loadUnparsedFile_INLRString__LRString__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_loadUnparsedFile_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_lookupFunction_INLRString__LRFunction__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lookupFunction_INLRString__LRFunction__args[] = 
{
  &LispEnvironment_methods_lookupFunction_INLRString__LRFunction__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lookupFunction_INLRString__LRFunction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lookupFunction_INLRString__LRFunction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFunction::clazzInfo(), // return type
  "_i_lookupFunction", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lookupFunction_INLRString__LRFunction__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lookupFunction_INLRString__LRFunction__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lookupFunction_INLRString__LRFunction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__args[] = 
{
  &LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lookupLocalVar_INLRString__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupLocalVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_h_lookupLocalVar", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lookupLocalVar_INLRString__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lookupLocalVar_INLRString__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__arg_warn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "warn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__args[] = 
{
  &LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__arg_str,
  &LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__arg_warn,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lookupVar_INLRString_Z_LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_f_lookupVar", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lookupVar_INLRString_Z_LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lookupVar_INLRString_Z_LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_lookupVar_INLRString__LRLispVar__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_lookupVar_INLRString__LRLispVar__args[] = 
{
  &LispEnvironment_methods_lookupVar_INLRString__LRLispVar__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_lookupVar_INLRString__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_lookupVar_INLRString__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupVar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_g_lookupVar", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_lookupVar_INLRString__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_lookupVar_INLRString__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_lookupVar_INLRString__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_interactiv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "interactiv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__args[] = 
{
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_in,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_out,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__arg_interactiv,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispCode::clazzInfo(), // return type
  "_c_parse", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_interactiv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "interactiv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_parseOneToken = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parseOneToken", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__args[] = 
{
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_in,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_out,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_interactiv,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__arg_parseOneToken,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispCode::clazzInfo(), // return type
  "_a_parse", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispTokenizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__args[] = 
{
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__arg_in,
  &LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispCode::clazzInfo(), // return type
  "_b_parse", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parseEval_INLRString__LRLispVar__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_parseEval_INLRString__LRLispVar__args[] = 
{
  &LispEnvironment_methods_parseEval_INLRString__LRLispVar__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_parseEval_INLRString__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_parseEval_INLRString__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseEval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_8_parseEval", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_parseEval_INLRString__LRLispVar__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_parseEval_INLRString__LRLispVar__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_parseEval_INLRString__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_parseToList_INLRString__LRLispList__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_parseToList_INLRString__LRLispList__args[] = 
{
  &LispEnvironment_methods_parseToList_INLRString__LRLispList__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_parseToList_INLRString__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_parseToList_INLRString__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseToList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_9_parseToList", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_parseToList_INLRString__LRLispList__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_parseToList_INLRString__LRLispList__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_parseToList_INLRString__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_registerDefun_INLRLispFunction__V_arg_func = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "func", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispFunction::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_registerDefun_INLRLispFunction__V_args[] = 
{
  &LispEnvironment_methods_registerDefun_INLRLispFunction__V_arg_func,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_registerDefun_INLRLispFunction__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_registerDefun_INLRLispFunction__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerDefun", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_registerDefun", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_registerDefun_INLRLispFunction__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_registerDefun_INLRLispFunction__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_registerDefun_INLRLispFunction__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_returnNow_Z_V_arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_returnNow_Z_V_args[] = 
{
  &LispEnvironment_methods_returnNow_Z_V_arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_returnNow_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_returnNow_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "returnNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_returnNow", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_returnNow_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_returnNow_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_returnNow_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_returnNow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_returnNow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_returnNow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "returnNow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_returnNow", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_returnNow__Z_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_returnNow__Z_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_returnNow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_setBreak_I_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_setBreak_I_V_args[] = 
{
  &LispEnvironment_methods_setBreak_I_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_setBreak_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_setBreak_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setBreak", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_setBreak_I_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_setBreak_I_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_setBreak_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rout = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rout", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rerr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rerr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_args[] = 
{
  &LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rin,
  &LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rout,
  &LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_rerr,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_V_setInOut", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_storeCompiled_INLRString__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_storeCompiled_INLRString__V_args[] = 
{
  &LispEnvironment_methods_storeCompiled_INLRString__V_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_storeCompiled_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_storeCompiled_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storeCompiled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_10_storeCompiled", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_storeCompiled_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_storeCompiled_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_storeCompiled_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_args[] = 
{
  &LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_storeCompiled_INL_acdk_io_RWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storeCompiled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_storeCompiled", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_storeCompiled_INL_acdk_io_RWriter__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_storeCompiled_INL_acdk_io_RWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_t__LRLispAtom__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_t__LRLispAtom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_t__LRLispAtom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "t", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispAtom::clazzInfo(), // return type
  "_q_t", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_t__LRLispAtom__args, // the arguments
  0, //arguments count
  LispEnvironment_methods_t__LRLispAtom__exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_t__LRLispAtom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_trace", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace__Z_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace__Z_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_Z_V_arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace_Z_V_args[] = 
{
  &LispEnvironment_methods_trace_Z_V_arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_trace", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_INLRString__Z_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace_INLRString__Z_args[] = 
{
  &LispEnvironment_methods_trace_INLRString__Z_arg_symbol,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_trace", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace_INLRString__Z_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace_INLRString__Z_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_INLRString_Z_V_arg_symbol = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "symbol", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_INLRString_Z_V_arg_dotrace = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dotrace", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace_INLRString_Z_V_args[] = 
{
  &LispEnvironment_methods_trace_INLRString_Z_V_arg_symbol,
  &LispEnvironment_methods_trace_INLRString_Z_V_arg_dotrace,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_trace", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace_INLRString_Z_V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace_INLRString_Z_V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_begin_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace_begin_INLRString__V_args[] = 
{
  &LispEnvironment_methods_trace_begin_INLRString__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace_begin_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace_begin_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace_begin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_trace_begin", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace_begin_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace_begin_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace_begin_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_trace_end_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_trace_end_INLRString__V_args[] = 
{
  &LispEnvironment_methods_trace_end_INLRString__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_trace_end_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_trace_end_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trace_end", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_trace_end", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_trace_end_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_trace_end_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_trace_end_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_traceflush_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_traceflush_INLRString__V_args[] = 
{
  &LispEnvironment_methods_traceflush_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_traceflush_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_traceflush_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceflush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_traceflush", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_traceflush_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_traceflush_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_traceflush_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispEnvironment_methods_traceln_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispEnvironment_methods_traceln_INLRString__V_args[] = 
{
  &LispEnvironment_methods_traceln_INLRString__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment_methods_traceln_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispEnvironment_method_traceln_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceln", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_traceln", // alternative name of method
  -1, // altlabelHashCode
  LispEnvironment_methods_traceln_INLRString__V_args, // the arguments
  0, //arguments count
  LispEnvironment_methods_traceln_INLRString__V_exceptions, // the declared exceptions
  LispEnvironment_MetainfoWrapper::LispEnvironment_method_traceln_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispEnvironment_methods[] = 
{
  &LispEnvironment_method_GetClass__L_acdk_lang_RClass_,
  &LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray_Z_LRLispEnvironment_,
  &LispEnvironment_method_LispEnvironment__LRLispEnvironment_,
  &LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties__LRLispEnvironment_,
  &LispEnvironment_method_LispEnvironment_INLacdk_util_RProperties_INLRStringArray__LRLispEnvironment_,
  &LispEnvironment_method__eval_INLRLispVar__LRLispVar_,
  &LispEnvironment_method__eval_INLRLispList__LRLispVar_,
  &LispEnvironment_method__eval_INLRLispSymbol__LRLispVar_,
  &LispEnvironment_method__eval_INLRLispAtom__LRLispVar_,
  &LispEnvironment_method__staticFuncs__Lacdk_util_RHashMap_,
  &LispEnvironment_method_bindGlobal_INLRString_INLRLispVar__V,
  &LispEnvironment_method_bindGlobal_INLRString_INLRString__V,
  &LispEnvironment_method_bindLocal_INLRString_INLRLispVar_Z_V,
  &LispEnvironment_method_bindLocal_INLRString_INLRLispVar__V,
  &LispEnvironment_method_bindToEnv_INLRString_INLRLispVar__V,
  &LispEnvironment_method_bindToEnv_INLRString_INLRString__V,
  &LispEnvironment_method_buildinsIterator__Lacdk_util_RIterator_,
  &LispEnvironment_method_debug_interactive_INLRLispVar__LRLispVar_,
  &LispEnvironment_method_defunsIterator__Lacdk_util_RIterator_,
  &LispEnvironment_method_deinit__V,
  &LispEnvironment_method_dumpEnv_INLacdk_io_RCharWriter__V,
  &LispEnvironment_method_environment__Lacdk_util_RProperties_,
  &LispEnvironment_method_eval_INLRLispVar__LRLispVar_,
  &LispEnvironment_method_exitNow_I_V,
  &LispEnvironment_method_exitNow__Z,
  &LispEnvironment_method_exitValue__I,
  &LispEnvironment_method_functionIterator__Lacdk_util_RIterator_,
  &LispEnvironment_method_getBreak__I,
  &LispEnvironment_method_globals__Lacdk_util_RHashMap_,
  &LispEnvironment_method_includes__Lacdk_util_RHashSet_,
  &LispEnvironment_method_init_Z_V,
  &LispEnvironment_method_init__V,
  &LispEnvironment_method_initEnv__V,
  &LispEnvironment_method_interactive_INLacdk_io_RCharReader_INLacdk_io_RCharWriter__V,
  &LispEnvironment_method_isMacro_INLRString__Z,
  &LispEnvironment_method_lastEvaled__LRLispVar_,
  &LispEnvironment_method_lastEvaledString__LRString_,
  &LispEnvironment_method_lenv__LRLispEnvironment_,
  &LispEnvironment_method_load_INLRLispTokenizer__LRString_,
  &LispEnvironment_method_load_INLRString__LRString_,
  &LispEnvironment_method_loadCompiled_INLRString_Z_V,
  &LispEnvironment_method_loadCompiled_INL_acdk_io_RReader_Z_V,
  &LispEnvironment_method_loadUnparsedFile_INLRString__LRString_,
  &LispEnvironment_method_lookupFunction_INLRString__LRFunction_,
  &LispEnvironment_method_lookupLocalVar_INLRString__LRLispVar_,
  &LispEnvironment_method_lookupVar_INLRString_Z_LRLispVar_,
  &LispEnvironment_method_lookupVar_INLRString__LRLispVar_,
  &LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_Z_LRLispCode_,
  &LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter_ZZ_LRLispCode_,
  &LispEnvironment_method_parse_INLRLispTokenizer_INLacdk_io_RPrintWriter__LRLispCode_,
  &LispEnvironment_method_parseEval_INLRString__LRLispVar_,
  &LispEnvironment_method_parseToList_INLRString__LRLispList_,
  &LispEnvironment_method_registerDefun_INLRLispFunction__V,
  &LispEnvironment_method_returnNow_Z_V,
  &LispEnvironment_method_returnNow__Z,
  &LispEnvironment_method_setBreak_I_V,
  &LispEnvironment_method_setInOut_INLRCharReader_INLRCharWriter_INLRCharWriter__V,
  &LispEnvironment_method_storeCompiled_INLRString__V,
  &LispEnvironment_method_storeCompiled_INL_acdk_io_RWriter__V,
  &LispEnvironment_method_t__LRLispAtom_,
  &LispEnvironment_method_trace__Z,
  &LispEnvironment_method_trace_Z_V,
  &LispEnvironment_method_trace_INLRString__Z,
  &LispEnvironment_method_trace_INLRString_Z_V,
  &LispEnvironment_method_trace_begin_INLRString__V,
  &LispEnvironment_method_trace_end_INLRString__V,
  &LispEnvironment_method_traceflush_INLRString__V,
  &LispEnvironment_method_traceln_INLRString__V,
  0
};


struct LispEnvironment_MetaInfoInitializer
{  LispEnvironment_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispEnvironment::clazzInfo();
    ci->fields =  _LispEnvironment_fields;
    ci->methods =  _LispEnvironment_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispEnvironment_MetaInfoInitializer LispEnvironment_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispException_create_array(int length)
{
  return new ObjectArrayImpl<RLispException>(length);
}

//static
::acdk::lang::RObject
LispException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispException_method_LispException_INLRLispEnvironment_INLRString__LRLispException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispException((RLispEnvironment)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispException* This = dmi_cast<LispException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispException_fields__where_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispException* This = dmi_cast<LispException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_where, flags);
    else
      This->_where = (RString)var.getObjectVar();
    return fieldinf;
  }
};


void ThrowException_LispException(IN(::acdk::lang::RThrowable) ex)
{
  throw RLispException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo LispException_fields__where = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_where", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispException_MetainfoWrapper::LispException_fields__where_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispException_fields[] = 
{
  &LispException_fields__where,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispException_MetainfoWrapper::LispException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__args[] = 
{
  &LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__arg_env,
  &LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispException_method_LispException_INLRLispEnvironment_INLRString__LRLispException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispException::clazzInfo(), // return type
  "_0_LispException", // alternative name of method
  -1, // altlabelHashCode
  LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__args, // the arguments
  0, //arguments count
  LispException_methods_LispException_INLRLispEnvironment_INLRString__LRLispException__exceptions, // the declared exceptions
  LispException_MetainfoWrapper::LispException_method_LispException_INLRLispEnvironment_INLRString__LRLispException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getMessage", // alternative name of method
  -1, // altlabelHashCode
  LispException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  LispException_methods_getMessage__LRString__exceptions, // the declared exceptions
  LispException_MetainfoWrapper::LispException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispException_methods[] = 
{
  &LispException_method_GetClass__L_acdk_lang_RClass_,
  &LispException_method_LispException_INLRLispEnvironment_INLRString__LRLispException_,
  &LispException_method_getMessage__LRString_,
  0
};


struct LispException_MetaInfoInitializer
{  LispException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispException::clazzInfo();
    ci->fields =  _LispException_fields;
    ci->methods =  _LispException_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispException_MetaInfoInitializer LispException_MetaInfoInitializer_staticinstance__;


struct LispException_clazzInfo_ClazzAttributesResInitializer1
{
  LispException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)LispException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_LispException));
  }
};

LispException_clazzInfo_ClazzAttributesResInitializer1 LispException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispFunction_create_array(int length)
{
  return new ObjectArrayImpl<RLispFunction>(length);
}

//static
::acdk::lang::RObject
LispFunction_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispFunction_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispFunction::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_LispFunction_INLRLispList__LRLispFunction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispFunction((RLispList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispFunction::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::evalMacro((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->evalMacro((RLispEnvironment)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_functionName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::functionName();
    else
        ret = (::acdk::lang::RObject)This->functionName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_getDeclDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::getDeclDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDeclDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_getDefinition__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::getDefinition();
    else
        ret = (::acdk::lang::RObject)This->getDefinition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_getHelpText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::getHelpText();
    else
        ret = (::acdk::lang::RObject)This->getHelpText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_isMacro__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispFunction::isMacro();
    else
      ret = This->isMacro();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_name__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::name();
    else
        ret = (::acdk::lang::RObject)This->name();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispFunction_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispFunction::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispFunction_fields__definition_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_definition, flags);
    else
      This->_definition = (RLispList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispFunction_fields__isDefun_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isDefun, flags);
    else
      This->_isDefun = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispFunction_fields__isMacro_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isMacro, flags);
    else
      This->_isMacro = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispFunction_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispFunction* This = dmi_cast<LispFunction>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispFunction_fields__definition = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_definition", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(),
  LispFunction_MetainfoWrapper::LispFunction_fields__definition_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispFunction_fields__isDefun = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isDefun", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispFunction_MetainfoWrapper::LispFunction_fields__isDefun_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispFunction_fields__isMacro = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isMacro", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LispFunction_MetainfoWrapper::LispFunction_fields__isMacro_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispFunction_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispFunction_MetainfoWrapper::LispFunction_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispFunction_fields[] = 
{
  &LispFunction_fields__definition,
  &LispFunction_fields__isDefun,
  &LispFunction_fields__isMacro,
  &LispFunction_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispFunction_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__arg_definition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "definition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__args[] = 
{
  &LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__arg_definition,
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_LispFunction_INLRLispList__LRLispFunction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispFunction::clazzInfo(), // return type
  "_1_LispFunction", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__args, // the arguments
  0, //arguments count
  LispFunction_methods_LispFunction_INLRLispList__LRLispFunction__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_LispFunction_INLRLispList__LRLispFunction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_clone", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispFunction_methods_clone__LRObject__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispFunction_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args[] = 
{
  &LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env,
  &LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_8_eval", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  LispFunction_methods_eval_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__args[] = 
{
  &LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__arg_env,
  &LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evalMacro", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_c_evalMacro", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__args, // the arguments
  0, //arguments count
  LispFunction_methods_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_functionName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_functionName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_functionName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "functionName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_functionName", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_functionName__LRString__args, // the arguments
  0, //arguments count
  LispFunction_methods_functionName__LRString__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_functionName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_getDeclDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_getDeclDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_getDeclDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_b_getDeclDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_getDeclDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispFunction_methods_getDeclDefinition__LRLispList__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_getDeclDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_getDefinition__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_getDefinition__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_getDefinition__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefinition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_a_getDefinition", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_getDefinition__LRLispList__args, // the arguments
  0, //arguments count
  LispFunction_methods_getDefinition__LRLispList__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_getDefinition__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_getHelpText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_getHelpText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_getHelpText__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getHelpText", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_getHelpText__LRString__args, // the arguments
  0, //arguments count
  LispFunction_methods_getHelpText__LRString__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_getHelpText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_isMacro__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_isMacro__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_isMacro__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isMacro", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isMacro", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_isMacro__Z_args, // the arguments
  0, //arguments count
  LispFunction_methods_isMacro__Z_exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_isMacro__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_name__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_name__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_name__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "name", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_name", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_name__LRString__args, // the arguments
  0, //arguments count
  LispFunction_methods_name__LRString__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_name__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispFunction_methods_toCode__LRString__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispFunction_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispFunction_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  LispFunction_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispFunction_methods_toString__LRString__exceptions, // the declared exceptions
  LispFunction_MetainfoWrapper::LispFunction_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispFunction_methods[] = 
{
  &LispFunction_method_GetClass__L_acdk_lang_RClass_,
  &LispFunction_method_LispFunction_INLRLispList__LRLispFunction_,
  &LispFunction_method_clone__LRObject_,
  &LispFunction_method_create_instance__LRObject_,
  &LispFunction_method_eval_INLRLispEnvironment_INLRLispList__LRLispVar_,
  &LispFunction_method_evalMacro_INLRLispEnvironment_INLRLispList__LRLispVar_,
  &LispFunction_method_functionName__LRString_,
  &LispFunction_method_getDeclDefinition__LRLispList_,
  &LispFunction_method_getDefinition__LRLispList_,
  &LispFunction_method_getHelpText__LRString_,
  &LispFunction_method_isMacro__Z,
  &LispFunction_method_name__LRString_,
  &LispFunction_method_toCode__LRString_,
  &LispFunction_method_toString__LRString_,
  0
};


struct LispFunction_MetaInfoInitializer
{  LispFunction_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispFunction::clazzInfo();
    ci->fields =  _LispFunction_fields;
    ci->methods =  _LispFunction_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispFunction_MetaInfoInitializer LispFunction_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
LispInterpreter_create_array(int length)
{
  return new ObjectArrayImpl<RLispInterpreter>(length);
}

//static
::acdk::lang::RObject
LispInterpreter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispInterpreter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispInterpreter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_LispInterpreter__LRLispInterpreter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispInterpreter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_eval_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispInterpreter::eval((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->eval((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_init__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispInterpreter::init();
    else
        This->init();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispInterpreter::interactive((RCharReader)args[0].getObjectVar(), (RCharWriter)args[1].getObjectVar(), (RCharWriter)args[2].getObjectVar());
    else
        This->interactive((RCharReader)args[0].getObjectVar(), (RCharWriter)args[1].getObjectVar(), (RCharWriter)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_lispEnvironment__LRLispEnvironment__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispInterpreter::lispEnvironment();
    else
        ret = (::acdk::lang::RObject)This->lispEnvironment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_parse_INLRFile__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispInterpreter::parse((RFile)args[0].getObjectVar());
    else
        This->parse((RFile)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispInterpreter_method_parse_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispInterpreter::parse((RString)args[0].getObjectVar());
    else
        This->parse((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispInterpreter_fields__lenv_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispInterpreter* This = dmi_cast<LispInterpreter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lenv, flags);
    else
      This->_lenv = (RLispEnvironment)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispInterpreter_fields__lenv = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lenv", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo(),
  LispInterpreter_MetainfoWrapper::LispInterpreter_fields__lenv_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispInterpreter_fields[] = 
{
  &LispInterpreter_fields__lenv,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispInterpreter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_LispInterpreter__LRLispInterpreter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_LispInterpreter__LRLispInterpreter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_LispInterpreter__LRLispInterpreter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispInterpreter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispInterpreter::clazzInfo(), // return type
  "_0_LispInterpreter", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_LispInterpreter__LRLispInterpreter__args, // the arguments
  0, //arguments count
  LispInterpreter_methods_LispInterpreter__LRLispInterpreter__exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_LispInterpreter__LRLispInterpreter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_eval_INLRString__LRObject__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_eval_INLRString__LRObject__args[] = 
{
  &LispInterpreter_methods_eval_INLRString__LRObject__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_eval_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_eval_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_eval", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_eval_INLRString__LRObject__args, // the arguments
  0, //arguments count
  LispInterpreter_methods_eval_INLRString__LRObject__exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_eval_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_init__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_init__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_init__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_init", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_init__V_args, // the arguments
  0, //arguments count
  LispInterpreter_methods_init__V_exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_init__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_err = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "err", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_args[] = 
{
  &LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_in,
  &LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_out,
  &LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_arg_err,
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "interactive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_interactive", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_args, // the arguments
  0, //arguments count
  LispInterpreter_methods_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_lispEnvironment__LRLispEnvironment__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_lispEnvironment__LRLispEnvironment__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_lispEnvironment__LRLispEnvironment_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lispEnvironment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo(), // return type
  "_6_lispEnvironment", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_lispEnvironment__LRLispEnvironment__args, // the arguments
  0, //arguments count
  LispInterpreter_methods_lispEnvironment__LRLispEnvironment__exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_lispEnvironment__LRLispEnvironment__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_parse_INLRFile__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_parse_INLRFile__V_args[] = 
{
  &LispInterpreter_methods_parse_INLRFile__V_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_parse_INLRFile__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_parse_INLRFile__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_parse", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_parse_INLRFile__V_args, // the arguments
  0, //arguments count
  LispInterpreter_methods_parse_INLRFile__V_exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_parse_INLRFile__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispInterpreter_methods_parse_INLRString__V_arg_script = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "script", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispInterpreter_methods_parse_INLRString__V_args[] = 
{
  &LispInterpreter_methods_parse_INLRString__V_arg_script,
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter_methods_parse_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispInterpreter_method_parse_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_parse", // alternative name of method
  -1, // altlabelHashCode
  LispInterpreter_methods_parse_INLRString__V_args, // the arguments
  0, //arguments count
  LispInterpreter_methods_parse_INLRString__V_exceptions, // the declared exceptions
  LispInterpreter_MetainfoWrapper::LispInterpreter_method_parse_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispInterpreter_methods[] = 
{
  &LispInterpreter_method_GetClass__L_acdk_lang_RClass_,
  &LispInterpreter_method_LispInterpreter__LRLispInterpreter_,
  &LispInterpreter_method_eval_INLRString__LRObject_,
  &LispInterpreter_method_init__V,
  &LispInterpreter_method_interactive_INLRCharReader_INLRCharWriter_INLRCharWriter__V,
  &LispInterpreter_method_lispEnvironment__LRLispEnvironment_,
  &LispInterpreter_method_parse_INLRFile__V,
  &LispInterpreter_method_parse_INLRString__V,
  0
};


struct LispInterpreter_MetaInfoInitializer
{  LispInterpreter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispInterpreter::clazzInfo();
    ci->fields =  _LispInterpreter_fields;
    ci->methods =  _LispInterpreter_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispInterpreter_MetaInfoInitializer LispInterpreter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispList_create_array(int length)
{
  return new ObjectArrayImpl<RLispList>(length);
}

//static
::acdk::lang::RObject
LispList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_LispList__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_LispList_INLRLispVar__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispList((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_LispList_INLRLispVar_INLRLispList__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispList((RLispVar)args[0].getObjectVar(), (RLispList)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_LispList_I_LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispList(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_append_INLRLispVar__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::append((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->append((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispList::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_get_I_LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::get(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->get(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LispList::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_pop__LRLispVar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::pop();
    else
        ret = (::acdk::lang::RObject)This->pop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_push_INLRLispVar__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::push((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->push((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_push_INLRObject__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::push((RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->push((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_set_IINLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispList::set(args[0].getIntVar(), (RLispVar)args[1].getObjectVar());
    else
        This->set(args[0].getIntVar(), (RLispVar)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_setCar_INLRLispVar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispList::setCar((RLispVar)args[0].getObjectVar());
    else
        This->setCar((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_setCdr_INLRLispList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispList::setCdr((RLispList)args[0].getObjectVar());
    else
        This->setCdr((RLispList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_unshift_INLRObject__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::unshift((RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->unshift((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispList_method_unshift_INLRLispVar__LRLispList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispList::unshift((RLispVar)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->unshift((RLispVar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispList_fields__car_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_car, flags);
    else
      This->_car = (RLispVar)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispList_fields__cdr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispList* This = dmi_cast<LispList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cdr, flags);
    else
      This->_cdr = (RLispList)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispList_fields__nilVar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LispList::_nilVar, flags);
    else
      LispList::_nilVar = (RLispVar)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispList_fields__car = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_car", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(),
  LispList_MetainfoWrapper::LispList_fields__car_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispList_fields__cdr = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cdr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(),
  LispList_MetainfoWrapper::LispList_fields__cdr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LispList_fields__nilVar = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nilVar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(),
  LispList_MetainfoWrapper::LispList_fields__nilVar_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispList_fields[] = 
{
  &LispList_fields__car,
  &LispList_fields__cdr,
  &LispList_fields__nilVar,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_LispList__LRLispList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_LispList__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_LispList__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispList::clazzInfo(), // return type
  "_2_LispList", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_LispList__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_LispList__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_LispList__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_LispList_INLRLispVar__LRLispList__arg_car = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "car", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_LispList_INLRLispVar__LRLispList__args[] = 
{
  &LispList_methods_LispList_INLRLispVar__LRLispList__arg_car,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_LispList_INLRLispVar__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_LispList_INLRLispVar__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LispList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispList::clazzInfo(), // return type
  "_3_LispList", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_LispList_INLRLispVar__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_LispList_INLRLispVar__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_LispList_INLRLispVar__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__arg_car = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "car", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__arg_cdr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cdr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__args[] = 
{
  &LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__arg_car,
  &LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__arg_cdr,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_LispList_INLRLispVar_INLRLispList__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispList::clazzInfo(), // return type
  "_1_LispList", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_LispList_INLRLispVar_INLRLispList__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_LispList_INLRLispVar_INLRLispList__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_LispList_I_LRLispList__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_LispList_I_LRLispList__args[] = 
{
  &LispList_methods_LispList_I_LRLispList__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_LispList_I_LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_LispList_I_LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispList::clazzInfo(), // return type
  "_4_LispList", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_LispList_I_LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_LispList_I_LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_LispList_I_LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_append_INLRLispVar__LRLispList__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_append_INLRLispVar__LRLispList__args[] = 
{
  &LispList_methods_append_INLRLispVar__LRLispList__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_append_INLRLispVar__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_append_INLRLispVar__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_8_append", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_append_INLRLispVar__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_append_INLRLispVar__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_append_INLRLispVar__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_clone", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispList_methods_clone__LRObject__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispList_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_get_I_LRLispVar__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_get_I_LRLispVar__args[] = 
{
  &LispList_methods_get_I_LRLispVar__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_get_I_LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_get_I_LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_h_get", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_get_I_LRLispVar__args, // the arguments
  0, //arguments count
  LispList_methods_get_I_LRLispVar__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_get_I_LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_length", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_length__I_args, // the arguments
  0, //arguments count
  LispList_methods_length__I_exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_pop__LRLispVar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_pop__LRLispVar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_pop__LRLispVar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo(), // return type
  "_d_pop", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_pop__LRLispVar__args, // the arguments
  0, //arguments count
  LispList_methods_pop__LRLispVar__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_pop__LRLispVar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_push_INLRLispVar__LRLispList__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_push_INLRLispVar__LRLispList__args[] = 
{
  &LispList_methods_push_INLRLispVar__LRLispList__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_push_INLRLispVar__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_push_INLRLispVar__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_9_push", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_push_INLRLispVar__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_push_INLRLispVar__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_push_INLRLispVar__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_push_INLRObject__LRLispList__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_push_INLRObject__LRLispList__args[] = 
{
  &LispList_methods_push_INLRObject__LRLispList__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_push_INLRObject__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_push_INLRObject__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_a_push", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_push_INLRObject__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_push_INLRObject__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_push_INLRObject__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_set_IINLRLispVar__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_set_IINLRLispVar__V_arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_set_IINLRLispVar__V_args[] = 
{
  &LispList_methods_set_IINLRLispVar__V_arg_i,
  &LispList_methods_set_IINLRLispVar__V_arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_set_IINLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_set_IINLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_set", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_set_IINLRLispVar__V_args, // the arguments
  0, //arguments count
  LispList_methods_set_IINLRLispVar__V_exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_set_IINLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_setCar_INLRLispVar__V_arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_setCar_INLRLispVar__V_args[] = 
{
  &LispList_methods_setCar_INLRLispVar__V_arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_setCar_INLRLispVar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_setCar_INLRLispVar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setCar", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_setCar_INLRLispVar__V_args, // the arguments
  0, //arguments count
  LispList_methods_setCar_INLRLispVar__V_exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_setCar_INLRLispVar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_setCdr_INLRLispList__V_arg_lst = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "lst", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_setCdr_INLRLispList__V_args[] = 
{
  &LispList_methods_setCdr_INLRLispList__V_arg_lst,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_setCdr_INLRLispList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_setCdr_INLRLispList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCdr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setCdr", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_setCdr_INLRLispList__V_args, // the arguments
  0, //arguments count
  LispList_methods_setCdr_INLRLispList__V_exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_setCdr_INLRLispList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispList_methods_toCode__LRString__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_toString", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispList_methods_toString__LRString__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_unshift_INLRObject__LRLispList__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_unshift_INLRObject__LRLispList__args[] = 
{
  &LispList_methods_unshift_INLRObject__LRLispList__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_unshift_INLRObject__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_unshift_INLRObject__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_b_unshift", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_unshift_INLRObject__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_unshift_INLRObject__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_unshift_INLRObject__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispList_methods_unshift_INLRLispVar__LRLispList__arg_var = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "var", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispVar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispList_methods_unshift_INLRLispVar__LRLispList__args[] = 
{
  &LispList_methods_unshift_INLRLispVar__LRLispList__arg_var,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList_methods_unshift_INLRLispVar__LRLispList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispList_method_unshift_INLRLispVar__LRLispList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unshift", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispList::clazzInfo(), // return type
  "_c_unshift", // alternative name of method
  -1, // altlabelHashCode
  LispList_methods_unshift_INLRLispVar__LRLispList__args, // the arguments
  0, //arguments count
  LispList_methods_unshift_INLRLispVar__LRLispList__exceptions, // the declared exceptions
  LispList_MetainfoWrapper::LispList_method_unshift_INLRLispVar__LRLispList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispList_methods[] = 
{
  &LispList_method_GetClass__L_acdk_lang_RClass_,
  &LispList_method_LispList__LRLispList_,
  &LispList_method_LispList_INLRLispVar__LRLispList_,
  &LispList_method_LispList_INLRLispVar_INLRLispList__LRLispList_,
  &LispList_method_LispList_I_LRLispList_,
  &LispList_method_append_INLRLispVar__LRLispList_,
  &LispList_method_clone__LRObject_,
  &LispList_method_create_instance__LRObject_,
  &LispList_method_get_I_LRLispVar_,
  &LispList_method_length__I,
  &LispList_method_pop__LRLispVar_,
  &LispList_method_push_INLRLispVar__LRLispList_,
  &LispList_method_push_INLRObject__LRLispList_,
  &LispList_method_set_IINLRLispVar__V,
  &LispList_method_setCar_INLRLispVar__V,
  &LispList_method_setCdr_INLRLispList__V,
  &LispList_method_toCode__LRString_,
  &LispList_method_toString__LRString_,
  &LispList_method_unshift_INLRObject__LRLispList_,
  &LispList_method_unshift_INLRLispVar__LRLispList_,
  0
};


struct LispList_MetaInfoInitializer
{  LispList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispList::clazzInfo();
    ci->fields =  _LispList_fields;
    ci->methods =  _LispList_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispList_MetaInfoInitializer LispList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 


//static
::acdk::lang::RObject
LispSymbol_create_array(int length)
{
  return new ObjectArrayImpl<RLispSymbol>(length);
}

//static
::acdk::lang::RObject
LispSymbol_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispSymbol_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispSymbol::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_LispSymbol_INLRString__LRLispSymbol__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispSymbol((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method__setSymbolString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispSymbol* This = dmi_cast<LispSymbol>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LispSymbol::_setSymbolString((RString)args[0].getObjectVar());
    else
        This->_setSymbolString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispSymbol* This = dmi_cast<LispSymbol>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispSymbol::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispSymbol::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispSymbol* This = dmi_cast<LispSymbol>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispSymbol::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispSymbol_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispSymbol* This = dmi_cast<LispSymbol>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispSymbol::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispSymbol_fields__val_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispSymbol* This = dmi_cast<LispSymbol>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_val, flags);
    else
      This->_val = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispSymbol_fields__val = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_val", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LispSymbol_MetainfoWrapper::LispSymbol_fields__val_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispSymbol_fields[] = 
{
  &LispSymbol_fields__val,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispSymbol_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__args[] = 
{
  &LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_LispSymbol_INLRString__LRLispSymbol_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispSymbol", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispSymbol::clazzInfo(), // return type
  "_1_LispSymbol", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__args, // the arguments
  0, //arguments count
  LispSymbol_methods_LispSymbol_INLRString__LRLispSymbol__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_LispSymbol_INLRString__LRLispSymbol__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispSymbol_methods__setSymbolString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods__setSymbolString_INLRString__V_args[] = 
{
  &LispSymbol_methods__setSymbolString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods__setSymbolString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method__setSymbolString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setSymbolString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__setSymbolString", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods__setSymbolString_INLRString__V_args, // the arguments
  0, //arguments count
  LispSymbol_methods__setSymbolString_INLRString__V_exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method__setSymbolString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_clone", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  LispSymbol_methods_clone__LRObject__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LispSymbol_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toCode", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  LispSymbol_methods_toCode__LRString__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispSymbol_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispSymbol_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  LispSymbol_methods_toString__LRString__args, // the arguments
  0, //arguments count
  LispSymbol_methods_toString__LRString__exceptions, // the declared exceptions
  LispSymbol_MetainfoWrapper::LispSymbol_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispSymbol_methods[] = 
{
  &LispSymbol_method_GetClass__L_acdk_lang_RClass_,
  &LispSymbol_method_LispSymbol_INLRString__LRLispSymbol_,
  &LispSymbol_method__setSymbolString_INLRString__V,
  &LispSymbol_method_clone__LRObject_,
  &LispSymbol_method_create_instance__LRObject_,
  &LispSymbol_method_toCode__LRString_,
  &LispSymbol_method_toString__LRString_,
  0
};


struct LispSymbol_MetaInfoInitializer
{  LispSymbol_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispSymbol::clazzInfo();
    ci->fields =  _LispSymbol_fields;
    ci->methods =  _LispSymbol_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispSymbol_MetaInfoInitializer LispSymbol_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::text;

//static
::acdk::lang::RObject
LispTemplateFilter_create_array(int length)
{
  return new ObjectArrayImpl<RLispTemplateFilter>(length);
}

//static
::acdk::lang::RObject
LispTemplateFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LispTemplateFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispTemplateFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LispTemplateFilter((RLispEnvironment)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_filter_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispTemplateFilter* This = dmi_cast<LispTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispTemplateFilter::filter((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->filter((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_filter_INLRStringArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LispTemplateFilter* This = dmi_cast<LispTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LispTemplateFilter::filter((RStringArray)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->filter((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispTemplateFilter::filter((RLispEnvironment)args[0].getObjectVar(), (acdk::io::RFile)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LispTemplateFilter_method_filter_INLRLispEnvironment_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LispTemplateFilter::filter((RLispEnvironment)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LispTemplateFilter_fields__env_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LispTemplateFilter* This = dmi_cast<LispTemplateFilter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_env, flags);
    else
      This->_env = (RLispEnvironment)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LispTemplateFilter_fields__env = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_env", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo(),
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_fields__env_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LispTemplateFilter_fields[] = 
{
  &LispTemplateFilter_fields__env,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__args[] = 
{
  &LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LispTemplateFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LispTemplateFilter::clazzInfo(), // return type
  "_0_LispTemplateFilter", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRString__LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_filter_INLRString__LRString__args[] = 
{
  &LispTemplateFilter_methods_filter_INLRString__LRString__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_filter_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_filter_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_filter", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_filter_INLRString__LRString__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_filter_INLRString__LRString__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_filter_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "matches", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_filter_INLRStringArray__LRString__args[] = 
{
  &LispTemplateFilter_methods_filter_INLRStringArray__LRString__arg_matches,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_filter_INLRStringArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_filter_INLRStringArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_filter", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_filter_INLRStringArray__LRString__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_filter_INLRStringArray__LRString__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_filter_INLRStringArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__args[] = 
{
  &LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__arg_env,
  &LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_filter", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLispEnvironment::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__args[] = 
{
  &LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__arg_env,
  &LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LispTemplateFilter_method_filter_INLRLispEnvironment_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "filter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_filter", // alternative name of method
  -1, // altlabelHashCode
  LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__args, // the arguments
  0, //arguments count
  LispTemplateFilter_methods_filter_INLRLispEnvironment_INLRString__LRString__exceptions, // the declared exceptions
  LispTemplateFilter_MetainfoWrapper::LispTemplateFilter_method_filter_INLRLispEnvironment_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LispTemplateFilter_methods[] = 
{
  &LispTemplateFilter_method_GetClass__L_acdk_lang_RClass_,
  &LispTemplateFilter_method_LispTemplateFilter_INLRLispEnvironment__LRLispTemplateFilter_,
  &LispTemplateFilter_method_filter_INLRString__LRString_,
  &LispTemplateFilter_method_filter_INLRStringArray__LRString_,
  &LispTemplateFilter_method_filter_INLRLispEnvironment_INLacdk_io_RFile__LRString_,
  &LispTemplateFilter_method_filter_INLRLispEnvironment_INLRString__LRString_,
  0
};


struct LispTemplateFilter_MetaInfoInitializer
{  LispTemplateFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LispTemplateFilter::clazzInfo();
    ci->fields =  _LispTemplateFilter_fields;
    ci->methods =  _LispTemplateFilter_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LispTemplateFilter_MetaInfoInitializer LispTemplateFilter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lisp


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) lisp_dummyExportFunc() {}
#endif

