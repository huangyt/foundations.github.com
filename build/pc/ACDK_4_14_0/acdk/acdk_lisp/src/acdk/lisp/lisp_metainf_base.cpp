// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "acdk_lisp_decl.h"
#include "Config.h"
#include "Function.h"
#include "lisp.h"
#include "LispArray.h"
#include "LispAtom.h"
#include "LispBinaryCode.h"
#include "LispBuildInFunction.h"
#include "LispCallBack.h"
#include "LispClass.h"
#include "LispCode.h"
#include "LispDmiClient.h"
#include "LispEnvironment.h"
#include "LispException.h"
#include "LispFunction.h"
#include "LispInterpreter.h"
#include "LispList.h"
#include "LispObject.h"
#include "LispSymbol.h"
#include "LispTemplateFilter.h"
#include "LispTokenizer.h"
#include "LispVar.h"
#include "StackFrame.h"

namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo* _Function_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Function::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Function", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Function_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Function::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Function(Function::clazzInfo());

::acdk::lang::RClass
Function::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Function::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispArray_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispArray_interfaces[] =
{
  &_LispArray_super_LispVar,
  0
};

::acdk::lang::dmi::ClazzInfo* LispArray::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispArray", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispArray_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispArray::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispArray(LispArray::clazzInfo());

::acdk::lang::RClass
LispArray::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispArray::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RLispVarArray _list 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispAtom_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispAtom_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispAtom_interfaces[] =
{
  &_LispAtom_super_LispVar,
  &_LispAtom_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispAtom::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispAtom", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispAtom_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispAtom::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispAtom::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispAtom(LispAtom::clazzInfo());

::acdk::lang::RClass
LispAtom::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispAtom::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispBinaryCode_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispBinaryCode_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispBinaryCode_interfaces[] =
{
  &_LispBinaryCode_super___acdk__lang__Object,
  &_LispBinaryCode_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispBinaryCode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispBinaryCode", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispBinaryCode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispBinaryCode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispBinaryCode(LispBinaryCode::clazzInfo());

::acdk::lang::RClass
LispBinaryCode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispBinaryCode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->defuns._ref_this()); // acdk::util::RHashMap defuns 
  fields.push_back((::acdk::lang::RObject*)this->globals._ref_this()); // acdk::util::RHashMap globals 
  fields.push_back((::acdk::lang::RObject*)this->macros._ref_this()); // acdk::util::RHashMap macros 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispBuildInFunction_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispBuildInFunction_super_Function =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Function::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispBuildInFunction_interfaces[] =
{
  &_LispBuildInFunction_super_LispVar,
  &_LispBuildInFunction_super_Function,
  0
};

::acdk::lang::dmi::ClazzInfo* LispBuildInFunction::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispBuildInFunction", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispBuildInFunction_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispBuildInFunction::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispBuildInFunction(LispBuildInFunction::clazzInfo());

::acdk::lang::RClass
LispBuildInFunction::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispBuildInFunction::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_function._ref_this()); // RFunction _function 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispCallBack_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispCallBack_super_Function =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Function::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispCallBack_interfaces[] =
{
  &_LispCallBack_super_acdk__lang__Object,
  &_LispCallBack_super_Function,
  0
};

::acdk::lang::dmi::ClazzInfo* LispCallBack::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispCallBack", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispCallBack_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispCallBack::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispCallBack(LispCallBack::clazzInfo());

::acdk::lang::RClass
LispCallBack::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispCallBack::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_declCode._ref_this()); // RLispList _declCode 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispSlot_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispSlot_super___acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispSlot_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispSlot_interfaces[] =
{
  &_LispSlot_super___acdk__lang__Object,
  &_LispSlot_super___acdk__lang__Cloneable,
  &_LispSlot_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSlot::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispSlot", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispSlot_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispSlot::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispSlot::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispSlot(LispSlot::clazzInfo());

::acdk::lang::RClass
LispSlot::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispSlot::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->initarg._ref_this()); // RString initarg 
  fields.push_back((::acdk::lang::RObject*)this->initform._ref_this()); // RLispVar initform 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispClass_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispClass_interfaces[] =
{
  &_LispClass_super_LispVar,
  0
};

::acdk::lang::dmi::ClazzInfo* LispClass::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispClass", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispClass_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispClass::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispClass::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispClass(LispClass::clazzInfo());

::acdk::lang::RClass
LispClass::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispClass::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_className._ref_this()); // RString _className 
  fields.push_back((::acdk::lang::RObject*)this->_slots._ref_this()); // RLispSlotArray _slots 
  fields.push_back((::acdk::lang::RObject*)this->_superClasses._ref_this()); // RLispClassArray _superClasses 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispCode_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispCode_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispCode_interfaces[] =
{
  &_LispCode_super_acdk__lang__Object,
  &_LispCode_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispCode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispCode", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispCode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispCode::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispCode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispCode(LispCode::clazzInfo());

::acdk::lang::RClass
LispCode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispCode::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_code._ref_this()); // RLispList _code 
  fields.push_back((::acdk::lang::RObject*)this->_last._ref_this()); // RLispList _last 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::io;
using namespace acdk::util;
::acdk::lang::dmi::ClazzSuperInfo _LispEnvironment_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispEnvironment_interfaces[] =
{
  &_LispEnvironment_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LispEnvironment::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispEnvironment", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispEnvironment_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 14, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispEnvironment::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispEnvironment(LispEnvironment::clazzInfo());

::acdk::lang::RClass
LispEnvironment::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispEnvironment::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cmlineArgs._ref_this()); // RStringArray _cmlineArgs 
  fields.push_back((::acdk::lang::RObject*)this->_defuns._ref_this()); // acdk::util::RHashMap _defuns 
  fields.push_back((::acdk::lang::RObject*)this->_environment._ref_this()); // acdk::util::RProperties _environment 
  fields.push_back((::acdk::lang::RObject*)this->_globals._ref_this()); // acdk::util::RHashMap _globals 
  fields.push_back((::acdk::lang::RObject*)this->_includes._ref_this()); // acdk::util::RHashSet _includes 
  fields.push_back((::acdk::lang::RObject*)this->_lastEvaled._ref_this()); // RLispVar _lastEvaled 
  fields.push_back((::acdk::lang::RObject*)this->_macros._ref_this()); // acdk::util::RHashMap _macros 
  fields.push_back((::acdk::lang::RObject*)this->_tracedSymbols._ref_this()); // acdk::util::RHashSet _tracedSymbols 
  fields.push_back((::acdk::lang::RObject*)this->err._ref_this()); // acdk::io::RPrintWriter err 
  fields.push_back((::acdk::lang::RObject*)this->in._ref_this()); // acdk::io::RInputReader in 
  fields.push_back((::acdk::lang::RObject*)this->out._ref_this()); // acdk::io::RPrintWriter out 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispException_super_acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispException_interfaces[] =
{
  &_LispException_super_acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* LispException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispException", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispException(LispException::clazzInfo());

::acdk::lang::RClass
LispException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, RuntimeException)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_where._ref_this()); // RString _where 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispFunction_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispFunction_super_Function =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Function::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispFunction_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispFunction_interfaces[] =
{
  &_LispFunction_super_LispVar,
  &_LispFunction_super_Function,
  &_LispFunction_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispFunction::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispFunction", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispFunction_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispFunction::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispFunction::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispFunction(LispFunction::clazzInfo());

::acdk::lang::RClass
LispFunction::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispFunction::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_definition._ref_this()); // RLispList _definition 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _LispInterpreter_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispInterpreter_super___acdk__lang__dmi__ScriptInterpreter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::dmi::ScriptInterpreter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispInterpreter_interfaces[] =
{
  &_LispInterpreter_super___acdk__lang__Object,
  &_LispInterpreter_super___acdk__lang__dmi__ScriptInterpreter,
  0
};

::acdk::lang::dmi::ClazzInfo* LispInterpreter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispInterpreter", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispInterpreter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispInterpreter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispInterpreter(LispInterpreter::clazzInfo());

::acdk::lang::RClass
LispInterpreter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispInterpreter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_lenv._ref_this()); // RLispEnvironment _lenv 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispList_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispList_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispList_interfaces[] =
{
  &_LispList_super_LispVar,
  &_LispList_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispList", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispList::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispList(LispList::clazzInfo());

::acdk::lang::RClass
LispList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispList::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_car._ref_this()); // RLispVar _car 
  fields.push_back((::acdk::lang::RObject*)this->_cdr._ref_this()); // RLispList _cdr 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

::acdk::lang::dmi::ClazzSuperInfo _LispSymbol_super_LispVar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LispVar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispSymbol_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispSymbol_interfaces[] =
{
  &_LispSymbol_super_LispVar,
  &_LispSymbol_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispSymbol::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LispSymbol", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispSymbol_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LispSymbol::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispSymbol::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispSymbol(LispSymbol::clazzInfo());

::acdk::lang::RClass
LispSymbol::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispSymbol::getCollectableFields(FieldReferences& fields)
{
  LispVar::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_val._ref_this()); // RString _val 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::text;
::acdk::lang::dmi::ClazzSuperInfo _LispTemplateFilter_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispTemplateFilter_super___acdk__text__TemplateFilter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::text::TemplateFilter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispTemplateFilter_interfaces[] =
{
  &_LispTemplateFilter_super___acdk__lang__Object,
  &_LispTemplateFilter_super___acdk__text__TemplateFilter,
  0
};

::acdk::lang::dmi::ClazzInfo* LispTemplateFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LispTemplateFilter", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispTemplateFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispTemplateFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispTemplateFilter(LispTemplateFilter::clazzInfo());

::acdk::lang::RClass
LispTemplateFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispTemplateFilter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_env._ref_this()); // RLispEnvironment _env 
}


} // namespace acdk
} // namespace lisp


namespace acdk { 
namespace lisp { 

using namespace acdk::lang;
using namespace acdk::lang::sys;
using namespace acdk::lang::dmi;
::acdk::lang::dmi::ClazzSuperInfo _LispVar_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LispVar_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LispVar_interfaces[] =
{
  &_LispVar_super_acdk__lang__Object,
  &_LispVar_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* LispVar::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "LispVar", // name of class
  -1, // hashCode
  "acdk/lisp", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LispVar_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LispVar::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LispVar(LispVar::clazzInfo());

::acdk::lang::RClass
LispVar::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LispVar::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace lisp

