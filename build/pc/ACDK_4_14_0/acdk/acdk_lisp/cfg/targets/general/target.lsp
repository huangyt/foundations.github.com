;; $id$

(setg acdk-make-project-metainfos '())

(defun acdkmake-target-get-make-metainfo ()
  (set erg "metainfo:\n")
  (dolist (el (acdkmake-getsourcedirs))
    (set erg (s+ erg "\t$(ACDKMC) " el acdkmake-target-targetscriptnl))
  )
  erg
)



(defun acdk-pmake-get-makecmdlineend ()
  (if (acdkmake-is-platform "dsp")
    (return "\n")
    (return "; \\\n")
  )
)


(defun acdk-pmake-generate-meta-make ()
  (set erg "")
  (dolist (_ps acdk-projects)
    (set name (cadr _ps))
    (set path (car _ps))
    (set erg (s+ erg "\n" name "-makemake:\n"))
    (dolist (ptype acdk-project-platforms)
      (set erg (s+ erg "\t$(ACDKLISP) -acdk-home=$(ACDKHOME) " path (slash) name ".lsp -pdir " path " " ptype acdkmake-target-targetscriptnl))
    )
  )
  (set erg (s+ erg "\n\nmakemake:: "))
  (dolist (_ps acdk-projects)
    (set name (cadr _ps))
    (set path (car _ps))
    (set erg (s+ erg name "-makemake "))
  )
  (setf erg (s+ erg "\n\n"))
	(dolist (ptype acdk-project-platforms)
		(setf erg (s+ erg ptype "-makemake:\n"))
		(dolist (_ps acdk-projects)
			(set name (cadr _ps))
    	(set path (car _ps))
    	(set erg (s+ erg "\t$(ACDKLISP) -acdk-home=$(ACDKHOME) " path (slash) name ".lsp -pdir " path " " ptype acdkmake-target-targetscriptnl))
		)
		(setf erg (s+ erg "\n"))
	)
	
  (set erg (s+ erg "\nmetamakemake:\n\t$(ACDKLISP) -acdk-home=$(ACDKHOME) " acdkmake-project-name ".lsp\n\n"))
  erg
)


(defun old-acdk-pmake-generate-meta-make ()
  (set erg "metamake:\n")
  (set endl (acdk-pmake-get-makecmdlineend))
  (dolist (_ps acdk-projects)
    (set name (cadr _ps))
    (set path (car _ps))
    ;(set erg (s+ erg "\texport PATH=$(ACDKHOME)" (slash) "bin:$PATH" endl))
    (dolist (ptype acdk-project-platforms)
      ;(set erg (s+ erg "\tcd " path endl))
      (set erg (s+ erg "\t$(ACDKLISP) -acdk-home=$(ACDKHOME) " path (slash) name ".lsp -pdir " path " " ptype endl))
      ;(set erg (s+ erg "\tcd " (cdup-from-cd path) endl))
    )
  )
  erg
)

(defun acdk-pmake-generate-ptype-targets (name)
  (setf erg (s+ "\n" name "s: "))
  (dolist (ps acdk-projects)
    (setf prj (cadr ps))
    (setf tpl (car (cdr (cdr (cdr ps)))))
    (if (isdef tpl)
      (dolist (type tpl)
        (if (invoke name 'equals type)
          (setf erg (s+ erg " " prj))
        )
      )
    )
  )
  (setf erg (s+ erg "\n"))
  erg
)

(defun acdkmake-get-libs2 ()
	(set erg "")
	(if (not (isdef acdkmake-project-ldflags2))
	  (return "")
	)
	(return (s+ " " acdkmake-project-ldflags2))
)
(defun acdkmake-get-cflags2 ()
	(set erg "")
	(if (not (isdef acdkmake-project-cflags2))
	  (return "")
	)
	(return (s+ " " acdkmake-project-cflags2))
)

(defun strInList (taglist str)
	(dolist (type taglist)
		(if (str 'equals type)
			(return T)
		)
	)
	Nil
)
