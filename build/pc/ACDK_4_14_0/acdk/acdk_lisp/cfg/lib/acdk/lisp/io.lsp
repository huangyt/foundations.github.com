;;; -*- lisp -*-
;;;
;;; Copyright (C) 1999-2000 by Roger Rene Kommer, artefaktur
;;; ALL RIGHTS RESERVED
;;; This file is part of ACDK.
;;; artefaktur provides this software "as is" without express or implied warranty.
;;; Any commercial use of this software requires a license.
;;; 
;;; $Id: io.lsp,v 1.5 2003/06/19 13:17:25 kommer Exp $

(defun stdin ()
  (if (not (isdef *in))
    (setf *in (peek-static 'acdk.lang.System 'in))
  )
  *in
)

(defun stdout ()
  (if (not (isdef *out))
    (setf *out (peek-static 'acdk.lang.System 'out))
  )
  *out
)

(defun stderr ()
  (if (not (isdef *err))
    (setf *err (peek-static 'acdk.lang.System 'err))
  )
  *err
)

(stdin)
(stdout)
(stderr)

(setf *eol (invoke-static 'acdk.io.File 'endOfLine))
(setf *eol* *eol)
  
(setf *EPERM 1)
(setf *ENOENT 2)
(setf *ESRCH 3)
(setf *EINTR 4)
(setf *EIO 5)
(setf *ENXIO 6)
(setf *E2BIG 7)
(setf *ENOEXEC 8)
(setf *EBADF 9)
(setf *ECHILD 10)
(setf *EAGAIN 11)
(setf *ENOMEM 12)
(setf *EACCES 13)
(setf *EFAULT 14)
(setf *ENOTBLK 15)
(setf *EBUSY 16)
(setf *EEXIST 17)
(setf *EXDEV 18)
(setf *ENODEV 19)
(setf *ENOTDIR 20)
(setf *EISDIR 21)
(setf *EINVAL 22)
(setf *ENFILE 23)
(setf *EMFILE 24)
(setf *ENOTTY 25)
(setf *ETXTBSY 26)
(setf *EFBIG 27)
(setf *ENOSPC 28)
(setf *ESPIPE 29)
(setf *EROFS 30)
(setf *EMLINK 31)
(setf *EPIPE 32)
(setf *EDOM 33)
(setf *ERANGE 34)
(setf *EDEADLK 35)
(setf *ENAMETOOLONG 36)
(setf *ENOLCK 37)
(setf *ENOSYS 38)
(setf *ENOTEMPTY 39)
(setf *ELOOP 40)
(setf *EWOULDBLOCK 0)
(setf *ENOMSG 42)
(setf *EIDRM 43)
(setf *ECHRNG 44)
(setf *EL2NSYNC 45)
(setf *EL3HLT 46)
(setf *EL3RST 47)
(setf *ELNRNG 48)
(setf *EUNATCH 49)
(setf *ENOCSI 50)
(setf *EL2HLT 51)
(setf *EBADE 52)
(setf *EBADR 53)
(setf *EXFULL 54)
(setf *ENOANO 55)
(setf *EBADRQC 56)
(setf *EBADSLT 57)
(setf *EDEADLOCK 0)
(setf *EBFONT 59)
(setf *ENOSTR 60)
(setf *ENODATA 61)
(setf *ETIME 62)
(setf *ENOSR 63)
(setf *ENONET 64)
(setf *ENOPKG 65)
(setf *EREMOTE 66)
(setf *ENOLINK 67)
(setf *EADV 68)
(setf *ESRMNT 69)
(setf *ECOMM 70)
(setf *EPROTO 71)
(setf *EMULTIHOP 72)
(setf *EDOTDOT 73)
(setf *EBADMSG 74)
(setf *EOVERFLOW 75)
(setf *ENOTUNIQ 76)
(setf *EBADFD 77)
(setf *EREMCHG 78)
(setf *ELIBACC 79)
(setf *ELIBBAD 80)
(setf *ELIBSCN 81)
(setf *ELIBMAX 82)
(setf *ELIBEXEC 83)
(setf *EILSEQ 84)
(setf *ERESTART 85)
(setf *ESTRPIPE 86)
(setf *EUSERS 87)
(setf *ENOTSOCK 88)
(setf *EDESTADDRREQ 89)
(setf *EMSGSIZE 90)
(setf *EPROTOTYPE 91)
(setf *ENOPROTOOPT 92)
(setf *EPROTONOSUPPORT 93)
(setf *ESOCKTNOSUPPORT 94)
(setf *EOPNOTSUPP 95)
(setf *EPFNOSUPPORT 96)
(setf *EAFNOSUPPORT 97)
(setf *EADDRINUSE 98)
(setf *EADDRNOTAVAIL 99)
(setf *ENETDOWN 100)
(setf *ENETUNREACH 101)
(setf *ENETRESET 102)
(setf *ECONNABORTED 103)
(setf *ECONNRESET 104)
(setf *ENOBUFS 105)
(setf *EISCONN 106)
(setf *ENOTCONN 107)
(setf *ESHUTDOWN 108)
(setf *ETOOMANYREFS 109)
(setf *ETIMEDOUT 110)
(setf *ECONNREFUSED 111)
(setf *EHOSTDOWN 112)
(setf *EHOSTUNREACH 113)
(setf *EALREADY 114)
(setf *EINPROGRESS 115)
(setf *ESTALE 116)
(setf *EUCLEAN 117)
(setf *ENOTNAM 118)
(setf *ENAVAIL 119)
(setf *EISNAM 120)
(setf *EREMOTEIO 121)
(setf *EDQUOT 122)
(setf *ENOMEDIUM 123)
(setf *EMEDIUMTYPE 124)

(defun errno ()
  (+ 0 (invoke-static 'acdk.lang.System 'getErrno))
)

(defun errmsg (&optional errnum)
  (if (isdef errnum)
    (invoke-static 'acdk.lang.System 'getErrmsg errnum)
    (invoke-static 'acdk.lang.System 'getErrmsg)
  )
)

(defun clearerrno ()
  (invoke-static 'acdk.lang.System 'resetErrno)
)

;; getc currently doesn't work, because of implementation reasons in acdk::io::ConsoleReader
;(defun getc ()
;  (invoke-static 'acdk.lang.Character 'toString (invoke (stdin) 'read))
;)

(defun oldfgets ( _fd )
  (setf _res "")
  (setf *ioerr 0)
  (setf _c (invoke _fd 'read))
  (while (not (or (or (= _c 10) (= _c 13)) (or (= _c 4) (= _c -1))))
    (progn
      (setf _res (s+ _res (invoke-static 'acdk.lang.Character 'toString _c)))
      (setf _c (invoke _fd 'read))
    )
  )
  (if (and (= _c -1) (strempty _res))
    (setf *ioerr *EAGAIN)
  )
   ;; eat \n on win32
  (if (= _c 13)
    (setf _c (invoke _fd 'read))
  )
  _res
)

(defun fgets ( _fd )
  (setf *ioerr 0)
  (setf _res (invoke _fd 'readLine))
  (if (isNil _res)
    (progn
      ;;(setf _res "")
      (setf *ioerr *EAGAIN)
    )
  )
  _res
)

(defun gets ()
  (setf _res (fgets (stdin)))
  (if (isNil _res)
    (setf _res "")
  )
  _res
)

(defun printc (_str)
  (if (not (isdef _str))
    (setf _str "NIL")
  )
  (invoke (stdout) 'println (asPrintable _str))
  ""
)

(defun asPrintable (_obj)
  (if (instanceof _obj 'acdk.lang.String)
    _obj
    (invoke _obj 'toString)
  )
)

(defun println (_str)
  (if (not (isdef _str))
    (setf _str "NIL")
  )
  (invoke *out 'println (asPrintable _str))
  ""
)

(defun printerr (_str1)
  (if (not (isdef _str1))
    (setf _str1 "NIL")
  )
  (invoke *err 'println (s+ "ERR: " _str1))
  ""
)

(defun printwarn (_str1)
  (if (not (isdef _str1))
    (setf _str1 "NIL")
  )
  (invoke *err 'println (s+ "WARN: " _str1))
  ""
)

(defun flush ()
  (invoke (stdout) 'flush)
)

(defun print (_str)
  (if (not (isdef _str))
    (setf _str "NIL")
  )
  (invoke *out 'print (asPrintable _str))
  ""
)

(defun glob-array (_dirname &optional _pattern)
  (if (not (isdef _pattern))
    (if (strcmp (slash) "/")
      (setf _pattern "*.*")
      (setf _pattern "*")
    )
  )
  (invoke (new 'acdk.io.File _dirname) 'list (new 'acdk.io.GlobFilenameFilter _pattern))
  
)

(defun glob (_dirname &optional _pattern)
  (setf _array (glob-array _dirname _pattern))
  (if (not _array)
    (return Nil)
  )
  (setf _len (invoke _array "length"))
  (setf _n 0)
  (setf _res (list))
  (while (< _n _len)
    (progn
      (setf _res (append _res (invoke _array "get" _n)))
      (setf _n (+ _n 1))
    )
  )
  _res
)


(defun slash ()
  (invoke-static 'acdk.io.File 'separator)
)

(defun convert-path-if-needed (_fname)

  (if (isdef acdkmake-target-make-fqname)
    (set _erg (getCanonicalPath _fname))
  )
  (if (= (invoke (slash) 'compareTo "\\") 0)
    (set _erg (invoke _fname 'replace "/" "\\"))
    (set _erg (invoke _fname 'replace "\\" "/"))
  )
  _erg
  ;;(println (s+ "convert-file-if-needed: fname[" _fname "] erg[" _erg "]"))
)

(defun isAbsoluteFile (_fname)
  (if (invoke (new 'acdk.io.File _fname) 'isAbsolute)
    t
    NIL
  )
)

(defun isFile (_fname)
  (setf _f (new 'acdk.io.File _fname))
  (if (zerop _f)
    NIL
    (invoke _f 'isFile)
  )
)

(defun isDirectory (_fname)
  (setf _f (new 'acdk.io.File _fname))
  (if (zerop _f)
    NIL
    (invoke _f 'isDirectory)
  )
)


(defun getCanonicalPath (_fname)
  (invoke (new 'acdk.io.File _fname) 'getCanonicalPath)
)

(defun getAbsolutePath (_fname)
  (invoke (new 'acdk.io.File _fname) 'getAbsolutePath)
)


(defun writeFile (_file _content &optional _appendtofile _binary)
  (setf _o (new 'acdk.io.FileWriter _file (if (isdef _appendtofile) t NIL) (if (isdef _binary) t NIL)))
  ;(if (isdef _binary)
  ;  (println "isbinary")
  ;  (println "isascii")
  ;)
  (if (instanceof _content 'acdk.lang.String)
    (setf _content (invoke _content 'getBytes))
  )
  (invoke _o 'write _content)
)

(defun writeStringToFile (_file _content &optional _appendtofile _encoding)
  ;(trace 1)
  (setf _fo (new 'acdk.io.FileWriter _file (if (isdef _appendtofile) t NIL) NIL))
  (if (or (not (isdef _encoding)) (not _encoding))
  ;(if (not _encoding)
    (setf _encoding "LATIN-1")
  )
  (set _co (new 'acdk.io.CharToByteWriter _fo (invoke (invoke-static 'acdk.locale.Encoding 'getEncoding _encoding) 'getEncoder)))
  (invoke _co 'writeString _content)
)

(defun basename (_fname &optional _ext)
  (if (zerop _fname) 
    (return NIL)
  )
  (setf _idx (invoke _fname 'lastIndexOf (slash)))
  (if (>= _idx 0) 
    (setf _fname (invoke _fname 'substr (+ _idx 1)))
  )
  (if (and (isdef _ext) (invoke _fname 'endsWith _ext))
    (setf _fname (invoke _fname 'substr 0 (- (invoke _fname 'length) (invoke _ext 'length))))
  )
  (if (invoke (slash) 'equals "/")
    (return _fname)
  )
  (setf _idx (invoke _fname 'lastIndexOf "/"))
  (if (>= _idx 0) 
    (setf _fname (invoke _fname 'substr (+ _idx 1)))
  )
  (if (and (isdef _ext) (invoke _fname 'endsWith _ext))
    (setf _fname (invoke _fname 'substr 0 (- (invoke _fname 'length) (invoke _ext 'length))))
  )
  _fname
)

(defun parentdir (_fname)
  (if (zerop _fname) 
    (return NIL)
  )
  (setf _idx (invoke _fname 'lastIndexOf (slash)))
  (if (= _idx 0)
    (setf _idx 1)
  )
  (if (> _idx 0) 
    (setf _fname (invoke _fname 'substr 0 _idx))
  )
  _fname
)

(defun stripExtension (_fname)
  (if (zerop _fname)
    (return NIL)
  )
  (setf _idx (invoke _fname 'lastIndexOf "."))
    (if (!= _idx -1)
      (return (invoke _fname 'substr 0 _idx))
  )
  _fname
)

(defun concatpath (_f _s)
  (setf _erg "")
  (if (invoke _f 'endsWith (slash))
    (setf _f (invoke _f 'substr 0 (- (invoke _f 'length) 1)))
  )
  (if (invoke _s 'startsWith (slash))
    (setf _s (invoke _s 'substr 1))
  )
 (setf _erg (s+ _f (slash) _s))
 ;(println (s+ "concatPath: f[" _f "] s[" _s "] erg[" _erg "]"))
 _erg
)

(defun pathjoin (_base &rest _items)
  (if (not (setf _res _base))
   (return Nil)
  )
  (dolist (_i _items)
    (if _i
      (setf _res (concatpath _res _i))
    )
  )
  _res
)

(defun getRevercedCDPath (path)
 (invoke (new 'acdk.text.RegExp "[^\\/\\\\]+") 'replace path ".." t)
)

(defun print-full-filename (_fname)
  (println (invoke (new 'acdk.io.File _fname) 'getCanonicalPath))
)

(defun shell (_cmd &optional _verbose)
  (if (not (isdef _verbose))
    (setf _verbose 0)
  )
  (if _verbose
    (println (s+ "executing: " _cmd))
  )
  (setf _proc (invoke (invoke-static 'acdk.lang.Runtime 'getRuntime) 'exec _cmd 1))
  (if (isNil _proc)
    (throw 'acdk.io.IOException (s+ "command \"" _cmd "\" failed"))
  )
  (setf _opipe (invoke _proc 'getOutputStream))
  (setf _epipe (invoke _proc 'getErrorStream))
  (setf *shellout '() )
  (setf *shellerr '() )
  (setf _stdres "")
  (setf _errres "")
  (setf _loop 3)
  (while (> _loop 0)
    (progn
      (setf _nostd false)
      (setf _stdline (fgets _opipe))
      (if (= *ioerr 0)
        (if (not (and (strempty _stdres) (strempty _stdline)))
          (progn
            (if _verbose
              (println _stdline)
            )
            (setf *shellout (append *shellout _stdline))
            (setf _stdres (s+ _stdres *eol _stdline))
          )
        )
        (setf _nostd true)
      )
      (setf _noerr false)
      (setf _errline (fgets _epipe))
      (if (= *ioerr 0)
        (if (not (and (strempty _errres) (strempty _errline)))
          (progn
            (if _verbose
              (printerr _errline)
            )
            (setf *shellerr (append *shellerr _errline))
            (setf _errres (s+ _errres *eol _stdline))
          )
        )
        (setf _noerr true)
      )
      (if (and (not (invoke _proc 'isRunning)) (and _nostd _noerr))
        (progn
          (setf _loop (- _loop 1))
	  (sleep 100)
	)
        (setf _loop 3)
      )
    )
  )
  (setf *? (invoke _proc 'waitFor))
  _stdres
)

(defun fopenW (_fnam)
  (setf _file (new 'acdk.io.File _fnam))
  (if (isNil _file)
    (return Nil)
  )
  ;;(println (s+ "fopenW: opening " _fnam))
  (setf _fs Nil)
  (try
    (
      (if (invoke _file 'exists)
        (progn
          ;;(setf _dot (invoke _fnam 'lastIndexOf "."))
          ;;(if (< _dot 0)
	    ;;(setf _dot (invoke _fnam 'length))
          ;;)
          ;;(setf _sl (invoke _fnam 'lastIndexOf (slash)))
          ;;(if (> _sl _dot)
	    ;;(setf _dot (invoke _fnam 'length))
          ;;)
          ;;(setf _bk (new 'acdk.io.File (s+ (substr _fnam 0 _dot) ".bak")))
          (setf _bk (new 'acdk.io.File (s+ _fnam ".bak")))
          (if
            (and
              (invoke _file 'exists)
              (invoke _file 'isFile)
            )
	    (invoke _bk 'deleteFile)
          )
          (invoke _file 'renameTo _bk)
        )
      )
      (invoke _file 'createNewFile)
      (setf _fs (new 'acdk.io.FileWriter _file))
      (return _fs)
    )
    (catch (acdk.io.IOException ex)
      (println (invoke ex 'getmessage))
      (setf _fs Nil)
    )
  )
  _fs
)

(defun fopenR (_fnam)
  (setf _file (new 'acdk.io.File _fnam))
  (if (isNil _file)
    (return Nil)
  )
  (if
    (not
      (and
        (and
          (invoke _file 'exists)
          (invoke _file 'canRead)
        )
        (invoke _file 'isFile)
      )
    )
    (return Nil)
  )
  (setf _fs Nil)
  ;;(println (s+ "fopenR: opening " _fnam))
  (try
    (
      (setf _fs (new 'acdk.io.FileReader _file))
      (return _fs)
    )
    (catch (acdk.io.IOException ex)
      (println (invoke ex 'getmessage))
      (setf _fs Nil)
    )
  )
  _fs
)

(defun fprint (_file _arg)
  (setf _str (s+ "" _arg))
  (invoke _file 'write (invoke _str 'getBytes))
)

(defun fprintln (_file _arg)
  (setf _str (s+ "" _arg *eol))
  (fprint _file _str)
)

(defun fclose (_file)
  (invoke _file 'close)
)

(defun mkdirs (_path &optional _mode)
  (if (not (isdef _mode))
    (setf _mode 511)
  )
  (setf _dir (new 'acdk.io.File _path))
  (invoke _dir 'mkdirs _mode)
)

(defun chdir (_path)
  (invoke-static 'acdk.io.File "setCWD" _path)
)

(defun curdir ()
  (invoke-static 'acdk.io.File "getCWD")
)

(setg *progress-indicator* -1)

(defun progress ()
  (setg *progress-indicator* (+ *progress-indicator* 1))
  (if (> *progress-indicator* 3)
    (setg *progress-indicator* 0)
  )
  (print (s+ "\r" (substr "|/-\\" *progress-indicator* (+ *progress-indicator* 1))))
  (flush)
)

