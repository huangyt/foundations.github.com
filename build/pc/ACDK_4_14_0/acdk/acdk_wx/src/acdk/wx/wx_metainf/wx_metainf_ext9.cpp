// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
WindowDC_create_array(int length)
{
  return new ObjectArrayImpl<RWindowDC>(length);
}

//static
::acdk::lang::RObject
WindowDC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WindowDC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WindowDC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WindowDC::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WindowDC_method_WindowDC_INLRWindow__LRWindowDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WindowDC((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _WindowDC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WindowDC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WindowDC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WindowDC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WindowDC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WindowDC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WindowDC_MetainfoWrapper::WindowDC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__args[] = 
{
  &WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WindowDC_method_WindowDC_INLRWindow__LRWindowDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WindowDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WindowDC::clazzInfo(), // return type
  "_0_WindowDC", // alternative name of method
  -1, // altlabelHashCode
  WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__args, // the arguments
  0, //arguments count
  WindowDC_methods_WindowDC_INLRWindow__LRWindowDC__exceptions, // the declared exceptions
  WindowDC_MetainfoWrapper::WindowDC_method_WindowDC_INLRWindow__LRWindowDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WindowDC_methods[] = 
{
  &WindowDC_method_GetClass__L_acdk_lang_RClass_,
  &WindowDC_method_WindowDC_INLRWindow__LRWindowDC_,
  0
};


struct WindowDC_MetaInfoInitializer
{  WindowDC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WindowDC::clazzInfo();
    ci->fields =  _WindowDC_fields;
    ci->methods =  _WindowDC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WindowDC_MetaInfoInitializer WindowDC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Wizard_create_array(int length)
{
  return new ObjectArrayImpl<RWizard>(length);
}

//static
::acdk::lang::RObject
Wizard_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Wizard_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Wizard::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Wizard((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RPoint)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_Wizard_INLRWindow_IINLRString__LRWizard__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Wizard((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Wizard((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_fitToPage_INLRWizardPage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Wizard::fitToPage((RWizardPage)args[0].getObjectVar());
    else
        This->fitToPage((RWizardPage)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_getCurrentPage__LRWizardPage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Wizard::getCurrentPage();
    else
        ret = (::acdk::lang::RObject)This->getCurrentPage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_getPageSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Wizard::getPageSize();
    else
        ret = (::acdk::lang::RObject)This->getPageSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_hasNextPage_INLRWizardPage__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Wizard::hasNextPage((RWizardPage)args[0].getObjectVar());
    else
      ret = This->hasNextPage((RWizardPage)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_hasPrevPage_INLRWizardPage__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Wizard::hasPrevPage((RWizardPage)args[0].getObjectVar());
    else
      ret = This->hasPrevPage((RWizardPage)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_runWizard_INLRWizardPage__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Wizard::runWizard((RWizardPage)args[0].getObjectVar());
    else
      ret = This->runWizard((RWizardPage)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Wizard_method_setPageSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Wizard* This = dmi_cast<Wizard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Wizard::setPageSize((RSize)args[0].getObjectVar());
    else
        This->setPageSize((RSize)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Wizard_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Wizard_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__args[] = 
{
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_parent,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_id,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_title,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_bitmap,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Wizard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Wizard::clazzInfo(), // return type
  "_0_Wizard", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__args, // the arguments
  0, //arguments count
  Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__args[] = 
{
  &Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_parent,
  &Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_id,
  &Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_Wizard_INLRWindow_IINLRString__LRWizard_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Wizard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Wizard::clazzInfo(), // return type
  "_1_Wizard", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__args, // the arguments
  0, //arguments count
  Wizard_methods_Wizard_INLRWindow_IINLRString__LRWizard__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_Wizard_INLRWindow_IINLRString__LRWizard__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__args[] = 
{
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_parent,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_id,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_title,
  &Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Wizard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Wizard::clazzInfo(), // return type
  "_2_Wizard", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__args, // the arguments
  0, //arguments count
  Wizard_methods_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_fitToPage_INLRWizardPage__V_arg_firstPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "firstPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_fitToPage_INLRWizardPage__V_args[] = 
{
  &Wizard_methods_fitToPage_INLRWizardPage__V_arg_firstPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_fitToPage_INLRWizardPage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_fitToPage_INLRWizardPage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fitToPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_fitToPage", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_fitToPage_INLRWizardPage__V_args, // the arguments
  0, //arguments count
  Wizard_methods_fitToPage_INLRWizardPage__V_exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_fitToPage_INLRWizardPage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_getCurrentPage__LRWizardPage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_getCurrentPage__LRWizardPage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_getCurrentPage__LRWizardPage_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo(), // return type
  "_4_getCurrentPage", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_getCurrentPage__LRWizardPage__args, // the arguments
  0, //arguments count
  Wizard_methods_getCurrentPage__LRWizardPage__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_getCurrentPage__LRWizardPage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_getPageSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_getPageSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_getPageSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_5_getPageSize", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_getPageSize__LRSize__args, // the arguments
  0, //arguments count
  Wizard_methods_getPageSize__LRSize__exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_getPageSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_hasNextPage_INLRWizardPage__Z_arg_page = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "page", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_hasNextPage_INLRWizardPage__Z_args[] = 
{
  &Wizard_methods_hasNextPage_INLRWizardPage__Z_arg_page,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_hasNextPage_INLRWizardPage__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_hasNextPage_INLRWizardPage__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNextPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_hasNextPage", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_hasNextPage_INLRWizardPage__Z_args, // the arguments
  0, //arguments count
  Wizard_methods_hasNextPage_INLRWizardPage__Z_exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_hasNextPage_INLRWizardPage__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_hasPrevPage_INLRWizardPage__Z_arg_page = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "page", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_hasPrevPage_INLRWizardPage__Z_args[] = 
{
  &Wizard_methods_hasPrevPage_INLRWizardPage__Z_arg_page,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_hasPrevPage_INLRWizardPage__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_hasPrevPage_INLRWizardPage__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasPrevPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_hasPrevPage", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_hasPrevPage_INLRWizardPage__Z_args, // the arguments
  0, //arguments count
  Wizard_methods_hasPrevPage_INLRWizardPage__Z_exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_hasPrevPage_INLRWizardPage__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_runWizard_INLRWizardPage__Z_arg_firstPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "firstPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_runWizard_INLRWizardPage__Z_args[] = 
{
  &Wizard_methods_runWizard_INLRWizardPage__Z_arg_firstPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_runWizard_INLRWizardPage__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_runWizard_INLRWizardPage__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runWizard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_runWizard", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_runWizard_INLRWizardPage__Z_args, // the arguments
  0, //arguments count
  Wizard_methods_runWizard_INLRWizardPage__Z_exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_runWizard_INLRWizardPage__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_methods_setPageSize_INLRSize__V_arg_sizePage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizePage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods_setPageSize_INLRSize__V_args[] = 
{
  &Wizard_methods_setPageSize_INLRSize__V_arg_sizePage,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_methods_setPageSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_method_setPageSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setPageSize", // alternative name of method
  -1, // altlabelHashCode
  Wizard_methods_setPageSize_INLRSize__V_args, // the arguments
  0, //arguments count
  Wizard_methods_setPageSize_INLRSize__V_exceptions, // the declared exceptions
  Wizard_MetainfoWrapper::Wizard_method_setPageSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Wizard_methods[] = 
{
  &Wizard_method_GetClass__L_acdk_lang_RClass_,
  &Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap_INLRPoint__LRWizard_,
  &Wizard_method_Wizard_INLRWindow_IINLRString__LRWizard_,
  &Wizard_method_Wizard_INLRWindow_IINLRString_INLRBitmap__LRWizard_,
  &Wizard_method_fitToPage_INLRWizardPage__V,
  &Wizard_method_getCurrentPage__LRWizardPage_,
  &Wizard_method_getPageSize__LRSize_,
  &Wizard_method_hasNextPage_INLRWizardPage__Z,
  &Wizard_method_hasPrevPage_INLRWizardPage__Z,
  &Wizard_method_runWizard_INLRWizardPage__Z,
  &Wizard_method_setPageSize_INLRSize__V,
  0
};


struct Wizard_MetaInfoInitializer
{  Wizard_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Wizard::clazzInfo();
    ci->fields =  _Wizard_fields;
    ci->methods =  _Wizard_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Wizard_MetaInfoInitializer Wizard_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
WizardPage_create_array(int length)
{
  return new ObjectArrayImpl<RWizardPage>(length);
}

//static
::acdk::lang::RObject
WizardPage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WizardPage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WizardPage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WizardPage((RWizard)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WizardPage((RWizard)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_getBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WizardPage* This = dmi_cast<WizardPage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WizardPage::getBitmap();
    else
        ret = (::acdk::lang::RObject)This->getBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_getNext__LRWizardPage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WizardPage* This = dmi_cast<WizardPage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WizardPage::getNext();
    else
        ret = (::acdk::lang::RObject)This->getNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WizardPage_method_getPrev__LRWizardPage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WizardPage* This = dmi_cast<WizardPage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WizardPage::getPrev();
    else
        ret = (::acdk::lang::RObject)This->getPrev();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _WizardPage_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WizardPage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizard::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_resource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "resource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__args[] = 
{
  &WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_parent,
  &WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_bitmap,
  &WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__arg_resource,
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WizardPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WizardPage::clazzInfo(), // return type
  "_0_WizardPage", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__args, // the arguments
  0, //arguments count
  WizardPage_methods_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizard::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__args[] = 
{
  &WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__arg_parent,
  &WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_WizardPage_INLRWizard_INLRBitmap__LRWizardPage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "WizardPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WizardPage::clazzInfo(), // return type
  "_1_WizardPage", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__args, // the arguments
  0, //arguments count
  WizardPage_methods_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_WizardPage_INLRWizard_INLRBitmap__LRWizardPage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_getBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_getBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_getBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_4_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_getBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  WizardPage_methods_getBitmap__LRBitmap__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_getBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_getNext__LRWizardPage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_getNext__LRWizardPage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_getNext__LRWizardPage_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo(), // return type
  "_3_getNext", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_getNext__LRWizardPage__args, // the arguments
  0, //arguments count
  WizardPage_methods_getNext__LRWizardPage__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_getNext__LRWizardPage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WizardPage_methods_getPrev__LRWizardPage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WizardPage_methods_getPrev__LRWizardPage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WizardPage_method_getPrev__LRWizardPage_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrev", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWizardPage::clazzInfo(), // return type
  "_2_getPrev", // alternative name of method
  -1, // altlabelHashCode
  WizardPage_methods_getPrev__LRWizardPage__args, // the arguments
  0, //arguments count
  WizardPage_methods_getPrev__LRWizardPage__exceptions, // the declared exceptions
  WizardPage_MetainfoWrapper::WizardPage_method_getPrev__LRWizardPage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WizardPage_methods[] = 
{
  &WizardPage_method_GetClass__L_acdk_lang_RClass_,
  &WizardPage_method_WizardPage_INLRWizard_INLRBitmap_INLRString__LRWizardPage_,
  &WizardPage_method_WizardPage_INLRWizard_INLRBitmap__LRWizardPage_,
  &WizardPage_method_getBitmap__LRBitmap_,
  &WizardPage_method_getNext__LRWizardPage_,
  &WizardPage_method_getPrev__LRWizardPage_,
  0
};


struct WizardPage_MetaInfoInitializer
{  WizardPage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WizardPage::clazzInfo();
    ci->fields =  _WizardPage_fields;
    ci->methods =  _WizardPage_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WizardPage_MetaInfoInitializer WizardPage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
WxObject_create_array(int length)
{
  return new ObjectArrayImpl<RWxObject>(length);
}

//static
::acdk::lang::RObject
WxObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WxObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WxObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WxObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WxObject_method_WxObject__LRWxObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WxObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  WxObject_fields__ownsWxObject_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    WxObject* This = dmi_cast<WxObject>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_ownsWxObject, flags);
    else
      This->_ownsWxObject = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo WxObject_fields__ownsWxObject = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_ownsWxObject", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  WxObject_MetainfoWrapper::WxObject_fields__ownsWxObject_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _WxObject_fields[] = 
{
  &WxObject_fields__ownsWxObject,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WxObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WxObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WxObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WxObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WxObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WxObject_MetainfoWrapper::WxObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WxObject_methods_WxObject__LRWxObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WxObject_methods_WxObject__LRWxObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WxObject_method_WxObject__LRWxObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WxObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WxObject::clazzInfo(), // return type
  "_0_WxObject", // alternative name of method
  -1, // altlabelHashCode
  WxObject_methods_WxObject__LRWxObject__args, // the arguments
  0, //arguments count
  WxObject_methods_WxObject__LRWxObject__exceptions, // the declared exceptions
  WxObject_MetainfoWrapper::WxObject_method_WxObject__LRWxObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WxObject_methods[] = 
{
  &WxObject_method_GetClass__L_acdk_lang_RClass_,
  &WxObject_method_WxObject__LRWxObject_,
  0
};


struct WxObject_MetaInfoInitializer
{  WxObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WxObject::clazzInfo();
    ci->fields =  _WxObject_fields;
    ci->methods =  _WxObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WxObject_MetaInfoInitializer WxObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
XmlResource_create_array(int length)
{
  return new ObjectArrayImpl<RXmlResource>(length);
}

//static
::acdk::lang::RObject
XmlResource_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class XmlResource_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XmlResource::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_XmlResource__LRXmlResource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new XmlResource();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::attachUnknownControl((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RWindow)args[2].getObjectVar());
    else
      ret = This->attachUnknownControl((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RWindow)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_attachUnknownControl_INLRString_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::attachUnknownControl((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    else
      ret = This->attachUnknownControl((RString)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_clearHandlers__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XmlResource::clearHandlers();
    else
        This->clearHandlers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_compareVersion_IIII_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::compareVersion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->compareVersion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_get__LRXmlResource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XmlResource::get();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_getFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::getFlags();
    else
      ret = This->getFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_getVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::getVersion();
    else
      ret = This->getVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_getXRCID_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = XmlResource::getXRCID((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_initAllHandlers__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XmlResource::initAllHandlers();
    else
        This->initAllHandlers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_load_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::load((RString)args[0].getObjectVar());
    else
      ret = This->load((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadBitmap_INLRString__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadBitmap((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadBitmap((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadDialog_INLRWindow_INLRString__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::loadDialog( ::acdk::lang::getTypedObjectRef< RDialog >(args[0]), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->loadDialog( ::acdk::lang::getTypedObjectRef< RDialog >(args[0]), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadFrame_INLRWindow_INLRString__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadFrame((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadFrame((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadFrame_INLRFrame_INLRWindow_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::loadFrame((RFrame)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->loadFrame((RFrame)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadMenu_INLRString__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadMenu((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadMenu((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadMenuBar_INLRWindow_INLRString__LRMenuBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadMenuBar((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadMenuBar((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadMenuBar_INLRString__LRMenuBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadMenuBar((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadMenuBar((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->XmlResource::loadObject((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->loadObject((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->XmlResource::loadObject((RWxObject)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
      ret = This->loadObject((RWxObject)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_s2id_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = XmlResource::s2id((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_set_INLRXmlResource__LRXmlResource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)XmlResource::set((RXmlResource)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  XmlResource_method_setFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    XmlResource* This = dmi_cast<XmlResource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->XmlResource::setFlags(args[0].getIntVar());
    else
        This->setFlags(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _XmlResource_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  XmlResource_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_XmlResource__LRXmlResource__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_XmlResource__LRXmlResource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_XmlResource__LRXmlResource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "XmlResource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  XmlResource::clazzInfo(), // return type
  "_0_XmlResource", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_XmlResource__LRXmlResource__args, // the arguments
  0, //arguments count
  XmlResource_methods_XmlResource__LRXmlResource__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_XmlResource__LRXmlResource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_control = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "control", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_args[] = 
{
  &XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_name,
  &XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_control,
  &XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attachUnknownControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_attachUnknownControl", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_arg_control = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "control", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_args[] = 
{
  &XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_arg_name,
  &XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_arg_control,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_attachUnknownControl_INLRString_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "attachUnknownControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_attachUnknownControl", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_attachUnknownControl_INLRString_INLRWindow__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_attachUnknownControl_INLRString_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_clearHandlers__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_clearHandlers__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_clearHandlers__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearHandlers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clearHandlers", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_clearHandlers__V_args, // the arguments
  0, //arguments count
  XmlResource_methods_clearHandlers__V_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_clearHandlers__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_compareVersion_IIII_I_arg_major = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "major", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_compareVersion_IIII_I_arg_minor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_compareVersion_IIII_I_arg_release = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "release", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_compareVersion_IIII_I_arg_revision = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "revision", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_compareVersion_IIII_I_args[] = 
{
  &XmlResource_methods_compareVersion_IIII_I_arg_major,
  &XmlResource_methods_compareVersion_IIII_I_arg_minor,
  &XmlResource_methods_compareVersion_IIII_I_arg_release,
  &XmlResource_methods_compareVersion_IIII_I_arg_revision,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_compareVersion_IIII_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_compareVersion_IIII_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_compareVersion", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_compareVersion_IIII_I_args, // the arguments
  0, //arguments count
  XmlResource_methods_compareVersion_IIII_I_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_compareVersion_IIII_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_get__LRXmlResource__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_get__LRXmlResource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_get__LRXmlResource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXmlResource::clazzInfo(), // return type
  "_k_get", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_get__LRXmlResource__args, // the arguments
  0, //arguments count
  XmlResource_methods_get__LRXmlResource__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_get__LRXmlResource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_getFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_getFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_getFlags__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getFlags", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_getFlags__I_args, // the arguments
  0, //arguments count
  XmlResource_methods_getFlags__I_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_getFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_getVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_getVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_getVersion__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getVersion", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_getVersion__I_args, // the arguments
  0, //arguments count
  XmlResource_methods_getVersion__I_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_getVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_getXRCID_INLRString__I_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_getXRCID_INLRString__I_args[] = 
{
  &XmlResource_methods_getXRCID_INLRString__I_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_getXRCID_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_getXRCID_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getXRCID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getXRCID", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_getXRCID_INLRString__I_args, // the arguments
  0, //arguments count
  XmlResource_methods_getXRCID_INLRString__I_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_getXRCID_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_initAllHandlers__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_initAllHandlers__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_initAllHandlers__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAllHandlers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAllHandlers", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_initAllHandlers__V_args, // the arguments
  0, //arguments count
  XmlResource_methods_initAllHandlers__V_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_initAllHandlers__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_load_INLRString__Z_arg_filemask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filemask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_load_INLRString__Z_args[] = 
{
  &XmlResource_methods_load_INLRString__Z_arg_filemask,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_load_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_load_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "load", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_load", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_load_INLRString__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_load_INLRString__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_load_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadBitmap_INLRString__LRBitmap__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadBitmap_INLRString__LRBitmap__args[] = 
{
  &XmlResource_methods_loadBitmap_INLRString__LRBitmap__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadBitmap_INLRString__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadBitmap_INLRString__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_d_loadBitmap", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadBitmap_INLRString__LRBitmap__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadBitmap_INLRString__LRBitmap__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadBitmap_INLRString__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__args[] = 
{
  &XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__arg_parent,
  &XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadDialog_INLRWindow_INLRString__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDialog::clazzInfo(), // return type
  "_7_loadDialog", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadDialog_INLRWindow_INLRString__LRDialog__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadDialog_INLRWindow_INLRString__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_dlg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "dlg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDialog::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_args[] = 
{
  &XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_dlg,
  &XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_parent,
  &XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_loadDialog", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__args[] = 
{
  &XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__arg_parent,
  &XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadFrame_INLRWindow_INLRString__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFrame::clazzInfo(), // return type
  "_9_loadFrame", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadFrame_INLRWindow_INLRString__LRFrame__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadFrame_INLRWindow_INLRString__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_args[] = 
{
  &XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_frame,
  &XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_parent,
  &XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadFrame_INLRFrame_INLRWindow_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_loadFrame", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_loadFrame_INLRFrame_INLRWindow_INLRString__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadFrame_INLRFrame_INLRWindow_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadMenu_INLRString__LRMenu__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadMenu_INLRString__LRMenu__args[] = 
{
  &XmlResource_methods_loadMenu_INLRString__LRMenu__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadMenu_INLRString__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadMenu_INLRString__LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_4_loadMenu", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadMenu_INLRString__LRMenu__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadMenu_INLRString__LRMenu__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadMenu_INLRString__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__args[] = 
{
  &XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__arg_parent,
  &XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadMenuBar_INLRWindow_INLRString__LRMenuBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadMenuBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuBar::clazzInfo(), // return type
  "_5_loadMenuBar", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadMenuBar_INLRWindow_INLRString__LRMenuBar__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadMenuBar_INLRWindow_INLRString__LRMenuBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__args[] = 
{
  &XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadMenuBar_INLRString__LRMenuBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadMenuBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuBar::clazzInfo(), // return type
  "_6_loadMenuBar", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadMenuBar_INLRString__LRMenuBar__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadMenuBar_INLRString__LRMenuBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__args[] = 
{
  &XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_parent,
  &XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_name,
  &XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadObject_INLRWindow_INLRString_INLRString__LRWxObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo(), // return type
  "_b_loadObject", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__args, // the arguments
  0, //arguments count
  XmlResource_methods_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadObject_INLRWindow_INLRString_INLRString__LRWxObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_instance = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "instance", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_args[] = 
{
  &XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_instance,
  &XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_parent,
  &XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_name,
  &XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_loadObject", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  XmlResource_methods_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_s2id_INLRString__I_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_s2id_INLRString__I_args[] = 
{
  &XmlResource_methods_s2id_INLRString__I_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_s2id_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_s2id_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "s2id", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_s2id", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_s2id_INLRString__I_args, // the arguments
  0, //arguments count
  XmlResource_methods_s2id_INLRString__I_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_s2id_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_set_INLRXmlResource__LRXmlResource__arg_res = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "res", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXmlResource::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_set_INLRXmlResource__LRXmlResource__args[] = 
{
  &XmlResource_methods_set_INLRXmlResource__LRXmlResource__arg_res,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_set_INLRXmlResource__LRXmlResource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_set_INLRXmlResource__LRXmlResource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RXmlResource::clazzInfo(), // return type
  "_l_set", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_set_INLRXmlResource__LRXmlResource__args, // the arguments
  0, //arguments count
  XmlResource_methods_set_INLRXmlResource__LRXmlResource__exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_set_INLRXmlResource__LRXmlResource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo XmlResource_methods_setFlags_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* XmlResource_methods_setFlags_I_V_args[] = 
{
  &XmlResource_methods_setFlags_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* XmlResource_methods_setFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo XmlResource_method_setFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setFlags", // alternative name of method
  -1, // altlabelHashCode
  XmlResource_methods_setFlags_I_V_args, // the arguments
  0, //arguments count
  XmlResource_methods_setFlags_I_V_exceptions, // the declared exceptions
  XmlResource_MetainfoWrapper::XmlResource_method_setFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _XmlResource_methods[] = 
{
  &XmlResource_method_GetClass__L_acdk_lang_RClass_,
  &XmlResource_method_XmlResource__LRXmlResource_,
  &XmlResource_method_attachUnknownControl_INLRString_INLRWindow_INLRWindow__Z,
  &XmlResource_method_attachUnknownControl_INLRString_INLRWindow__Z,
  &XmlResource_method_clearHandlers__V,
  &XmlResource_method_compareVersion_IIII_I,
  &XmlResource_method_get__LRXmlResource_,
  &XmlResource_method_getFlags__I,
  &XmlResource_method_getVersion__I,
  &XmlResource_method_getXRCID_INLRString__I,
  &XmlResource_method_initAllHandlers__V,
  &XmlResource_method_load_INLRString__Z,
  &XmlResource_method_loadBitmap_INLRString__LRBitmap_,
  &XmlResource_method_loadDialog_INLRWindow_INLRString__LRDialog_,
  &XmlResource_method_loadDialog_INOUTLRDialog_INLRWindow_INLRString__Z,
  &XmlResource_method_loadFrame_INLRWindow_INLRString__LRFrame_,
  &XmlResource_method_loadFrame_INLRFrame_INLRWindow_INLRString__Z,
  &XmlResource_method_loadMenu_INLRString__LRMenu_,
  &XmlResource_method_loadMenuBar_INLRWindow_INLRString__LRMenuBar_,
  &XmlResource_method_loadMenuBar_INLRString__LRMenuBar_,
  &XmlResource_method_loadObject_INLRWindow_INLRString_INLRString__LRWxObject_,
  &XmlResource_method_loadObject_INLRWxObject_INLRWindow_INLRString_INLRString__Z,
  &XmlResource_method_s2id_INLRString__I,
  &XmlResource_method_set_INLRXmlResource__LRXmlResource_,
  &XmlResource_method_setFlags_I_V,
  0
};


struct XmlResource_MetaInfoInitializer
{  XmlResource_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = XmlResource::clazzInfo();
    ci->fields =  _XmlResource_fields;
    ci->methods =  _XmlResource_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
XmlResource_MetaInfoInitializer XmlResource_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

