// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ListBox_create_array(int length)
{
  return new ObjectArrayImpl<RListBox>(length);
}

//static
::acdk::lang::RObject
ListBox_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ListBox_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ListBox::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), (RStringArray)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_I_LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), (RStringArray)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), (RStringArray)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ListBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), (RStringArray)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_append_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::append((RString)args[0].getObjectVar());
    else
      ret = This->append((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_appendAndEnsureVisible_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::appendAndEnsureVisible((RString)args[0].getObjectVar());
    else
        This->appendAndEnsureVisible((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_command_INLRCommandEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::command((RCommandEvent)args[0].getObjectVar());
    else
        This->command((RCommandEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_deleteItem_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::deleteItem(args[0].getIntVar());
    else
        This->deleteItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_deselect_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::deselect(args[0].getIntVar());
    else
        This->deselect(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_deselectAll_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::deselectAll(args[0].getIntVar());
    else
        This->deselectAll(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_deselectAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::deselectAll();
    else
        This->deselectAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_ensureVisible_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::ensureVisible(args[0].getIntVar());
    else
        This->ensureVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_findString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::findString((RString)args[0].getObjectVar());
    else
      ret = This->findString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_getCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::getCount();
    else
      ret = This->getCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_getSelections_INLRintArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::getSelections((RintArray)args[0].getObjectVar());
    else
      ret = This->getSelections((RintArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ListBox::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_getStringSelection__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ListBox::getStringSelection();
    else
        ret = (::acdk::lang::RObject)This->getStringSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_hasMultipleSelection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::hasMultipleSelection();
    else
      ret = This->hasMultipleSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_insert_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::insert((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->insert((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_insert_INLRString_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::insert((RString)args[0].getObjectVar(), args[1].getIntVar(), (RObject)args[2].getObjectVar());
    else
        This->insert((RString)args[0].getObjectVar(), args[1].getIntVar(), (RObject)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_insertItems_INLRStringArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::insertItems((RStringArray)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->insertItems((RStringArray)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_isSelected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::isSelected(args[0].getIntVar());
    else
      ret = This->isSelected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_isSorted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::isSorted();
    else
      ret = This->isSorted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_select_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::select(args[0].getIntVar());
    else
        This->select(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_selected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::selected(args[0].getIntVar());
    else
      ret = This->selected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_set_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::set((RStringArray)args[0].getObjectVar());
    else
        This->set((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setFirstItem_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::setFirstItem(args[0].getIntVar());
    else
        This->setFirstItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setFirstItem_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::setFirstItem((RString)args[0].getObjectVar());
    else
        This->setFirstItem((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setSelection_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::setSelection(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->setSelection(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::setSelection(args[0].getIntVar());
    else
        This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ListBox::setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setStringSelection_INLRString_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::setStringSelection((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
      ret = This->setStringSelection((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListBox_method_setStringSelection_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListBox* This = dmi_cast<ListBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ListBox::setStringSelection((RString)args[0].getObjectVar());
    else
      ret = This->setStringSelection((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ListBox_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_D_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ListBox_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox__LRListBox__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_0_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_pos,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_size,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_choices,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_style,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_validator,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_1_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_I_LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_I_LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_I_LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_I_LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_I_LRListBox__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_I_LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_I_LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_2_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_I_LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_I_LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_I_LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_3_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_pos,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_4_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_pos,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_size,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_5_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_pos,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_size,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_choices,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_6_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__args[] = 
{
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_parent,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_id,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_pos,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_size,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_choices,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_style,
  &ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ListBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListBox::clazzInfo(), // return type
  "_7_ListBox", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__args, // the arguments
  0, //arguments count
  ListBox_methods_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_append_INLRString__I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_append_INLRString__I_args[] = 
{
  &ListBox_methods_append_INLRString__I_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_append_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_append_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_append", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_append_INLRString__I_args, // the arguments
  0, //arguments count
  ListBox_methods_append_INLRString__I_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_append_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_appendAndEnsureVisible_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_appendAndEnsureVisible_INLRString__V_args[] = 
{
  &ListBox_methods_appendAndEnsureVisible_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_appendAndEnsureVisible_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_appendAndEnsureVisible_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendAndEnsureVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_appendAndEnsureVisible", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_appendAndEnsureVisible_INLRString__V_args, // the arguments
  0, //arguments count
  ListBox_methods_appendAndEnsureVisible_INLRString__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_appendAndEnsureVisible_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_clear", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_clear__V_args, // the arguments
  0, //arguments count
  ListBox_methods_clear__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_command_INLRCommandEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCommandEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_command_INLRCommandEvent__V_args[] = 
{
  &ListBox_methods_command_INLRCommandEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_command_INLRCommandEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_command_INLRCommandEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "command", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_command", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_command_INLRCommandEvent__V_args, // the arguments
  0, //arguments count
  ListBox_methods_command_INLRCommandEvent__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_command_INLRCommandEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_deleteItem_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_deleteItem_I_V_args[] = 
{
  &ListBox_methods_deleteItem_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_deleteItem_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_deleteItem_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_deleteItem_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_deleteItem_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_deleteItem_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_deselect_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_deselect_I_V_args[] = 
{
  &ListBox_methods_deselect_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_deselect_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_deselect_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deselect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_deselect", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_deselect_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_deselect_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_deselect_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_deselectAll_I_V_arg_itemToLeaveSelected = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "itemToLeaveSelected", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_deselectAll_I_V_args[] = 
{
  &ListBox_methods_deselectAll_I_V_arg_itemToLeaveSelected,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_deselectAll_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_deselectAll_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deselectAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_deselectAll", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_deselectAll_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_deselectAll_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_deselectAll_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_deselectAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_deselectAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_deselectAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "deselectAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_deselectAll", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_deselectAll__V_args, // the arguments
  0, //arguments count
  ListBox_methods_deselectAll__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_deselectAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_ensureVisible_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_ensureVisible_I_V_args[] = 
{
  &ListBox_methods_ensureVisible_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_ensureVisible_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_ensureVisible_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_ensureVisible", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_ensureVisible_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_ensureVisible_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_ensureVisible_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_findString_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_findString_INLRString__I_args[] = 
{
  &ListBox_methods_findString_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_findString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_findString_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_findString", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_findString_INLRString__I_args, // the arguments
  0, //arguments count
  ListBox_methods_findString_INLRString__I_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_findString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_getCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_getCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_getCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getCount", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_getCount__I_args, // the arguments
  0, //arguments count
  ListBox_methods_getCount__I_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_getCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_getSelection__I_args, // the arguments
  0, //arguments count
  ListBox_methods_getSelection__I_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_getSelections_INLRintArray__I_arg_aSelections = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "aSelections", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_getSelections_INLRintArray__I_args[] = 
{
  &ListBox_methods_getSelections_INLRintArray__I_arg_aSelections,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_getSelections_INLRintArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_getSelections_INLRintArray__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelections", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_u_getSelections", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_getSelections_INLRintArray__I_args, // the arguments
  0, //arguments count
  ListBox_methods_getSelections_INLRintArray__I_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_getSelections_INLRintArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_getString_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_getString_I_LRString__args[] = 
{
  &ListBox_methods_getString_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getString", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  ListBox_methods_getString_I_LRString__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_getStringSelection__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_getStringSelection__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_getStringSelection__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getStringSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_getStringSelection__LRString__args, // the arguments
  0, //arguments count
  ListBox_methods_getStringSelection__LRString__exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_getStringSelection__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_hasMultipleSelection__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_hasMultipleSelection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_hasMultipleSelection__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMultipleSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_hasMultipleSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_hasMultipleSelection__Z_args, // the arguments
  0, //arguments count
  ListBox_methods_hasMultipleSelection__Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_hasMultipleSelection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insert_INLRString_I_V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insert_INLRString_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_insert_INLRString_I_V_args[] = 
{
  &ListBox_methods_insert_INLRString_I_V_arg_item,
  &ListBox_methods_insert_INLRString_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_insert_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_insert_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_insert", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_insert_INLRString_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_insert_INLRString_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_insert_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insert_INLRString_IINLRObject__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insert_INLRString_IINLRObject__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insert_INLRString_IINLRObject__V_arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_insert_INLRString_IINLRObject__V_args[] = 
{
  &ListBox_methods_insert_INLRString_IINLRObject__V_arg_item,
  &ListBox_methods_insert_INLRString_IINLRObject__V_arg_pos,
  &ListBox_methods_insert_INLRString_IINLRObject__V_arg_clientData,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_insert_INLRString_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_insert_INLRString_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_insert", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_insert_INLRString_IINLRObject__V_args, // the arguments
  0, //arguments count
  ListBox_methods_insert_INLRString_IINLRObject__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_insert_INLRString_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insertItems_INLRStringArray_I_V_arg_items = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "items", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_insertItems_INLRStringArray_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_insertItems_INLRStringArray_I_V_args[] = 
{
  &ListBox_methods_insertItems_INLRStringArray_I_V_arg_items,
  &ListBox_methods_insertItems_INLRStringArray_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_insertItems_INLRStringArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_insertItems_INLRStringArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertItems", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_insertItems", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_insertItems_INLRStringArray_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_insertItems_INLRStringArray_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_insertItems_INLRStringArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_isSelected_I_Z_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_isSelected_I_Z_args[] = 
{
  &ListBox_methods_isSelected_I_Z_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_isSelected_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_isSelected_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSelected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isSelected", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_isSelected_I_Z_args, // the arguments
  0, //arguments count
  ListBox_methods_isSelected_I_Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_isSelected_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_isSorted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_isSorted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_isSorted__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSorted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_isSorted", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_isSorted__Z_args, // the arguments
  0, //arguments count
  ListBox_methods_isSorted__Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_isSorted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_select_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_select_I_V_args[] = 
{
  &ListBox_methods_select_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_select_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_select_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "select", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_select", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_select_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_select_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_select_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_selected_I_Z_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_selected_I_Z_args[] = 
{
  &ListBox_methods_selected_I_Z_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_selected_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_selected_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_selected", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_selected_I_Z_args, // the arguments
  0, //arguments count
  ListBox_methods_selected_I_Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_selected_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_set_INLRStringArray__V_arg_items = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "items", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_set_INLRStringArray__V_args[] = 
{
  &ListBox_methods_set_INLRStringArray__V_arg_items,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_set_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_set_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_set", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_set_INLRStringArray__V_args, // the arguments
  0, //arguments count
  ListBox_methods_set_INLRStringArray__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_set_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setFirstItem_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setFirstItem_I_V_args[] = 
{
  &ListBox_methods_setFirstItem_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setFirstItem_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setFirstItem_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFirstItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setFirstItem", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setFirstItem_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_setFirstItem_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setFirstItem_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setFirstItem_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setFirstItem_INLRString__V_args[] = 
{
  &ListBox_methods_setFirstItem_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setFirstItem_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setFirstItem_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFirstItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setFirstItem", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setFirstItem_INLRString__V_args, // the arguments
  0, //arguments count
  ListBox_methods_setFirstItem_INLRString__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setFirstItem_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setSelection_IZ_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setSelection_IZ_V_arg_select = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "select", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setSelection_IZ_V_args[] = 
{
  &ListBox_methods_setSelection_IZ_V_arg_n,
  &ListBox_methods_setSelection_IZ_V_arg_select,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setSelection_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setSelection_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setSelection_IZ_V_args, // the arguments
  0, //arguments count
  ListBox_methods_setSelection_IZ_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setSelection_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setSelection_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setSelection_I_V_args[] = 
{
  &ListBox_methods_setSelection_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setSelection_I_V_args, // the arguments
  0, //arguments count
  ListBox_methods_setSelection_I_V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setString_IINLRString__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setString_IINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setString_IINLRString__V_args[] = 
{
  &ListBox_methods_setString_IINLRString__V_arg_n,
  &ListBox_methods_setString_IINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setString", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  ListBox_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setStringSelection_INLRString_Z_Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setStringSelection_INLRString_Z_Z_arg_select = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "select", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setStringSelection_INLRString_Z_Z_args[] = 
{
  &ListBox_methods_setStringSelection_INLRString_Z_Z_arg_s,
  &ListBox_methods_setStringSelection_INLRString_Z_Z_arg_select,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setStringSelection_INLRString_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setStringSelection_INLRString_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_setStringSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setStringSelection_INLRString_Z_Z_args, // the arguments
  0, //arguments count
  ListBox_methods_setStringSelection_INLRString_Z_Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setStringSelection_INLRString_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListBox_methods_setStringSelection_INLRString__Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListBox_methods_setStringSelection_INLRString__Z_args[] = 
{
  &ListBox_methods_setStringSelection_INLRString__Z_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ListBox_methods_setStringSelection_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListBox_method_setStringSelection_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_setStringSelection", // alternative name of method
  -1, // altlabelHashCode
  ListBox_methods_setStringSelection_INLRString__Z_args, // the arguments
  0, //arguments count
  ListBox_methods_setStringSelection_INLRString__Z_exceptions, // the declared exceptions
  ListBox_MetainfoWrapper::ListBox_method_setStringSelection_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ListBox_methods[] = 
{
  &ListBox_method_GetClass__L_acdk_lang_RClass_,
  &ListBox_method_ListBox__LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator_INLRString__LRListBox_,
  &ListBox_method_ListBox_INLRWindow_I_LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint__LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize__LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray__LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_I_LRListBox_,
  &ListBox_method_ListBox_INLRWindow_IINLRPoint_INLRSize_INLRStringArray_IINLRValidator__LRListBox_,
  &ListBox_method_append_INLRString__I,
  &ListBox_method_appendAndEnsureVisible_INLRString__V,
  &ListBox_method_clear__V,
  &ListBox_method_command_INLRCommandEvent__V,
  &ListBox_method_deleteItem_I_V,
  &ListBox_method_deselect_I_V,
  &ListBox_method_deselectAll_I_V,
  &ListBox_method_deselectAll__V,
  &ListBox_method_ensureVisible_I_V,
  &ListBox_method_findString_INLRString__I,
  &ListBox_method_getCount__I,
  &ListBox_method_getSelection__I,
  &ListBox_method_getSelections_INLRintArray__I,
  &ListBox_method_getString_I_LRString_,
  &ListBox_method_getStringSelection__LRString_,
  &ListBox_method_hasMultipleSelection__Z,
  &ListBox_method_insert_INLRString_I_V,
  &ListBox_method_insert_INLRString_IINLRObject__V,
  &ListBox_method_insertItems_INLRStringArray_I_V,
  &ListBox_method_isSelected_I_Z,
  &ListBox_method_isSorted__Z,
  &ListBox_method_select_I_V,
  &ListBox_method_selected_I_Z,
  &ListBox_method_set_INLRStringArray__V,
  &ListBox_method_setFirstItem_I_V,
  &ListBox_method_setFirstItem_INLRString__V,
  &ListBox_method_setSelection_IZ_V,
  &ListBox_method_setSelection_I_V,
  &ListBox_method_setString_IINLRString__V,
  &ListBox_method_setStringSelection_INLRString_Z_Z,
  &ListBox_method_setStringSelection_INLRString__Z,
  0
};


struct ListBox_MetaInfoInitializer
{  ListBox_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ListBox::clazzInfo();
    ci->fields =  _ListBox_fields;
    ci->methods =  _ListBox_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ListBox_MetaInfoInitializer ListBox_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MDIChildFrame_create_array(int length)
{
  return new ObjectArrayImpl<RMDIChildFrame>(length);
}

//static
::acdk::lang::RObject
MDIChildFrame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MDIChildFrame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MDIChildFrame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIChildFrame((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIChildFrame((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIChildFrame((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIChildFrame((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIChildFrame((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_activate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIChildFrame* This = dmi_cast<MDIChildFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIChildFrame::activate();
    else
        This->activate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_maximize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIChildFrame* This = dmi_cast<MDIChildFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIChildFrame::maximize();
    else
        This->maximize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIChildFrame_method_restore__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIChildFrame* This = dmi_cast<MDIChildFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIChildFrame::restore();
    else
        This->restore();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MDIChildFrame_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__args[] = 
{
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_parent,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_id,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_title,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_pos,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_size,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_style,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIChildFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIChildFrame::clazzInfo(), // return type
  "_0_MDIChildFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__args[] = 
{
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_parent,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_id,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIChildFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIChildFrame::clazzInfo(), // return type
  "_1_MDIChildFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__args[] = 
{
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_parent,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_id,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_title,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIChildFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIChildFrame::clazzInfo(), // return type
  "_2_MDIChildFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__args[] = 
{
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_parent,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_id,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_title,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_pos,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIChildFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIChildFrame::clazzInfo(), // return type
  "_3_MDIChildFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__args[] = 
{
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_parent,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_id,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_title,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_pos,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_size,
  &MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIChildFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIChildFrame::clazzInfo(), // return type
  "_4_MDIChildFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_activate__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_activate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_activate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_activate", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_activate__V_args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_activate__V_exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_activate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_maximize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_maximize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_maximize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "maximize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_maximize", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_maximize__V_args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_maximize__V_exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_maximize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIChildFrame_methods_restore__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIChildFrame_methods_restore__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIChildFrame_method_restore__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "restore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_restore", // alternative name of method
  -1, // altlabelHashCode
  MDIChildFrame_methods_restore__V_args, // the arguments
  0, //arguments count
  MDIChildFrame_methods_restore__V_exceptions, // the declared exceptions
  MDIChildFrame_MetainfoWrapper::MDIChildFrame_method_restore__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MDIChildFrame_methods[] = 
{
  &MDIChildFrame_method_GetClass__L_acdk_lang_RClass_,
  &MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIChildFrame_,
  &MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString__LRMDIChildFrame_,
  &MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint__LRMDIChildFrame_,
  &MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize__LRMDIChildFrame_,
  &MDIChildFrame_method_MDIChildFrame_INLRMDIParentFrame_IINLRString_INLRPoint_INLRSize_I_LRMDIChildFrame_,
  &MDIChildFrame_method_activate__V,
  &MDIChildFrame_method_maximize__V,
  &MDIChildFrame_method_restore__V,
  0
};


struct MDIChildFrame_MetaInfoInitializer
{  MDIChildFrame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MDIChildFrame::clazzInfo();
    ci->fields =  _MDIChildFrame_fields;
    ci->methods =  _MDIChildFrame_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MDIChildFrame_MetaInfoInitializer MDIChildFrame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MDIClientWindow_create_array(int length)
{
  return new ObjectArrayImpl<RMDIClientWindow>(length);
}

//static
::acdk::lang::RObject
MDIClientWindow_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MDIClientWindow_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIClientWindow_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MDIClientWindow::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIClientWindow_method_MDIClientWindow__LRMDIClientWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIClientWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIClientWindow_method_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIClientWindow((RMDIParentFrame)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MDIClientWindow_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIClientWindow_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIClientWindow_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIClientWindow_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MDIClientWindow_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MDIClientWindow_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MDIClientWindow_MetainfoWrapper::MDIClientWindow_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIClientWindow_methods_MDIClientWindow__LRMDIClientWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIClientWindow_methods_MDIClientWindow__LRMDIClientWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIClientWindow_method_MDIClientWindow__LRMDIClientWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIClientWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIClientWindow::clazzInfo(), // return type
  "_0_MDIClientWindow", // alternative name of method
  -1, // altlabelHashCode
  MDIClientWindow_methods_MDIClientWindow__LRMDIClientWindow__args, // the arguments
  0, //arguments count
  MDIClientWindow_methods_MDIClientWindow__LRMDIClientWindow__exceptions, // the declared exceptions
  MDIClientWindow_MetainfoWrapper::MDIClientWindow_method_MDIClientWindow__LRMDIClientWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIParentFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__args[] = 
{
  &MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__arg_parent,
  &MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIClientWindow_method_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIClientWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIClientWindow::clazzInfo(), // return type
  "_1_MDIClientWindow", // alternative name of method
  -1, // altlabelHashCode
  MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__args, // the arguments
  0, //arguments count
  MDIClientWindow_methods_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__exceptions, // the declared exceptions
  MDIClientWindow_MetainfoWrapper::MDIClientWindow_method_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MDIClientWindow_methods[] = 
{
  &MDIClientWindow_method_GetClass__L_acdk_lang_RClass_,
  &MDIClientWindow_method_MDIClientWindow__LRMDIClientWindow_,
  &MDIClientWindow_method_MDIClientWindow_INLRMDIParentFrame_I_LRMDIClientWindow_,
  0
};


struct MDIClientWindow_MetaInfoInitializer
{  MDIClientWindow_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MDIClientWindow::clazzInfo();
    ci->fields =  _MDIClientWindow_fields;
    ci->methods =  _MDIClientWindow_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MDIClientWindow_MetaInfoInitializer MDIClientWindow_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MDIParentFrame_create_array(int length)
{
  return new ObjectArrayImpl<RMDIParentFrame>(length);
}

//static
::acdk::lang::RObject
MDIParentFrame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MDIParentFrame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MDIParentFrame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIParentFrame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIParentFrame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIParentFrame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIParentFrame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MDIParentFrame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_activateNext__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::activateNext();
    else
        This->activateNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_activatePrevious__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::activatePrevious();
    else
        This->activatePrevious();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_arrangeIcons__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::arrangeIcons();
    else
        This->arrangeIcons();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_cascade__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::cascade();
    else
        This->cascade();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_getActiveChild__LRMDIChildFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MDIParentFrame::getActiveChild();
    else
        ret = (::acdk::lang::RObject)This->getActiveChild();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_getClientSize_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::getClientSize(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getClientSize(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_getClientWindow__LRMDIClientWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MDIParentFrame::getClientWindow();
    else
        ret = (::acdk::lang::RObject)This->getClientWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_getToolBar__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MDIParentFrame::getToolBar();
    else
        ret = (::acdk::lang::RObject)This->getToolBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_setToolBar_INLRToolBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::setToolBar((RToolBar)args[0].getObjectVar());
    else
        This->setToolBar((RToolBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_setWindowMenu_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::setWindowMenu((RMenu)args[0].getObjectVar());
    else
        This->setWindowMenu((RMenu)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MDIParentFrame_method_tile__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MDIParentFrame* This = dmi_cast<MDIParentFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MDIParentFrame::tile();
    else
        This->tile();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MDIParentFrame_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__args[] = 
{
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_parent,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_id,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_title,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_pos,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_size,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_style,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIParentFrame::clazzInfo(), // return type
  "_0_MDIParentFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__args[] = 
{
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_parent,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_id,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIParentFrame::clazzInfo(), // return type
  "_1_MDIParentFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__args[] = 
{
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_parent,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_id,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_title,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIParentFrame::clazzInfo(), // return type
  "_2_MDIParentFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__args[] = 
{
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_parent,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_id,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_title,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_pos,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIParentFrame::clazzInfo(), // return type
  "_3_MDIParentFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__args[] = 
{
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_parent,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_id,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_title,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_pos,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_size,
  &MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MDIParentFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MDIParentFrame::clazzInfo(), // return type
  "_4_MDIParentFrame", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_activateNext__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_activateNext__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_activateNext__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activateNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_activateNext", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_activateNext__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_activateNext__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_activateNext__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_activatePrevious__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_activatePrevious__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_activatePrevious__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "activatePrevious", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_activatePrevious", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_activatePrevious__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_activatePrevious__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_activatePrevious__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_arrangeIcons__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_arrangeIcons__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_arrangeIcons__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "arrangeIcons", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_arrangeIcons", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_arrangeIcons__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_arrangeIcons__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_arrangeIcons__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_cascade__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_cascade__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_cascade__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cascade", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_cascade", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_cascade__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_cascade__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_cascade__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_getActiveChild__LRMDIChildFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_getActiveChild__LRMDIChildFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_getActiveChild__LRMDIChildFrame_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getActiveChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIChildFrame::clazzInfo(), // return type
  "_7_getActiveChild", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_getActiveChild__LRMDIChildFrame__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_getActiveChild__LRMDIChildFrame__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_getActiveChild__LRMDIChildFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_getClientSize_OUTIOUTI_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_getClientSize_OUTIOUTI_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_getClientSize_OUTIOUTI_V_args[] = 
{
  &MDIParentFrame_methods_getClientSize_OUTIOUTI_V_arg_width,
  &MDIParentFrame_methods_getClientSize_OUTIOUTI_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_getClientSize_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_getClientSize_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_getClientSize", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_getClientSize_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_getClientSize_OUTIOUTI_V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_getClientSize_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_getClientWindow__LRMDIClientWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_getClientWindow__LRMDIClientWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_getClientWindow__LRMDIClientWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMDIClientWindow::clazzInfo(), // return type
  "_5_getClientWindow", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_getClientWindow__LRMDIClientWindow__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_getClientWindow__LRMDIClientWindow__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_getClientWindow__LRMDIClientWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_getToolBar__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_getToolBar__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_getToolBar__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_8_getToolBar", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_getToolBar__LRWindow__args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_getToolBar__LRWindow__exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_getToolBar__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_setToolBar_INLRToolBar__V_arg_toolbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_setToolBar_INLRToolBar__V_args[] = 
{
  &MDIParentFrame_methods_setToolBar_INLRToolBar__V_arg_toolbar,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_setToolBar_INLRToolBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_setToolBar_INLRToolBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setToolBar", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_setToolBar_INLRToolBar__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_setToolBar_INLRToolBar__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_setToolBar_INLRToolBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MDIParentFrame_methods_setWindowMenu_INLRMenu__V_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_setWindowMenu_INLRMenu__V_args[] = 
{
  &MDIParentFrame_methods_setWindowMenu_INLRMenu__V_arg_menu,
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_setWindowMenu_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_setWindowMenu_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWindowMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setWindowMenu", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_setWindowMenu_INLRMenu__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_setWindowMenu_INLRMenu__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_setWindowMenu_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MDIParentFrame_methods_tile__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MDIParentFrame_methods_tile__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MDIParentFrame_method_tile__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_tile", // alternative name of method
  -1, // altlabelHashCode
  MDIParentFrame_methods_tile__V_args, // the arguments
  0, //arguments count
  MDIParentFrame_methods_tile__V_exceptions, // the declared exceptions
  MDIParentFrame_MetainfoWrapper::MDIParentFrame_method_tile__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MDIParentFrame_methods[] = 
{
  &MDIParentFrame_method_GetClass__L_acdk_lang_RClass_,
  &MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRMDIParentFrame_,
  &MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString__LRMDIParentFrame_,
  &MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint__LRMDIParentFrame_,
  &MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRMDIParentFrame_,
  &MDIParentFrame_method_MDIParentFrame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRMDIParentFrame_,
  &MDIParentFrame_method_activateNext__V,
  &MDIParentFrame_method_activatePrevious__V,
  &MDIParentFrame_method_arrangeIcons__V,
  &MDIParentFrame_method_cascade__V,
  &MDIParentFrame_method_getActiveChild__LRMDIChildFrame_,
  &MDIParentFrame_method_getClientSize_OUTIOUTI_V,
  &MDIParentFrame_method_getClientWindow__LRMDIClientWindow_,
  &MDIParentFrame_method_getToolBar__LRWindow_,
  &MDIParentFrame_method_setToolBar_INLRToolBar__V,
  &MDIParentFrame_method_setWindowMenu_INLRMenu__V,
  &MDIParentFrame_method_tile__V,
  0
};


struct MDIParentFrame_MetaInfoInitializer
{  MDIParentFrame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MDIParentFrame::clazzInfo();
    ci->fields =  _MDIParentFrame_fields;
    ci->methods =  _MDIParentFrame_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MDIParentFrame_MetaInfoInitializer MDIParentFrame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MemoryDC_create_array(int length)
{
  return new ObjectArrayImpl<RMemoryDC>(length);
}

//static
::acdk::lang::RObject
MemoryDC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MemoryDC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MemoryDC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MemoryDC::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MemoryDC_method_MemoryDC__LRMemoryDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MemoryDC();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MemoryDC_method_MemoryDC_INLRDC__LRMemoryDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MemoryDC((RDC)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MemoryDC_method_selectObject_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MemoryDC* This = dmi_cast<MemoryDC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MemoryDC::selectObject((RBitmap)args[0].getObjectVar());
    else
        This->selectObject((RBitmap)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MemoryDC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MemoryDC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MemoryDC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MemoryDC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MemoryDC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MemoryDC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MemoryDC_MetainfoWrapper::MemoryDC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MemoryDC_methods_MemoryDC__LRMemoryDC__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MemoryDC_methods_MemoryDC__LRMemoryDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MemoryDC_method_MemoryDC__LRMemoryDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MemoryDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MemoryDC::clazzInfo(), // return type
  "_0_MemoryDC", // alternative name of method
  -1, // altlabelHashCode
  MemoryDC_methods_MemoryDC__LRMemoryDC__args, // the arguments
  0, //arguments count
  MemoryDC_methods_MemoryDC__LRMemoryDC__exceptions, // the declared exceptions
  MemoryDC_MetainfoWrapper::MemoryDC_method_MemoryDC__LRMemoryDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__arg_dc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__args[] = 
{
  &MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__arg_dc,
  0
};

::acdk::lang::dmi::ClazzInfo* MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MemoryDC_method_MemoryDC_INLRDC__LRMemoryDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MemoryDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MemoryDC::clazzInfo(), // return type
  "_1_MemoryDC", // alternative name of method
  -1, // altlabelHashCode
  MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__args, // the arguments
  0, //arguments count
  MemoryDC_methods_MemoryDC_INLRDC__LRMemoryDC__exceptions, // the declared exceptions
  MemoryDC_MetainfoWrapper::MemoryDC_method_MemoryDC_INLRDC__LRMemoryDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MemoryDC_methods_selectObject_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MemoryDC_methods_selectObject_INLRBitmap__V_args[] = 
{
  &MemoryDC_methods_selectObject_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* MemoryDC_methods_selectObject_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MemoryDC_method_selectObject_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_selectObject", // alternative name of method
  -1, // altlabelHashCode
  MemoryDC_methods_selectObject_INLRBitmap__V_args, // the arguments
  0, //arguments count
  MemoryDC_methods_selectObject_INLRBitmap__V_exceptions, // the declared exceptions
  MemoryDC_MetainfoWrapper::MemoryDC_method_selectObject_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MemoryDC_methods[] = 
{
  &MemoryDC_method_GetClass__L_acdk_lang_RClass_,
  &MemoryDC_method_MemoryDC__LRMemoryDC_,
  &MemoryDC_method_MemoryDC_INLRDC__LRMemoryDC_,
  &MemoryDC_method_selectObject_INLRBitmap__V,
  0
};


struct MemoryDC_MetaInfoInitializer
{  MemoryDC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MemoryDC::clazzInfo();
    ci->fields =  _MemoryDC_fields;
    ci->methods =  _MemoryDC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MemoryDC_MetaInfoInitializer MemoryDC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Menu_create_array(int length)
{
  return new ObjectArrayImpl<RMenu>(length);
}

//static
::acdk::lang::RObject
Menu_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Menu_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Menu::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_Menu_I_LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Menu(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_Menu__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Menu();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_Menu_INLRString_I_LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Menu((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_IINLRString_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    else
        This->append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->append(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    else
        This->append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar());
    else
        This->append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->append((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_IINLRString_INLRMenu_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_IINLRString_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar());
    else
        This->append(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_append_INLRMenuItem__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::append((RMenuItem)args[0].getObjectVar());
    else
        This->append((RMenuItem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_appendCheckItem_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::appendCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->appendCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_appendCheckItem_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::appendCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->appendCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_appendRadioItem_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::appendRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->appendRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_appendRadioItem_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::appendRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->appendRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_appendSeparator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::appendSeparator();
    else
        This->appendSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_attach_INLRMenuBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::attach((RMenuBar)args[0].getObjectVar());
    else
        This->attach((RMenuBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_check_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::check(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->check(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_deleteItem_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::deleteItem(args[0].getIntVar());
    else
      ret = This->deleteItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_deleteItem_INLRMenuItem__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::deleteItem((RMenuItem)args[0].getObjectVar());
    else
      ret = This->deleteItem((RMenuItem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_destroy_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::destroy(args[0].getIntVar());
    else
      ret = This->destroy(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_destroy_INLRMenuItem__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::destroy((RMenuItem)args[0].getObjectVar());
    else
      ret = This->destroy((RMenuItem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_detach__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::detach();
    else
        This->detach();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_enable_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::enable(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->enable(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_findItem_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::findItem((RString)args[0].getObjectVar());
    else
      ret = This->findItem((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getEventHandler__LREvtHandler__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getEventHandler();
    else
        ret = (::acdk::lang::RObject)This->getEventHandler();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getHelpString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getHelpString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getHelpString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getInvokingWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getInvokingWindow();
    else
        ret = (::acdk::lang::RObject)This->getInvokingWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getLabel_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getLabel(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getLabel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getMenuBar__LRMenuBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getMenuBar();
    else
        ret = (::acdk::lang::RObject)This->getMenuBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getMenuItemCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::getMenuItemCount();
    else
      ret = This->getMenuItemCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getParent__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_getTitle__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::getTitle();
    else
        ret = (::acdk::lang::RObject)This->getTitle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IINLRMenuItem__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::insert(args[0].getIntVar(), (RMenuItem)args[1].getObjectVar());
    else
      ret = This->insert(args[0].getIntVar(), (RMenuItem)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IIINLRString_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IIINLRString_INLRMenu_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RMenu)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RMenu)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insert_IIINLRString_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RMenu)args[3].getObjectVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RMenu)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertBreak__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertBreak();
    else
        This->insertBreak();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertCheckItem_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertCheckItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->insertCheckItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertCheckItem_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertCheckItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->insertCheckItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertRadioItem_IIINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertRadioItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->insertRadioItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertRadioItem_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertRadioItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->insertRadioItem(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_insertSeparator_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::insertSeparator(args[0].getIntVar());
    else
        This->insertSeparator(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_isAttached__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::isAttached();
    else
      ret = This->isAttached();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_isChecked_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::isChecked(args[0].getIntVar());
    else
      ret = This->isChecked(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_isEnabled_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Menu::isEnabled(args[0].getIntVar());
    else
      ret = This->isEnabled(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_INLRMenuItem__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend((RMenuItem)args[0].getObjectVar());
    else
        This->prepend((RMenuItem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_IINLRString_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    else
        This->prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (ItemKind)args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->prepend(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_IINLRString_INLRMenu_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        This->prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prepend_IINLRString_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar());
    else
        This->prepend(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RMenu)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prependCheckItem_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prependCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->prependCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prependCheckItem_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prependCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->prependCheckItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prependRadioItem_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prependRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        This->prependRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prependRadioItem_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prependRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->prependRadioItem(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_prependSeparator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::prependSeparator();
    else
        This->prependSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_remove_I_LRMenuItem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::remove(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->remove(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_remove_INLRMenuItem__LRMenuItem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Menu::remove((RMenuItem)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->remove((RMenuItem)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setEventHandler_INLREvtHandler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setEventHandler((REvtHandler)args[0].getObjectVar());
    else
        This->setEventHandler((REvtHandler)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setHelpString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setHelpString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setHelpString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setInvokingWindow_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setInvokingWindow((RWindow)args[0].getObjectVar());
    else
        This->setInvokingWindow((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setLabel_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setLabel(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setLabel(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setParent_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setParent((RMenu)args[0].getObjectVar());
    else
        This->setParent((RMenu)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Menu_method_setTitle_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Menu* This = dmi_cast<Menu>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Menu::setTitle((RString)args[0].getObjectVar());
    else
        This->setTitle((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Menu_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_17_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Menu_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_Menu_I_LRMenu__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_Menu_I_LRMenu__args[] = 
{
  &Menu_methods_Menu_I_LRMenu__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_Menu_I_LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_Menu_I_LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Menu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Menu::clazzInfo(), // return type
  "_0_Menu", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_Menu_I_LRMenu__args, // the arguments
  0, //arguments count
  Menu_methods_Menu_I_LRMenu__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_Menu_I_LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_Menu__LRMenu__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_Menu__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_Menu__LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Menu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Menu::clazzInfo(), // return type
  "_1_Menu", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_Menu__LRMenu__args, // the arguments
  0, //arguments count
  Menu_methods_Menu__LRMenu__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_Menu__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_Menu_INLRString_I_LRMenu__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_Menu_INLRString_I_LRMenu__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_Menu_INLRString_I_LRMenu__args[] = 
{
  &Menu_methods_Menu_INLRString_I_LRMenu__arg_name,
  &Menu_methods_Menu_INLRString_I_LRMenu__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_Menu_INLRString_I_LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_Menu_INLRString_I_LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Menu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Menu::clazzInfo(), // return type
  "_2_Menu", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_Menu_INLRString_I_LRMenu__args, // the arguments
  0, //arguments count
  Menu_methods_Menu_INLRString_I_LRMenu__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_Menu_INLRString_I_LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString_I_V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString_I_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString_I_V_arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_IINLRString_INLRString_I_V_args[] = 
{
  &Menu_methods_append_IINLRString_INLRString_I_V_arg_id,
  &Menu_methods_append_IINLRString_INLRString_I_V_arg_label,
  &Menu_methods_append_IINLRString_INLRString_I_V_arg_help,
  &Menu_methods_append_IINLRString_INLRString_I_V_arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_IINLRString_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_IINLRString_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_IINLRString_INLRString_I_V_args, // the arguments
  0, //arguments count
  Menu_methods_append_IINLRString_INLRString_I_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_IINLRString_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_IINLRString__V_args[] = 
{
  &Menu_methods_append_IINLRString__V_arg_id,
  &Menu_methods_append_IINLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_append_IINLRString_INLRString__V_arg_id,
  &Menu_methods_append_IINLRString_INLRString__V_arg_label,
  &Menu_methods_append_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_delegate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delegate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_args[] = 
{
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_label,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_delegate,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_help,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_args, // the arguments
  0, //arguments count
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_delegate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delegate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_args[] = 
{
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_label,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_delegate,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_delegate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delegate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_args[] = 
{
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_label,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_delegate,
  &Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_IINLRString_INLRMenu_INLRString__V_args[] = 
{
  &Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_id,
  &Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_text,
  &Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_submenu,
  &Menu_methods_append_IINLRString_INLRMenu_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_IINLRString_INLRMenu_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_IINLRString_INLRMenu_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_IINLRString_INLRMenu_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_IINLRString_INLRMenu_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_IINLRString_INLRMenu_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_IINLRString_INLRMenu__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_IINLRString_INLRMenu__V_args[] = 
{
  &Menu_methods_append_IINLRString_INLRMenu__V_arg_id,
  &Menu_methods_append_IINLRString_INLRMenu__V_arg_text,
  &Menu_methods_append_IINLRString_INLRMenu__V_arg_submenu,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_IINLRString_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_IINLRString_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_IINLRString_INLRMenu__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_IINLRString_INLRMenu__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_IINLRString_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_append_INLRMenuItem__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_append_INLRMenuItem__V_args[] = 
{
  &Menu_methods_append_INLRMenuItem__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_append_INLRMenuItem__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_append_INLRMenuItem__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_append", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_append_INLRMenuItem__V_args, // the arguments
  0, //arguments count
  Menu_methods_append_INLRMenuItem__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_append_INLRMenuItem__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_appendCheckItem_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_id,
  &Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_text,
  &Menu_methods_appendCheckItem_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_appendCheckItem_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_appendCheckItem_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_appendCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_appendCheckItem_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_appendCheckItem_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_appendCheckItem_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendCheckItem_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendCheckItem_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_appendCheckItem_IINLRString__V_args[] = 
{
  &Menu_methods_appendCheckItem_IINLRString__V_arg_id,
  &Menu_methods_appendCheckItem_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_appendCheckItem_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_appendCheckItem_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_appendCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_appendCheckItem_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_appendCheckItem_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_appendCheckItem_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_appendRadioItem_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_id,
  &Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_text,
  &Menu_methods_appendRadioItem_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_appendRadioItem_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_appendRadioItem_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_appendRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_appendRadioItem_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_appendRadioItem_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_appendRadioItem_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendRadioItem_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_appendRadioItem_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_appendRadioItem_IINLRString__V_args[] = 
{
  &Menu_methods_appendRadioItem_IINLRString__V_arg_id,
  &Menu_methods_appendRadioItem_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_appendRadioItem_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_appendRadioItem_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_appendRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_appendRadioItem_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_appendRadioItem_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_appendRadioItem_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_appendSeparator__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_appendSeparator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_appendSeparator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_appendSeparator", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_appendSeparator__V_args, // the arguments
  0, //arguments count
  Menu_methods_appendSeparator__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_appendSeparator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_attach_INLRMenuBar__V_arg_menubar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menubar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_attach_INLRMenuBar__V_args[] = 
{
  &Menu_methods_attach_INLRMenuBar__V_arg_menubar,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_attach_INLRMenuBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_attach_INLRMenuBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_attach", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_attach_INLRMenuBar__V_args, // the arguments
  0, //arguments count
  Menu_methods_attach_INLRMenuBar__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_attach_INLRMenuBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_check_IZ_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_check_IZ_V_arg_check = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "check", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_check_IZ_V_args[] = 
{
  &Menu_methods_check_IZ_V_arg_id,
  &Menu_methods_check_IZ_V_arg_check,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_check_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_check_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "check", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O_check", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_check_IZ_V_args, // the arguments
  0, //arguments count
  Menu_methods_check_IZ_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_check_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_deleteItem_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_deleteItem_I_Z_args[] = 
{
  &Menu_methods_deleteItem_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_deleteItem_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_deleteItem_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_deleteItem_I_Z_args, // the arguments
  0, //arguments count
  Menu_methods_deleteItem_I_Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_deleteItem_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_deleteItem_INLRMenuItem__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_deleteItem_INLRMenuItem__Z_args[] = 
{
  &Menu_methods_deleteItem_INLRMenuItem__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_deleteItem_INLRMenuItem__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_deleteItem_INLRMenuItem__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_deleteItem_INLRMenuItem__Z_args, // the arguments
  0, //arguments count
  Menu_methods_deleteItem_INLRMenuItem__Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_deleteItem_INLRMenuItem__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_destroy_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_destroy_I_Z_args[] = 
{
  &Menu_methods_destroy_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_destroy_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_destroy_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_destroy", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_destroy_I_Z_args, // the arguments
  0, //arguments count
  Menu_methods_destroy_I_Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_destroy_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_destroy_INLRMenuItem__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_destroy_INLRMenuItem__Z_args[] = 
{
  &Menu_methods_destroy_INLRMenuItem__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_destroy_INLRMenuItem__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_destroy_INLRMenuItem__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_destroy", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_destroy_INLRMenuItem__Z_args, // the arguments
  0, //arguments count
  Menu_methods_destroy_INLRMenuItem__Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_destroy_INLRMenuItem__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_detach__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_detach__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_detach__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_detach", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_detach__V_args, // the arguments
  0, //arguments count
  Menu_methods_detach__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_detach__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_enable_IZ_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_enable_IZ_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_enable_IZ_V_args[] = 
{
  &Menu_methods_enable_IZ_V_arg_id,
  &Menu_methods_enable_IZ_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_enable_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_enable_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_enable", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_enable_IZ_V_args, // the arguments
  0, //arguments count
  Menu_methods_enable_IZ_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_enable_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_findItem_INLRString__I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_findItem_INLRString__I_args[] = 
{
  &Menu_methods_findItem_INLRString__I_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_findItem_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_findItem_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_L_findItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_findItem_INLRString__I_args, // the arguments
  0, //arguments count
  Menu_methods_findItem_INLRString__I_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_findItem_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getEventHandler__LREvtHandler__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getEventHandler__LREvtHandler__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getEventHandler__LREvtHandler_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo(), // return type
  "_X_getEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getEventHandler__LREvtHandler__args, // the arguments
  0, //arguments count
  Menu_methods_getEventHandler__LREvtHandler__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getEventHandler__LREvtHandler__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_getHelpString_I_LRString__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getHelpString_I_LRString__args[] = 
{
  &Menu_methods_getHelpString_I_LRString__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getHelpString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getHelpString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelpString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_T_getHelpString", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getHelpString_I_LRString__args, // the arguments
  0, //arguments count
  Menu_methods_getHelpString_I_LRString__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getHelpString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getInvokingWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getInvokingWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getInvokingWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInvokingWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_Z_getInvokingWindow", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getInvokingWindow__LRWindow__args, // the arguments
  0, //arguments count
  Menu_methods_getInvokingWindow__LRWindow__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getInvokingWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_getLabel_I_LRString__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getLabel_I_LRString__args[] = 
{
  &Menu_methods_getLabel_I_LRString__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getLabel_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getLabel_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_R_getLabel", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getLabel_I_LRString__args, // the arguments
  0, //arguments count
  Menu_methods_getLabel_I_LRString__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getLabel_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getMenuBar__LRMenuBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getMenuBar__LRMenuBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getMenuBar__LRMenuBar_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMenuBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuBar::clazzInfo(), // return type
  "_11_getMenuBar", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getMenuBar__LRMenuBar__args, // the arguments
  0, //arguments count
  Menu_methods_getMenuBar__LRMenuBar__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getMenuBar__LRMenuBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getMenuItemCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getMenuItemCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getMenuItemCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMenuItemCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_K_getMenuItemCount", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getMenuItemCount__I_args, // the arguments
  0, //arguments count
  Menu_methods_getMenuItemCount__I_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getMenuItemCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getParent__LRMenu__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getParent__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getParent__LRMenu_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_16_getParent", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getParent__LRMenu__args, // the arguments
  0, //arguments count
  Menu_methods_getParent__LRMenu__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getParent__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_10_getStyle", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getStyle__I_args, // the arguments
  0, //arguments count
  Menu_methods_getStyle__I_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_getTitle__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_getTitle__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_getTitle__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_V_getTitle", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_getTitle__LRString__args, // the arguments
  0, //arguments count
  Menu_methods_getTitle__LRString__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_getTitle__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IINLRMenuItem__Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IINLRMenuItem__Z_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IINLRMenuItem__Z_args[] = 
{
  &Menu_methods_insert_IINLRMenuItem__Z_arg_pos,
  &Menu_methods_insert_IINLRMenuItem__Z_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IINLRMenuItem__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IINLRMenuItem__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IINLRMenuItem__Z_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IINLRMenuItem__Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IINLRMenuItem__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString_I_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString_I_V_arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IIINLRString_INLRString_I_V_args[] = 
{
  &Menu_methods_insert_IIINLRString_INLRString_I_V_arg_pos,
  &Menu_methods_insert_IIINLRString_INLRString_I_V_arg_id,
  &Menu_methods_insert_IIINLRString_INLRString_I_V_arg_text,
  &Menu_methods_insert_IIINLRString_INLRString_I_V_arg_help,
  &Menu_methods_insert_IIINLRString_INLRString_I_V_arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IIINLRString_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IIINLRString_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IIINLRString_INLRString_I_V_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IIINLRString_INLRString_I_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IIINLRString_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IIINLRString__V_args[] = 
{
  &Menu_methods_insert_IIINLRString__V_arg_pos,
  &Menu_methods_insert_IIINLRString__V_arg_id,
  &Menu_methods_insert_IIINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IIINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IIINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IIINLRString_INLRString__V_args[] = 
{
  &Menu_methods_insert_IIINLRString_INLRString__V_arg_pos,
  &Menu_methods_insert_IIINLRString_INLRString__V_arg_id,
  &Menu_methods_insert_IIINLRString_INLRString__V_arg_text,
  &Menu_methods_insert_IIINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_args[] = 
{
  &Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_pos,
  &Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_id,
  &Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_text,
  &Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_submenu,
  &Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IIINLRString_INLRMenu_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IIINLRString_INLRMenu_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IIINLRString_INLRMenu_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insert_IIINLRString_INLRMenu__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insert_IIINLRString_INLRMenu__V_args[] = 
{
  &Menu_methods_insert_IIINLRString_INLRMenu__V_arg_pos,
  &Menu_methods_insert_IIINLRString_INLRMenu__V_arg_id,
  &Menu_methods_insert_IIINLRString_INLRMenu__V_arg_text,
  &Menu_methods_insert_IIINLRString_INLRMenu__V_arg_submenu,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insert_IIINLRString_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insert_IIINLRString_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_insert", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insert_IIINLRString_INLRMenu__V_args, // the arguments
  0, //arguments count
  Menu_methods_insert_IIINLRString_INLRMenu__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insert_IIINLRString_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertBreak__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertBreak__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertBreak__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_insertBreak", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertBreak__V_args, // the arguments
  0, //arguments count
  Menu_methods_insertBreak__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertBreak__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertCheckItem_IIINLRString_INLRString__V_args[] = 
{
  &Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_pos,
  &Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_id,
  &Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_text,
  &Menu_methods_insertCheckItem_IIINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertCheckItem_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertCheckItem_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_insertCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertCheckItem_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insertCheckItem_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertCheckItem_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertCheckItem_IIINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertCheckItem_IIINLRString__V_args[] = 
{
  &Menu_methods_insertCheckItem_IIINLRString__V_arg_pos,
  &Menu_methods_insertCheckItem_IIINLRString__V_arg_id,
  &Menu_methods_insertCheckItem_IIINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertCheckItem_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertCheckItem_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_insertCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertCheckItem_IIINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insertCheckItem_IIINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertCheckItem_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertRadioItem_IIINLRString_INLRString__V_args[] = 
{
  &Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_pos,
  &Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_id,
  &Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_text,
  &Menu_methods_insertRadioItem_IIINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertRadioItem_IIINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertRadioItem_IIINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_insertRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertRadioItem_IIINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insertRadioItem_IIINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertRadioItem_IIINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertRadioItem_IIINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertRadioItem_IIINLRString__V_args[] = 
{
  &Menu_methods_insertRadioItem_IIINLRString__V_arg_pos,
  &Menu_methods_insertRadioItem_IIINLRString__V_arg_id,
  &Menu_methods_insertRadioItem_IIINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertRadioItem_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertRadioItem_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "insertRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_insertRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertRadioItem_IIINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_insertRadioItem_IIINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertRadioItem_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_insertSeparator_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_insertSeparator_I_V_args[] = 
{
  &Menu_methods_insertSeparator_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_insertSeparator_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_insertSeparator_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_insertSeparator", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_insertSeparator_I_V_args, // the arguments
  0, //arguments count
  Menu_methods_insertSeparator_I_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_insertSeparator_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_isAttached__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_isAttached__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_isAttached__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAttached", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_isAttached", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_isAttached__Z_args, // the arguments
  0, //arguments count
  Menu_methods_isAttached__Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_isAttached__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_isChecked_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_isChecked_I_Z_args[] = 
{
  &Menu_methods_isChecked_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_isChecked_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_isChecked_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_P_isChecked", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_isChecked_I_Z_args, // the arguments
  0, //arguments count
  Menu_methods_isChecked_I_Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_isChecked_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_isEnabled_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_isEnabled_I_Z_args[] = 
{
  &Menu_methods_isEnabled_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_isEnabled_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_isEnabled_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N_isEnabled", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_isEnabled_I_Z_args, // the arguments
  0, //arguments count
  Menu_methods_isEnabled_I_Z_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_isEnabled_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_INLRMenuItem__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_INLRMenuItem__V_args[] = 
{
  &Menu_methods_prepend_INLRMenuItem__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_INLRMenuItem__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_INLRMenuItem__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_INLRMenuItem__V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_INLRMenuItem__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_INLRMenuItem__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString_I_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString_I_V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString_I_V_arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_IINLRString_INLRString_I_V_args[] = 
{
  &Menu_methods_prepend_IINLRString_INLRString_I_V_arg_id,
  &Menu_methods_prepend_IINLRString_INLRString_I_V_arg_text,
  &Menu_methods_prepend_IINLRString_INLRString_I_V_arg_help,
  &Menu_methods_prepend_IINLRString_INLRString_I_V_arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_IINLRString_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_IINLRString_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_IINLRString_INLRString_I_V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_IINLRString_INLRString_I_V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_IINLRString_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_IINLRString__V_args[] = 
{
  &Menu_methods_prepend_IINLRString__V_arg_id,
  &Menu_methods_prepend_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_prepend_IINLRString_INLRString__V_arg_id,
  &Menu_methods_prepend_IINLRString_INLRString__V_arg_text,
  &Menu_methods_prepend_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_args[] = 
{
  &Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_id,
  &Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_text,
  &Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_submenu,
  &Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_IINLRString_INLRMenu_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_IINLRString_INLRMenu_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_IINLRString_INLRMenu_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prepend_IINLRString_INLRMenu__V_arg_submenu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "submenu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prepend_IINLRString_INLRMenu__V_args[] = 
{
  &Menu_methods_prepend_IINLRString_INLRMenu__V_arg_id,
  &Menu_methods_prepend_IINLRString_INLRMenu__V_arg_text,
  &Menu_methods_prepend_IINLRString_INLRMenu__V_arg_submenu,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prepend_IINLRString_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prepend_IINLRString_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_prepend", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prepend_IINLRString_INLRMenu__V_args, // the arguments
  0, //arguments count
  Menu_methods_prepend_IINLRString_INLRMenu__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prepend_IINLRString_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prependCheckItem_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_id,
  &Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_text,
  &Menu_methods_prependCheckItem_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prependCheckItem_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prependCheckItem_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prependCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_prependCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prependCheckItem_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prependCheckItem_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prependCheckItem_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependCheckItem_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependCheckItem_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prependCheckItem_IINLRString__V_args[] = 
{
  &Menu_methods_prependCheckItem_IINLRString__V_arg_id,
  &Menu_methods_prependCheckItem_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prependCheckItem_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prependCheckItem_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prependCheckItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_prependCheckItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prependCheckItem_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prependCheckItem_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prependCheckItem_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prependRadioItem_IINLRString_INLRString__V_args[] = 
{
  &Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_id,
  &Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_text,
  &Menu_methods_prependRadioItem_IINLRString_INLRString__V_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prependRadioItem_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prependRadioItem_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prependRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_prependRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prependRadioItem_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prependRadioItem_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prependRadioItem_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependRadioItem_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_prependRadioItem_IINLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prependRadioItem_IINLRString__V_args[] = 
{
  &Menu_methods_prependRadioItem_IINLRString__V_arg_id,
  &Menu_methods_prependRadioItem_IINLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prependRadioItem_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prependRadioItem_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "prependRadioItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_prependRadioItem", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prependRadioItem_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_prependRadioItem_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prependRadioItem_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_prependSeparator__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_prependSeparator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_prependSeparator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prependSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_prependSeparator", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_prependSeparator__V_args, // the arguments
  0, //arguments count
  Menu_methods_prependSeparator__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_prependSeparator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_remove_I_LRMenuItem__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_remove_I_LRMenuItem__args[] = 
{
  &Menu_methods_remove_I_LRMenuItem__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_remove_I_LRMenuItem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_remove_I_LRMenuItem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo(), // return type
  "_E_remove", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_remove_I_LRMenuItem__args, // the arguments
  0, //arguments count
  Menu_methods_remove_I_LRMenuItem__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_remove_I_LRMenuItem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_remove_INLRMenuItem__LRMenuItem__arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_remove_INLRMenuItem__LRMenuItem__args[] = 
{
  &Menu_methods_remove_INLRMenuItem__LRMenuItem__arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_remove_INLRMenuItem__LRMenuItem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_remove_INLRMenuItem__LRMenuItem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuItem::clazzInfo(), // return type
  "_F_remove", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_remove_INLRMenuItem__LRMenuItem__args, // the arguments
  0, //arguments count
  Menu_methods_remove_INLRMenuItem__LRMenuItem__exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_remove_INLRMenuItem__LRMenuItem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setEventHandler_INLREvtHandler__V_arg_handler = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "handler", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvtHandler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setEventHandler_INLREvtHandler__V_args[] = 
{
  &Menu_methods_setEventHandler_INLREvtHandler__V_arg_handler,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setEventHandler_INLREvtHandler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setEventHandler_INLREvtHandler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEventHandler", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_W_setEventHandler", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setEventHandler_INLREvtHandler__V_args, // the arguments
  0, //arguments count
  Menu_methods_setEventHandler_INLREvtHandler__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setEventHandler_INLREvtHandler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setHelpString_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setHelpString_IINLRString__V_arg_helpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "helpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setHelpString_IINLRString__V_args[] = 
{
  &Menu_methods_setHelpString_IINLRString__V_arg_id,
  &Menu_methods_setHelpString_IINLRString__V_arg_helpString,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setHelpString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setHelpString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHelpString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_S_setHelpString", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setHelpString_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_setHelpString_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setHelpString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setInvokingWindow_INLRWindow__V_arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setInvokingWindow_INLRWindow__V_args[] = 
{
  &Menu_methods_setInvokingWindow_INLRWindow__V_arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setInvokingWindow_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setInvokingWindow_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInvokingWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Y_setInvokingWindow", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setInvokingWindow_INLRWindow__V_args, // the arguments
  0, //arguments count
  Menu_methods_setInvokingWindow_INLRWindow__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setInvokingWindow_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setLabel_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setLabel_IINLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setLabel_IINLRString__V_args[] = 
{
  &Menu_methods_setLabel_IINLRString__V_arg_id,
  &Menu_methods_setLabel_IINLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setLabel_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setLabel_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Q_setLabel", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setLabel_IINLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_setLabel_IINLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setLabel_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setParent_INLRMenu__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setParent_INLRMenu__V_args[] = 
{
  &Menu_methods_setParent_INLRMenu__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setParent_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setParent_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_setParent", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setParent_INLRMenu__V_args, // the arguments
  0, //arguments count
  Menu_methods_setParent_INLRMenu__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setParent_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Menu_methods_setTitle_INLRString__V_arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Menu_methods_setTitle_INLRString__V_args[] = 
{
  &Menu_methods_setTitle_INLRString__V_arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Menu_methods_setTitle_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Menu_method_setTitle_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_U_setTitle", // alternative name of method
  -1, // altlabelHashCode
  Menu_methods_setTitle_INLRString__V_args, // the arguments
  0, //arguments count
  Menu_methods_setTitle_INLRString__V_exceptions, // the declared exceptions
  Menu_MetainfoWrapper::Menu_method_setTitle_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Menu_methods[] = 
{
  &Menu_method_GetClass__L_acdk_lang_RClass_,
  &Menu_method_Menu_I_LRMenu_,
  &Menu_method_Menu__LRMenu_,
  &Menu_method_Menu_INLRString_I_LRMenu_,
  &Menu_method_append_IINLRString_INLRString_I_V,
  &Menu_method_append_IINLRString__V,
  &Menu_method_append_IINLRString_INLRString__V,
  &Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V,
  &Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate__V,
  &Menu_method_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString__V,
  &Menu_method_append_IINLRString_INLRMenu_INLRString__V,
  &Menu_method_append_IINLRString_INLRMenu__V,
  &Menu_method_append_INLRMenuItem__V,
  &Menu_method_appendCheckItem_IINLRString_INLRString__V,
  &Menu_method_appendCheckItem_IINLRString__V,
  &Menu_method_appendRadioItem_IINLRString_INLRString__V,
  &Menu_method_appendRadioItem_IINLRString__V,
  &Menu_method_appendSeparator__V,
  &Menu_method_attach_INLRMenuBar__V,
  &Menu_method_check_IZ_V,
  &Menu_method_deleteItem_I_Z,
  &Menu_method_deleteItem_INLRMenuItem__Z,
  &Menu_method_destroy_I_Z,
  &Menu_method_destroy_INLRMenuItem__Z,
  &Menu_method_detach__V,
  &Menu_method_enable_IZ_V,
  &Menu_method_findItem_INLRString__I,
  &Menu_method_getEventHandler__LREvtHandler_,
  &Menu_method_getHelpString_I_LRString_,
  &Menu_method_getInvokingWindow__LRWindow_,
  &Menu_method_getLabel_I_LRString_,
  &Menu_method_getMenuBar__LRMenuBar_,
  &Menu_method_getMenuItemCount__I,
  &Menu_method_getParent__LRMenu_,
  &Menu_method_getStyle__I,
  &Menu_method_getTitle__LRString_,
  &Menu_method_insert_IINLRMenuItem__Z,
  &Menu_method_insert_IIINLRString_INLRString_I_V,
  &Menu_method_insert_IIINLRString__V,
  &Menu_method_insert_IIINLRString_INLRString__V,
  &Menu_method_insert_IIINLRString_INLRMenu_INLRString__V,
  &Menu_method_insert_IIINLRString_INLRMenu__V,
  &Menu_method_insertBreak__V,
  &Menu_method_insertCheckItem_IIINLRString_INLRString__V,
  &Menu_method_insertCheckItem_IIINLRString__V,
  &Menu_method_insertRadioItem_IIINLRString_INLRString__V,
  &Menu_method_insertRadioItem_IIINLRString__V,
  &Menu_method_insertSeparator_I_V,
  &Menu_method_isAttached__Z,
  &Menu_method_isChecked_I_Z,
  &Menu_method_isEnabled_I_Z,
  &Menu_method_prepend_INLRMenuItem__V,
  &Menu_method_prepend_IINLRString_INLRString_I_V,
  &Menu_method_prepend_IINLRString__V,
  &Menu_method_prepend_IINLRString_INLRString__V,
  &Menu_method_prepend_IINLRString_INLRMenu_INLRString__V,
  &Menu_method_prepend_IINLRString_INLRMenu__V,
  &Menu_method_prependCheckItem_IINLRString_INLRString__V,
  &Menu_method_prependCheckItem_IINLRString__V,
  &Menu_method_prependRadioItem_IINLRString_INLRString__V,
  &Menu_method_prependRadioItem_IINLRString__V,
  &Menu_method_prependSeparator__V,
  &Menu_method_remove_I_LRMenuItem_,
  &Menu_method_remove_INLRMenuItem__LRMenuItem_,
  &Menu_method_setEventHandler_INLREvtHandler__V,
  &Menu_method_setHelpString_IINLRString__V,
  &Menu_method_setInvokingWindow_INLRWindow__V,
  &Menu_method_setLabel_IINLRString__V,
  &Menu_method_setParent_INLRMenu__V,
  &Menu_method_setTitle_INLRString__V,
  0
};


struct Menu_MetaInfoInitializer
{  Menu_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Menu::clazzInfo();
    ci->fields =  _Menu_fields;
    ci->methods =  _Menu_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Menu_MetaInfoInitializer Menu_MetaInfoInitializer_staticinstance__;


struct Menu_clazzInfo_ClazzAttributesResInitializer9
{
  Menu_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Menu_methods_append_IINLRString_INLRString_I_V_arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Menu_methods_append_INLRString_INLacdk_lang_dmi_RDmiDelegate_INLRString_I_V_arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Menu_methods_insert_IIINLRString_INLRString_I_V_arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Menu_methods_prepend_IINLRString_INLRString_I_V_arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
  }
};

Menu_clazzInfo_ClazzAttributesResInitializer9 Menu_clazzInfo_ClazzAttributesResInitializer9_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MenuBar_create_array(int length)
{
  return new ObjectArrayImpl<RMenuBar>(length);
}

//static
::acdk::lang::RObject
MenuBar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MenuBar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MenuBar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_MenuBar__LRMenuBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MenuBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_append_INLRMenu_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuBar::append((RMenu)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->append((RMenu)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_enableTop_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuBar::enableTop(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->enableTop(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_getLabelTop_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuBar::getLabelTop(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getLabelTop(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_insert_IINLRMenu_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuBar::insert(args[0].getIntVar(), (RMenu)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->insert(args[0].getIntVar(), (RMenu)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_remove_I_LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuBar::remove(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->remove(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_replace_IINLRMenu_INLRString__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuBar::replace(args[0].getIntVar(), (RMenu)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->replace(args[0].getIntVar(), (RMenu)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuBar_method_setLabelTop_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuBar* This = dmi_cast<MenuBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuBar::setLabelTop(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setLabelTop(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MenuBar_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MenuBar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_MenuBar__LRMenuBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_MenuBar__LRMenuBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_MenuBar__LRMenuBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MenuBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MenuBar::clazzInfo(), // return type
  "_0_MenuBar", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_MenuBar__LRMenuBar__args, // the arguments
  0, //arguments count
  MenuBar_methods_MenuBar__LRMenuBar__exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_MenuBar__LRMenuBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_append_INLRMenu_INLRString__V_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_append_INLRMenu_INLRString__V_arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_append_INLRMenu_INLRString__V_args[] = 
{
  &MenuBar_methods_append_INLRMenu_INLRString__V_arg_menu,
  &MenuBar_methods_append_INLRMenu_INLRString__V_arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_append_INLRMenu_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_append_INLRMenu_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_append", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_append_INLRMenu_INLRString__V_args, // the arguments
  0, //arguments count
  MenuBar_methods_append_INLRMenu_INLRString__V_exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_append_INLRMenu_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_enableTop_IZ_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_enableTop_IZ_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_enableTop_IZ_V_args[] = 
{
  &MenuBar_methods_enableTop_IZ_V_arg_pos,
  &MenuBar_methods_enableTop_IZ_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_enableTop_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_enableTop_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enableTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_enableTop", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_enableTop_IZ_V_args, // the arguments
  0, //arguments count
  MenuBar_methods_enableTop_IZ_V_exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_enableTop_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_getLabelTop_I_LRString__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_getLabelTop_I_LRString__args[] = 
{
  &MenuBar_methods_getLabelTop_I_LRString__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_getLabelTop_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_getLabelTop_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabelTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getLabelTop", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_getLabelTop_I_LRString__args, // the arguments
  0, //arguments count
  MenuBar_methods_getLabelTop_I_LRString__exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_getLabelTop_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_insert_IINLRMenu_INLRString__Z_args[] = 
{
  &MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_pos,
  &MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_menu,
  &MenuBar_methods_insert_IINLRMenu_INLRString__Z_arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_insert_IINLRMenu_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_insert_IINLRMenu_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_insert", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_insert_IINLRMenu_INLRString__Z_args, // the arguments
  0, //arguments count
  MenuBar_methods_insert_IINLRMenu_INLRString__Z_exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_insert_IINLRMenu_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_remove_I_LRMenu__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_remove_I_LRMenu__args[] = 
{
  &MenuBar_methods_remove_I_LRMenu__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_remove_I_LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_remove_I_LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_3_remove", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_remove_I_LRMenu__args, // the arguments
  0, //arguments count
  MenuBar_methods_remove_I_LRMenu__exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_remove_I_LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__args[] = 
{
  &MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_pos,
  &MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_menu,
  &MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_replace_IINLRMenu_INLRString__LRMenu_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_4_replace", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__args, // the arguments
  0, //arguments count
  MenuBar_methods_replace_IINLRMenu_INLRString__LRMenu__exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_replace_IINLRMenu_INLRString__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_setLabelTop_IINLRString__V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuBar_methods_setLabelTop_IINLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuBar_methods_setLabelTop_IINLRString__V_args[] = 
{
  &MenuBar_methods_setLabelTop_IINLRString__V_arg_pos,
  &MenuBar_methods_setLabelTop_IINLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuBar_methods_setLabelTop_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuBar_method_setLabelTop_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabelTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setLabelTop", // alternative name of method
  -1, // altlabelHashCode
  MenuBar_methods_setLabelTop_IINLRString__V_args, // the arguments
  0, //arguments count
  MenuBar_methods_setLabelTop_IINLRString__V_exceptions, // the declared exceptions
  MenuBar_MetainfoWrapper::MenuBar_method_setLabelTop_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MenuBar_methods[] = 
{
  &MenuBar_method_GetClass__L_acdk_lang_RClass_,
  &MenuBar_method_MenuBar__LRMenuBar_,
  &MenuBar_method_append_INLRMenu_INLRString__V,
  &MenuBar_method_enableTop_IZ_V,
  &MenuBar_method_getLabelTop_I_LRString_,
  &MenuBar_method_insert_IINLRMenu_INLRString__Z,
  &MenuBar_method_remove_I_LRMenu_,
  &MenuBar_method_replace_IINLRMenu_INLRString__LRMenu_,
  &MenuBar_method_setLabelTop_IINLRString__V,
  0
};


struct MenuBar_MetaInfoInitializer
{  MenuBar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MenuBar::clazzInfo();
    ci->fields =  _MenuBar_fields;
    ci->methods =  _MenuBar_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MenuBar_MetaInfoInitializer MenuBar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
MenuItem_create_array(int length)
{
  return new ObjectArrayImpl<RMenuItem>(length);
}

//static
::acdk::lang::RObject
MenuItem_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MenuItem_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MenuItem::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_check_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::check(args[0].getBoolVar());
    else
        This->check(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_check__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::check();
    else
        This->check();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_enable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::enable(args[0].getBoolVar());
    else
        This->enable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_enable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::enable();
    else
        This->enable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getHelp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuItem::getHelp();
    else
        ret = (::acdk::lang::RObject)This->getHelp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::getId();
    else
      ret = This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getKind__LItemKind__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (ItemKind)This->MenuItem::getKind();
    else
      ret = (ItemKind)This->getKind();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuItem::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getLabelFromText_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MenuItem::getLabelFromText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getMenu__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuItem::getMenu();
    else
        ret = (::acdk::lang::RObject)This->getMenu();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getSubMenu__LRMenu__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuItem::getSubMenu();
    else
        ret = (::acdk::lang::RObject)This->getSubMenu();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_getText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->MenuItem::getText();
    else
        ret = (::acdk::lang::RObject)This->getText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_isCheckable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::isCheckable();
    else
      ret = This->isCheckable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_isChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::isChecked();
    else
      ret = This->isChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_isEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::isEnabled();
    else
      ret = This->isEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_isSeparator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::isSeparator();
    else
      ret = This->isSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_isSubMenu__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->MenuItem::isSubMenu();
    else
      ret = This->isSubMenu();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setCheckable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setCheckable(args[0].getBoolVar());
    else
        This->setCheckable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setHelp_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setHelp((RString)args[0].getObjectVar());
    else
        This->setHelp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setId_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setId(args[0].getIntVar());
    else
        This->setId(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setKind_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setKind((ItemKind)args[0].getIntVar());
    else
        This->setKind((ItemKind)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setMenu_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setMenu((RMenu)args[0].getObjectVar());
    else
        This->setMenu((RMenu)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setSubMenu_INLRMenu__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setSubMenu((RMenu)args[0].getObjectVar());
    else
        This->setSubMenu((RMenu)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_setText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::setText((RString)args[0].getObjectVar());
    else
        This->setText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MenuItem_method_toggle__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MenuItem* This = dmi_cast<MenuItem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MenuItem::toggle();
    else
        This->toggle();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MenuItem_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_p_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MenuItem_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_check_Z_V_arg_check = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "check", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_check_Z_V_args[] = 
{
  &MenuItem_methods_check_Z_V_arg_check,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_check_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_check_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "check", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_check", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_check_Z_V_args, // the arguments
  0, //arguments count
  MenuItem_methods_check_Z_V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_check_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_check__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_check__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_check__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "check", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_check", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_check__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_check__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_check__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_enable_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_enable_Z_V_args[] = 
{
  &MenuItem_methods_enable_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_enable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_enable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_enable", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_enable_Z_V_args, // the arguments
  0, //arguments count
  MenuItem_methods_enable_Z_V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_enable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_enable__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_enable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_enable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_enable", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_enable__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_enable__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_enable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getHelp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getHelp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getHelp__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_getHelp", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getHelp__LRString__args, // the arguments
  0, //arguments count
  MenuItem_methods_getHelp__LRString__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getHelp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getId__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getId", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getId__I_args, // the arguments
  0, //arguments count
  MenuItem_methods_getId__I_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getKind__LItemKind__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getKind__LItemKind__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getKind__LItemKind_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getKind", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getKind__LItemKind__args, // the arguments
  0, //arguments count
  MenuItem_methods_getKind__LItemKind__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getKind__LItemKind__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getLabel", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  MenuItem_methods_getLabel__LRString__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_getLabelFromText_INLRString__LRString__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getLabelFromText_INLRString__LRString__args[] = 
{
  &MenuItem_methods_getLabelFromText_INLRString__LRString__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getLabelFromText_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getLabelFromText_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabelFromText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getLabelFromText", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getLabelFromText_INLRString__LRString__args, // the arguments
  0, //arguments count
  MenuItem_methods_getLabelFromText_INLRString__LRString__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getLabelFromText_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getMenu__LRMenu__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getMenu__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getMenu__LRMenu_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_0_getMenu", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getMenu__LRMenu__args, // the arguments
  0, //arguments count
  MenuItem_methods_getMenu__LRMenu__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getMenu__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getSubMenu__LRMenu__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getSubMenu__LRMenu__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getSubMenu__LRMenu_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSubMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo(), // return type
  "_f_getSubMenu", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getSubMenu__LRMenu__args, // the arguments
  0, //arguments count
  MenuItem_methods_getSubMenu__LRMenu__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getSubMenu__LRMenu__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_getText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_getText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_getText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getText", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_getText__LRString__args, // the arguments
  0, //arguments count
  MenuItem_methods_getText__LRString__exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_getText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_isCheckable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_isCheckable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_isCheckable__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCheckable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isCheckable", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_isCheckable__Z_args, // the arguments
  0, //arguments count
  MenuItem_methods_isCheckable__Z_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_isCheckable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_isChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_isChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_isChecked__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_isChecked", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_isChecked__Z_args, // the arguments
  0, //arguments count
  MenuItem_methods_isChecked__Z_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_isChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_isEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_isEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_isEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isEnabled", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_isEnabled__Z_args, // the arguments
  0, //arguments count
  MenuItem_methods_isEnabled__Z_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_isEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_isSeparator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_isSeparator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_isSeparator__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isSeparator", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_isSeparator__Z_args, // the arguments
  0, //arguments count
  MenuItem_methods_isSeparator__Z_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_isSeparator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_isSubMenu__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_isSubMenu__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_isSubMenu__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSubMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isSubMenu", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_isSubMenu__Z_args, // the arguments
  0, //arguments count
  MenuItem_methods_isSubMenu__Z_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_isSubMenu__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setCheckable_Z_V_arg_checkable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "checkable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setCheckable_Z_V_args[] = 
{
  &MenuItem_methods_setCheckable_Z_V_arg_checkable,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setCheckable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setCheckable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCheckable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setCheckable", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setCheckable_Z_V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setCheckable_Z_V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setCheckable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setHelp_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setHelp_INLRString__V_args[] = 
{
  &MenuItem_methods_setHelp_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setHelp_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setHelp_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setHelp", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setHelp_INLRString__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setHelp_INLRString__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setHelp_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setId_I_V_arg_itemid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "itemid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setId_I_V_args[] = 
{
  &MenuItem_methods_setId_I_V_arg_itemid,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setId_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setId_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setId", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setId_I_V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setId_I_V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setId_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setKind_I_V_arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setKind_I_V_args[] = 
{
  &MenuItem_methods_setKind_I_V_arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setKind_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setKind_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setKind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setKind", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setKind_I_V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setKind_I_V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setKind_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setMenu_INLRMenu__V_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setMenu_INLRMenu__V_args[] = 
{
  &MenuItem_methods_setMenu_INLRMenu__V_arg_menu,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setMenu_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setMenu_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setMenu", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setMenu_INLRMenu__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setMenu_INLRMenu__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setMenu_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setSubMenu_INLRMenu__V_arg_menu = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "menu", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenu::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setSubMenu_INLRMenu__V_args[] = 
{
  &MenuItem_methods_setSubMenu_INLRMenu__V_arg_menu,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setSubMenu_INLRMenu__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setSubMenu_INLRMenu__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSubMenu", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setSubMenu", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setSubMenu_INLRMenu__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setSubMenu_INLRMenu__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setSubMenu_INLRMenu__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MenuItem_methods_setText_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_setText_INLRString__V_args[] = 
{
  &MenuItem_methods_setText_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_setText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_setText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setText", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_setText_INLRString__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_setText_INLRString__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_setText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MenuItem_methods_toggle__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MenuItem_methods_toggle__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MenuItem_method_toggle__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_toggle", // alternative name of method
  -1, // altlabelHashCode
  MenuItem_methods_toggle__V_args, // the arguments
  0, //arguments count
  MenuItem_methods_toggle__V_exceptions, // the declared exceptions
  MenuItem_MetainfoWrapper::MenuItem_method_toggle__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MenuItem_methods[] = 
{
  &MenuItem_method_GetClass__L_acdk_lang_RClass_,
  &MenuItem_method_check_Z_V,
  &MenuItem_method_check__V,
  &MenuItem_method_enable_Z_V,
  &MenuItem_method_enable__V,
  &MenuItem_method_getHelp__LRString_,
  &MenuItem_method_getId__I,
  &MenuItem_method_getKind__LItemKind_,
  &MenuItem_method_getLabel__LRString_,
  &MenuItem_method_getLabelFromText_INLRString__LRString_,
  &MenuItem_method_getMenu__LRMenu_,
  &MenuItem_method_getSubMenu__LRMenu_,
  &MenuItem_method_getText__LRString_,
  &MenuItem_method_isCheckable__Z,
  &MenuItem_method_isChecked__Z,
  &MenuItem_method_isEnabled__Z,
  &MenuItem_method_isSeparator__Z,
  &MenuItem_method_isSubMenu__Z,
  &MenuItem_method_setCheckable_Z_V,
  &MenuItem_method_setHelp_INLRString__V,
  &MenuItem_method_setId_I_V,
  &MenuItem_method_setKind_I_V,
  &MenuItem_method_setMenu_INLRMenu__V,
  &MenuItem_method_setSubMenu_INLRMenu__V,
  &MenuItem_method_setText_INLRString__V,
  &MenuItem_method_toggle__V,
  0
};


struct MenuItem_MetaInfoInitializer
{  MenuItem_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MenuItem::clazzInfo();
    ci->fields =  _MenuItem_fields;
    ci->methods =  _MenuItem_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MenuItem_MetaInfoInitializer MenuItem_MetaInfoInitializer_staticinstance__;


struct MenuItem_clazzInfo_ClazzAttributesResInitializer10
{
  MenuItem_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&MenuItem_method_getKind__LItemKind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&MenuItem_methods_setKind_I_V_arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
  }
};

MenuItem_clazzInfo_ClazzAttributesResInitializer10 MenuItem_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
NotebookEvent_create_array(int length)
{
  return new ObjectArrayImpl<RNotebookEvent>(length);
}

//static
::acdk::lang::RObject
NotebookEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NotebookEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NotebookEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_NotebookEvent_IIII_LRNotebookEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotebookEvent(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_NotebookEvent__LRNotebookEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotebookEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_NotebookEvent_I_LRNotebookEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotebookEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_NotebookEvent_II_LRNotebookEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotebookEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_NotebookEvent_III_LRNotebookEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NotebookEvent(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_getOldSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotebookEvent* This = dmi_cast<NotebookEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NotebookEvent::getOldSelection();
    else
      ret = This->getOldSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotebookEvent* This = dmi_cast<NotebookEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->NotebookEvent::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_setOldSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotebookEvent* This = dmi_cast<NotebookEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NotebookEvent::setOldSelection(args[0].getIntVar());
    else
        This->setOldSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NotebookEvent_method_setSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    NotebookEvent* This = dmi_cast<NotebookEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->NotebookEvent::setSelection(args[0].getIntVar());
    else
        This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NotebookEvent_fields_EvtCommandNotebookPageChanged_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(NotebookEvent::EvtCommandNotebookPageChanged, flags);
    else
      NotebookEvent::EvtCommandNotebookPageChanged = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  NotebookEvent_fields_EvtCommandNotebookPageChanging_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(NotebookEvent::EvtCommandNotebookPageChanging, flags);
    else
      NotebookEvent::EvtCommandNotebookPageChanging = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo NotebookEvent_fields_EvtCommandNotebookPageChanged = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandNotebookPageChanged", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NotebookEvent_MetainfoWrapper::NotebookEvent_fields_EvtCommandNotebookPageChanged_accessor, // read/write access to this fields
  (void*)&NotebookEvent::EvtCommandNotebookPageChanged // address of field
};

::acdk::lang::dmi::ClazzFieldInfo NotebookEvent_fields_EvtCommandNotebookPageChanging = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtCommandNotebookPageChanging", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  NotebookEvent_MetainfoWrapper::NotebookEvent_fields_EvtCommandNotebookPageChanging_accessor, // read/write access to this fields
  (void*)&NotebookEvent::EvtCommandNotebookPageChanging // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _NotebookEvent_fields[] = 
{
  &NotebookEvent_fields_EvtCommandNotebookPageChanged,
  &NotebookEvent_fields_EvtCommandNotebookPageChanging,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_sel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_oldSel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "oldSel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__args[] = 
{
  &NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_eventType,
  &NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_id,
  &NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_sel,
  &NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__arg_oldSel,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_NotebookEvent_IIII_LRNotebookEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NotebookEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotebookEvent::clazzInfo(), // return type
  "_0_NotebookEvent", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_NotebookEvent_IIII_LRNotebookEvent__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_NotebookEvent_IIII_LRNotebookEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_NotebookEvent__LRNotebookEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_NotebookEvent__LRNotebookEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_NotebookEvent__LRNotebookEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotebookEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotebookEvent::clazzInfo(), // return type
  "_1_NotebookEvent", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_NotebookEvent__LRNotebookEvent__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_NotebookEvent__LRNotebookEvent__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_NotebookEvent__LRNotebookEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__args[] = 
{
  &NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__arg_eventType,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_NotebookEvent_I_LRNotebookEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotebookEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotebookEvent::clazzInfo(), // return type
  "_2_NotebookEvent", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_NotebookEvent_I_LRNotebookEvent__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_NotebookEvent_I_LRNotebookEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__args[] = 
{
  &NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__arg_eventType,
  &NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_NotebookEvent_II_LRNotebookEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotebookEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotebookEvent::clazzInfo(), // return type
  "_3_NotebookEvent", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_NotebookEvent_II_LRNotebookEvent__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_NotebookEvent_II_LRNotebookEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_eventType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "eventType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_sel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__args[] = 
{
  &NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_eventType,
  &NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_id,
  &NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__arg_sel,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_NotebookEvent_III_LRNotebookEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "NotebookEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NotebookEvent::clazzInfo(), // return type
  "_4_NotebookEvent", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__args, // the arguments
  0, //arguments count
  NotebookEvent_methods_NotebookEvent_III_LRNotebookEvent__exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_NotebookEvent_III_LRNotebookEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_getOldSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_getOldSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_getOldSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOldSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getOldSelection", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_getOldSelection__I_args, // the arguments
  0, //arguments count
  NotebookEvent_methods_getOldSelection__I_exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_getOldSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getSelection", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_getSelection__I_args, // the arguments
  0, //arguments count
  NotebookEvent_methods_getSelection__I_exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_setOldSelection_I_V_arg_nOldSel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nOldSel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_setOldSelection_I_V_args[] = 
{
  &NotebookEvent_methods_setOldSelection_I_V_arg_nOldSel,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_setOldSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_setOldSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOldSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setOldSelection", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_setOldSelection_I_V_args, // the arguments
  0, //arguments count
  NotebookEvent_methods_setOldSelection_I_V_exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_setOldSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NotebookEvent_methods_setSelection_I_V_arg_nSel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nSel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NotebookEvent_methods_setSelection_I_V_args[] = 
{
  &NotebookEvent_methods_setSelection_I_V_arg_nSel,
  0
};

::acdk::lang::dmi::ClazzInfo* NotebookEvent_methods_setSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NotebookEvent_method_setSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setSelection", // alternative name of method
  -1, // altlabelHashCode
  NotebookEvent_methods_setSelection_I_V_args, // the arguments
  0, //arguments count
  NotebookEvent_methods_setSelection_I_V_exceptions, // the declared exceptions
  NotebookEvent_MetainfoWrapper::NotebookEvent_method_setSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NotebookEvent_methods[] = 
{
  &NotebookEvent_method_GetClass__L_acdk_lang_RClass_,
  &NotebookEvent_method_NotebookEvent_IIII_LRNotebookEvent_,
  &NotebookEvent_method_NotebookEvent__LRNotebookEvent_,
  &NotebookEvent_method_NotebookEvent_I_LRNotebookEvent_,
  &NotebookEvent_method_NotebookEvent_II_LRNotebookEvent_,
  &NotebookEvent_method_NotebookEvent_III_LRNotebookEvent_,
  &NotebookEvent_method_getOldSelection__I,
  &NotebookEvent_method_getSelection__I,
  &NotebookEvent_method_setOldSelection_I_V,
  &NotebookEvent_method_setSelection_I_V,
  0
};


struct NotebookEvent_MetaInfoInitializer
{  NotebookEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NotebookEvent::clazzInfo();
    ci->fields =  _NotebookEvent_fields;
    ci->methods =  _NotebookEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NotebookEvent_MetaInfoInitializer NotebookEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Notebook_create_array(int length)
{
  return new ObjectArrayImpl<RNotebook>(length);
}

//static
::acdk::lang::RObject
Notebook_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Notebook_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Notebook::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Notebook((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_Notebook_INLRWindow_I_LRNotebook__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Notebook((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_Notebook_INLRWindow_IINLRPoint__LRNotebook__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Notebook((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Notebook((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_addPage_INLRWindow_INLRString_ZI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar(), args[3].getIntVar());
    else
      ret = This->addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_addPage_INLRWindow_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_addPage_INLRWindow_INLRString_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    else
      ret = This->addPage((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_advanceSelection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::advanceSelection();
    else
        This->advanceSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_advanceSelection_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::advanceSelection(args[0].getBoolVar());
    else
        This->advanceSelection(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_assignImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::assignImageList((RImageList)args[0].getObjectVar());
    else
        This->assignImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_calcSizeFromPage_INLRSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Notebook::calcSizeFromPage((RSize)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->calcSizeFromPage((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_deleteAllPages__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::deleteAllPages();
    else
      ret = This->deleteAllPages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_deletePage_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::deletePage(args[0].getIntVar());
    else
      ret = This->deletePage(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getImageList__LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Notebook::getImageList();
    else
        ret = (::acdk::lang::RObject)This->getImageList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getPage_I_LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Notebook::getPage(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getPage(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getPageCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::getPageCount();
    else
      ret = This->getPageCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getPageImage_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::getPageImage(args[0].getIntVar());
    else
      ret = This->getPageImage(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getPageText_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Notebook::getPageText(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getPageText(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getRowCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::getRowCount();
    else
      ret = This->getRowCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_insertPage_IINLRWindow_INLRString_ZI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getIntVar());
    else
      ret = This->insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_insertPage_IINLRWindow_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_insertPage_IINLRWindow_INLRString_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar());
    else
      ret = This->insertPage(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_removePage_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::removePage(args[0].getIntVar());
    else
      ret = This->removePage(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setImageList_INLRImageList__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::setImageList((RImageList)args[0].getObjectVar());
    else
        This->setImageList((RImageList)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setPadding_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::setPadding((RSize)args[0].getObjectVar());
    else
        This->setPadding((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setPageImage_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::setPageImage(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->setPageImage(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setPageSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::setPageSize((RSize)args[0].getObjectVar());
    else
        This->setPageSize((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setPageText_IINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::setPageText(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
      ret = This->setPageText(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setSelection_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Notebook::setSelection(args[0].getIntVar());
    else
      ret = This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Notebook_method_setTabSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Notebook* This = dmi_cast<Notebook>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Notebook::setTabSize((RSize)args[0].getObjectVar());
    else
        This->setTabSize((RSize)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Notebook_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Notebook_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__args[] = 
{
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_parent,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_id,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_pos,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_size,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Notebook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Notebook::clazzInfo(), // return type
  "_0_Notebook", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__args, // the arguments
  0, //arguments count
  Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_I_LRNotebook__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_I_LRNotebook__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_Notebook_INLRWindow_I_LRNotebook__args[] = 
{
  &Notebook_methods_Notebook_INLRWindow_I_LRNotebook__arg_parent,
  &Notebook_methods_Notebook_INLRWindow_I_LRNotebook__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_Notebook_INLRWindow_I_LRNotebook__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_Notebook_INLRWindow_I_LRNotebook_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Notebook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Notebook::clazzInfo(), // return type
  "_1_Notebook", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_Notebook_INLRWindow_I_LRNotebook__args, // the arguments
  0, //arguments count
  Notebook_methods_Notebook_INLRWindow_I_LRNotebook__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_Notebook_INLRWindow_I_LRNotebook__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__args[] = 
{
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_parent,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_id,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_Notebook_INLRWindow_IINLRPoint__LRNotebook_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Notebook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Notebook::clazzInfo(), // return type
  "_2_Notebook", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__args, // the arguments
  0, //arguments count
  Notebook_methods_Notebook_INLRWindow_IINLRPoint__LRNotebook__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_Notebook_INLRWindow_IINLRPoint__LRNotebook__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__args[] = 
{
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_parent,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_id,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_pos,
  &Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Notebook", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Notebook::clazzInfo(), // return type
  "_3_Notebook", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__args, // the arguments
  0, //arguments count
  Notebook_methods_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_bSelect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bSelect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_imageId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "imageId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_args[] = 
{
  &Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_pPage,
  &Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_strText,
  &Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_bSelect,
  &Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_arg_imageId,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_addPage_INLRWindow_INLRString_ZI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_addPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_addPage_INLRWindow_INLRString_ZI_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_addPage_INLRWindow_INLRString_ZI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString__Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString__Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_addPage_INLRWindow_INLRString__Z_args[] = 
{
  &Notebook_methods_addPage_INLRWindow_INLRString__Z_arg_pPage,
  &Notebook_methods_addPage_INLRWindow_INLRString__Z_arg_strText,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_addPage_INLRWindow_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_addPage_INLRWindow_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "addPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_addPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_addPage_INLRWindow_INLRString__Z_args, // the arguments
  0, //arguments count
  Notebook_methods_addPage_INLRWindow_INLRString__Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_addPage_INLRWindow_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_bSelect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bSelect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_args[] = 
{
  &Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_pPage,
  &Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_strText,
  &Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_arg_bSelect,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_addPage_INLRWindow_INLRString_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "addPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_addPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_addPage_INLRWindow_INLRString_Z_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_addPage_INLRWindow_INLRString_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_advanceSelection__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_advanceSelection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_advanceSelection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "advanceSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_advanceSelection", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_advanceSelection__V_args, // the arguments
  0, //arguments count
  Notebook_methods_advanceSelection__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_advanceSelection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_advanceSelection_Z_V_arg_forward = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "forward", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_advanceSelection_Z_V_args[] = 
{
  &Notebook_methods_advanceSelection_Z_V_arg_forward,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_advanceSelection_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_advanceSelection_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "advanceSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_advanceSelection", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_advanceSelection_Z_V_args, // the arguments
  0, //arguments count
  Notebook_methods_advanceSelection_Z_V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_advanceSelection_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_assignImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_assignImageList_INLRImageList__V_args[] = 
{
  &Notebook_methods_assignImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_assignImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_assignImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assignImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_assignImageList", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_assignImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  Notebook_methods_assignImageList_INLRImageList__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_assignImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_calcSizeFromPage_INLRSize__LRSize__arg_sizePage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizePage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_calcSizeFromPage_INLRSize__LRSize__args[] = 
{
  &Notebook_methods_calcSizeFromPage_INLRSize__LRSize__arg_sizePage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_calcSizeFromPage_INLRSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_calcSizeFromPage_INLRSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcSizeFromPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_i_calcSizeFromPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_calcSizeFromPage_INLRSize__LRSize__args, // the arguments
  0, //arguments count
  Notebook_methods_calcSizeFromPage_INLRSize__LRSize__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_calcSizeFromPage_INLRSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_deleteAllPages__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_deleteAllPages__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_deleteAllPages__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteAllPages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_deleteAllPages", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_deleteAllPages__Z_args, // the arguments
  0, //arguments count
  Notebook_methods_deleteAllPages__Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_deleteAllPages__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_deletePage_I_Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_deletePage_I_Z_args[] = 
{
  &Notebook_methods_deletePage_I_Z_arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_deletePage_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_deletePage_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deletePage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_deletePage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_deletePage_I_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_deletePage_I_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_deletePage_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getImageList__LRImageList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getImageList__LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getImageList__LRImageList_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo(), // return type
  "_b_getImageList", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getImageList__LRImageList__args, // the arguments
  0, //arguments count
  Notebook_methods_getImageList__LRImageList__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getImageList__LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_getPage_I_LRWindow__arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getPage_I_LRWindow__args[] = 
{
  &Notebook_methods_getPage_I_LRWindow__arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getPage_I_LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getPage_I_LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_5_getPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getPage_I_LRWindow__args, // the arguments
  0, //arguments count
  Notebook_methods_getPage_I_LRWindow__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getPage_I_LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getPageCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getPageCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getPageCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPageCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getPageCount", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getPageCount__I_args, // the arguments
  0, //arguments count
  Notebook_methods_getPageCount__I_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getPageCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_getPageImage_I_I_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getPageImage_I_I_args[] = 
{
  &Notebook_methods_getPageImage_I_I_arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getPageImage_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getPageImage_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPageImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getPageImage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getPageImage_I_I_args, // the arguments
  0, //arguments count
  Notebook_methods_getPageImage_I_I_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getPageImage_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_getPageText_I_LRString__arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getPageText_I_LRString__args[] = 
{
  &Notebook_methods_getPageText_I_LRString__arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getPageText_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getPageText_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPageText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getPageText", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getPageText_I_LRString__args, // the arguments
  0, //arguments count
  Notebook_methods_getPageText_I_LRString__exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getPageText_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getRowCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getRowCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getRowCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRowCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getRowCount", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getRowCount__I_args, // the arguments
  0, //arguments count
  Notebook_methods_getRowCount__I_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getRowCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getSelection", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_getSelection__I_args, // the arguments
  0, //arguments count
  Notebook_methods_getSelection__I_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_bSelect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bSelect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_imageId = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "imageId", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_args[] = 
{
  &Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_nPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_pPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_strText,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_bSelect,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_arg_imageId,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_insertPage_IINLRWindow_INLRString_ZI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_insertPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_insertPage_IINLRWindow_INLRString_ZI_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_insertPage_IINLRWindow_INLRString_ZI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_insertPage_IINLRWindow_INLRString__Z_args[] = 
{
  &Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_nPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_pPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString__Z_arg_strText,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_insertPage_IINLRWindow_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_insertPage_IINLRWindow_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_insertPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_insertPage_IINLRWindow_INLRString__Z_args, // the arguments
  0, //arguments count
  Notebook_methods_insertPage_IINLRWindow_INLRString__Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_insertPage_IINLRWindow_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_pPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_bSelect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bSelect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_args[] = 
{
  &Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_nPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_pPage,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_strText,
  &Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_arg_bSelect,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_insertPage_IINLRWindow_INLRString_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_insertPage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_insertPage_IINLRWindow_INLRString_Z_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_insertPage_IINLRWindow_INLRString_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_removePage_I_Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_removePage_I_Z_args[] = 
{
  &Notebook_methods_removePage_I_Z_arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_removePage_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_removePage_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removePage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_removePage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_removePage_I_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_removePage_I_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_removePage_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setImageList_INLRImageList__V_arg_imageList = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "imageList", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RImageList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setImageList_INLRImageList__V_args[] = 
{
  &Notebook_methods_setImageList_INLRImageList__V_arg_imageList,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setImageList_INLRImageList__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setImageList_INLRImageList__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setImageList", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setImageList_INLRImageList__V_args, // the arguments
  0, //arguments count
  Notebook_methods_setImageList_INLRImageList__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setImageList_INLRImageList__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPadding_INLRSize__V_arg_padding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "padding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setPadding_INLRSize__V_args[] = 
{
  &Notebook_methods_setPadding_INLRSize__V_arg_padding,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setPadding_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setPadding_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPadding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setPadding", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setPadding_INLRSize__V_args, // the arguments
  0, //arguments count
  Notebook_methods_setPadding_INLRSize__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setPadding_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPageImage_II_Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPageImage_II_Z_arg_nImage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nImage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setPageImage_II_Z_args[] = 
{
  &Notebook_methods_setPageImage_II_Z_arg_nPage,
  &Notebook_methods_setPageImage_II_Z_arg_nImage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setPageImage_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setPageImage_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPageImage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_setPageImage", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setPageImage_II_Z_args, // the arguments
  0, //arguments count
  Notebook_methods_setPageImage_II_Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setPageImage_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPageSize_INLRSize__V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setPageSize_INLRSize__V_args[] = 
{
  &Notebook_methods_setPageSize_INLRSize__V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setPageSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setPageSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setPageSize", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setPageSize_INLRSize__V_args, // the arguments
  0, //arguments count
  Notebook_methods_setPageSize_INLRSize__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setPageSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPageText_IINLRString__Z_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setPageText_IINLRString__Z_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setPageText_IINLRString__Z_args[] = 
{
  &Notebook_methods_setPageText_IINLRString__Z_arg_nPage,
  &Notebook_methods_setPageText_IINLRString__Z_arg_strText,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setPageText_IINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setPageText_IINLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPageText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_setPageText", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setPageText_IINLRString__Z_args, // the arguments
  0, //arguments count
  Notebook_methods_setPageText_IINLRString__Z_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setPageText_IINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setSelection_I_I_arg_nPage = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nPage", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setSelection_I_I_args[] = 
{
  &Notebook_methods_setSelection_I_I_arg_nPage,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setSelection_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setSelection_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_setSelection", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setSelection_I_I_args, // the arguments
  0, //arguments count
  Notebook_methods_setSelection_I_I_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setSelection_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Notebook_methods_setTabSize_INLRSize__V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Notebook_methods_setTabSize_INLRSize__V_args[] = 
{
  &Notebook_methods_setTabSize_INLRSize__V_arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* Notebook_methods_setTabSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Notebook_method_setTabSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTabSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setTabSize", // alternative name of method
  -1, // altlabelHashCode
  Notebook_methods_setTabSize_INLRSize__V_args, // the arguments
  0, //arguments count
  Notebook_methods_setTabSize_INLRSize__V_exceptions, // the declared exceptions
  Notebook_MetainfoWrapper::Notebook_method_setTabSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Notebook_methods[] = 
{
  &Notebook_method_GetClass__L_acdk_lang_RClass_,
  &Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize_I_LRNotebook_,
  &Notebook_method_Notebook_INLRWindow_I_LRNotebook_,
  &Notebook_method_Notebook_INLRWindow_IINLRPoint__LRNotebook_,
  &Notebook_method_Notebook_INLRWindow_IINLRPoint_INLRSize__LRNotebook_,
  &Notebook_method_addPage_INLRWindow_INLRString_ZI_Z,
  &Notebook_method_addPage_INLRWindow_INLRString__Z,
  &Notebook_method_addPage_INLRWindow_INLRString_Z_Z,
  &Notebook_method_advanceSelection__V,
  &Notebook_method_advanceSelection_Z_V,
  &Notebook_method_assignImageList_INLRImageList__V,
  &Notebook_method_calcSizeFromPage_INLRSize__LRSize_,
  &Notebook_method_deleteAllPages__Z,
  &Notebook_method_deletePage_I_Z,
  &Notebook_method_getImageList__LRImageList_,
  &Notebook_method_getPage_I_LRWindow_,
  &Notebook_method_getPageCount__I,
  &Notebook_method_getPageImage_I_I,
  &Notebook_method_getPageText_I_LRString_,
  &Notebook_method_getRowCount__I,
  &Notebook_method_getSelection__I,
  &Notebook_method_insertPage_IINLRWindow_INLRString_ZI_Z,
  &Notebook_method_insertPage_IINLRWindow_INLRString__Z,
  &Notebook_method_insertPage_IINLRWindow_INLRString_Z_Z,
  &Notebook_method_removePage_I_Z,
  &Notebook_method_setImageList_INLRImageList__V,
  &Notebook_method_setPadding_INLRSize__V,
  &Notebook_method_setPageImage_II_Z,
  &Notebook_method_setPageSize_INLRSize__V,
  &Notebook_method_setPageText_IINLRString__Z,
  &Notebook_method_setSelection_I_I,
  &Notebook_method_setTabSize_INLRSize__V,
  0
};


struct Notebook_MetaInfoInitializer
{  Notebook_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Notebook::clazzInfo();
    ci->fields =  _Notebook_fields;
    ci->methods =  _Notebook_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Notebook_MetaInfoInitializer Notebook_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

