// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
App_create_array(int length)
{
  return new ObjectArrayImpl<RApp>(length);
}

//static
::acdk::lang::RObject
App_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class App_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_App__LRApp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new App();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)App::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_createGui_INLRString_INLRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = App::createGui((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_createGui_INLRApp_INLRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = App::createGui((RApp)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_handleException_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    App* This = dmi_cast<App>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->App::handleException((RThrowable)args[0].getObjectVar());
    else
        This->handleException((RThrowable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_handleUnknownException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    App* This = dmi_cast<App>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->App::handleUnknownException();
    else
        This->handleUnknownException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_main2_LRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = App::main2((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_onExit__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    App* This = dmi_cast<App>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->App::onExit();
    else
      ret = This->onExit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_onInit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    App* This = dmi_cast<App>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->App::onInit();
    else
      ret = This->onInit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  App_method_onRun__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    App* This = dmi_cast<App>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->App::onRun();
    else
      ret = This->onRun();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _App_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_App__LRApp__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_App__LRApp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_App__LRApp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "App", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  App::clazzInfo(), // return type
  "_0_App", // alternative name of method
  -1, // altlabelHashCode
  App_methods_App__LRApp__args, // the arguments
  0, //arguments count
  App_methods_App__LRApp__exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_App__LRApp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  App_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  App_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_createGui_INLRString_INLRStringArray__I_arg_appClassName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "appClassName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_createGui_INLRString_INLRStringArray__I_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_createGui_INLRString_INLRStringArray__I_args[] = 
{
  &App_methods_createGui_INLRString_INLRStringArray__I_arg_appClassName,
  &App_methods_createGui_INLRString_INLRStringArray__I_arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_createGui_INLRString_INLRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_createGui_INLRString_INLRStringArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createGui", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_createGui", // alternative name of method
  -1, // altlabelHashCode
  App_methods_createGui_INLRString_INLRStringArray__I_args, // the arguments
  0, //arguments count
  App_methods_createGui_INLRString_INLRStringArray__I_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_createGui_INLRString_INLRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_createGui_INLRApp_INLRStringArray__I_arg_application = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "application", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RApp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_createGui_INLRApp_INLRStringArray__I_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_createGui_INLRApp_INLRStringArray__I_args[] = 
{
  &App_methods_createGui_INLRApp_INLRStringArray__I_arg_application,
  &App_methods_createGui_INLRApp_INLRStringArray__I_arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_createGui_INLRApp_INLRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_createGui_INLRApp_INLRStringArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createGui", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_createGui", // alternative name of method
  -1, // altlabelHashCode
  App_methods_createGui_INLRApp_INLRStringArray__I_args, // the arguments
  0, //arguments count
  App_methods_createGui_INLRApp_INLRStringArray__I_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_createGui_INLRApp_INLRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_handleException_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_handleException_INLRThrowable__V_args[] = 
{
  &App_methods_handleException_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_handleException_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_handleException_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_handleException", // alternative name of method
  -1, // altlabelHashCode
  App_methods_handleException_INLRThrowable__V_args, // the arguments
  0, //arguments count
  App_methods_handleException_INLRThrowable__V_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_handleException_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_handleUnknownException__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_handleUnknownException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_handleUnknownException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleUnknownException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_handleUnknownException", // alternative name of method
  -1, // altlabelHashCode
  App_methods_handleUnknownException__V_args, // the arguments
  0, //arguments count
  App_methods_handleUnknownException__V_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_handleUnknownException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo App_methods_main2_LRStringArray__I_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_main2_LRStringArray__I_args[] = 
{
  &App_methods_main2_LRStringArray__I_arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_main2_LRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_main2_LRStringArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "main2", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_main2", // alternative name of method
  -1, // altlabelHashCode
  App_methods_main2_LRStringArray__I_args, // the arguments
  0, //arguments count
  App_methods_main2_LRStringArray__I_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_main2_LRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_onExit__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_onExit__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_onExit__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onExit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_onExit", // alternative name of method
  -1, // altlabelHashCode
  App_methods_onExit__I_args, // the arguments
  0, //arguments count
  App_methods_onExit__I_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_onExit__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_onInit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_onInit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_onInit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onInit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_onInit", // alternative name of method
  -1, // altlabelHashCode
  App_methods_onInit__Z_args, // the arguments
  0, //arguments count
  App_methods_onInit__Z_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_onInit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* App_methods_onRun__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* App_methods_onRun__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo App_method_onRun__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onRun", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_onRun", // alternative name of method
  -1, // altlabelHashCode
  App_methods_onRun__I_args, // the arguments
  0, //arguments count
  App_methods_onRun__I_exceptions, // the declared exceptions
  App_MetainfoWrapper::App_method_onRun__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _App_methods[] = 
{
  &App_method_App__LRApp_,
  &App_method_GetClass__L_acdk_lang_RClass_,
  &App_method_createGui_INLRString_INLRStringArray__I,
  &App_method_createGui_INLRApp_INLRStringArray__I,
  &App_method_handleException_INLRThrowable__V,
  &App_method_handleUnknownException__V,
  &App_method_main2_LRStringArray__I,
  &App_method_onExit__I,
  &App_method_onInit__Z,
  &App_method_onRun__I,
  0
};


struct App_MetaInfoInitializer
{  App_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = App::clazzInfo();
    ci->fields =  _App_fields;
    ci->methods =  _App_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
App_MetaInfoInitializer App_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ArtProvider_create_array(int length)
{
  return new ObjectArrayImpl<RArtProvider>(length);
}

//static
::acdk::lang::RObject
ArtProvider_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArtProvider_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getBitmap((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RSize)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getBitmap_INLRString__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getBitmap((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getBitmap_INLRString_INLRString__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getBitmap((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getIcon_INLRString_INLRString_INLRSize__LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getIcon((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RSize)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getIcon_INLRString__LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getIcon((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_getIcon_INLRString_INLRString__LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArtProvider::getIcon((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_popProvider__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArtProvider::popProvider();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_pushProvider_INLRArtProvider__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArtProvider::pushProvider((RArtProvider)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArtProvider_method_removeProvider_INLRArtProvider__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArtProvider::removeProvider((RArtProvider)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ArtProvider_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArtProvider_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_client = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "client", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__args[] = 
{
  &ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_id,
  &ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_client,
  &ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getBitmap_INLRString_INLRString_INLRSize__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_3_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getBitmap_INLRString_INLRString_INLRSize__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString__LRBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getBitmap_INLRString__LRBitmap__args[] = 
{
  &ArtProvider_methods_getBitmap_INLRString__LRBitmap__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getBitmap_INLRString__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getBitmap_INLRString__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_4_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getBitmap_INLRString__LRBitmap__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getBitmap_INLRString__LRBitmap__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getBitmap_INLRString__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__arg_client = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "client", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__args[] = 
{
  &ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__arg_id,
  &ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__arg_client,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getBitmap_INLRString_INLRString__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_5_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getBitmap_INLRString_INLRString__LRBitmap__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getBitmap_INLRString_INLRString__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_client = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "client", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__args[] = 
{
  &ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_id,
  &ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_client,
  &ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getIcon_INLRString_INLRString_INLRSize__LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo(), // return type
  "_6_getIcon", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getIcon_INLRString_INLRString_INLRSize__LRIcon__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getIcon_INLRString_INLRString_INLRSize__LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString__LRIcon__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getIcon_INLRString__LRIcon__args[] = 
{
  &ArtProvider_methods_getIcon_INLRString__LRIcon__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getIcon_INLRString__LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getIcon_INLRString__LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo(), // return type
  "_7_getIcon", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getIcon_INLRString__LRIcon__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getIcon_INLRString__LRIcon__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getIcon_INLRString__LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__arg_client = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "client", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__args[] = 
{
  &ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__arg_id,
  &ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__arg_client,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_getIcon_INLRString_INLRString__LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo(), // return type
  "_8_getIcon", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__args, // the arguments
  0, //arguments count
  ArtProvider_methods_getIcon_INLRString_INLRString__LRIcon__exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_getIcon_INLRString_INLRString__LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_popProvider__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_popProvider__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_popProvider__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popProvider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_popProvider", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_popProvider__Z_args, // the arguments
  0, //arguments count
  ArtProvider_methods_popProvider__Z_exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_popProvider__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_pushProvider_INLRArtProvider__V_arg_provider = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "provider", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArtProvider::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_pushProvider_INLRArtProvider__V_args[] = 
{
  &ArtProvider_methods_pushProvider_INLRArtProvider__V_arg_provider,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_pushProvider_INLRArtProvider__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_pushProvider_INLRArtProvider__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushProvider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_pushProvider", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_pushProvider_INLRArtProvider__V_args, // the arguments
  0, //arguments count
  ArtProvider_methods_pushProvider_INLRArtProvider__V_exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_pushProvider_INLRArtProvider__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArtProvider_methods_removeProvider_INLRArtProvider__Z_arg_provider = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "provider", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArtProvider::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArtProvider_methods_removeProvider_INLRArtProvider__Z_args[] = 
{
  &ArtProvider_methods_removeProvider_INLRArtProvider__Z_arg_provider,
  0
};

::acdk::lang::dmi::ClazzInfo* ArtProvider_methods_removeProvider_INLRArtProvider__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArtProvider_method_removeProvider_INLRArtProvider__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeProvider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_removeProvider", // alternative name of method
  -1, // altlabelHashCode
  ArtProvider_methods_removeProvider_INLRArtProvider__Z_args, // the arguments
  0, //arguments count
  ArtProvider_methods_removeProvider_INLRArtProvider__Z_exceptions, // the declared exceptions
  ArtProvider_MetainfoWrapper::ArtProvider_method_removeProvider_INLRArtProvider__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArtProvider_methods[] = 
{
  &ArtProvider_method_GetClass__L_acdk_lang_RClass_,
  &ArtProvider_method_getBitmap_INLRString_INLRString_INLRSize__LRBitmap_,
  &ArtProvider_method_getBitmap_INLRString__LRBitmap_,
  &ArtProvider_method_getBitmap_INLRString_INLRString__LRBitmap_,
  &ArtProvider_method_getIcon_INLRString_INLRString_INLRSize__LRIcon_,
  &ArtProvider_method_getIcon_INLRString__LRIcon_,
  &ArtProvider_method_getIcon_INLRString_INLRString__LRIcon_,
  &ArtProvider_method_popProvider__Z,
  &ArtProvider_method_pushProvider_INLRArtProvider__V,
  &ArtProvider_method_removeProvider_INLRArtProvider__Z,
  0
};


struct ArtProvider_MetaInfoInitializer
{  ArtProvider_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArtProvider::clazzInfo();
    ci->fields =  _ArtProvider_fields;
    ci->methods =  _ArtProvider_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArtProvider_MetaInfoInitializer ArtProvider_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Bitmap_create_array(int length)
{
  return new ObjectArrayImpl<RBitmap>(length);
}

//static
::acdk::lang::RObject
Bitmap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Bitmap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_Bitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_Bitmap_INLRString_I_LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bitmap((RString)args[0].getObjectVar(), (BitmapType)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_Bitmap_INLRIcon__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bitmap((RIcon)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_Bitmap_III_LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bitmap(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_Bitmap_II_LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bitmap(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Bitmap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_getNullBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Bitmap::getNullBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bitmap_method_nullBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Bitmap::nullBitmap();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Bitmap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_Bitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_Bitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_Bitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Bitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bitmap::clazzInfo(), // return type
  "_0_Bitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_Bitmap__LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_Bitmap__LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_Bitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_INLRString_I_LRBitmap__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_INLRString_I_LRBitmap__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_Bitmap_INLRString_I_LRBitmap__args[] = 
{
  &Bitmap_methods_Bitmap_INLRString_I_LRBitmap__arg_name,
  &Bitmap_methods_Bitmap_INLRString_I_LRBitmap__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_Bitmap_INLRString_I_LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_Bitmap_INLRString_I_LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Bitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bitmap::clazzInfo(), // return type
  "_1_Bitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_Bitmap_INLRString_I_LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_Bitmap_INLRString_I_LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_Bitmap_INLRString_I_LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_INLRIcon__LRBitmap__arg_icon = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "icon", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_Bitmap_INLRIcon__LRBitmap__args[] = 
{
  &Bitmap_methods_Bitmap_INLRIcon__LRBitmap__arg_icon,
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_Bitmap_INLRIcon__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_Bitmap_INLRIcon__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Bitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bitmap::clazzInfo(), // return type
  "_2_Bitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_Bitmap_INLRIcon__LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_Bitmap_INLRIcon__LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_Bitmap_INLRIcon__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_III_LRBitmap__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_III_LRBitmap__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_III_LRBitmap__arg_depth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "depth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_Bitmap_III_LRBitmap__args[] = 
{
  &Bitmap_methods_Bitmap_III_LRBitmap__arg_width,
  &Bitmap_methods_Bitmap_III_LRBitmap__arg_height,
  &Bitmap_methods_Bitmap_III_LRBitmap__arg_depth,
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_Bitmap_III_LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_Bitmap_III_LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Bitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bitmap::clazzInfo(), // return type
  "_3_Bitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_Bitmap_III_LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_Bitmap_III_LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_Bitmap_III_LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_II_LRBitmap__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Bitmap_methods_Bitmap_II_LRBitmap__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_Bitmap_II_LRBitmap__args[] = 
{
  &Bitmap_methods_Bitmap_II_LRBitmap__arg_width,
  &Bitmap_methods_Bitmap_II_LRBitmap__arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_Bitmap_II_LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_Bitmap_II_LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Bitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bitmap::clazzInfo(), // return type
  "_4_Bitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_Bitmap_II_LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_Bitmap_II_LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_Bitmap_II_LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Bitmap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_getNullBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_getNullBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_getNullBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_6_getNullBitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_getNullBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_getNullBitmap__LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_getNullBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bitmap_methods_nullBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bitmap_methods_nullBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bitmap_method_nullBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_5_nullBitmap", // alternative name of method
  -1, // altlabelHashCode
  Bitmap_methods_nullBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  Bitmap_methods_nullBitmap__LRBitmap__exceptions, // the declared exceptions
  Bitmap_MetainfoWrapper::Bitmap_method_nullBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Bitmap_methods[] = 
{
  &Bitmap_method_Bitmap__LRBitmap_,
  &Bitmap_method_Bitmap_INLRString_I_LRBitmap_,
  &Bitmap_method_Bitmap_INLRIcon__LRBitmap_,
  &Bitmap_method_Bitmap_III_LRBitmap_,
  &Bitmap_method_Bitmap_II_LRBitmap_,
  &Bitmap_method_GetClass__L_acdk_lang_RClass_,
  &Bitmap_method_getNullBitmap__LRBitmap_,
  &Bitmap_method_nullBitmap__LRBitmap_,
  0
};


struct Bitmap_MetaInfoInitializer
{  Bitmap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Bitmap::clazzInfo();
    ci->fields =  _Bitmap_fields;
    ci->methods =  _Bitmap_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Bitmap_MetaInfoInitializer Bitmap_MetaInfoInitializer_staticinstance__;


struct Bitmap_clazzInfo_ClazzAttributesResInitializer1
{
  Bitmap_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Bitmap_methods_Bitmap_INLRString_I_LRBitmap__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)BitmapTypeMetaInf::GetEnumInfo()));
  }
};

Bitmap_clazzInfo_ClazzAttributesResInitializer1 Bitmap_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ImageList_create_array(int length)
{
  return new ObjectArrayImpl<RImageList>(length);
}

//static
::acdk::lang::RObject
ImageList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ImageList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ImageList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_ImageList__LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ImageList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_ImageList_IIZI_LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ImageList(args[0].getIntVar(), args[1].getIntVar(), args[2].getBoolVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_ImageList_II_LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ImageList(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_ImageList_IIZ_LRImageList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ImageList(args[0].getIntVar(), args[1].getIntVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_add_INLRBitmap__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::add((RBitmap)args[0].getObjectVar());
    else
      ret = This->add((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_add_INLRBitmap_INLRBitmap__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::add((RBitmap)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar());
    else
      ret = This->add((RBitmap)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_add_INLRBitmap_INLRColour__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::add((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
      ret = This->add((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_getImageCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::getImageCount();
    else
      ret = This->getImageCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_getSize_IOUTIOUTI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::getSize(args[0].getIntVar(), args[1].getIntRef(), args[2].getIntRef());
    else
      ret = This->getSize(args[0].getIntVar(), args[1].getIntRef(), args[2].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_remove_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::remove(args[0].getIntVar());
    else
      ret = This->remove(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_removeAll__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::removeAll();
    else
      ret = This->removeAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ImageList_method_replace_IINLRBitmap__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ImageList* This = dmi_cast<ImageList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ImageList::replace(args[0].getIntVar(), (RBitmap)args[1].getObjectVar());
    else
      ret = This->replace(args[0].getIntVar(), (RBitmap)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ImageList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ImageList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_ImageList__LRImageList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_ImageList__LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_ImageList__LRImageList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ImageList::clazzInfo(), // return type
  "_0_ImageList", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_ImageList__LRImageList__args, // the arguments
  0, //arguments count
  ImageList_methods_ImageList__LRImageList__exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_ImageList__LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZI_LRImageList__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZI_LRImageList__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZI_LRImageList__arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZI_LRImageList__arg_initialCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_ImageList_IIZI_LRImageList__args[] = 
{
  &ImageList_methods_ImageList_IIZI_LRImageList__arg_width,
  &ImageList_methods_ImageList_IIZI_LRImageList__arg_height,
  &ImageList_methods_ImageList_IIZI_LRImageList__arg_mask,
  &ImageList_methods_ImageList_IIZI_LRImageList__arg_initialCount,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_ImageList_IIZI_LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_ImageList_IIZI_LRImageList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ImageList::clazzInfo(), // return type
  "_1_ImageList", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_ImageList_IIZI_LRImageList__args, // the arguments
  0, //arguments count
  ImageList_methods_ImageList_IIZI_LRImageList__exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_ImageList_IIZI_LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_II_LRImageList__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_II_LRImageList__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_ImageList_II_LRImageList__args[] = 
{
  &ImageList_methods_ImageList_II_LRImageList__arg_width,
  &ImageList_methods_ImageList_II_LRImageList__arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_ImageList_II_LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_ImageList_II_LRImageList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ImageList::clazzInfo(), // return type
  "_2_ImageList", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_ImageList_II_LRImageList__args, // the arguments
  0, //arguments count
  ImageList_methods_ImageList_II_LRImageList__exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_ImageList_II_LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZ_LRImageList__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZ_LRImageList__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_ImageList_IIZ_LRImageList__arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_ImageList_IIZ_LRImageList__args[] = 
{
  &ImageList_methods_ImageList_IIZ_LRImageList__arg_width,
  &ImageList_methods_ImageList_IIZ_LRImageList__arg_height,
  &ImageList_methods_ImageList_IIZ_LRImageList__arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_ImageList_IIZ_LRImageList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_ImageList_IIZ_LRImageList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ImageList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ImageList::clazzInfo(), // return type
  "_3_ImageList", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_ImageList_IIZ_LRImageList__args, // the arguments
  0, //arguments count
  ImageList_methods_ImageList_IIZ_LRImageList__exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_ImageList_IIZ_LRImageList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_add_INLRBitmap__I_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_add_INLRBitmap__I_args[] = 
{
  &ImageList_methods_add_INLRBitmap__I_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_add_INLRBitmap__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_add_INLRBitmap__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_add", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_add_INLRBitmap__I_args, // the arguments
  0, //arguments count
  ImageList_methods_add_INLRBitmap__I_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_add_INLRBitmap__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_add_INLRBitmap_INLRBitmap__I_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_add_INLRBitmap_INLRBitmap__I_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_add_INLRBitmap_INLRBitmap__I_args[] = 
{
  &ImageList_methods_add_INLRBitmap_INLRBitmap__I_arg_bitmap,
  &ImageList_methods_add_INLRBitmap_INLRBitmap__I_arg_mask,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_add_INLRBitmap_INLRBitmap__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_add_INLRBitmap_INLRBitmap__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_add", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_add_INLRBitmap_INLRBitmap__I_args, // the arguments
  0, //arguments count
  ImageList_methods_add_INLRBitmap_INLRBitmap__I_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_add_INLRBitmap_INLRBitmap__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_add_INLRBitmap_INLRColour__I_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_add_INLRBitmap_INLRColour__I_arg_maskColour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maskColour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_add_INLRBitmap_INLRColour__I_args[] = 
{
  &ImageList_methods_add_INLRBitmap_INLRColour__I_arg_bitmap,
  &ImageList_methods_add_INLRBitmap_INLRColour__I_arg_maskColour,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_add_INLRBitmap_INLRColour__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_add_INLRBitmap_INLRColour__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_add", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_add_INLRBitmap_INLRColour__I_args, // the arguments
  0, //arguments count
  ImageList_methods_add_INLRBitmap_INLRColour__I_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_add_INLRBitmap_INLRColour__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_getImageCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_getImageCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_getImageCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImageCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getImageCount", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_getImageCount__I_args, // the arguments
  0, //arguments count
  ImageList_methods_getImageCount__I_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_getImageCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_getSize_IOUTIOUTI_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_getSize_IOUTIOUTI_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_getSize_IOUTIOUTI_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_getSize_IOUTIOUTI_Z_args[] = 
{
  &ImageList_methods_getSize_IOUTIOUTI_Z_arg_index,
  &ImageList_methods_getSize_IOUTIOUTI_Z_arg_width,
  &ImageList_methods_getSize_IOUTIOUTI_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_getSize_IOUTIOUTI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_getSize_IOUTIOUTI_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getSize", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_getSize_IOUTIOUTI_Z_args, // the arguments
  0, //arguments count
  ImageList_methods_getSize_IOUTIOUTI_Z_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_getSize_IOUTIOUTI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_remove_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_remove_I_Z_args[] = 
{
  &ImageList_methods_remove_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_remove_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_remove_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_remove", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_remove_I_Z_args, // the arguments
  0, //arguments count
  ImageList_methods_remove_I_Z_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_remove_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_removeAll__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_removeAll__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_removeAll__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_removeAll", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_removeAll__Z_args, // the arguments
  0, //arguments count
  ImageList_methods_removeAll__Z_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_removeAll__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_replace_IINLRBitmap__Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ImageList_methods_replace_IINLRBitmap__Z_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ImageList_methods_replace_IINLRBitmap__Z_args[] = 
{
  &ImageList_methods_replace_IINLRBitmap__Z_arg_index,
  &ImageList_methods_replace_IINLRBitmap__Z_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ImageList_methods_replace_IINLRBitmap__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ImageList_method_replace_IINLRBitmap__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_replace", // alternative name of method
  -1, // altlabelHashCode
  ImageList_methods_replace_IINLRBitmap__Z_args, // the arguments
  0, //arguments count
  ImageList_methods_replace_IINLRBitmap__Z_exceptions, // the declared exceptions
  ImageList_MetainfoWrapper::ImageList_method_replace_IINLRBitmap__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ImageList_methods[] = 
{
  &ImageList_method_GetClass__L_acdk_lang_RClass_,
  &ImageList_method_ImageList__LRImageList_,
  &ImageList_method_ImageList_IIZI_LRImageList_,
  &ImageList_method_ImageList_II_LRImageList_,
  &ImageList_method_ImageList_IIZ_LRImageList_,
  &ImageList_method_add_INLRBitmap__I,
  &ImageList_method_add_INLRBitmap_INLRBitmap__I,
  &ImageList_method_add_INLRBitmap_INLRColour__I,
  &ImageList_method_getImageCount__I,
  &ImageList_method_getSize_IOUTIOUTI_Z,
  &ImageList_method_remove_I_Z,
  &ImageList_method_removeAll__Z,
  &ImageList_method_replace_IINLRBitmap__Z,
  0
};


struct ImageList_MetaInfoInitializer
{  ImageList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ImageList::clazzInfo();
    ci->fields =  _ImageList_fields;
    ci->methods =  _ImageList_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ImageList_MetaInfoInitializer ImageList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
BitmapButton_create_array(int length)
{
  return new ObjectArrayImpl<RBitmapButton>(length);
}

//static
::acdk::lang::RObject
BitmapButton_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BitmapButton_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BitmapButton::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_getBitmapDisabled__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitmapButton::getBitmapDisabled();
    else
        ret = (::acdk::lang::RObject)This->getBitmapDisabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_getBitmapFocus__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitmapButton::getBitmapFocus();
    else
        ret = (::acdk::lang::RObject)This->getBitmapFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_getBitmapLabel__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitmapButton::getBitmapLabel();
    else
        ret = (::acdk::lang::RObject)This->getBitmapLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_getBitmapSelected__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitmapButton::getBitmapSelected();
    else
        ret = (::acdk::lang::RObject)This->getBitmapSelected();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_setBitmapDisabled_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitmapButton::setBitmapDisabled((RBitmap)args[0].getObjectVar());
    else
        This->setBitmapDisabled((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_setBitmapFocus_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitmapButton::setBitmapFocus((RBitmap)args[0].getObjectVar());
    else
        This->setBitmapFocus((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_setBitmapLabel_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitmapButton::setBitmapLabel((RBitmap)args[0].getObjectVar());
    else
        This->setBitmapLabel((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapButton_method_setBitmapSelected_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapButton* This = dmi_cast<BitmapButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitmapButton::setBitmapSelected((RBitmap)args[0].getObjectVar());
    else
        This->setBitmapSelected((RBitmap)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BitmapButton_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_bitmap,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_pos,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_size,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_style,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_validator,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_0_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_1_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_bitmap,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_2_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_bitmap,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_pos,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_3_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_bitmap,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_pos,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_size,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_4_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__args[] = 
{
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_parent,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_id,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_bitmap,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_pos,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_size,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_style,
  &BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapButton::clazzInfo(), // return type
  "_5_BitmapButton", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__args, // the arguments
  0, //arguments count
  BitmapButton_methods_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BitmapButton_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_getBitmapDisabled__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_getBitmapDisabled__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_getBitmapDisabled__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmapDisabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_6_getBitmapDisabled", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_getBitmapDisabled__LRBitmap__args, // the arguments
  0, //arguments count
  BitmapButton_methods_getBitmapDisabled__LRBitmap__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_getBitmapDisabled__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_getBitmapFocus__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_getBitmapFocus__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_getBitmapFocus__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmapFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_8_getBitmapFocus", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_getBitmapFocus__LRBitmap__args, // the arguments
  0, //arguments count
  BitmapButton_methods_getBitmapFocus__LRBitmap__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_getBitmapFocus__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_getBitmapLabel__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_getBitmapLabel__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_getBitmapLabel__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmapLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_a_getBitmapLabel", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_getBitmapLabel__LRBitmap__args, // the arguments
  0, //arguments count
  BitmapButton_methods_getBitmapLabel__LRBitmap__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_getBitmapLabel__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_getBitmapSelected__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_getBitmapSelected__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_getBitmapSelected__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmapSelected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_c_getBitmapSelected", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_getBitmapSelected__LRBitmap__args, // the arguments
  0, //arguments count
  BitmapButton_methods_getBitmapSelected__LRBitmap__exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_getBitmapSelected__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_args[] = 
{
  &BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_setBitmapDisabled_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmapDisabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setBitmapDisabled", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_args, // the arguments
  0, //arguments count
  BitmapButton_methods_setBitmapDisabled_INLRBitmap__V_exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_setBitmapDisabled_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_setBitmapFocus_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_setBitmapFocus_INLRBitmap__V_args[] = 
{
  &BitmapButton_methods_setBitmapFocus_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_setBitmapFocus_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_setBitmapFocus_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmapFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setBitmapFocus", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_setBitmapFocus_INLRBitmap__V_args, // the arguments
  0, //arguments count
  BitmapButton_methods_setBitmapFocus_INLRBitmap__V_exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_setBitmapFocus_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_setBitmapLabel_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_setBitmapLabel_INLRBitmap__V_args[] = 
{
  &BitmapButton_methods_setBitmapLabel_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_setBitmapLabel_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_setBitmapLabel_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmapLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setBitmapLabel", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_setBitmapLabel_INLRBitmap__V_args, // the arguments
  0, //arguments count
  BitmapButton_methods_setBitmapLabel_INLRBitmap__V_exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_setBitmapLabel_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapButton_methods_setBitmapSelected_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapButton_methods_setBitmapSelected_INLRBitmap__V_args[] = 
{
  &BitmapButton_methods_setBitmapSelected_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapButton_methods_setBitmapSelected_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapButton_method_setBitmapSelected_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmapSelected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setBitmapSelected", // alternative name of method
  -1, // altlabelHashCode
  BitmapButton_methods_setBitmapSelected_INLRBitmap__V_args, // the arguments
  0, //arguments count
  BitmapButton_methods_setBitmapSelected_INLRBitmap__V_exceptions, // the declared exceptions
  BitmapButton_MetainfoWrapper::BitmapButton_method_setBitmapSelected_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BitmapButton_methods[] = 
{
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator_INLRString__LRBitmapButton_,
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap__LRBitmapButton_,
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint__LRBitmapButton_,
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRBitmapButton_,
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRBitmapButton_,
  &BitmapButton_method_BitmapButton_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRValidator__LRBitmapButton_,
  &BitmapButton_method_GetClass__L_acdk_lang_RClass_,
  &BitmapButton_method_getBitmapDisabled__LRBitmap_,
  &BitmapButton_method_getBitmapFocus__LRBitmap_,
  &BitmapButton_method_getBitmapLabel__LRBitmap_,
  &BitmapButton_method_getBitmapSelected__LRBitmap_,
  &BitmapButton_method_setBitmapDisabled_INLRBitmap__V,
  &BitmapButton_method_setBitmapFocus_INLRBitmap__V,
  &BitmapButton_method_setBitmapLabel_INLRBitmap__V,
  &BitmapButton_method_setBitmapSelected_INLRBitmap__V,
  0
};


struct BitmapButton_MetaInfoInitializer
{  BitmapButton_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BitmapButton::clazzInfo();
    ci->fields =  _BitmapButton_fields;
    ci->methods =  _BitmapButton_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BitmapButton_MetaInfoInitializer BitmapButton_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
BitmapDataObject_create_array(int length)
{
  return new ObjectArrayImpl<RBitmapDataObject>(length);
}

//static
::acdk::lang::RObject
BitmapDataObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BitmapDataObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapDataObject_method_BitmapDataObject_INLRBitmap__LRBitmapDataObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapDataObject((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapDataObject_method_BitmapDataObject__LRBitmapDataObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitmapDataObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapDataObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BitmapDataObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapDataObject_method_getBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapDataObject* This = dmi_cast<BitmapDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitmapDataObject::getBitmap();
    else
        ret = (::acdk::lang::RObject)This->getBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitmapDataObject_method_setBitmap_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitmapDataObject* This = dmi_cast<BitmapDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitmapDataObject::setBitmap((RBitmap)args[0].getObjectVar());
    else
        This->setBitmap((RBitmap)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BitmapDataObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__args[] = 
{
  &BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapDataObject_method_BitmapDataObject_INLRBitmap__LRBitmapDataObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapDataObject::clazzInfo(), // return type
  "_0_BitmapDataObject", // alternative name of method
  -1, // altlabelHashCode
  BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__args, // the arguments
  0, //arguments count
  BitmapDataObject_methods_BitmapDataObject_INLRBitmap__LRBitmapDataObject__exceptions, // the declared exceptions
  BitmapDataObject_MetainfoWrapper::BitmapDataObject_method_BitmapDataObject_INLRBitmap__LRBitmapDataObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapDataObject_methods_BitmapDataObject__LRBitmapDataObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapDataObject_methods_BitmapDataObject__LRBitmapDataObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapDataObject_method_BitmapDataObject__LRBitmapDataObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BitmapDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitmapDataObject::clazzInfo(), // return type
  "_1_BitmapDataObject", // alternative name of method
  -1, // altlabelHashCode
  BitmapDataObject_methods_BitmapDataObject__LRBitmapDataObject__args, // the arguments
  0, //arguments count
  BitmapDataObject_methods_BitmapDataObject__LRBitmapDataObject__exceptions, // the declared exceptions
  BitmapDataObject_MetainfoWrapper::BitmapDataObject_method_BitmapDataObject__LRBitmapDataObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapDataObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapDataObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BitmapDataObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BitmapDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BitmapDataObject_MetainfoWrapper::BitmapDataObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapDataObject_methods_getBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapDataObject_methods_getBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapDataObject_method_getBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_2_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  BitmapDataObject_methods_getBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  BitmapDataObject_methods_getBitmap__LRBitmap__exceptions, // the declared exceptions
  BitmapDataObject_MetainfoWrapper::BitmapDataObject_method_getBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitmapDataObject_methods_setBitmap_INLRBitmap__V_arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitmapDataObject_methods_setBitmap_INLRBitmap__V_args[] = 
{
  &BitmapDataObject_methods_setBitmap_INLRBitmap__V_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* BitmapDataObject_methods_setBitmap_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitmapDataObject_method_setBitmap_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setBitmap", // alternative name of method
  -1, // altlabelHashCode
  BitmapDataObject_methods_setBitmap_INLRBitmap__V_args, // the arguments
  0, //arguments count
  BitmapDataObject_methods_setBitmap_INLRBitmap__V_exceptions, // the declared exceptions
  BitmapDataObject_MetainfoWrapper::BitmapDataObject_method_setBitmap_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BitmapDataObject_methods[] = 
{
  &BitmapDataObject_method_BitmapDataObject_INLRBitmap__LRBitmapDataObject_,
  &BitmapDataObject_method_BitmapDataObject__LRBitmapDataObject_,
  &BitmapDataObject_method_GetClass__L_acdk_lang_RClass_,
  &BitmapDataObject_method_getBitmap__LRBitmap_,
  &BitmapDataObject_method_setBitmap_INLRBitmap__V,
  0
};


struct BitmapDataObject_MetaInfoInitializer
{  BitmapDataObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BitmapDataObject::clazzInfo();
    ci->fields =  _BitmapDataObject_fields;
    ci->methods =  _BitmapDataObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BitmapDataObject_MetaInfoInitializer BitmapDataObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
BoxSizer_create_array(int length)
{
  return new ObjectArrayImpl<RBoxSizer>(length);
}

//static
::acdk::lang::RObject
BoxSizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BoxSizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_BoxSizer_I_LRBoxSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BoxSizer(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BoxSizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_calcMin__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BoxSizer* This = dmi_cast<BoxSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BoxSizer::calcMin();
    else
        ret = (::acdk::lang::RObject)This->calcMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_getOrientation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BoxSizer* This = dmi_cast<BoxSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BoxSizer::getOrientation();
    else
      ret = This->getOrientation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_recalcSizes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BoxSizer* This = dmi_cast<BoxSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BoxSizer::recalcSizes();
    else
        This->recalcSizes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BoxSizer_method_setOrientation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BoxSizer* This = dmi_cast<BoxSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BoxSizer::setOrientation(args[0].getIntVar());
    else
        This->setOrientation(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BoxSizer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BoxSizer_methods_BoxSizer_I_LRBoxSizer__arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_BoxSizer_I_LRBoxSizer__args[] = 
{
  &BoxSizer_methods_BoxSizer_I_LRBoxSizer__arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_BoxSizer_I_LRBoxSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_BoxSizer_I_LRBoxSizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BoxSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BoxSizer::clazzInfo(), // return type
  "_0_BoxSizer", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_BoxSizer_I_LRBoxSizer__args, // the arguments
  0, //arguments count
  BoxSizer_methods_BoxSizer_I_LRBoxSizer__exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_BoxSizer_I_LRBoxSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BoxSizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_calcMin__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_calcMin__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_calcMin__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_2_calcMin", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_calcMin__LRSize__args, // the arguments
  0, //arguments count
  BoxSizer_methods_calcMin__LRSize__exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_calcMin__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_getOrientation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_getOrientation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_getOrientation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getOrientation", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_getOrientation__I_args, // the arguments
  0, //arguments count
  BoxSizer_methods_getOrientation__I_exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_getOrientation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_recalcSizes__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_recalcSizes__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_recalcSizes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcSizes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_recalcSizes", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_recalcSizes__V_args, // the arguments
  0, //arguments count
  BoxSizer_methods_recalcSizes__V_exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_recalcSizes__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BoxSizer_methods_setOrientation_I_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BoxSizer_methods_setOrientation_I_V_args[] = 
{
  &BoxSizer_methods_setOrientation_I_V_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* BoxSizer_methods_setOrientation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BoxSizer_method_setOrientation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setOrientation", // alternative name of method
  -1, // altlabelHashCode
  BoxSizer_methods_setOrientation_I_V_args, // the arguments
  0, //arguments count
  BoxSizer_methods_setOrientation_I_V_exceptions, // the declared exceptions
  BoxSizer_MetainfoWrapper::BoxSizer_method_setOrientation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BoxSizer_methods[] = 
{
  &BoxSizer_method_BoxSizer_I_LRBoxSizer_,
  &BoxSizer_method_GetClass__L_acdk_lang_RClass_,
  &BoxSizer_method_calcMin__LRSize_,
  &BoxSizer_method_getOrientation__I,
  &BoxSizer_method_recalcSizes__V,
  &BoxSizer_method_setOrientation_I_V,
  0
};


struct BoxSizer_MetaInfoInitializer
{  BoxSizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BoxSizer::clazzInfo();
    ci->fields =  _BoxSizer_fields;
    ci->methods =  _BoxSizer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BoxSizer_MetaInfoInitializer BoxSizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Button_create_array(int length)
{
  return new ObjectArrayImpl<RButton>(length);
}

//static
::acdk::lang::RObject
Button_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Button_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Button((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_Button_INLRWindow_IINLRString__LRButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Button((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_Button_INLRWindow_IINLRString_INLRPoint__LRButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Button((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Button((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Button((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Button::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Button* This = dmi_cast<Button>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Button::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_setDefault__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Button* This = dmi_cast<Button>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Button::setDefault();
    else
        This->setDefault();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Button_method_setLabel_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Button* This = dmi_cast<Button>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Button::setLabel((RString)args[0].getObjectVar());
    else
        This->setLabel((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Button_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__args[] = 
{
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_parent,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_id,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_label,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_pos,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_size,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_style,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Button::clazzInfo(), // return type
  "_0_Button", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__args, // the arguments
  0, //arguments count
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_Button_INLRWindow_IINLRString__LRButton__args[] = 
{
  &Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_parent,
  &Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_id,
  &Button_methods_Button_INLRWindow_IINLRString__LRButton__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_Button_INLRWindow_IINLRString__LRButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_Button_INLRWindow_IINLRString__LRButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Button::clazzInfo(), // return type
  "_1_Button", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_Button_INLRWindow_IINLRString__LRButton__args, // the arguments
  0, //arguments count
  Button_methods_Button_INLRWindow_IINLRString__LRButton__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_Button_INLRWindow_IINLRString__LRButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__args[] = 
{
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_parent,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_id,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_label,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_Button_INLRWindow_IINLRString_INLRPoint__LRButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Button::clazzInfo(), // return type
  "_2_Button", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__args, // the arguments
  0, //arguments count
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint__LRButton__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_Button_INLRWindow_IINLRString_INLRPoint__LRButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__args[] = 
{
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_parent,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_id,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_label,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_pos,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Button::clazzInfo(), // return type
  "_3_Button", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__args, // the arguments
  0, //arguments count
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__args[] = 
{
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_parent,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_id,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_label,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_pos,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_size,
  &Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Button", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Button::clazzInfo(), // return type
  "_4_Button", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__args, // the arguments
  0, //arguments count
  Button_methods_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Button_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getLabel", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  Button_methods_getLabel__LRString__exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_setDefault__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_setDefault__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_setDefault__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setDefault", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_setDefault__V_args, // the arguments
  0, //arguments count
  Button_methods_setDefault__V_exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_setDefault__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Button_methods_setLabel_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Button_methods_setLabel_INLRString__V_args[] = 
{
  &Button_methods_setLabel_INLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* Button_methods_setLabel_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Button_method_setLabel_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setLabel", // alternative name of method
  -1, // altlabelHashCode
  Button_methods_setLabel_INLRString__V_args, // the arguments
  0, //arguments count
  Button_methods_setLabel_INLRString__V_exceptions, // the declared exceptions
  Button_MetainfoWrapper::Button_method_setLabel_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Button_methods[] = 
{
  &Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRButton_,
  &Button_method_Button_INLRWindow_IINLRString__LRButton_,
  &Button_method_Button_INLRWindow_IINLRString_INLRPoint__LRButton_,
  &Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize__LRButton_,
  &Button_method_Button_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRButton_,
  &Button_method_GetClass__L_acdk_lang_RClass_,
  &Button_method_getLabel__LRString_,
  &Button_method_setDefault__V,
  &Button_method_setLabel_INLRString__V,
  0
};


struct Button_MetaInfoInitializer
{  Button_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Button::clazzInfo();
    ci->fields =  _Button_fields;
    ci->methods =  _Button_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Button_MetaInfoInitializer Button_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
CheckBox_create_array(int length)
{
  return new ObjectArrayImpl<RCheckBox>(length);
}

//static
::acdk::lang::RObject
CheckBox_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CheckBox_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString__LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CheckBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CheckBox::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CheckBox::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_getValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CheckBox* This = dmi_cast<CheckBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CheckBox::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_isChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CheckBox* This = dmi_cast<CheckBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CheckBox::isChecked();
    else
      ret = This->isChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_setLabel_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CheckBox* This = dmi_cast<CheckBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CheckBox::setLabel((RString)args[0].getObjectVar());
    else
        This->setLabel((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CheckBox_method_setValue_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CheckBox* This = dmi_cast<CheckBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CheckBox::setValue(args[0].getBoolVar());
    else
        This->setValue(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CheckBox_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString__LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_2_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString__LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString__LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_label,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_3_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_label,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_pos,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_size,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_style,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_validator,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_1_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_label,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_pos,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_4_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_label,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_pos,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_size,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_5_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__args[] = 
{
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_parent,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_id,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_label,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_pos,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_size,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_style,
  &CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CheckBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CheckBox::clazzInfo(), // return type
  "_6_CheckBox", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__args, // the arguments
  0, //arguments count
  CheckBox_methods_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CheckBox_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  CheckBox_methods_create_instance__LRObject__exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_getValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_getValue__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_getValue__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getValue", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_getValue__Z_args, // the arguments
  0, //arguments count
  CheckBox_methods_getValue__Z_exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_getValue__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_isChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_isChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_isChecked__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isChecked", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_isChecked__Z_args, // the arguments
  0, //arguments count
  CheckBox_methods_isChecked__Z_exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_isChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_setLabel_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_setLabel_INLRString__V_args[] = 
{
  &CheckBox_methods_setLabel_INLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_setLabel_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_setLabel_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setLabel", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_setLabel_INLRString__V_args, // the arguments
  0, //arguments count
  CheckBox_methods_setLabel_INLRString__V_exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_setLabel_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CheckBox_methods_setValue_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CheckBox_methods_setValue_Z_V_args[] = 
{
  &CheckBox_methods_setValue_Z_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* CheckBox_methods_setValue_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CheckBox_method_setValue_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setValue", // alternative name of method
  -1, // altlabelHashCode
  CheckBox_methods_setValue_Z_V_args, // the arguments
  0, //arguments count
  CheckBox_methods_setValue_Z_V_exceptions, // the declared exceptions
  CheckBox_MetainfoWrapper::CheckBox_method_setValue_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CheckBox_methods[] = 
{
  &CheckBox_method_CheckBox_INLRWindow_IINLRString__LRCheckBox_,
  &CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint__LRCheckBox_,
  &CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRCheckBox_,
  &CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRCheckBox_,
  &CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRCheckBox_,
  &CheckBox_method_CheckBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRCheckBox_,
  &CheckBox_method_GetClass__L_acdk_lang_RClass_,
  &CheckBox_method_create_instance__LRObject_,
  &CheckBox_method_getValue__Z,
  &CheckBox_method_isChecked__Z,
  &CheckBox_method_setLabel_INLRString__V,
  &CheckBox_method_setValue_Z_V,
  0
};


struct CheckBox_MetaInfoInitializer
{  CheckBox_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CheckBox::clazzInfo();
    ci->fields =  _CheckBox_fields;
    ci->methods =  _CheckBox_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CheckBox_MetaInfoInitializer CheckBox_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Choice_create_array(int length)
{
  return new ObjectArrayImpl<RChoice>(length);
}

//static
::acdk::lang::RObject
Choice_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Choice_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RStringArray)args[5].getObjectVar(), (RValidator)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_I_LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint__LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RStringArray)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Choice((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RStringArray)args[5].getObjectVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Choice::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_append_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::append((RString)args[0].getObjectVar());
    else
      ret = This->append((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_deleteItem_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::deleteItem(args[0].getIntVar());
    else
        This->deleteItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_findString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::findString((RString)args[0].getObjectVar());
    else
      ret = This->findString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_getColumns__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::getColumns();
    else
      ret = This->getColumns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_getCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::getCount();
    else
      ret = This->getCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Choice::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_getStringSelection__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Choice::getStringSelection();
    else
        ret = (::acdk::lang::RObject)This->getStringSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_select_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::select(args[0].getIntVar());
    else
        This->select(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_setColumns_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::setColumns(args[0].getIntVar());
    else
        This->setColumns(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_setColumns__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::setColumns();
    else
        This->setColumns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_setSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::setSelection(args[0].getIntVar());
    else
        This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Choice::setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Choice_method_setStringSelection_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Choice* This = dmi_cast<Choice>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Choice::setStringSelection((RString)args[0].getObjectVar());
    else
      ret = This->setStringSelection((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Choice_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_pos,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_size,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_style,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_choices,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_validator,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_0_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_I_LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_I_LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_I_LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_I_LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_I_LRChoice__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_I_LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_I_LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_1_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_I_LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_I_LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_I_LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint__LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_2_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint__LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint__LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_pos,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_3_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_pos,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_size,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_4_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_pos,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_size,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_style,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_5_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__args[] = 
{
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_parent,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_id,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_pos,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_size,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_style,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_choices,
  &Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Choice", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Choice::clazzInfo(), // return type
  "_6_Choice", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__args, // the arguments
  0, //arguments count
  Choice_methods_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Choice_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_append_INLRString__I_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_append_INLRString__I_args[] = 
{
  &Choice_methods_append_INLRString__I_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_append_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_append_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_append", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_append_INLRString__I_args, // the arguments
  0, //arguments count
  Choice_methods_append_INLRString__I_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_append_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_clear", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_clear__V_args, // the arguments
  0, //arguments count
  Choice_methods_clear__V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_deleteItem_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_deleteItem_I_V_args[] = 
{
  &Choice_methods_deleteItem_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_deleteItem_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_deleteItem_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_deleteItem_I_V_args, // the arguments
  0, //arguments count
  Choice_methods_deleteItem_I_V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_deleteItem_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_findString_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_findString_INLRString__I_args[] = 
{
  &Choice_methods_findString_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_findString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_findString_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_findString", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_findString_INLRString__I_args, // the arguments
  0, //arguments count
  Choice_methods_findString_INLRString__I_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_findString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_getColumns__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_getColumns__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_getColumns__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getColumns", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_getColumns__I_args, // the arguments
  0, //arguments count
  Choice_methods_getColumns__I_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_getColumns__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_getCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_getCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_getCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getCount", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_getCount__I_args, // the arguments
  0, //arguments count
  Choice_methods_getCount__I_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_getCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getSelection", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_getSelection__I_args, // the arguments
  0, //arguments count
  Choice_methods_getSelection__I_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_getString_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_getString_I_LRString__args[] = 
{
  &Choice_methods_getString_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_getString", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  Choice_methods_getString_I_LRString__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_getStringSelection__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_getStringSelection__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_getStringSelection__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getStringSelection", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_getStringSelection__LRString__args, // the arguments
  0, //arguments count
  Choice_methods_getStringSelection__LRString__exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_getStringSelection__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_select_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_select_I_V_args[] = 
{
  &Choice_methods_select_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_select_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_select_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "select", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_select", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_select_I_V_args, // the arguments
  0, //arguments count
  Choice_methods_select_I_V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_select_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_setColumns_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_setColumns_I_V_args[] = 
{
  &Choice_methods_setColumns_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_setColumns_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_setColumns_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setColumns", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_setColumns_I_V_args, // the arguments
  0, //arguments count
  Choice_methods_setColumns_I_V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_setColumns_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_setColumns__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_setColumns__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_setColumns__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setColumns", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_setColumns__V_args, // the arguments
  0, //arguments count
  Choice_methods_setColumns__V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_setColumns__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_setSelection_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_setSelection_I_V_args[] = 
{
  &Choice_methods_setSelection_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_setSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_setSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setSelection", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_setSelection_I_V_args, // the arguments
  0, //arguments count
  Choice_methods_setSelection_I_V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_setSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_setString_IINLRString__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_setString_IINLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_setString_IINLRString__V_args[] = 
{
  &Choice_methods_setString_IINLRString__V_arg_n,
  &Choice_methods_setString_IINLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setString", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  Choice_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Choice_methods_setStringSelection_INLRString__Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Choice_methods_setStringSelection_INLRString__Z_args[] = 
{
  &Choice_methods_setStringSelection_INLRString__Z_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Choice_methods_setStringSelection_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Choice_method_setStringSelection_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_setStringSelection", // alternative name of method
  -1, // altlabelHashCode
  Choice_methods_setStringSelection_INLRString__Z_args, // the arguments
  0, //arguments count
  Choice_methods_setStringSelection_INLRString__Z_exceptions, // the declared exceptions
  Choice_MetainfoWrapper::Choice_method_setStringSelection_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Choice_methods[] = 
{
  &Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRChoice_,
  &Choice_method_Choice_INLRWindow_I_LRChoice_,
  &Choice_method_Choice_INLRWindow_IINLRPoint__LRChoice_,
  &Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize__LRChoice_,
  &Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_I_LRChoice_,
  &Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray__LRChoice_,
  &Choice_method_Choice_INLRWindow_IINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRChoice_,
  &Choice_method_GetClass__L_acdk_lang_RClass_,
  &Choice_method_append_INLRString__I,
  &Choice_method_clear__V,
  &Choice_method_deleteItem_I_V,
  &Choice_method_findString_INLRString__I,
  &Choice_method_getColumns__I,
  &Choice_method_getCount__I,
  &Choice_method_getSelection__I,
  &Choice_method_getString_I_LRString_,
  &Choice_method_getStringSelection__LRString_,
  &Choice_method_select_I_V,
  &Choice_method_setColumns_I_V,
  &Choice_method_setColumns__V,
  &Choice_method_setSelection_I_V,
  &Choice_method_setString_IINLRString__V,
  &Choice_method_setStringSelection_INLRString__Z,
  0
};


struct Choice_MetaInfoInitializer
{  Choice_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Choice::clazzInfo();
    ci->fields =  _Choice_fields;
    ci->methods =  _Choice_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Choice_MetaInfoInitializer Choice_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ClientDC_create_array(int length)
{
  return new ObjectArrayImpl<RClientDC>(length);
}

//static
::acdk::lang::RObject
ClientDC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClientDC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClientDC_method_ClientDC_INLRWindow__LRClientDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClientDC((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClientDC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClientDC::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ClientDC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClientDC_methods_ClientDC_INLRWindow__LRClientDC__arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClientDC_methods_ClientDC_INLRWindow__LRClientDC__args[] = 
{
  &ClientDC_methods_ClientDC_INLRWindow__LRClientDC__arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* ClientDC_methods_ClientDC_INLRWindow__LRClientDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClientDC_method_ClientDC_INLRWindow__LRClientDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClientDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClientDC::clazzInfo(), // return type
  "_0_ClientDC", // alternative name of method
  -1, // altlabelHashCode
  ClientDC_methods_ClientDC_INLRWindow__LRClientDC__args, // the arguments
  0, //arguments count
  ClientDC_methods_ClientDC_INLRWindow__LRClientDC__exceptions, // the declared exceptions
  ClientDC_MetainfoWrapper::ClientDC_method_ClientDC_INLRWindow__LRClientDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClientDC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClientDC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClientDC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClientDC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClientDC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClientDC_MetainfoWrapper::ClientDC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClientDC_methods[] = 
{
  &ClientDC_method_ClientDC_INLRWindow__LRClientDC_,
  &ClientDC_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ClientDC_MetaInfoInitializer
{  ClientDC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClientDC::clazzInfo();
    ci->fields =  _ClientDC_fields;
    ci->methods =  _ClientDC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClientDC_MetaInfoInitializer ClientDC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Clipboard_create_array(int length)
{
  return new ObjectArrayImpl<RClipboard>(length);
}

//static
::acdk::lang::RObject
Clipboard_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Clipboard_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_Clipboard__LRClipboard__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Clipboard();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Clipboard::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_addData_INLRDataObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::addData((RDataObject)args[0].getObjectVar());
    else
      ret = This->addData((RDataObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Clipboard::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Clipboard::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_flush__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::flush();
    else
      ret = This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_getData_INOUTLRDataObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::getData( ::acdk::lang::getTypedObjectRef< RDataObject >(args[0]));
    else
      ret = This->getData( ::acdk::lang::getTypedObjectRef< RDataObject >(args[0]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_isOpened__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::isOpened();
    else
      ret = This->isOpened();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_isSupported_INLRDataFormat__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::isSupported((RDataFormat)args[0].getObjectVar());
    else
      ret = This->isSupported((RDataFormat)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_open__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::open();
    else
      ret = This->open();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_setData_INLRDataObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Clipboard::setData((RDataObject)args[0].getObjectVar());
    else
      ret = This->setData((RDataObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_usePrimarySelection_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Clipboard::usePrimarySelection(args[0].getBoolVar());
    else
        This->usePrimarySelection(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Clipboard_method_usePrimarySelection__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Clipboard* This = dmi_cast<Clipboard>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Clipboard::usePrimarySelection();
    else
        This->usePrimarySelection();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Clipboard_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_Clipboard__LRClipboard__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_Clipboard__LRClipboard__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_Clipboard__LRClipboard_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Clipboard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Clipboard::clazzInfo(), // return type
  "_0_Clipboard", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_Clipboard__LRClipboard__args, // the arguments
  0, //arguments count
  Clipboard_methods_Clipboard__LRClipboard__exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_Clipboard__LRClipboard__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Clipboard_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Clipboard_methods_addData_INLRDataObject__Z_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_addData_INLRDataObject__Z_args[] = 
{
  &Clipboard_methods_addData_INLRDataObject__Z_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_addData_INLRDataObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_addData_INLRDataObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_addData", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_addData_INLRDataObject__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_addData_INLRDataObject__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_addData_INLRDataObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_clear", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_clear__V_args, // the arguments
  0, //arguments count
  Clipboard_methods_clear__V_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_close", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_close__V_args, // the arguments
  0, //arguments count
  Clipboard_methods_close__V_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_flush__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_flush__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_flush__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_flush", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_flush__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_flush__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_flush__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Clipboard_methods_getData_INOUTLRDataObject__Z_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_getData_INOUTLRDataObject__Z_args[] = 
{
  &Clipboard_methods_getData_INOUTLRDataObject__Z_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_getData_INOUTLRDataObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_getData_INOUTLRDataObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getData", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_getData_INOUTLRDataObject__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_getData_INOUTLRDataObject__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_getData_INOUTLRDataObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_isOpened__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_isOpened__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_isOpened__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isOpened", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isOpened", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_isOpened__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_isOpened__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_isOpened__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Clipboard_methods_isSupported_INLRDataFormat__Z_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_isSupported_INLRDataFormat__Z_args[] = 
{
  &Clipboard_methods_isSupported_INLRDataFormat__Z_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_isSupported_INLRDataFormat__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_isSupported_INLRDataFormat__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isSupported", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_isSupported_INLRDataFormat__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_isSupported_INLRDataFormat__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_isSupported_INLRDataFormat__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_open__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_open__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_open__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "open", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_open", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_open__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_open__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_open__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Clipboard_methods_setData_INLRDataObject__Z_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_setData_INLRDataObject__Z_args[] = 
{
  &Clipboard_methods_setData_INLRDataObject__Z_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_setData_INLRDataObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_setData_INLRDataObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_setData", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_setData_INLRDataObject__Z_args, // the arguments
  0, //arguments count
  Clipboard_methods_setData_INLRDataObject__Z_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_setData_INLRDataObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Clipboard_methods_usePrimarySelection_Z_V_arg_primary = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "primary", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_usePrimarySelection_Z_V_args[] = 
{
  &Clipboard_methods_usePrimarySelection_Z_V_arg_primary,
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_usePrimarySelection_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_usePrimarySelection_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usePrimarySelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_usePrimarySelection", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_usePrimarySelection_Z_V_args, // the arguments
  0, //arguments count
  Clipboard_methods_usePrimarySelection_Z_V_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_usePrimarySelection_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Clipboard_methods_usePrimarySelection__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Clipboard_methods_usePrimarySelection__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Clipboard_method_usePrimarySelection__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "usePrimarySelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_usePrimarySelection", // alternative name of method
  -1, // altlabelHashCode
  Clipboard_methods_usePrimarySelection__V_args, // the arguments
  0, //arguments count
  Clipboard_methods_usePrimarySelection__V_exceptions, // the declared exceptions
  Clipboard_MetainfoWrapper::Clipboard_method_usePrimarySelection__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Clipboard_methods[] = 
{
  &Clipboard_method_Clipboard__LRClipboard_,
  &Clipboard_method_GetClass__L_acdk_lang_RClass_,
  &Clipboard_method_addData_INLRDataObject__Z,
  &Clipboard_method_clear__V,
  &Clipboard_method_close__V,
  &Clipboard_method_flush__Z,
  &Clipboard_method_getData_INOUTLRDataObject__Z,
  &Clipboard_method_isOpened__Z,
  &Clipboard_method_isSupported_INLRDataFormat__Z,
  &Clipboard_method_open__Z,
  &Clipboard_method_setData_INLRDataObject__Z,
  &Clipboard_method_usePrimarySelection_Z_V,
  &Clipboard_method_usePrimarySelection__V,
  0
};


struct Clipboard_MetaInfoInitializer
{  Clipboard_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Clipboard::clazzInfo();
    ci->fields =  _Clipboard_fields;
    ci->methods =  _Clipboard_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Clipboard_MetaInfoInitializer Clipboard_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Colour_create_array(int length)
{
  return new ObjectArrayImpl<RColour>(length);
}

//static
::acdk::lang::RObject
Colour_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Colour_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_Colour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Colour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_Colour_BBB_LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Colour(args[0].getByteVar(), args[1].getByteVar(), args[2].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_Colour_I_LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Colour(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_Colour_INLRString__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Colour((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_blue__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Colour::blue();
    else
      ret = This->blue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getBlack__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getBlack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getBlue__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getBlue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getCyan__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getCyan();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getGreen__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getGreen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getLightGrey__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getLightGrey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getNullColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getNullColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getRed__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getRed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_getWhite__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Colour::getWhite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_green__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Colour::green();
    else
      ret = This->green();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_ok__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Colour::ok();
    else
      ret = This->ok();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_red__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Colour::red();
    else
      ret = This->red();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_set_BBB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Colour::set(args[0].getByteVar(), args[1].getByteVar(), args[2].getByteVar());
    else
        This->set(args[0].getByteVar(), args[1].getByteVar(), args[2].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Colour_method_set_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Colour* This = dmi_cast<Colour>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Colour::set(args[0].getIntVar());
    else
        This->set(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Colour_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_Colour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_Colour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_Colour__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Colour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Colour::clazzInfo(), // return type
  "_0_Colour", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_Colour__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_Colour__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_Colour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_Colour_BBB_LRColour__arg_red = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "red", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_Colour_BBB_LRColour__arg_green = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "green", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_Colour_BBB_LRColour__arg_blue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "blue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_Colour_BBB_LRColour__args[] = 
{
  &Colour_methods_Colour_BBB_LRColour__arg_red,
  &Colour_methods_Colour_BBB_LRColour__arg_green,
  &Colour_methods_Colour_BBB_LRColour__arg_blue,
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_Colour_BBB_LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_Colour_BBB_LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Colour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Colour::clazzInfo(), // return type
  "_1_Colour", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_Colour_BBB_LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_Colour_BBB_LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_Colour_BBB_LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_Colour_I_LRColour__arg_colRGB = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "colRGB", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_Colour_I_LRColour__args[] = 
{
  &Colour_methods_Colour_I_LRColour__arg_colRGB,
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_Colour_I_LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_Colour_I_LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Colour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Colour::clazzInfo(), // return type
  "_2_Colour", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_Colour_I_LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_Colour_I_LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_Colour_I_LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_Colour_INLRString__LRColour__arg_colourName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colourName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_Colour_INLRString__LRColour__args[] = 
{
  &Colour_methods_Colour_INLRString__LRColour__arg_colourName,
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_Colour_INLRString__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_Colour_INLRString__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Colour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Colour::clazzInfo(), // return type
  "_3_Colour", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_Colour_INLRString__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_Colour_INLRString__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_Colour_INLRString__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Colour_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_blue__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_blue__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_blue__B = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "blue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_9_blue", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_blue__B_args, // the arguments
  0, //arguments count
  Colour_methods_blue__B_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_blue__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getBlack__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getBlack__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getBlack__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_a_getBlack", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getBlack__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getBlack__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getBlack__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getBlue__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getBlue__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getBlue__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_d_getBlue", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getBlue__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getBlue__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getBlue__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getCyan__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getCyan__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getCyan__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCyan", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_f_getCyan", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getCyan__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getCyan__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getCyan__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getGreen__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getGreen__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getGreen__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_e_getGreen", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getGreen__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getGreen__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getGreen__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getLightGrey__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getLightGrey__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getLightGrey__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLightGrey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_g_getLightGrey", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getLightGrey__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getLightGrey__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getLightGrey__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getNullColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getNullColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getNullColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_h_getNullColour", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getNullColour__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getNullColour__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getNullColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getRed__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getRed__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getRed__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_c_getRed", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getRed__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getRed__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getRed__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_getWhite__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_getWhite__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_getWhite__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_b_getWhite", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_getWhite__LRColour__args, // the arguments
  0, //arguments count
  Colour_methods_getWhite__LRColour__exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_getWhite__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_green__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_green__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_green__B = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "green", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_8_green", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_green__B_args, // the arguments
  0, //arguments count
  Colour_methods_green__B_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_green__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_ok__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_ok__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_ok__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ok", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_ok", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_ok__Z_args, // the arguments
  0, //arguments count
  Colour_methods_ok__Z_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_ok__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_red__B_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_red__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_red__B = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "red", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_7_red", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_red__B_args, // the arguments
  0, //arguments count
  Colour_methods_red__B_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_red__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_set_BBB_V_arg_red = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "red", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_set_BBB_V_arg_green = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "green", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_set_BBB_V_arg_blue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "blue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_set_BBB_V_args[] = 
{
  &Colour_methods_set_BBB_V_arg_red,
  &Colour_methods_set_BBB_V_arg_green,
  &Colour_methods_set_BBB_V_arg_blue,
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_set_BBB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_set_BBB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_set", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_set_BBB_V_args, // the arguments
  0, //arguments count
  Colour_methods_set_BBB_V_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_set_BBB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Colour_methods_set_I_V_arg_colRGB = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "colRGB", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Colour_methods_set_I_V_args[] = 
{
  &Colour_methods_set_I_V_arg_colRGB,
  0
};

::acdk::lang::dmi::ClazzInfo* Colour_methods_set_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Colour_method_set_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_set", // alternative name of method
  -1, // altlabelHashCode
  Colour_methods_set_I_V_args, // the arguments
  0, //arguments count
  Colour_methods_set_I_V_exceptions, // the declared exceptions
  Colour_MetainfoWrapper::Colour_method_set_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Colour_methods[] = 
{
  &Colour_method_Colour__LRColour_,
  &Colour_method_Colour_BBB_LRColour_,
  &Colour_method_Colour_I_LRColour_,
  &Colour_method_Colour_INLRString__LRColour_,
  &Colour_method_GetClass__L_acdk_lang_RClass_,
  &Colour_method_blue__B,
  &Colour_method_getBlack__LRColour_,
  &Colour_method_getBlue__LRColour_,
  &Colour_method_getCyan__LRColour_,
  &Colour_method_getGreen__LRColour_,
  &Colour_method_getLightGrey__LRColour_,
  &Colour_method_getNullColour__LRColour_,
  &Colour_method_getRed__LRColour_,
  &Colour_method_getWhite__LRColour_,
  &Colour_method_green__B,
  &Colour_method_ok__Z,
  &Colour_method_red__B,
  &Colour_method_set_BBB_V,
  &Colour_method_set_I_V,
  0
};


struct Colour_MetaInfoInitializer
{  Colour_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Colour::clazzInfo();
    ci->fields =  _Colour_fields;
    ci->methods =  _Colour_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Colour_MetaInfoInitializer Colour_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ColourData_create_array(int length)
{
  return new ObjectArrayImpl<RColourData>(length);
}

//static
::acdk::lang::RObject
ColourData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ColourData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_ColourData__LRColourData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ColourData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ColourData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_getChooseFull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ColourData::getChooseFull();
    else
      ret = This->getChooseFull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_getColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ColourData::getColour();
    else
        ret = (::acdk::lang::RObject)This->getColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_getCustomColour_I_LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ColourData::getCustomColour(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getCustomColour(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_setChooseFull_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ColourData::setChooseFull(args[0].getBoolVar());
    else
        This->setChooseFull(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_setColour_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ColourData::setColour((RColour)args[0].getObjectVar());
    else
        This->setColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourData_method_setCustomColour_IINLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourData* This = dmi_cast<ColourData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ColourData::setCustomColour(args[0].getIntVar(), (RColour)args[1].getObjectVar());
    else
        This->setCustomColour(args[0].getIntVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ColourData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_ColourData__LRColourData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_ColourData__LRColourData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_ColourData__LRColourData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ColourData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ColourData::clazzInfo(), // return type
  "_0_ColourData", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_ColourData__LRColourData__args, // the arguments
  0, //arguments count
  ColourData_methods_ColourData__LRColourData__exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_ColourData__LRColourData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ColourData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_getChooseFull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_getChooseFull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_getChooseFull__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChooseFull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_getChooseFull", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_getChooseFull__Z_args, // the arguments
  0, //arguments count
  ColourData_methods_getChooseFull__Z_exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_getChooseFull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_getColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_getColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_getColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_2_getColour", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_getColour__LRColour__args, // the arguments
  0, //arguments count
  ColourData_methods_getColour__LRColour__exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_getColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourData_methods_getCustomColour_I_LRColour__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_getCustomColour_I_LRColour__args[] = 
{
  &ColourData_methods_getCustomColour_I_LRColour__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_getCustomColour_I_LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_getCustomColour_I_LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCustomColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_3_getCustomColour", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_getCustomColour_I_LRColour__args, // the arguments
  0, //arguments count
  ColourData_methods_getCustomColour_I_LRColour__exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_getCustomColour_I_LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourData_methods_setChooseFull_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_setChooseFull_Z_V_args[] = 
{
  &ColourData_methods_setChooseFull_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_setChooseFull_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_setChooseFull_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setChooseFull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setChooseFull", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_setChooseFull_Z_V_args, // the arguments
  0, //arguments count
  ColourData_methods_setChooseFull_Z_V_exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_setChooseFull_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourData_methods_setColour_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_setColour_INLRColour__V_args[] = 
{
  &ColourData_methods_setColour_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_setColour_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_setColour_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setColour", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_setColour_INLRColour__V_args, // the arguments
  0, //arguments count
  ColourData_methods_setColour_INLRColour__V_exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_setColour_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourData_methods_setCustomColour_IINLRColour__V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourData_methods_setCustomColour_IINLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourData_methods_setCustomColour_IINLRColour__V_args[] = 
{
  &ColourData_methods_setCustomColour_IINLRColour__V_arg_i,
  &ColourData_methods_setCustomColour_IINLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourData_methods_setCustomColour_IINLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourData_method_setCustomColour_IINLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCustomColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setCustomColour", // alternative name of method
  -1, // altlabelHashCode
  ColourData_methods_setCustomColour_IINLRColour__V_args, // the arguments
  0, //arguments count
  ColourData_methods_setCustomColour_IINLRColour__V_exceptions, // the declared exceptions
  ColourData_MetainfoWrapper::ColourData_method_setCustomColour_IINLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ColourData_methods[] = 
{
  &ColourData_method_ColourData__LRColourData_,
  &ColourData_method_GetClass__L_acdk_lang_RClass_,
  &ColourData_method_getChooseFull__Z,
  &ColourData_method_getColour__LRColour_,
  &ColourData_method_getCustomColour_I_LRColour_,
  &ColourData_method_setChooseFull_Z_V,
  &ColourData_method_setColour_INLRColour__V,
  &ColourData_method_setCustomColour_IINLRColour__V,
  0
};


struct ColourData_MetaInfoInitializer
{  ColourData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ColourData::clazzInfo();
    ci->fields =  _ColourData_fields;
    ci->methods =  _ColourData_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ColourData_MetaInfoInitializer ColourData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ColourDialog_create_array(int length)
{
  return new ObjectArrayImpl<RColourDialog>(length);
}

//static
::acdk::lang::RObject
ColourDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ColourDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourDialog_method_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ColourDialog((RWindow)args[0].getObjectVar(), (RColourData)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourDialog_method_ColourDialog_INLRWindow__LRColourDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ColourDialog((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ColourDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourDialog_method_getColourData__LRColourData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourDialog* This = dmi_cast<ColourDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ColourDialog::getColourData();
    else
        ret = (::acdk::lang::RObject)This->getColourData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ColourDialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ColourDialog* This = dmi_cast<ColourDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ColourDialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ColourDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColourData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__args[] = 
{
  &ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__arg_parent,
  &ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourDialog_method_ColourDialog_INLRWindow_INLRColourData__LRColourDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ColourDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ColourDialog::clazzInfo(), // return type
  "_0_ColourDialog", // alternative name of method
  -1, // altlabelHashCode
  ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__args, // the arguments
  0, //arguments count
  ColourDialog_methods_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__exceptions, // the declared exceptions
  ColourDialog_MetainfoWrapper::ColourDialog_method_ColourDialog_INLRWindow_INLRColourData__LRColourDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__args[] = 
{
  &ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourDialog_method_ColourDialog_INLRWindow__LRColourDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ColourDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ColourDialog::clazzInfo(), // return type
  "_1_ColourDialog", // alternative name of method
  -1, // altlabelHashCode
  ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__args, // the arguments
  0, //arguments count
  ColourDialog_methods_ColourDialog_INLRWindow__LRColourDialog__exceptions, // the declared exceptions
  ColourDialog_MetainfoWrapper::ColourDialog_method_ColourDialog_INLRWindow__LRColourDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ColourDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ColourDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ColourDialog_MetainfoWrapper::ColourDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourDialog_methods_getColourData__LRColourData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourDialog_methods_getColourData__LRColourData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourDialog_method_getColourData__LRColourData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColourData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColourData::clazzInfo(), // return type
  "_2_getColourData", // alternative name of method
  -1, // altlabelHashCode
  ColourDialog_methods_getColourData__LRColourData__args, // the arguments
  0, //arguments count
  ColourDialog_methods_getColourData__LRColourData__exceptions, // the declared exceptions
  ColourDialog_MetainfoWrapper::ColourDialog_method_getColourData__LRColourData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ColourDialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ColourDialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ColourDialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_showModal", // alternative name of method
  -1, // altlabelHashCode
  ColourDialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  ColourDialog_methods_showModal__I_exceptions, // the declared exceptions
  ColourDialog_MetainfoWrapper::ColourDialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ColourDialog_methods[] = 
{
  &ColourDialog_method_ColourDialog_INLRWindow_INLRColourData__LRColourDialog_,
  &ColourDialog_method_ColourDialog_INLRWindow__LRColourDialog_,
  &ColourDialog_method_GetClass__L_acdk_lang_RClass_,
  &ColourDialog_method_getColourData__LRColourData_,
  &ColourDialog_method_showModal__I,
  0
};


struct ColourDialog_MetaInfoInitializer
{  ColourDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ColourDialog::clazzInfo();
    ci->fields =  _ColourDialog_fields;
    ci->methods =  _ColourDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ColourDialog_MetaInfoInitializer ColourDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ComboBox_create_array(int length)
{
  return new ObjectArrayImpl<RComboBox>(length);
}

//static
::acdk::lang::RObject
ComboBox_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ComboBox_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar(), (RValidator)args[7].getObjectVar(), (RString)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_I_LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ComboBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar(), (RValidator)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ComboBox::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_append_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::append((RString)args[0].getObjectVar());
    else
        This->append((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_copy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::copy();
    else
        This->copy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_cut__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::cut();
    else
        This->cut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_deleteItem_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::deleteItem(args[0].getIntVar());
    else
        This->deleteItem(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_findString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ComboBox::findString((RString)args[0].getObjectVar());
    else
      ret = This->findString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ComboBox::getCount();
    else
      ret = This->getCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getInsertionPoint__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ComboBox::getInsertionPoint();
    else
      ret = This->getInsertionPoint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getLastPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ComboBox::getLastPosition();
    else
      ret = This->getLastPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ComboBox::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ComboBox::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getStringSelection__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ComboBox::getStringSelection();
    else
        ret = (::acdk::lang::RObject)This->getStringSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_getValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ComboBox::getValue();
    else
        ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_paste__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::paste();
    else
        This->paste();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_remove_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::remove(args[0].getIntVar(), args[1].getIntVar());
    else
        This->remove(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_replace_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::replace(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->replace(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setEditable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setEditable(args[0].getBoolVar());
    else
        This->setEditable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setInsertionPoint_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setInsertionPoint(args[0].getIntVar());
    else
        This->setInsertionPoint(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setInsertionPointEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setInsertionPointEnd();
    else
        This->setInsertionPointEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setSelection(args[0].getIntVar());
    else
        This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setSelection_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setSelection(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setSelection(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setStringSelection_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setStringSelection((RString)args[0].getObjectVar());
    else
        This->setStringSelection((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ComboBox_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ComboBox* This = dmi_cast<ComboBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ComboBox::setValue((RString)args[0].getObjectVar());
    else
        This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ComboBox_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_pos,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_size,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_style,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_choices,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_validator,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_0_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_I_LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_1_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_I_LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_I_LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_2_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_3_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_pos,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_4_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_pos,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_size,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_5_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_pos,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_size,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_style,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_6_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__args[] = 
{
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_parent,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_id,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_value,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_pos,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_size,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_style,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_choices,
  &ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ComboBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ComboBox::clazzInfo(), // return type
  "_7_ComboBox", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__args, // the arguments
  0, //arguments count
  ComboBox_methods_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_v_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ComboBox_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_append_INLRString__V_arg_item = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "item", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_append_INLRString__V_args[] = 
{
  &ComboBox_methods_append_INLRString__V_arg_item,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_append_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_append_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "append", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_append", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_append_INLRString__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_append_INLRString__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_append_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_clear", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_clear__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_clear__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_copy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_copy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_copy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_copy", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_copy__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_copy__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_copy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_cut__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_cut__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_cut__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_cut", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_cut__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_cut__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_cut__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_deleteItem_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_deleteItem_I_V_args[] = 
{
  &ComboBox_methods_deleteItem_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_deleteItem_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_deleteItem_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteItem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_deleteItem", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_deleteItem_I_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_deleteItem_I_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_deleteItem_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_findString_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_findString_INLRString__I_args[] = 
{
  &ComboBox_methods_findString_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_findString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_findString_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_findString", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_findString_INLRString__I_args, // the arguments
  0, //arguments count
  ComboBox_methods_findString_INLRString__I_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_findString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getCount", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getCount__I_args, // the arguments
  0, //arguments count
  ComboBox_methods_getCount__I_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getInsertionPoint__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getInsertionPoint__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getInsertionPoint__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInsertionPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getInsertionPoint", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getInsertionPoint__I_args, // the arguments
  0, //arguments count
  ComboBox_methods_getInsertionPoint__I_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getInsertionPoint__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getLastPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getLastPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getLastPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getLastPosition", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getLastPosition__I_args, // the arguments
  0, //arguments count
  ComboBox_methods_getLastPosition__I_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getLastPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getSelection", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getSelection__I_args, // the arguments
  0, //arguments count
  ComboBox_methods_getSelection__I_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_getString_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getString_I_LRString__args[] = 
{
  &ComboBox_methods_getString_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getString", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  ComboBox_methods_getString_I_LRString__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getStringSelection__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getStringSelection__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getStringSelection__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getStringSelection", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getStringSelection__LRString__args, // the arguments
  0, //arguments count
  ComboBox_methods_getStringSelection__LRString__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getStringSelection__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_getValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_getValue__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_getValue__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_getValue", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_getValue__LRString__args, // the arguments
  0, //arguments count
  ComboBox_methods_getValue__LRString__exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_getValue__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_paste__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_paste__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_paste__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paste", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_paste", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_paste__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_paste__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_paste__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_remove_II_V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_remove_II_V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_remove_II_V_args[] = 
{
  &ComboBox_methods_remove_II_V_arg_from,
  &ComboBox_methods_remove_II_V_arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_remove_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_remove_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_remove", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_remove_II_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_remove_II_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_remove_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_replace_IIINLRString__V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_replace_IIINLRString__V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_replace_IIINLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_replace_IIINLRString__V_args[] = 
{
  &ComboBox_methods_replace_IIINLRString__V_arg_from,
  &ComboBox_methods_replace_IIINLRString__V_arg_to,
  &ComboBox_methods_replace_IIINLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_replace_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_replace_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_replace", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_replace_IIINLRString__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_replace_IIINLRString__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_replace_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setEditable_Z_V_arg_editable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "editable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setEditable_Z_V_args[] = 
{
  &ComboBox_methods_setEditable_Z_V_arg_editable,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setEditable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setEditable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEditable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setEditable", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setEditable_Z_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setEditable_Z_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setEditable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setInsertionPoint_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setInsertionPoint_I_V_args[] = 
{
  &ComboBox_methods_setInsertionPoint_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setInsertionPoint_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setInsertionPoint_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInsertionPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setInsertionPoint", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setInsertionPoint_I_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setInsertionPoint_I_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setInsertionPoint_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setInsertionPointEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setInsertionPointEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setInsertionPointEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInsertionPointEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setInsertionPointEnd", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setInsertionPointEnd__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setInsertionPointEnd__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setInsertionPointEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setSelection_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setSelection_I_V_args[] = 
{
  &ComboBox_methods_setSelection_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setSelection", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setSelection_I_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setSelection_I_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setSelection_II_V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setSelection_II_V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setSelection_II_V_args[] = 
{
  &ComboBox_methods_setSelection_II_V_arg_from,
  &ComboBox_methods_setSelection_II_V_arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setSelection_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setSelection_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setSelection", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setSelection_II_V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setSelection_II_V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setSelection_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setStringSelection_INLRString__V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setStringSelection_INLRString__V_args[] = 
{
  &ComboBox_methods_setStringSelection_INLRString__V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setStringSelection_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setStringSelection_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setStringSelection", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setStringSelection_INLRString__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setStringSelection_INLRString__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setStringSelection_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ComboBox_methods_setValue_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ComboBox_methods_setValue_INLRString__V_args[] = 
{
  &ComboBox_methods_setValue_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ComboBox_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ComboBox_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setValue", // alternative name of method
  -1, // altlabelHashCode
  ComboBox_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  ComboBox_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  ComboBox_MetainfoWrapper::ComboBox_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ComboBox_methods[] = 
{
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_I_LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString__LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint__LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray__LRComboBox_,
  &ComboBox_method_ComboBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRComboBox_,
  &ComboBox_method_GetClass__L_acdk_lang_RClass_,
  &ComboBox_method_append_INLRString__V,
  &ComboBox_method_clear__V,
  &ComboBox_method_copy__V,
  &ComboBox_method_cut__V,
  &ComboBox_method_deleteItem_I_V,
  &ComboBox_method_findString_INLRString__I,
  &ComboBox_method_getCount__I,
  &ComboBox_method_getInsertionPoint__I,
  &ComboBox_method_getLastPosition__I,
  &ComboBox_method_getSelection__I,
  &ComboBox_method_getString_I_LRString_,
  &ComboBox_method_getStringSelection__LRString_,
  &ComboBox_method_getValue__LRString_,
  &ComboBox_method_paste__V,
  &ComboBox_method_remove_II_V,
  &ComboBox_method_replace_IIINLRString__V,
  &ComboBox_method_setEditable_Z_V,
  &ComboBox_method_setInsertionPoint_I_V,
  &ComboBox_method_setInsertionPointEnd__V,
  &ComboBox_method_setSelection_I_V,
  &ComboBox_method_setSelection_II_V,
  &ComboBox_method_setStringSelection_INLRString__V,
  &ComboBox_method_setValue_INLRString__V,
  0
};


struct ComboBox_MetaInfoInitializer
{  ComboBox_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ComboBox::clazzInfo();
    ci->fields =  _ComboBox_fields;
    ci->methods =  _ComboBox_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ComboBox_MetaInfoInitializer ComboBox_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Control_create_array(int length)
{
  return new ObjectArrayImpl<RControl>(length);
}

//static
::acdk::lang::RObject
Control_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Control_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RValidator)args[5].getObjectVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_I_LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_IINLRPoint__LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Control((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RValidator)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Control::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Control_method_command_INLRCommandEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Control* This = dmi_cast<Control>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Control::command((RCommandEvent)args[0].getObjectVar());
    else
        This->command((RCommandEvent)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Control_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_id,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_pos,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_size,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_style,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_validator,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_0_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_I_LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_I_LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_I_LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_I_LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_I_LRControl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_I_LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_I_LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_1_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_I_LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_I_LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_I_LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_IINLRPoint__LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_id,
  &Control_methods_Control_INLRWindow_IINLRPoint__LRControl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_IINLRPoint__LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_IINLRPoint__LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_2_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_IINLRPoint__LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_IINLRPoint__LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_IINLRPoint__LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_id,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_pos,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_IINLRPoint_INLRSize__LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_3_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_IINLRPoint_INLRSize__LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_id,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_pos,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_size,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_4_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__args[] = 
{
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_parent,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_id,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_pos,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_size,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_style,
  &Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Control", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Control::clazzInfo(), // return type
  "_5_Control", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__args, // the arguments
  0, //arguments count
  Control_methods_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Control_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Control_methods_command_INLRCommandEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCommandEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Control_methods_command_INLRCommandEvent__V_args[] = 
{
  &Control_methods_command_INLRCommandEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* Control_methods_command_INLRCommandEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Control_method_command_INLRCommandEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "command", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_command", // alternative name of method
  -1, // altlabelHashCode
  Control_methods_command_INLRCommandEvent__V_args, // the arguments
  0, //arguments count
  Control_methods_command_INLRCommandEvent__V_exceptions, // the declared exceptions
  Control_MetainfoWrapper::Control_method_command_INLRCommandEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Control_methods[] = 
{
  &Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator_INLRString__LRControl_,
  &Control_method_Control_INLRWindow_I_LRControl_,
  &Control_method_Control_INLRWindow_IINLRPoint__LRControl_,
  &Control_method_Control_INLRWindow_IINLRPoint_INLRSize__LRControl_,
  &Control_method_Control_INLRWindow_IINLRPoint_INLRSize_I_LRControl_,
  &Control_method_Control_INLRWindow_IINLRPoint_INLRSize_IINLRValidator__LRControl_,
  &Control_method_GetClass__L_acdk_lang_RClass_,
  &Control_method_command_INLRCommandEvent__V,
  0
};


struct Control_MetaInfoInitializer
{  Control_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Control::clazzInfo();
    ci->fields =  _Control_fields;
    ci->methods =  _Control_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Control_MetaInfoInitializer Control_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) wx_dummyExportFunc() {}
#endif

