// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../ide.h"
#include "../Config.h"
#include "../FrameLayout.h"
#include "../StyledTextCtrl.h"
#include "../TextOutputCtrl.h"
#include "../ide.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 
namespace ide { 

using namespace acdk::wx;

//static
::acdk::lang::RObject
TextOutputCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RTextOutputCtrl>(length);
}

//static
::acdk::lang::RObject
TextOutputCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextOutputCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextOutputCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextOutputCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RPoint>(args[3], dc), ::acdk::lang::dmi::castTo< RSize>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextOutputCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextOutputCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextOutputCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RPoint>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextOutputCtrl(::acdk::lang::dmi::castTo< RWindow>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RPoint>(args[3], dc), ::acdk::lang::dmi::castTo< RSize>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_onUpdate_INLREvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::onUpdate(::acdk::lang::dmi::castTo< REvent>(args[0], dc));
    else
        This->onUpdate(::acdk::lang::dmi::castTo< REvent>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextOutputCtrl_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextOutputCtrl::writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TextOutputCtrl_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RStringBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TextOutputCtrl_fields__internalId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TextOutputCtrl* This = dmi_cast<TextOutputCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_internalId, flags);
    else
      This->_internalId = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TextOutputCtrl_fields__buffer = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(),
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TextOutputCtrl_fields__internalId = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_internalId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_fields__internalId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TextOutputCtrl_fields[] = 
{
  &TextOutputCtrl_fields__buffer,
  &TextOutputCtrl_fields__internalId,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__args[] = 
{
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_parent,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_id,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_value,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_pos,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_size,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextOutputCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextOutputCtrl::clazzInfo(), // return type
  "_0_TextOutputCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__args[] = 
{
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__arg_parent,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextOutputCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextOutputCtrl::clazzInfo(), // return type
  "_1_TextOutputCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__args[] = 
{
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_parent,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_id,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextOutputCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextOutputCtrl::clazzInfo(), // return type
  "_2_TextOutputCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__args[] = 
{
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_parent,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_id,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_value,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextOutputCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextOutputCtrl::clazzInfo(), // return type
  "_3_TextOutputCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__args[] = 
{
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_parent,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_id,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_value,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_pos,
  &TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextOutputCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextOutputCtrl::clazzInfo(), // return type
  "_4_TextOutputCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_close", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_close__V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_close__V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_flush", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_flush__V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_flush__V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_onUpdate_INLREvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_onUpdate_INLREvent__V_args[] = 
{
  &TextOutputCtrl_methods_onUpdate_INLREvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_onUpdate_INLREvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_onUpdate_INLREvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_onUpdate", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_onUpdate_INLREvent__V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_onUpdate_INLREvent__V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_onUpdate_INLREvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_writeChar_C_V_args[] = 
{
  &TextOutputCtrl_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_writeChar_C_V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_writeChar_UC_V_args[] = 
{
  &TextOutputCtrl_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_writeChar_UC_V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextOutputCtrl_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextOutputCtrl_methods_writeString_INLRString__V_args[] = 
{
  &TextOutputCtrl_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* TextOutputCtrl_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextOutputCtrl_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_writeString", // alternative name of method
  -1, // altlabelHashCode
  TextOutputCtrl_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  TextOutputCtrl_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  TextOutputCtrl_MetainfoWrapper::TextOutputCtrl_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextOutputCtrl_methods[] = 
{
  &TextOutputCtrl_method_GetClass__L_acdk_lang_RClass_,
  &TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextOutputCtrl_,
  &TextOutputCtrl_method_TextOutputCtrl_INLRWindow_I_LRTextOutputCtrl_,
  &TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString__LRTextOutputCtrl_,
  &TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint__LRTextOutputCtrl_,
  &TextOutputCtrl_method_TextOutputCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextOutputCtrl_,
  &TextOutputCtrl_method_close__V,
  &TextOutputCtrl_method_flush__V,
  &TextOutputCtrl_method_onUpdate_INLREvent__V,
  &TextOutputCtrl_method_writeChar_C_V,
  &TextOutputCtrl_method_writeChar_UC_V,
  &TextOutputCtrl_method_writeString_INLRString__V,
  0
};


struct TextOutputCtrl_MetaInfoInitializer
{  TextOutputCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextOutputCtrl::clazzInfo();
    ci->fields =  _TextOutputCtrl_fields;
    ci->methods =  _TextOutputCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextOutputCtrl_MetaInfoInitializer TextOutputCtrl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide

