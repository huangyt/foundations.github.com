// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 

class StaticBox_DmiProxy
: extends StaticBox
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(StaticBox)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  StaticBox::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, StaticBox)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  StaticBox_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : StaticBox(parent, id, label, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticBox_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style, IN(::acdk::lang::RString) name)
  : StaticBox(parent, id, label, pos, size, style, name)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticBox_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label)
  : StaticBox(parent, id, label)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticBox_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos)
  : StaticBox(parent, id, label, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticBox_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : StaticBox(parent, id, label, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void command(IN(::acdk::wx::RCommandEvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Control)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::command(event);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("command", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticBox)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticBox_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticBox_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar(), (::acdk::lang::RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticBox_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticBox_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticBox_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo StaticBox_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  StaticBox::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StaticBox_DmiProxy_interfaces[] =
{
  &StaticBox_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticBox_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticBox::clazzInfo(), // returnType
  "_4_StaticBox_DmiProxy", // altname
  -1, // altnamehashCode
  StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  StaticBox_DmiProxy::_StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "name",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_args[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_parent,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_id,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_label,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_pos,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_size,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_style,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_name,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "StaticBox_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticBox::clazzInfo(), // returnType
  "_0_StaticBox_DmiProxy", // altname
  -1, // altnamehashCode
  StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StaticBox_DmiProxy::_StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_args[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticBox_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticBox::clazzInfo(), // returnType
  "_1_StaticBox_DmiProxy", // altname
  -1, // altnamehashCode
  StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StaticBox_DmiProxy::_StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticBox_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticBox::clazzInfo(), // returnType
  "_2_StaticBox_DmiProxy", // altname
  -1, // altnamehashCode
  StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  StaticBox_DmiProxy::_StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticBox_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticBox::clazzInfo(), // returnType
  "_3_StaticBox_DmiProxy", // altname
  -1, // altnamehashCode
  StaticBox_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  StaticBox_DmiProxy::_StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* StaticBox_methods[] = 
{
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point,
  &StaticBox_DmiProxy_methods__StaticBox_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "StaticBox_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _StaticBox_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     StaticBox_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_StaticBox_DmiProxy(StaticBox_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class StaticText_DmiProxy
: extends StaticText
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(StaticText)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  StaticText::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, StaticText)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  StaticText_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style, IN(::acdk::lang::RString) name)
  : StaticText(parent, id, label, pos, size, style, name)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticText_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label)
  : StaticText(parent, id, label)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticText_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos)
  : StaticText(parent, id, label, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticText_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : StaticText(parent, id, label, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StaticText_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : StaticText(parent, id, label, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void setLabel(IN(::acdk::lang::RString) label)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::clazzInfo()->methods[6]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::setLabel(label);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(label);
    _dmiProxyGetTarget()->standardDispatch("setLabel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void command(IN(::acdk::wx::RCommandEvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Control)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::command(event);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("command", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StaticText)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticText_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar(), (::acdk::lang::RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticText_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticText_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticText_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StaticText_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo StaticText_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  StaticText::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StaticText_DmiProxy_interfaces[] =
{
  &StaticText_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "name",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_args[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_parent,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_id,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_label,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_pos,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_size,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_style,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_arg_name,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "StaticText_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticText::clazzInfo(), // returnType
  "_0_StaticText_DmiProxy", // altname
  -1, // altnamehashCode
  StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StaticText_DmiProxy::_StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_args[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticText_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticText::clazzInfo(), // returnType
  "_1_StaticText_DmiProxy", // altname
  -1, // altnamehashCode
  StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StaticText_DmiProxy::_StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticText_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticText::clazzInfo(), // returnType
  "_2_StaticText_DmiProxy", // altname
  -1, // altnamehashCode
  StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  StaticText_DmiProxy::_StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticText_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticText::clazzInfo(), // returnType
  "_3_StaticText_DmiProxy", // altname
  -1, // altnamehashCode
  StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  StaticText_DmiProxy::_StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StaticText_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StaticText::clazzInfo(), // returnType
  "_4_StaticText_DmiProxy", // altname
  -1, // altnamehashCode
  StaticText_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  StaticText_DmiProxy::_StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* StaticText_methods[] = 
{
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_lang_String,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size,
  &StaticText_DmiProxy_methods__StaticText_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "StaticText_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _StaticText_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     StaticText_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_StaticText_DmiProxy(StaticText_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class StatusBar_DmiProxy
: extends StatusBar
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(StatusBar)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  StatusBar::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, StatusBar)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  StatusBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, int style)
  : StatusBar(parent, id, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  StatusBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : StatusBar(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  bool acceptsFocus()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::acceptsFocus();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("acceptsFocus", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getBorderX()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getBorderX();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getBorderX", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getBorderY()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getBorderY();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getBorderY", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool getFieldRect(int i, OUT(::acdk::wx::RRect) rect)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getFieldRect(i, rect);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(i);
    __acdk_args[1] = ::acdk::lang::outOf(rect);
    _dmiProxyGetTarget()->standardDispatch("getFieldRect", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString getStatusText(int number)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getStatusText(number);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(number);
    _dmiProxyGetTarget()->standardDispatch("getStatusText", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void setFieldsCount(int number, IN(RintArray) widths)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[14]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::setFieldsCount(number, widths);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(number);
    __acdk_args[1] = ::acdk::lang::inOf(widths);
    _dmiProxyGetTarget()->standardDispatch("setFieldsCount", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinHeight(int height)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[17]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::setMinHeight(height);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(height);
    _dmiProxyGetTarget()->standardDispatch("setMinHeight", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setStatusText(IN(::acdk::lang::RString) text, int number)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[18]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::setStatusText(text, number);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(text);
    __acdk_args[1] = ::acdk::lang::inOf(number);
    _dmiProxyGetTarget()->standardDispatch("setStatusText", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setStatusWidths(int n, IN(RintArray) widths)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clazzInfo()->methods[20]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::setStatusWidths(n, widths);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(n);
    __acdk_args[1] = ::acdk::lang::inOf(widths);
    _dmiProxyGetTarget()->standardDispatch("setStatusWidths", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, StatusBar)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StatusBar_in_acdk_wx_Window_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StatusBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StatusBar_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StatusBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo StatusBar_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  StatusBar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StatusBar_DmiProxy_interfaces[] =
{
  &StatusBar_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods__StatusBar_in_acdk_wx_Window_I_I_args[] = 
{
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_parent,
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_id,
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "StatusBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StatusBar::clazzInfo(), // returnType
  "_0_StatusBar_DmiProxy", // altname
  -1, // altnamehashCode
  StatusBar_methods__StatusBar_in_acdk_wx_Window_I_I_args,
  0, // argumentCount
  0, // excpetions,
  StatusBar_DmiProxy::_StatusBar_in_acdk_wx_Window_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods__StatusBar_in_acdk_wx_Window_I_args[] = 
{
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_arg_parent,
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StatusBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StatusBar::clazzInfo(), // returnType
  "_1_StatusBar_DmiProxy", // altname
  -1, // altnamehashCode
  StatusBar_methods__StatusBar_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  StatusBar_DmiProxy::_StatusBar_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* StatusBar_methods[] = 
{
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I_I,
  &StatusBar_DmiProxy_methods__StatusBar_in_acdk_wx_Window_I,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "StatusBar_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _StatusBar_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     StatusBar_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_StatusBar_DmiProxy(StatusBar_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Point_DmiProxy
: extends Point
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Point)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Point::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Point)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Point_DmiProxy()
  : Point()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Point_DmiProxy(int xpos, int ypos)
  : Point(xpos, ypos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Point)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Point_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Point_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Point_DmiProxy(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Point_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Point::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Point_DmiProxy_interfaces[] =
{
  &Point_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods__Point_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_DmiProxy_methods__Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Point_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Point::clazzInfo(), // returnType
  "_0_Point_DmiProxy", // altname
  -1, // altnamehashCode
  Point_methods__Point_args,
  0, // argumentCount
  0, // excpetions,
  Point_DmiProxy::_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_DmiProxy_methods__Point_I_I_arg_xpos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "xpos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_DmiProxy_methods__Point_I_I_arg_ypos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "ypos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods__Point_I_I_args[] = 
{
  &Point_DmiProxy_methods__Point_I_I_arg_xpos,
  &Point_DmiProxy_methods__Point_I_I_arg_ypos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_DmiProxy_methods__Point_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Point_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Point::clazzInfo(), // returnType
  "_1_Point_DmiProxy", // altname
  -1, // altnamehashCode
  Point_methods__Point_I_I_args,
  0, // argumentCount
  0, // excpetions,
  Point_DmiProxy::_Point_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Point_methods[] = 
{
  &Point_DmiProxy_methods__Point,
  &Point_DmiProxy_methods__Point_I_I,
  0
};

::acdk::lang::dmi::ClazzInfo* Point_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Point_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Point_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Point_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Point_DmiProxy(Point_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Size_DmiProxy
: extends Size
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Size)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Size::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Size)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Size_DmiProxy()
  : Size()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Size_DmiProxy(int xpos, int ypos)
  : Size(xpos, ypos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Size)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Size_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Size_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Size_DmiProxy(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Size_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Size::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Size_DmiProxy_interfaces[] =
{
  &Size_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods__Size_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_DmiProxy_methods__Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Size_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Size::clazzInfo(), // returnType
  "_0_Size_DmiProxy", // altname
  -1, // altnamehashCode
  Size_methods__Size_args,
  0, // argumentCount
  0, // excpetions,
  Size_DmiProxy::_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_DmiProxy_methods__Size_I_I_arg_xpos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "xpos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_DmiProxy_methods__Size_I_I_arg_ypos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "ypos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods__Size_I_I_args[] = 
{
  &Size_DmiProxy_methods__Size_I_I_arg_xpos,
  &Size_DmiProxy_methods__Size_I_I_arg_ypos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_DmiProxy_methods__Size_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Size_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Size::clazzInfo(), // returnType
  "_1_Size_DmiProxy", // altname
  -1, // altnamehashCode
  Size_methods__Size_I_I_args,
  0, // argumentCount
  0, // excpetions,
  Size_DmiProxy::_Size_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Size_methods[] = 
{
  &Size_DmiProxy_methods__Size,
  &Size_DmiProxy_methods__Size_I_I,
  0
};

::acdk::lang::dmi::ClazzInfo* Size_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Size_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Size_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Size_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Size_DmiProxy(Size_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Rect_DmiProxy
: extends Rect
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Rect)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Rect::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Rect)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Rect_DmiProxy()
  : Rect()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Rect_DmiProxy(int xpos, int ypos, int widthsize, int heightsize)
  : Rect(xpos, ypos, widthsize, heightsize)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Rect)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Rect_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Rect_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Rect_I_I_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Rect_DmiProxy(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Rect_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Rect::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Rect_DmiProxy_interfaces[] =
{
  &Rect_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods__Rect_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_DmiProxy_methods__Rect = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Rect_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Rect::clazzInfo(), // returnType
  "_0_Rect_DmiProxy", // altname
  -1, // altnamehashCode
  Rect_methods__Rect_args,
  0, // argumentCount
  0, // excpetions,
  Rect_DmiProxy::_Rect_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_DmiProxy_methods__Rect_I_I_I_I_arg_xpos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "xpos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_DmiProxy_methods__Rect_I_I_I_I_arg_ypos =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "ypos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_DmiProxy_methods__Rect_I_I_I_I_arg_widthsize =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "widthsize",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_DmiProxy_methods__Rect_I_I_I_I_arg_heightsize =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "heightsize",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods__Rect_I_I_I_I_args[] = 
{
  &Rect_DmiProxy_methods__Rect_I_I_I_I_arg_xpos,
  &Rect_DmiProxy_methods__Rect_I_I_I_I_arg_ypos,
  &Rect_DmiProxy_methods__Rect_I_I_I_I_arg_widthsize,
  &Rect_DmiProxy_methods__Rect_I_I_I_I_arg_heightsize,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_DmiProxy_methods__Rect_I_I_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Rect_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Rect::clazzInfo(), // returnType
  "_1_Rect_DmiProxy", // altname
  -1, // altnamehashCode
  Rect_methods__Rect_I_I_I_I_args,
  0, // argumentCount
  0, // excpetions,
  Rect_DmiProxy::_Rect_I_I_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Rect_methods[] = 
{
  &Rect_DmiProxy_methods__Rect,
  &Rect_DmiProxy_methods__Rect_I_I_I_I,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Rect_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Rect_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Rect_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Rect_DmiProxy(Rect_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TextAttr_DmiProxy
: extends TextAttr
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TextAttr)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TextAttr::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TextAttr)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TextAttr_DmiProxy()
  : TextAttr()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextAttr)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextAttr_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextAttr_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TextAttr_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextAttr::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TextAttr_DmiProxy_interfaces[] =
{
  &TextAttr_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextAttr_methods__TextAttr_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextAttr_DmiProxy_methods__TextAttr = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextAttr_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextAttr::clazzInfo(), // returnType
  "_0_TextAttr_DmiProxy", // altname
  -1, // altnamehashCode
  TextAttr_methods__TextAttr_args,
  0, // argumentCount
  0, // excpetions,
  TextAttr_DmiProxy::_TextAttr_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TextAttr_methods[] = 
{
  &TextAttr_DmiProxy_methods__TextAttr,
  0
};

::acdk::lang::dmi::ClazzInfo* TextAttr_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TextAttr_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TextAttr_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TextAttr_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TextAttr_DmiProxy(TextAttr_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TextCtrl_DmiProxy
: extends TextCtrl
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TextCtrl)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TextCtrl::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TextCtrl)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TextCtrl_DmiProxy()
  : TextCtrl()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) value, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : TextCtrl(parent, id, value, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : TextCtrl(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) value)
  : TextCtrl(parent, id, value)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) value, IN(::acdk::wx::RPoint) pos)
  : TextCtrl(parent, id, value, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) value, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : TextCtrl(parent, id, value, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void command(IN(::acdk::wx::RCommandEvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Control)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::command(event);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("command", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextCtrl)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TextCtrl_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextCtrl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TextCtrl_DmiProxy_interfaces[] =
{
  &TextCtrl_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_0_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_value =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "value",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_value,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_1_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_args[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_arg_parent,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_2_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_value =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "value",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_args[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_arg_value,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_3_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_value =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "value",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_value,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_4_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_value =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "value",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_value,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextCtrl::clazzInfo(), // returnType
  "_5_TextCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TextCtrl_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  TextCtrl_DmiProxy::_TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TextCtrl_methods[] = 
{
  &TextCtrl_DmiProxy_methods__TextCtrl,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point,
  &TextCtrl_DmiProxy_methods__TextCtrl_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TextCtrl_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TextCtrl_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TextCtrl_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TextCtrl_DmiProxy(TextCtrl_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TextDataObject_DmiProxy
: extends TextDataObject
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TextDataObject)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TextDataObject::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TextDataObject)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TextDataObject_DmiProxy(IN(::acdk::lang::RString) str)
  : TextDataObject(str)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextDataObject_DmiProxy()
  : TextDataObject()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::wx::RDataFormatArray getAllFormats(DataObjectDirection dir)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getAllFormats(dir);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(dir);
    _dmiProxyGetTarget()->standardDispatch("getAllFormats", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RDataFormatArray)(::acdk::lang::RObject)__acdk_retval;
  }
  bool getDataHere(IN(::acdk::wx::RDataFormat) format, OUT(RbyteArray) buf)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getDataHere(format, buf);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(format);
    __acdk_args[1] = ::acdk::lang::outOf(buf);
    _dmiProxyGetTarget()->standardDispatch("getDataHere", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getDataSize(IN(::acdk::wx::RDataFormat) format)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getDataSize(format);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(format);
    _dmiProxyGetTarget()->standardDispatch("getDataSize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getFormatCount(DataObjectDirection dir)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getFormatCount(dir);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(dir);
    _dmiProxyGetTarget()->standardDispatch("getFormatCount", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::wx::RDataFormat getPreferredFormat(DataObjectDirection dir)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getPreferredFormat(dir);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(dir);
    _dmiProxyGetTarget()->standardDispatch("getPreferredFormat", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RDataFormat)(::acdk::lang::RObject)__acdk_retval;
  }
  bool setData(IN(::acdk::wx::RDataFormat) format, IN(RbyteArray) data)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, DataObject)::clazzInfo()->methods[11]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::setData(format, data);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(format);
    __acdk_args[1] = ::acdk::lang::inOf(data);
    _dmiProxyGetTarget()->standardDispatch("setData", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDataObject)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextDataObject_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextDataObject_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextDataObject_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextDataObject_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TextDataObject_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextDataObject::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TextDataObject_DmiProxy_interfaces[] =
{
  &TextDataObject_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDataObject_DmiProxy_methods__TextDataObject_in_acdk_lang_String_arg_str =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "str",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods__TextDataObject_in_acdk_lang_String_args[] = 
{
  &TextDataObject_DmiProxy_methods__TextDataObject_in_acdk_lang_String_arg_str,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_DmiProxy_methods__TextDataObject_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextDataObject_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextDataObject::clazzInfo(), // returnType
  "_0_TextDataObject_DmiProxy", // altname
  -1, // altnamehashCode
  TextDataObject_methods__TextDataObject_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TextDataObject_DmiProxy::_TextDataObject_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods__TextDataObject_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_DmiProxy_methods__TextDataObject = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextDataObject_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextDataObject::clazzInfo(), // returnType
  "_1_TextDataObject_DmiProxy", // altname
  -1, // altnamehashCode
  TextDataObject_methods__TextDataObject_args,
  0, // argumentCount
  0, // excpetions,
  TextDataObject_DmiProxy::_TextDataObject_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TextDataObject_methods[] = 
{
  &TextDataObject_DmiProxy_methods__TextDataObject_in_acdk_lang_String,
  &TextDataObject_DmiProxy_methods__TextDataObject,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TextDataObject_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TextDataObject_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TextDataObject_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TextDataObject_DmiProxy(TextDataObject_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TextDropTarget_DmiProxy
: extends TextDropTarget
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TextDropTarget)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TextDropTarget::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TextDropTarget)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TextDropTarget_DmiProxy()
  : TextDropTarget()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  bool getData()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::getData();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getData", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  DragResult onData(int x, int y, DragResult def)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onData(x, y, def);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    __acdk_args[2] = ::acdk::lang::inOf(def);
    _dmiProxyGetTarget()->standardDispatch("onData", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (DragResult)(int)__acdk_retval;
  }
  DragResult onDragOver(int x, int y, DragResult def)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onDragOver(x, y, def);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    __acdk_args[2] = ::acdk::lang::inOf(def);
    _dmiProxyGetTarget()->standardDispatch("onDragOver", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (DragResult)(int)__acdk_retval;
  }
  bool onDrop(int x, int y)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onDrop(x, y);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    _dmiProxyGetTarget()->standardDispatch("onDrop", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool onDropText(int x, int y, IN(::acdk::lang::RString) text)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onDropText(x, y, text);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    __acdk_args[2] = ::acdk::lang::inOf(text);
    _dmiProxyGetTarget()->standardDispatch("onDropText", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  DragResult onEnter(int x, int y, DragResult def)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onEnter(x, y, def);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(3);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    __acdk_args[2] = ::acdk::lang::inOf(def);
    _dmiProxyGetTarget()->standardDispatch("onEnter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (DragResult)(int)__acdk_retval;
  }
  void onLeave()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clazzInfo()->methods[8]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::onLeave();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("onLeave", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextDropTarget)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextDropTarget_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextDropTarget_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TextDropTarget_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextDropTarget::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TextDropTarget_DmiProxy_interfaces[] =
{
  &TextDropTarget_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods__TextDropTarget_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_DmiProxy_methods__TextDropTarget = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextDropTarget_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextDropTarget::clazzInfo(), // returnType
  "_0_TextDropTarget_DmiProxy", // altname
  -1, // altnamehashCode
  TextDropTarget_methods__TextDropTarget_args,
  0, // argumentCount
  0, // excpetions,
  TextDropTarget_DmiProxy::_TextDropTarget_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TextDropTarget_methods[] = 
{
  &TextDropTarget_DmiProxy_methods__TextDropTarget,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TextDropTarget_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TextDropTarget_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TextDropTarget_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TextDropTarget_DmiProxy(TextDropTarget_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TextEntryDialog_DmiProxy
: extends TextEntryDialog
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TextEntryDialog)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TextEntryDialog::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TextEntryDialog)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TextEntryDialog_DmiProxy(IN(::acdk::wx::RWindow) parent, IN(::acdk::lang::RString) message, IN(::acdk::lang::RString) caption, IN(::acdk::lang::RString) defaultValue, int style, IN(::acdk::wx::RPoint) pos)
  : TextEntryDialog(parent, message, caption, defaultValue, style, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextEntryDialog_DmiProxy(IN(::acdk::wx::RWindow) parent, IN(::acdk::lang::RString) message)
  : TextEntryDialog(parent, message)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextEntryDialog_DmiProxy(IN(::acdk::wx::RWindow) parent, IN(::acdk::lang::RString) message, IN(::acdk::lang::RString) caption)
  : TextEntryDialog(parent, message, caption)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextEntryDialog_DmiProxy(IN(::acdk::wx::RWindow) parent, IN(::acdk::lang::RString) message, IN(::acdk::lang::RString) caption, IN(::acdk::lang::RString) defaultValue)
  : TextEntryDialog(parent, message, caption, defaultValue)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TextEntryDialog_DmiProxy(IN(::acdk::wx::RWindow) parent, IN(::acdk::lang::RString) message, IN(::acdk::lang::RString) caption, IN(::acdk::lang::RString) defaultValue, int style)
  : TextEntryDialog(parent, message, caption, defaultValue, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void endModal(int retCode)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::endModal(retCode);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(retCode);
    _dmiProxyGetTarget()->standardDispatch("endModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  bool isModal()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::isModal();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("isModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int showModal()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::showModal();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("showModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TextEntryDialog)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextEntryDialog_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::lang::RString)args[3].getObjectVar(), args[4].getIntVar(), (::acdk::wx::RPoint)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextEntryDialog_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextEntryDialog_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextEntryDialog_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::lang::RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TextEntryDialog_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::lang::RString)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TextEntryDialog_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextEntryDialog::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TextEntryDialog_DmiProxy_interfaces[] =
{
  &TextEntryDialog_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_message =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "message",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_caption =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "caption",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_defaultValue =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "defaultValue",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_args[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_parent,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_message,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_caption,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_defaultValue,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_style,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TextEntryDialog_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextEntryDialog::clazzInfo(), // returnType
  "_0_TextEntryDialog_DmiProxy", // altname
  -1, // altnamehashCode
  TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  TextEntryDialog_DmiProxy::_TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_arg_message =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "message",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_args[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_arg_parent,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_arg_message,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextEntryDialog_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextEntryDialog::clazzInfo(), // returnType
  "_1_TextEntryDialog_DmiProxy", // altname
  -1, // altnamehashCode
  TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TextEntryDialog_DmiProxy::_TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_message =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "message",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_caption =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "caption",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_parent,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_message,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_arg_caption,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextEntryDialog_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextEntryDialog::clazzInfo(), // returnType
  "_2_TextEntryDialog_DmiProxy", // altname
  -1, // altnamehashCode
  TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TextEntryDialog_DmiProxy::_TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_message =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "message",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_caption =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "caption",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_defaultValue =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "defaultValue",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_parent,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_message,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_caption,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_arg_defaultValue,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextEntryDialog_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextEntryDialog::clazzInfo(), // returnType
  "_3_TextEntryDialog_DmiProxy", // altname
  -1, // altnamehashCode
  TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TextEntryDialog_DmiProxy::_TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_message =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "message",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_caption =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "caption",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_defaultValue =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "defaultValue",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_args[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_parent,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_message,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_caption,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_defaultValue,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TextEntryDialog_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TextEntryDialog::clazzInfo(), // returnType
  "_4_TextEntryDialog_DmiProxy", // altname
  -1, // altnamehashCode
  TextEntryDialog_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_args,
  0, // argumentCount
  0, // excpetions,
  TextEntryDialog_DmiProxy::_TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TextEntryDialog_methods[] = 
{
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I_in_acdk_wx_Point,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String,
  &TextEntryDialog_DmiProxy_methods__TextEntryDialog_in_acdk_wx_Window_in_acdk_lang_String_in_acdk_lang_String_in_acdk_lang_String_I,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TextEntryDialog_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TextEntryDialog_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TextEntryDialog_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TextEntryDialog_DmiProxy(TextEntryDialog_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TimerEvent_DmiProxy
: extends TimerEvent
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TimerEvent)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TimerEvent::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TimerEvent)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TimerEvent_DmiProxy(int id, int interval)
  : TimerEvent(id, interval)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TimerEvent_DmiProxy()
  : TimerEvent()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TimerEvent_DmiProxy(int id)
  : TimerEvent(id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TimerEvent)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TimerEvent_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TimerEvent_DmiProxy(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TimerEvent_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TimerEvent_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TimerEvent_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TimerEvent_DmiProxy(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TimerEvent_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TimerEvent::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TimerEvent_DmiProxy_interfaces[] =
{
  &TimerEvent_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_DmiProxy_methods__TimerEvent_I_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_DmiProxy_methods__TimerEvent_I_I_arg_interval =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "interval",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods__TimerEvent_I_I_args[] = 
{
  &TimerEvent_DmiProxy_methods__TimerEvent_I_I_arg_id,
  &TimerEvent_DmiProxy_methods__TimerEvent_I_I_arg_interval,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_DmiProxy_methods__TimerEvent_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TimerEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TimerEvent::clazzInfo(), // returnType
  "_0_TimerEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TimerEvent_methods__TimerEvent_I_I_args,
  0, // argumentCount
  0, // excpetions,
  TimerEvent_DmiProxy::_TimerEvent_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods__TimerEvent_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_DmiProxy_methods__TimerEvent = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TimerEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TimerEvent::clazzInfo(), // returnType
  "_1_TimerEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TimerEvent_methods__TimerEvent_args,
  0, // argumentCount
  0, // excpetions,
  TimerEvent_DmiProxy::_TimerEvent_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_DmiProxy_methods__TimerEvent_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods__TimerEvent_I_args[] = 
{
  &TimerEvent_DmiProxy_methods__TimerEvent_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_DmiProxy_methods__TimerEvent_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TimerEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TimerEvent::clazzInfo(), // returnType
  "_2_TimerEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TimerEvent_methods__TimerEvent_I_args,
  0, // argumentCount
  0, // excpetions,
  TimerEvent_DmiProxy::_TimerEvent_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TimerEvent_methods[] = 
{
  &TimerEvent_DmiProxy_methods__TimerEvent_I_I,
  &TimerEvent_DmiProxy_methods__TimerEvent,
  &TimerEvent_DmiProxy_methods__TimerEvent_I,
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TimerEvent_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TimerEvent_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TimerEvent_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TimerEvent_DmiProxy(TimerEvent_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Timer_DmiProxy
: extends Timer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Timer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Timer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Timer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Timer_DmiProxy()
  : Timer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Timer_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : Timer(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Timer_DmiProxy(IN(::acdk::wx::RWindow) parent)
  : Timer(parent)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  bool isRunning()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::isRunning();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("isRunning", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool start(int milliseconds, bool oneShot)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::start(milliseconds, oneShot);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(milliseconds);
    __acdk_args[1] = ::acdk::lang::inOf(oneShot);
    _dmiProxyGetTarget()->standardDispatch("start", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void stop()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::clazzInfo()->methods[8]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::stop();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("stop", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Timer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Timer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Timer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Timer_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Timer_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Timer_in_acdk_wx_Window_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Timer_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Timer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Timer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Timer_DmiProxy_interfaces[] =
{
  &Timer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods__Timer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_DmiProxy_methods__Timer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Timer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Timer::clazzInfo(), // returnType
  "_0_Timer_DmiProxy", // altname
  -1, // altnamehashCode
  Timer_methods__Timer_args,
  0, // argumentCount
  0, // excpetions,
  Timer_DmiProxy::_Timer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods__Timer_in_acdk_wx_Window_I_args[] = 
{
  &Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I_arg_parent,
  &Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Timer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Timer::clazzInfo(), // returnType
  "_1_Timer_DmiProxy", // altname
  -1, // altnamehashCode
  Timer_methods__Timer_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  Timer_DmiProxy::_Timer_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods__Timer_in_acdk_wx_Window_args[] = 
{
  &Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_arg_parent,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_DmiProxy_methods__Timer_in_acdk_wx_Window = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Timer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Timer::clazzInfo(), // returnType
  "_2_Timer_DmiProxy", // altname
  -1, // altnamehashCode
  Timer_methods__Timer_in_acdk_wx_Window_args,
  0, // argumentCount
  0, // excpetions,
  Timer_DmiProxy::_Timer_in_acdk_wx_Window_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Timer_methods[] = 
{
  &Timer_DmiProxy_methods__Timer,
  &Timer_DmiProxy_methods__Timer_in_acdk_wx_Window_I,
  &Timer_DmiProxy_methods__Timer_in_acdk_wx_Window,
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Timer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Timer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Timer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Timer_DmiProxy(Timer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class ToggleButton_DmiProxy
: extends ToggleButton
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ToggleButton)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  ToggleButton::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, ToggleButton)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ToggleButton_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style, IN(::acdk::wx::RValidator) validator)
  : ToggleButton(parent, id, label, pos, size, style, validator)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToggleButton_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label)
  : ToggleButton(parent, id, label)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToggleButton_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos)
  : ToggleButton(parent, id, label, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToggleButton_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : ToggleButton(parent, id, label, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToggleButton_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : ToggleButton(parent, id, label, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void command(IN(::acdk::wx::RCommandEvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Control)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::command(event);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("command", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToggleButton)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToggleButton_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar(), (::acdk::wx::RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToggleButton_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToggleButton_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToggleButton_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToggleButton_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RPoint)args[3].getObjectVar(), (::acdk::wx::RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ToggleButton_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ToggleButton::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ToggleButton_DmiProxy_interfaces[] =
{
  &ToggleButton_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_validator =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "validator",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Validator::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_args[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_parent,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_id,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_label,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_pos,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_size,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_style,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_validator,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ToggleButton_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToggleButton::clazzInfo(), // returnType
  "_0_ToggleButton_DmiProxy", // altname
  -1, // altnamehashCode
  ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_args,
  0, // argumentCount
  0, // excpetions,
  ToggleButton_DmiProxy::_ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_args[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_arg_label,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToggleButton_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToggleButton::clazzInfo(), // returnType
  "_1_ToggleButton_DmiProxy", // altname
  -1, // altnamehashCode
  ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ToggleButton_DmiProxy::_ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_parent,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_id,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_label,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToggleButton_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToggleButton::clazzInfo(), // returnType
  "_2_ToggleButton_DmiProxy", // altname
  -1, // altnamehashCode
  ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  ToggleButton_DmiProxy::_ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_label,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToggleButton_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToggleButton::clazzInfo(), // returnType
  "_3_ToggleButton_DmiProxy", // altname
  -1, // altnamehashCode
  ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  ToggleButton_DmiProxy::_ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_label,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToggleButton_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToggleButton::clazzInfo(), // returnType
  "_4_ToggleButton_DmiProxy", // altname
  -1, // altnamehashCode
  ToggleButton_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  ToggleButton_DmiProxy::_ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ToggleButton_methods[] = 
{
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size,
  &ToggleButton_DmiProxy_methods__ToggleButton_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Point_in_acdk_wx_Size_I,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ToggleButton_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _ToggleButton_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ToggleButton_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ToggleButton_DmiProxy(ToggleButton_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class ToolBarToolBase_DmiProxy
: extends ToolBarToolBase
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ToolBarToolBase)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  ToolBarToolBase::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, ToolBarToolBase)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal, IN(::acdk::wx::RBitmap) bmpDisabled, ItemKind kind, IN(::acdk::lang::RObject) clientData, IN(::acdk::lang::RString) shortHelpString, IN(::acdk::lang::RString) longHelpString)
  : ToolBarToolBase(tbar, id, label, bmpNormal, bmpDisabled, (ItemKind)kind, clientData, shortHelpString, longHelpString)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy()
  : ToolBarToolBase()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar)
  : ToolBarToolBase(tbar)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id)
  : ToolBarToolBase(tbar, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label)
  : ToolBarToolBase(tbar, id, label)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal)
  : ToolBarToolBase(tbar, id, label, bmpNormal)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal, IN(::acdk::wx::RBitmap) bmpDisabled)
  : ToolBarToolBase(tbar, id, label, bmpNormal, bmpDisabled)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal, IN(::acdk::wx::RBitmap) bmpDisabled, ItemKind kind)
  : ToolBarToolBase(tbar, id, label, bmpNormal, bmpDisabled, (ItemKind)kind)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal, IN(::acdk::wx::RBitmap) bmpDisabled, ItemKind kind, IN(::acdk::lang::RObject) clientData)
  : ToolBarToolBase(tbar, id, label, bmpNormal, bmpDisabled, (ItemKind)kind, clientData)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBarToolBase_DmiProxy(IN(::acdk::wx::RToolBar) tbar, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bmpNormal, IN(::acdk::wx::RBitmap) bmpDisabled, ItemKind kind, IN(::acdk::lang::RObject) clientData, IN(::acdk::lang::RString) shortHelpString)
  : ToolBarToolBase(tbar, id, label, bmpNormal, bmpDisabled, (ItemKind)kind, clientData, shortHelpString)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void attach(IN(::acdk::wx::RToolBar) tbar)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::clazzInfo()->methods[11]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::attach(tbar);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(tbar);
    _dmiProxyGetTarget()->standardDispatch("attach", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void detach()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::clazzInfo()->methods[13]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::detach();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("detach", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setLabel(IN(::acdk::lang::RString) label)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::clazzInfo()->methods[34]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::setLabel(label);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(label);
    _dmiProxyGetTarget()->standardDispatch("setLabel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarToolBase)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (::acdk::lang::RObject)args[6].getObjectVar(), (::acdk::lang::RString)args[7].getObjectVar(), (::acdk::lang::RString)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RBitmap)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (::acdk::lang::RObject)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBarToolBase_DmiProxy((::acdk::wx::RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (::acdk::lang::RObject)args[6].getObjectVar(), (::acdk::lang::RString)args[7].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ToolBarToolBase_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ToolBarToolBase::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ToolBarToolBase_DmiProxy_interfaces[] =
{
  &ToolBarToolBase_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_bmpDisabled =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpDisabled",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_kind =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "kind",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_clientData =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "clientData",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_shortHelpString =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "shortHelpString",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_longHelpString =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "longHelpString",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_bmpNormal,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_bmpDisabled,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_kind,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_clientData,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_shortHelpString,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_arg_longHelpString,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_0_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_1_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_arg_tbar,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_2_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_3_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_arg_label,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_4_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_bmpNormal,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_5_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_bmpDisabled =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpDisabled",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_bmpNormal,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_6_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_bmpDisabled =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpDisabled",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_kind =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "kind",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_bmpNormal,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_bmpDisabled,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_arg_kind,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_7_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_bmpDisabled =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpDisabled",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_kind =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "kind",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_clientData =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "clientData",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_bmpNormal,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_bmpDisabled,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_kind,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_arg_clientData,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_8_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_tbar =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "tbar",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_label =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "label",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_bmpNormal =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpNormal",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_bmpDisabled =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bmpDisabled",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_kind =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "kind",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_clientData =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "clientData",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_shortHelpString =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "shortHelpString",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_args[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_tbar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_id,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_label,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_bmpNormal,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_bmpDisabled,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_kind,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_clientData,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_arg_shortHelpString,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBarToolBase_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBarToolBase::clazzInfo(), // returnType
  "_9_ToolBarToolBase_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBarToolBase_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ToolBarToolBase_DmiProxy::_ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ToolBarToolBase_methods[] = 
{
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String_in_acdk_lang_String,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object,
  &ToolBarToolBase_DmiProxy_methods__ToolBarToolBase_in_acdk_wx_ToolBar_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Bitmap_I_in_acdk_lang_Object_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ToolBarToolBase_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _ToolBarToolBase_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ToolBarToolBase_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ToolBarToolBase_DmiProxy(ToolBarToolBase_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class ToolBar_DmiProxy
: extends ToolBar
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ToolBar)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  ToolBar::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, ToolBar)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ToolBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : ToolBar(parent, id, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : ToolBar(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos)
  : ToolBar(parent, id, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ToolBar_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : ToolBar(parent, id, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::wx::RToolBarToolBase addControl(IN(::acdk::wx::RControl) control)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::addControl(control);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(control);
    _dmiProxyGetTarget()->standardDispatch("addControl", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase addSeparator()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::addSeparator();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("addSeparator", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  void clearTools()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[21]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::clearTools();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clearTools", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  bool deleteTool(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[22]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::deleteTool(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("deleteTool", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool deleteToolByPos(int pos)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[23]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::deleteToolByPos(pos);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(pos);
    _dmiProxyGetTarget()->standardDispatch("deleteToolByPos", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void enableTool(int id, bool enable)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[24]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::enableTool(id, enable);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(enable);
    _dmiProxyGetTarget()->standardDispatch("enableTool", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::wx::RControl findControl(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[25]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::findControl(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("findControl", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RControl)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase findToolForPosition(int x, int y)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[26]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::findToolForPosition(x, y);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    _dmiProxyGetTarget()->standardDispatch("findToolForPosition", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RSize getToolBitmapSize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[29]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolBitmapSize();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getToolBitmapSize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RSize)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::lang::RObject getToolClientData(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[30]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolClientData(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("getToolClientData", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  bool getToolEnabled(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[31]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolEnabled(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("getToolEnabled", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString getToolLongHelp(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[32]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolLongHelp(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("getToolLongHelp", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RSize getToolMargins()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[33]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolMargins();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getToolMargins", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RSize)(::acdk::lang::RObject)__acdk_retval;
  }
  int getToolPacking()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[34]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolPacking();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getToolPacking", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getToolSeparation()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[35]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolSeparation();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getToolSeparation", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString getToolShortHelp(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[36]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolShortHelp(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("getToolShortHelp", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RSize getToolSize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[37]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolSize();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getToolSize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RSize)(::acdk::lang::RObject)__acdk_retval;
  }
  bool getToolState(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[38]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getToolState(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("getToolState", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase insertControl(int pos, IN(::acdk::wx::RControl) control)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[39]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::insertControl(pos, control);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(pos);
    __acdk_args[1] = ::acdk::lang::inOf(control);
    _dmiProxyGetTarget()->standardDispatch("insertControl", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase insertSeparator(int pos)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[40]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::insertSeparator(pos);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(pos);
    _dmiProxyGetTarget()->standardDispatch("insertSeparator", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase insertTool(int pos, int id, IN(::acdk::lang::RString) label, IN(::acdk::wx::RBitmap) bitmap, IN(::acdk::wx::RBitmap) bmpDisabled, ItemKind kind, IN(::acdk::lang::RString) shortHelp, IN(::acdk::lang::RString) longHelp, IN(::acdk::lang::RObject) clientData)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[41]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::insertTool(pos, id, label, bitmap, bmpDisabled, kind, shortHelp, longHelp, clientData);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(9);
    __acdk_args[0] = ::acdk::lang::inOf(pos);
    __acdk_args[1] = ::acdk::lang::inOf(id);
    __acdk_args[2] = ::acdk::lang::inOf(label);
    __acdk_args[3] = ::acdk::lang::inOf(bitmap);
    __acdk_args[4] = ::acdk::lang::inOf(bmpDisabled);
    __acdk_args[5] = ::acdk::lang::inOf(kind);
    __acdk_args[6] = ::acdk::lang::inOf(shortHelp);
    __acdk_args[7] = ::acdk::lang::inOf(longHelp);
    __acdk_args[8] = ::acdk::lang::inOf(clientData);
    _dmiProxyGetTarget()->standardDispatch("insertTool", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  bool realize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[48]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::realize();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("realize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::wx::RToolBarToolBase removeTool(int id)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[49]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::removeTool(id);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    _dmiProxyGetTarget()->standardDispatch("removeTool", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::wx::RToolBarToolBase)(::acdk::lang::RObject)__acdk_retval;
  }
  void setMargins(int x, int y)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[50]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setMargins(x, y);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(x);
    __acdk_args[1] = ::acdk::lang::inOf(y);
    _dmiProxyGetTarget()->standardDispatch("setMargins", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setRows(int nRows)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[53]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setRows(nRows);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(nRows);
    _dmiProxyGetTarget()->standardDispatch("setRows", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToggle(int id, bool toggle)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[54]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToggle(id, toggle);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(toggle);
    _dmiProxyGetTarget()->standardDispatch("setToggle", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolBitmapSize(IN(::acdk::wx::RSize) size)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[55]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolBitmapSize(size);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(size);
    _dmiProxyGetTarget()->standardDispatch("setToolBitmapSize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolClientData(int id, IN(::acdk::lang::RObject) clientData)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[56]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolClientData(id, clientData);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(clientData);
    _dmiProxyGetTarget()->standardDispatch("setToolClientData", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolLongHelp(int id, IN(::acdk::lang::RString) helpString)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[57]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolLongHelp(id, helpString);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(helpString);
    _dmiProxyGetTarget()->standardDispatch("setToolLongHelp", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolPacking(int packing)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[58]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolPacking(packing);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(packing);
    _dmiProxyGetTarget()->standardDispatch("setToolPacking", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolSeparation(int separation)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[59]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolSeparation(separation);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(separation);
    _dmiProxyGetTarget()->standardDispatch("setToolSeparation", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setToolShortHelp(int id, IN(::acdk::lang::RString) helpString)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[60]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setToolShortHelp(id, helpString);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(helpString);
    _dmiProxyGetTarget()->standardDispatch("setToolShortHelp", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void toggleTool(int id, bool toggle)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBarBase)::clazzInfo()->methods[61]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::toggleTool(id, toggle);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(id);
    __acdk_args[1] = ::acdk::lang::inOf(toggle);
    _dmiProxyGetTarget()->standardDispatch("toggleTool", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void command(IN(::acdk::wx::RCommandEvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Control)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::command(event);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("command", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolBar)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBar_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolBar_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ToolBar_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ToolBar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ToolBar_DmiProxy_interfaces[] =
{
  &ToolBar_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ToolBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBar::clazzInfo(), // returnType
  "_0_ToolBar_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  ToolBar_DmiProxy::_ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods__ToolBar_in_acdk_wx_Window_I_args[] = 
{
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_arg_parent,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBar::clazzInfo(), // returnType
  "_1_ToolBar_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBar_methods__ToolBar_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  ToolBar_DmiProxy::_ToolBar_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_args[] = 
{
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBar::clazzInfo(), // returnType
  "_2_ToolBar_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  ToolBar_DmiProxy::_ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ToolBar_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolBar::clazzInfo(), // returnType
  "_3_ToolBar_DmiProxy", // altname
  -1, // altnamehashCode
  ToolBar_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  ToolBar_DmiProxy::_ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ToolBar_methods[] = 
{
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point,
  &ToolBar_DmiProxy_methods__ToolBar_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ToolBar_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _ToolBar_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ToolBar_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ToolBar_DmiProxy(ToolBar_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class ToolTip_DmiProxy
: extends ToolTip
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ToolTip)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  ToolTip::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, ToolTip)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ToolTip_DmiProxy(IN(::acdk::lang::RString) text)
  : ToolTip(text)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, ToolTip)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ToolTip_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ToolTip_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ToolTip_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ToolTip::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ToolTip_DmiProxy_interfaces[] =
{
  &ToolTip_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolTip_DmiProxy_methods__ToolTip_in_acdk_lang_String_arg_text =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "text",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods__ToolTip_in_acdk_lang_String_args[] = 
{
  &ToolTip_DmiProxy_methods__ToolTip_in_acdk_lang_String_arg_text,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_DmiProxy_methods__ToolTip_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ToolTip_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ToolTip::clazzInfo(), // returnType
  "_0_ToolTip_DmiProxy", // altname
  -1, // altnamehashCode
  ToolTip_methods__ToolTip_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ToolTip_DmiProxy::_ToolTip_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ToolTip_methods[] = 
{
  &ToolTip_DmiProxy_methods__ToolTip_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ToolTip_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _ToolTip_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ToolTip_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ToolTip_DmiProxy(ToolTip_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TreeItemId_DmiProxy
: extends TreeItemId
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TreeItemId)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TreeItemId::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TreeItemId)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TreeItemId_DmiProxy()
  : TreeItemId()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeItemId_DmiProxy(int lItem)
  : TreeItemId(lItem)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemId)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeItemId_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeItemId_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeItemId_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeItemId_DmiProxy(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TreeItemId_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeItemId::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeItemId_DmiProxy_interfaces[] =
{
  &TreeItemId_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods__TreeItemId_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_DmiProxy_methods__TreeItemId = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeItemId_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeItemId::clazzInfo(), // returnType
  "_0_TreeItemId_DmiProxy", // altname
  -1, // altnamehashCode
  TreeItemId_methods__TreeItemId_args,
  0, // argumentCount
  0, // excpetions,
  TreeItemId_DmiProxy::_TreeItemId_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemId_DmiProxy_methods__TreeItemId_I_arg_lItem =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "lItem",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemId_methods__TreeItemId_I_args[] = 
{
  &TreeItemId_DmiProxy_methods__TreeItemId_I_arg_lItem,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemId_DmiProxy_methods__TreeItemId_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeItemId_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeItemId::clazzInfo(), // returnType
  "_1_TreeItemId_DmiProxy", // altname
  -1, // altnamehashCode
  TreeItemId_methods__TreeItemId_I_args,
  0, // argumentCount
  0, // excpetions,
  TreeItemId_DmiProxy::_TreeItemId_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TreeItemId_methods[] = 
{
  &TreeItemId_DmiProxy_methods__TreeItemId,
  &TreeItemId_DmiProxy_methods__TreeItemId_I,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemId_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TreeItemId_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TreeItemId_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TreeItemId_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeItemId_DmiProxy(TreeItemId_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TreeItemData_DmiProxy
: extends TreeItemData
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TreeItemData)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TreeItemData::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TreeItemData)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TreeItemData_DmiProxy(IN(::acdk::lang::RObject) data)
  : TreeItemData(data)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeItemData)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeItemData_in_acdk_lang_Object_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeItemData_DmiProxy((::acdk::lang::RObject)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TreeItemData_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeItemData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeItemData_DmiProxy_interfaces[] =
{
  &TreeItemData_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeItemData_DmiProxy_methods__TreeItemData_in_acdk_lang_Object_arg_data =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "data",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeItemData_methods__TreeItemData_in_acdk_lang_Object_args[] = 
{
  &TreeItemData_DmiProxy_methods__TreeItemData_in_acdk_lang_Object_arg_data,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeItemData_DmiProxy_methods__TreeItemData_in_acdk_lang_Object = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeItemData_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeItemData::clazzInfo(), // returnType
  "_0_TreeItemData_DmiProxy", // altname
  -1, // altnamehashCode
  TreeItemData_methods__TreeItemData_in_acdk_lang_Object_args,
  0, // argumentCount
  0, // excpetions,
  TreeItemData_DmiProxy::_TreeItemData_in_acdk_lang_Object_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TreeItemData_methods[] = 
{
  &TreeItemData_DmiProxy_methods__TreeItemData_in_acdk_lang_Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeItemData_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TreeItemData_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TreeItemData_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TreeItemData_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeItemData_DmiProxy(TreeItemData_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TreeEvent_DmiProxy
: extends TreeEvent
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TreeEvent)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TreeEvent::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TreeEvent)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TreeEvent_DmiProxy(int commandType, int id)
  : TreeEvent(commandType, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeEvent_DmiProxy()
  : TreeEvent()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeEvent_DmiProxy(int commandType)
  : TreeEvent(commandType)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, NotifyEvent)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeEvent)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeEvent_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeEvent_DmiProxy(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeEvent_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeEvent_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeEvent_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeEvent_DmiProxy(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TreeEvent_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeEvent::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeEvent_DmiProxy_interfaces[] =
{
  &TreeEvent_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_DmiProxy_methods__TreeEvent_I_I_arg_commandType =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "commandType",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_DmiProxy_methods__TreeEvent_I_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods__TreeEvent_I_I_args[] = 
{
  &TreeEvent_DmiProxy_methods__TreeEvent_I_I_arg_commandType,
  &TreeEvent_DmiProxy_methods__TreeEvent_I_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_DmiProxy_methods__TreeEvent_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeEvent::clazzInfo(), // returnType
  "_0_TreeEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TreeEvent_methods__TreeEvent_I_I_args,
  0, // argumentCount
  0, // excpetions,
  TreeEvent_DmiProxy::_TreeEvent_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods__TreeEvent_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_DmiProxy_methods__TreeEvent = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeEvent::clazzInfo(), // returnType
  "_1_TreeEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TreeEvent_methods__TreeEvent_args,
  0, // argumentCount
  0, // excpetions,
  TreeEvent_DmiProxy::_TreeEvent_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeEvent_DmiProxy_methods__TreeEvent_I_arg_commandType =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "commandType",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeEvent_methods__TreeEvent_I_args[] = 
{
  &TreeEvent_DmiProxy_methods__TreeEvent_I_arg_commandType,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeEvent_DmiProxy_methods__TreeEvent_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeEvent_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeEvent::clazzInfo(), // returnType
  "_2_TreeEvent_DmiProxy", // altname
  -1, // altnamehashCode
  TreeEvent_methods__TreeEvent_I_args,
  0, // argumentCount
  0, // excpetions,
  TreeEvent_DmiProxy::_TreeEvent_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TreeEvent_methods[] = 
{
  &TreeEvent_DmiProxy_methods__TreeEvent_I_I,
  &TreeEvent_DmiProxy_methods__TreeEvent,
  &TreeEvent_DmiProxy_methods__TreeEvent_I,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeEvent_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TreeEvent_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TreeEvent_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TreeEvent_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeEvent_DmiProxy(TreeEvent_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class TreeCtrl_DmiProxy
: extends TreeCtrl
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TreeCtrl)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TreeCtrl::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, TreeCtrl)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TreeCtrl_DmiProxy()
  : TreeCtrl()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style, IN(::acdk::wx::RValidator) validator, IN(::acdk::lang::RString) name)
  : TreeCtrl(parent, id, pos, size, style, validator, name)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent)
  : TreeCtrl(parent)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : TreeCtrl(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos)
  : TreeCtrl(parent, id, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : TreeCtrl(parent, id, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style)
  : TreeCtrl(parent, id, pos, size, style)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  TreeCtrl_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size, int style, IN(::acdk::wx::RValidator) validator)
  : TreeCtrl(parent, id, pos, size, style, validator)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int onCompareItems(IN(::acdk::wx::RTreeItemId) item1, IN(::acdk::wx::RTreeItemId) item2)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::clazzInfo()->methods[72]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::onCompareItems(item1, item2);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(item1);
    __acdk_args[1] = ::acdk::lang::inOf(item2);
    _dmiProxyGetTarget()->standardDispatch("onCompareItems", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setFont(IN(::acdk::wx::RFont) font)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::clazzInfo()->methods[79]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::setFont(font);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(font);
    _dmiProxyGetTarget()->standardDispatch("setFont", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, TreeCtrl)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar(), args[4].getIntVar(), (::acdk::wx::RValidator)args[5].getObjectVar(), (::acdk::lang::RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TreeCtrl_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar(), args[4].getIntVar(), (::acdk::wx::RValidator)args[5].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TreeCtrl_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeCtrl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeCtrl_DmiProxy_interfaces[] =
{
  &TreeCtrl_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_0_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_validator =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "validator",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Validator::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "name",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_id,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_pos,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_size,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_style,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_validator,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_arg_name,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_1_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_arg_parent,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_2_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_3_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_4_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_5_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_id,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_pos,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_size,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_arg_style,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_6_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_style =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "style",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_validator =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "validator",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Validator::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_args[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_parent,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_id,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_pos,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_size,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_style,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_arg_validator,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "TreeCtrl_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TreeCtrl::clazzInfo(), // returnType
  "_7_TreeCtrl_DmiProxy", // altname
  -1, // altnamehashCode
  TreeCtrl_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_args,
  0, // argumentCount
  0, // excpetions,
  TreeCtrl_DmiProxy::_TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TreeCtrl_methods[] = 
{
  &TreeCtrl_DmiProxy_methods__TreeCtrl,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator_in_acdk_lang_String,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I,
  &TreeCtrl_DmiProxy_methods__TreeCtrl_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_I_in_acdk_wx_Validator,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeCtrl_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TreeCtrl_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TreeCtrl_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TreeCtrl_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeCtrl_DmiProxy(TreeCtrl_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Validator_DmiProxy
: extends Validator
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Validator)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Validator::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Validator)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Validator_DmiProxy()
  : Validator()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  bool transferFromWindow()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::transferFromWindow();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("transferFromWindow", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool transferToWindow()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::clazzInfo()->methods[10]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::transferToWindow();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("transferToWindow", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool validate(IN(::acdk::wx::RWindow) parent)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::clazzInfo()->methods[11]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::validate(parent);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(parent);
    _dmiProxyGetTarget()->standardDispatch("validate", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Validator)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Validator_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Validator_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Validator_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Validator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Validator_DmiProxy_interfaces[] =
{
  &Validator_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Validator_methods__Validator_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Validator_DmiProxy_methods__Validator = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Validator_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Validator::clazzInfo(), // returnType
  "_0_Validator_DmiProxy", // altname
  -1, // altnamehashCode
  Validator_methods__Validator_args,
  0, // argumentCount
  0, // excpetions,
  Validator_DmiProxy::_Validator_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Validator_methods[] = 
{
  &Validator_DmiProxy_methods__Validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Validator_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Validator_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Validator_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Validator_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Validator_DmiProxy(Validator_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Window_DmiProxy
: extends Window
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Window)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Window::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Window)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Window_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos, IN(::acdk::wx::RSize) size)
  : Window(parent, id, pos, size)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Window_DmiProxy(IN(::acdk::wx::RWindow) parent, int id)
  : Window(parent, id)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Window_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::wx::RPoint) pos)
  : Window(parent, id, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Window_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar(), (::acdk::wx::RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Window_in_acdk_wx_Window_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Window_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Window_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Window_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::wx::RPoint)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Window_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Window::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Window_DmiProxy_interfaces[] =
{
  &Window_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "size",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Size::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args[] = 
{
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_parent,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_id,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_pos,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_arg_size,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Window_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Window::clazzInfo(), // returnType
  "_0_Window_DmiProxy", // altname
  -1, // altnamehashCode
  Window_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_args,
  0, // argumentCount
  0, // excpetions,
  Window_DmiProxy::_Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods__Window_in_acdk_wx_Window_I_args[] = 
{
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_arg_parent,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_arg_id,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Window_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Window::clazzInfo(), // returnType
  "_1_Window_DmiProxy", // altname
  -1, // altnamehashCode
  Window_methods__Window_in_acdk_wx_Window_I_args,
  0, // argumentCount
  0, // excpetions,
  Window_DmiProxy::_Window_in_acdk_wx_Window_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Window_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_args[] = 
{
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_parent,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_id,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Window_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Window::clazzInfo(), // returnType
  "_2_Window_DmiProxy", // altname
  -1, // altnamehashCode
  Window_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  Window_DmiProxy::_Window_in_acdk_wx_Window_I_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Window_methods[] = 
{
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point_in_acdk_wx_Size,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I,
  &Window_DmiProxy_methods__Window_in_acdk_wx_Window_I_in_acdk_wx_Point,
  0
};

::acdk::lang::dmi::ClazzInfo* Window_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Window_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Window_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Window_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Window_DmiProxy(Window_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 

class Wizard_DmiProxy
: extends Wizard
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Wizard)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Wizard::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::wx::, Wizard)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Wizard_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) title, IN(::acdk::wx::RBitmap) bitmap, IN(::acdk::wx::RPoint) pos)
  : Wizard(parent, id, title, bitmap, pos)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Wizard_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) title)
  : Wizard(parent, id, title)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Wizard_DmiProxy(IN(::acdk::wx::RWindow) parent, int id, IN(::acdk::lang::RString) title, IN(::acdk::wx::RBitmap) bitmap)
  : Wizard(parent, id, title, bitmap)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  bool hasNextPage(IN(::acdk::wx::RWizardPage) page)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::hasNextPage(page);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(page);
    _dmiProxyGetTarget()->standardDispatch("hasNextPage", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool hasPrevPage(IN(::acdk::wx::RWizardPage) page)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::hasPrevPage(page);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(page);
    _dmiProxyGetTarget()->standardDispatch("hasPrevPage", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void endModal(int retCode)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::endModal(retCode);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(retCode);
    _dmiProxyGetTarget()->standardDispatch("endModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  bool isModal()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::isModal();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("isModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int showModal()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Dialog)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::showModal();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("showModal", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void SetFocusFromKbd()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[2]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::SetFocusFromKbd();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("SetFocusFromKbd", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  int getWindowStyleFlag()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[86]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::getWindowStyleFlag();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getWindowStyleFlag", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool setCursor(IN(::acdk::wx::RCursor) cursor)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Window)::clazzInfo()->methods[148]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::setCursor(cursor);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cursor);
    _dmiProxyGetTarget()->standardDispatch("setCursor", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool processEvent(IN(::acdk::wx::REvent) event)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, EvtHandler)::clazzInfo()->methods[12]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::processEvent(event);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(event);
    _dmiProxyGetTarget()->standardDispatch("processEvent", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::wx::, Wizard)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Wizard_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar(), (::acdk::wx::RPoint)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Wizard_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Wizard_DmiProxy((::acdk::wx::RWindow)args[0].getObjectVar(), args[1].getIntVar(), (::acdk::lang::RString)args[2].getObjectVar(), (::acdk::wx::RBitmap)args[3].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Wizard_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Wizard::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Wizard_DmiProxy_interfaces[] =
{
  &Wizard_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_title =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "title",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_bitmap =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bitmap",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_pos =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "pos",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Point::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_args[] = 
{
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_parent,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_id,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_title,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_bitmap,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_arg_pos,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Wizard_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Wizard::clazzInfo(), // returnType
  "_0_Wizard_DmiProxy", // altname
  -1, // altnamehashCode
  Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_args,
  0, // argumentCount
  0, // excpetions,
  Wizard_DmiProxy::_Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_title =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "title",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_args[] = 
{
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_parent,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_id,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_arg_title,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Wizard_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Wizard::clazzInfo(), // returnType
  "_1_Wizard_DmiProxy", // altname
  -1, // altnamehashCode
  Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  Wizard_DmiProxy::_Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_parent =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "parent",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Window::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_id =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "id",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_title =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "title",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_bitmap =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "bitmap",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::wx::Bitmap::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_args[] = 
{
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_parent,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_id,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_title,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Wizard_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Wizard::clazzInfo(), // returnType
  "_2_Wizard_DmiProxy", // altname
  -1, // altnamehashCode
  Wizard_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_args,
  0, // argumentCount
  0, // excpetions,
  Wizard_DmiProxy::_Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Wizard_methods[] = 
{
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap_in_acdk_wx_Point,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String,
  &Wizard_DmiProxy_methods__Wizard_in_acdk_wx_Window_I_in_acdk_lang_String_in_acdk_wx_Bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* Wizard_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Wizard_DmiProxy", // name of class
  -1, // hashCode
    "acdk/wx", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Wizard_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Wizard_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Wizard_DmiProxy(Wizard_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace wx

