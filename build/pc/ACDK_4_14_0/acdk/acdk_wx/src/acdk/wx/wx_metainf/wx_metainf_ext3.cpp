// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FileDataObject_create_array(int length)
{
  return new ObjectArrayImpl<RFileDataObject>(length);
}

//static
::acdk::lang::RObject
FileDataObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDataObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDataObject_method_FileDataObject__LRFileDataObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDataObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDataObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDataObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDataObject_method_addFile_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDataObject* This = dmi_cast<FileDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDataObject::addFile((RString)args[0].getObjectVar());
    else
        This->addFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDataObject_method_getFilenames__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDataObject* This = dmi_cast<FileDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDataObject::getFilenames();
    else
        ret = (::acdk::lang::RObject)This->getFilenames();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDataObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDataObject_methods_FileDataObject__LRFileDataObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDataObject_methods_FileDataObject__LRFileDataObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDataObject_method_FileDataObject__LRFileDataObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDataObject::clazzInfo(), // return type
  "_0_FileDataObject", // alternative name of method
  -1, // altlabelHashCode
  FileDataObject_methods_FileDataObject__LRFileDataObject__args, // the arguments
  0, //arguments count
  FileDataObject_methods_FileDataObject__LRFileDataObject__exceptions, // the declared exceptions
  FileDataObject_MetainfoWrapper::FileDataObject_method_FileDataObject__LRFileDataObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDataObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDataObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDataObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDataObject_MetainfoWrapper::FileDataObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDataObject_methods_addFile_INLRString__V_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDataObject_methods_addFile_INLRString__V_args[] = 
{
  &FileDataObject_methods_addFile_INLRString__V_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDataObject_methods_addFile_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDataObject_method_addFile_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_addFile", // alternative name of method
  -1, // altlabelHashCode
  FileDataObject_methods_addFile_INLRString__V_args, // the arguments
  0, //arguments count
  FileDataObject_methods_addFile_INLRString__V_exceptions, // the declared exceptions
  FileDataObject_MetainfoWrapper::FileDataObject_method_addFile_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDataObject_methods_getFilenames__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDataObject_methods_getFilenames__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDataObject_method_getFilenames__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilenames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2_getFilenames", // alternative name of method
  -1, // altlabelHashCode
  FileDataObject_methods_getFilenames__LRStringArray__args, // the arguments
  0, //arguments count
  FileDataObject_methods_getFilenames__LRStringArray__exceptions, // the declared exceptions
  FileDataObject_MetainfoWrapper::FileDataObject_method_getFilenames__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDataObject_methods[] = 
{
  &FileDataObject_method_FileDataObject__LRFileDataObject_,
  &FileDataObject_method_GetClass__L_acdk_lang_RClass_,
  &FileDataObject_method_addFile_INLRString__V,
  &FileDataObject_method_getFilenames__LRStringArray_,
  0
};


struct FileDataObject_MetaInfoInitializer
{  FileDataObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDataObject::clazzInfo();
    ci->fields =  _FileDataObject_fields;
    ci->methods =  _FileDataObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDataObject_MetaInfoInitializer FileDataObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FileDialog_create_array(int length)
{
  return new ObjectArrayImpl<RFileDialog>(length);
}

//static
::acdk::lang::RObject
FileDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), args[5].getIntVar(), (RPoint)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString__LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getDirectory__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getDirectory();
    else
        ret = (::acdk::lang::RObject)This->getDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getFilename__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getFilename();
    else
        ret = (::acdk::lang::RObject)This->getFilename();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getFilenames__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getFilenames();
    else
        ret = (::acdk::lang::RObject)This->getFilenames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getFilterIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDialog::getFilterIndex();
    else
      ret = This->getFilterIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getPaths_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::getPaths((RStringArray)args[0].getObjectVar());
    else
        This->getPaths((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDialog::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_getWildcard__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileDialog::getWildcard();
    else
        ret = (::acdk::lang::RObject)This->getWildcard();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setDirectory_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setDirectory((RString)args[0].getObjectVar());
    else
        This->setDirectory((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setFilename_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setFilename((RString)args[0].getObjectVar());
    else
        This->setFilename((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setFilterIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setFilterIndex(args[0].getIntVar());
    else
        This->setFilterIndex(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setMessage_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setMessage((RString)args[0].getObjectVar());
    else
        This->setMessage((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setPath((RString)args[0].getObjectVar());
    else
        This->setPath((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setStyle(args[0].getIntVar());
    else
        This->setStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_setWildcard_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDialog::setWildcard((RString)args[0].getObjectVar());
    else
        This->setWildcard((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDialog* This = dmi_cast<FileDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_message,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_defaultDir,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_defaultFile,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_wildCard,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_style,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_0_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString__LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_1_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString__LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString__LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_message,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__arg_defaultDir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_2_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_message,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultDir,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultFile,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_3_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_message,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultDir,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_defaultFile,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__arg_wildCard,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_4_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__args[] = 
{
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_parent,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_message,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_defaultDir,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_defaultFile,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_wildCard,
  &FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDialog::clazzInfo(), // return type
  "_5_FileDialog", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__args, // the arguments
  0, //arguments count
  FileDialog_methods_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_n_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getDirectory__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getDirectory__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getDirectory__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getDirectory__LRString__args, // the arguments
  0, //arguments count
  FileDialog_methods_getDirectory__LRString__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getDirectory__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getFilename__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getFilename__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getFilename__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilename", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_getFilename", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getFilename__LRString__args, // the arguments
  0, //arguments count
  FileDialog_methods_getFilename__LRString__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getFilename__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getFilenames__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getFilenames__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getFilenames__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilenames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_i_getFilenames", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getFilenames__LRStringArray__args, // the arguments
  0, //arguments count
  FileDialog_methods_getFilenames__LRStringArray__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getFilenames__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getFilterIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getFilterIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getFilterIndex__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilterIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getFilterIndex", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getFilterIndex__I_args, // the arguments
  0, //arguments count
  FileDialog_methods_getFilterIndex__I_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getFilterIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getMessage", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  FileDialog_methods_getMessage__LRString__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getPath", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  FileDialog_methods_getPath__LRString__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_getPaths_INLRStringArray__V_arg_paths = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "paths", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getPaths_INLRStringArray__V_args[] = 
{
  &FileDialog_methods_getPaths_INLRStringArray__V_arg_paths,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getPaths_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getPaths_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPaths", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_getPaths", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getPaths_INLRStringArray__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_getPaths_INLRStringArray__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getPaths_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getStyle", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getStyle__I_args, // the arguments
  0, //arguments count
  FileDialog_methods_getStyle__I_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_getWildcard__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_getWildcard__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_getWildcard__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWildcard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getWildcard", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_getWildcard__LRString__args, // the arguments
  0, //arguments count
  FileDialog_methods_getWildcard__LRString__exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_getWildcard__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setDirectory_INLRString__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setDirectory_INLRString__V_args[] = 
{
  &FileDialog_methods_setDirectory_INLRString__V_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setDirectory_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setDirectory_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setDirectory_INLRString__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setDirectory_INLRString__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setDirectory_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setFilename_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setFilename_INLRString__V_args[] = 
{
  &FileDialog_methods_setFilename_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setFilename_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setFilename_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFilename", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setFilename", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setFilename_INLRString__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setFilename_INLRString__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setFilename_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setFilterIndex_I_V_arg_filterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "filterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setFilterIndex_I_V_args[] = 
{
  &FileDialog_methods_setFilterIndex_I_V_arg_filterIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setFilterIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setFilterIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFilterIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setFilterIndex", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setFilterIndex_I_V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setFilterIndex_I_V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setFilterIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setMessage_INLRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setMessage_INLRString__V_args[] = 
{
  &FileDialog_methods_setMessage_INLRString__V_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setMessage_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setMessage_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setMessage", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setMessage_INLRString__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setMessage_INLRString__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setMessage_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setPath_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setPath_INLRString__V_args[] = 
{
  &FileDialog_methods_setPath_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setPath", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setPath_INLRString__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setPath_INLRString__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setStyle_I_V_args[] = 
{
  &FileDialog_methods_setStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setStyle", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setStyle_I_V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setStyle_I_V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDialog_methods_setWildcard_INLRString__V_arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_setWildcard_INLRString__V_args[] = 
{
  &FileDialog_methods_setWildcard_INLRString__V_arg_wildCard,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_setWildcard_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_setWildcard_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWildcard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setWildcard", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_setWildcard_INLRString__V_args, // the arguments
  0, //arguments count
  FileDialog_methods_setWildcard_INLRString__V_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_setWildcard_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_showModal", // alternative name of method
  -1, // altlabelHashCode
  FileDialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  FileDialog_methods_showModal__I_exceptions, // the declared exceptions
  FileDialog_MetainfoWrapper::FileDialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDialog_methods[] = 
{
  &FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_IINLRPoint__LRFileDialog_,
  &FileDialog_method_FileDialog_INLRWindow_INLRString__LRFileDialog_,
  &FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString__LRFileDialog_,
  &FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString__LRFileDialog_,
  &FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString__LRFileDialog_,
  &FileDialog_method_FileDialog_INLRWindow_INLRString_INLRString_INLRString_INLRString_I_LRFileDialog_,
  &FileDialog_method_GetClass__L_acdk_lang_RClass_,
  &FileDialog_method_getDirectory__LRString_,
  &FileDialog_method_getFilename__LRString_,
  &FileDialog_method_getFilenames__LRStringArray_,
  &FileDialog_method_getFilterIndex__I,
  &FileDialog_method_getMessage__LRString_,
  &FileDialog_method_getPath__LRString_,
  &FileDialog_method_getPaths_INLRStringArray__V,
  &FileDialog_method_getStyle__I,
  &FileDialog_method_getWildcard__LRString_,
  &FileDialog_method_setDirectory_INLRString__V,
  &FileDialog_method_setFilename_INLRString__V,
  &FileDialog_method_setFilterIndex_I_V,
  &FileDialog_method_setMessage_INLRString__V,
  &FileDialog_method_setPath_INLRString__V,
  &FileDialog_method_setStyle_I_V,
  &FileDialog_method_setWildcard_INLRString__V,
  &FileDialog_method_showModal__I,
  0
};


struct FileDialog_MetaInfoInitializer
{  FileDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDialog::clazzInfo();
    ci->fields =  _FileDialog_fields;
    ci->methods =  _FileDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDialog_MetaInfoInitializer FileDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FileDropTarget_create_array(int length)
{
  return new ObjectArrayImpl<RFileDropTarget>(length);
}

//static
::acdk::lang::RObject
FileDropTarget_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDropTarget_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_FileDropTarget__LRFileDropTarget__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDropTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDropTarget::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_getData__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDropTarget::getData();
    else
      ret = This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onData_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->FileDropTarget::onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onDragOver_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->FileDropTarget::onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onDrop_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDropTarget::onDrop(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->onDrop(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onDropFiles_IIINLRStringArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDropTarget::onDropFiles(args[0].getIntVar(), args[1].getIntVar(), (RStringArray)args[2].getObjectVar());
    else
      ret = This->onDropFiles(args[0].getIntVar(), args[1].getIntVar(), (RStringArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onEnter_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->FileDropTarget::onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDropTarget_method_onLeave__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDropTarget* This = dmi_cast<FileDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDropTarget::onLeave();
    else
        This->onLeave();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDropTarget_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_FileDropTarget__LRFileDropTarget__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_FileDropTarget__LRFileDropTarget__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_FileDropTarget__LRFileDropTarget_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDropTarget::clazzInfo(), // return type
  "_0_FileDropTarget", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_FileDropTarget__LRFileDropTarget__args, // the arguments
  0, //arguments count
  FileDropTarget_methods_FileDropTarget__LRFileDropTarget__exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_FileDropTarget__LRFileDropTarget__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_getData__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_getData__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_getData__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getData", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_getData__Z_args, // the arguments
  0, //arguments count
  FileDropTarget_methods_getData__Z_exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_getData__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onData_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onData_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onData_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onData_III_LDragResult__args[] = 
{
  &FileDropTarget_methods_onData_III_LDragResult__arg_x,
  &FileDropTarget_methods_onData_III_LDragResult__arg_y,
  &FileDropTarget_methods_onData_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onData_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onData_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_onData", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onData_III_LDragResult__args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onData_III_LDragResult__exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onData_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDragOver_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDragOver_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDragOver_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onDragOver_III_LDragResult__args[] = 
{
  &FileDropTarget_methods_onDragOver_III_LDragResult__arg_x,
  &FileDropTarget_methods_onDragOver_III_LDragResult__arg_y,
  &FileDropTarget_methods_onDragOver_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onDragOver_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onDragOver_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDragOver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_onDragOver", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onDragOver_III_LDragResult__args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onDragOver_III_LDragResult__exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onDragOver_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDrop_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDrop_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onDrop_II_Z_args[] = 
{
  &FileDropTarget_methods_onDrop_II_Z_arg_x,
  &FileDropTarget_methods_onDrop_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onDrop_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onDrop_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDrop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_onDrop", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onDrop_II_Z_args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onDrop_II_Z_exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onDrop_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_filenames = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filenames", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_args[] = 
{
  &FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_x,
  &FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_y,
  &FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_arg_filenames,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onDropFiles_IIINLRStringArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDropFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_onDropFiles", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onDropFiles_IIINLRStringArray__Z_exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onDropFiles_IIINLRStringArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onEnter_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onEnter_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDropTarget_methods_onEnter_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onEnter_III_LDragResult__args[] = 
{
  &FileDropTarget_methods_onEnter_III_LDragResult__arg_x,
  &FileDropTarget_methods_onEnter_III_LDragResult__arg_y,
  &FileDropTarget_methods_onEnter_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onEnter_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onEnter_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onEnter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_onEnter", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onEnter_III_LDragResult__args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onEnter_III_LDragResult__exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onEnter_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDropTarget_methods_onLeave__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDropTarget_methods_onLeave__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDropTarget_method_onLeave__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onLeave", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_onLeave", // alternative name of method
  -1, // altlabelHashCode
  FileDropTarget_methods_onLeave__V_args, // the arguments
  0, //arguments count
  FileDropTarget_methods_onLeave__V_exceptions, // the declared exceptions
  FileDropTarget_MetainfoWrapper::FileDropTarget_method_onLeave__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDropTarget_methods[] = 
{
  &FileDropTarget_method_FileDropTarget__LRFileDropTarget_,
  &FileDropTarget_method_GetClass__L_acdk_lang_RClass_,
  &FileDropTarget_method_getData__Z,
  &FileDropTarget_method_onData_III_LDragResult_,
  &FileDropTarget_method_onDragOver_III_LDragResult_,
  &FileDropTarget_method_onDrop_II_Z,
  &FileDropTarget_method_onDropFiles_IIINLRStringArray__Z,
  &FileDropTarget_method_onEnter_III_LDragResult_,
  &FileDropTarget_method_onLeave__V,
  0
};


struct FileDropTarget_MetaInfoInitializer
{  FileDropTarget_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDropTarget::clazzInfo();
    ci->fields =  _FileDropTarget_fields;
    ci->methods =  _FileDropTarget_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDropTarget_MetaInfoInitializer FileDropTarget_MetaInfoInitializer_staticinstance__;


struct FileDropTarget_clazzInfo_ClazzAttributesResInitializer6
{
  FileDropTarget_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_methods_onData_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_method_onData_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_methods_onEnter_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_method_onEnter_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_methods_onDragOver_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&FileDropTarget_method_onDragOver_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
  }
};

FileDropTarget_clazzInfo_ClazzAttributesResInitializer6 FileDropTarget_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Font_create_array(int length)
{
  return new ObjectArrayImpl<RFont>(length);
}

//static
::acdk::lang::RObject
Font_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Font_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font_IIIIZINLRString_I_LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar(), (RString)args[5].getObjectVar(), (FontEncoding)args[6].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font_IIII_LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font_IIIIZ_LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font_IIIIZINLRString__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_Font_INLRString__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Font((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Font::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getEncoding__LFontEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (FontEncoding)This->Font::getEncoding();
    else
      ret = (FontEncoding)This->getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getFaceName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Font::getFaceName();
    else
        ret = (::acdk::lang::RObject)This->getFaceName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getFamily__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::getFamily();
    else
      ret = This->getFamily();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getItalicFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Font::getItalicFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getNativeFontInfoDesc__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Font::getNativeFontInfoDesc();
    else
        ret = (::acdk::lang::RObject)This->getNativeFontInfoDesc();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getNativeFontInfoUserDesc__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Font::getNativeFontInfoUserDesc();
    else
        ret = (::acdk::lang::RObject)This->getNativeFontInfoUserDesc();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getNormalFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Font::getNormalFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getPointSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::getPointSize();
    else
      ret = This->getPointSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getSmallFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Font::getSmallFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getSwissFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Font::getSwissFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getUnderlined__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::getUnderlined();
    else
      ret = This->getUnderlined();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_getWeight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::getWeight();
    else
      ret = This->getWeight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_isFixedWidth__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Font::isFixedWidth();
    else
      ret = This->isFixedWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setEncoding_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setEncoding((FontEncoding)args[0].getIntVar());
    else
        This->setEncoding((FontEncoding)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setFaceName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setFaceName((RString)args[0].getObjectVar());
    else
        This->setFaceName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setFamily_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setFamily(args[0].getIntVar());
    else
        This->setFamily(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setPointSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setPointSize(args[0].getIntVar());
    else
        This->setPointSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setStyle(args[0].getIntVar());
    else
        This->setStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setUnderlined_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setUnderlined(args[0].getBoolVar());
    else
        This->setUnderlined(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Font_method_setWeight_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Font* This = dmi_cast<Font>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Font::setWeight(args[0].getIntVar());
    else
        This->setWeight(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Font_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_0_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_family = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "family", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_weight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "weight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_underlined = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "underlined", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_face = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "face", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString_I_LRFont__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font_IIIIZINLRString_I_LRFont__args[] = 
{
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_size,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_family,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_style,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_weight,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_underlined,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_face,
  &Font_methods_Font_IIIIZINLRString_I_LRFont__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font_IIIIZINLRString_I_LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font_IIIIZINLRString_I_LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_1_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font_IIIIZINLRString_I_LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font_IIIIZINLRString_I_LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font_IIIIZINLRString_I_LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIII_LRFont__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIII_LRFont__arg_family = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "family", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIII_LRFont__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIII_LRFont__arg_weight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "weight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font_IIII_LRFont__args[] = 
{
  &Font_methods_Font_IIII_LRFont__arg_size,
  &Font_methods_Font_IIII_LRFont__arg_family,
  &Font_methods_Font_IIII_LRFont__arg_style,
  &Font_methods_Font_IIII_LRFont__arg_weight,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font_IIII_LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font_IIII_LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_2_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font_IIII_LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font_IIII_LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font_IIII_LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZ_LRFont__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZ_LRFont__arg_family = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "family", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZ_LRFont__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZ_LRFont__arg_weight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "weight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZ_LRFont__arg_underlined = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "underlined", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font_IIIIZ_LRFont__args[] = 
{
  &Font_methods_Font_IIIIZ_LRFont__arg_size,
  &Font_methods_Font_IIIIZ_LRFont__arg_family,
  &Font_methods_Font_IIIIZ_LRFont__arg_style,
  &Font_methods_Font_IIIIZ_LRFont__arg_weight,
  &Font_methods_Font_IIIIZ_LRFont__arg_underlined,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font_IIIIZ_LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font_IIIIZ_LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_3_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font_IIIIZ_LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font_IIIIZ_LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font_IIIIZ_LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_family = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "family", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_weight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "weight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_underlined = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "underlined", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_IIIIZINLRString__LRFont__arg_face = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "face", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font_IIIIZINLRString__LRFont__args[] = 
{
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_size,
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_family,
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_style,
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_weight,
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_underlined,
  &Font_methods_Font_IIIIZINLRString__LRFont__arg_face,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font_IIIIZINLRString__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font_IIIIZINLRString__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_4_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font_IIIIZINLRString__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font_IIIIZINLRString__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font_IIIIZINLRString__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_Font_INLRString__LRFont__arg_fontDesc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fontDesc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_Font_INLRString__LRFont__args[] = 
{
  &Font_methods_Font_INLRString__LRFont__arg_fontDesc,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_Font_INLRString__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_Font_INLRString__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Font", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Font::clazzInfo(), // return type
  "_5_Font", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_Font_INLRString__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_Font_INLRString__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_Font_INLRString__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Font_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getEncoding__LFontEncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getEncoding__LFontEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getEncoding__LFontEncoding_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getEncoding__LFontEncoding__args, // the arguments
  0, //arguments count
  Font_methods_getEncoding__LFontEncoding__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getEncoding__LFontEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getFaceName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getFaceName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getFaceName__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFaceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getFaceName", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getFaceName__LRString__args, // the arguments
  0, //arguments count
  Font_methods_getFaceName__LRString__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getFaceName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getFamily__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getFamily__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getFamily__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFamily", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getFamily", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getFamily__I_args, // the arguments
  0, //arguments count
  Font_methods_getFamily__I_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getFamily__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getItalicFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getItalicFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getItalicFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getItalicFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_p_getItalicFont", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getItalicFont__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_getItalicFont__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getItalicFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getNativeFontInfoDesc__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getNativeFontInfoDesc__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getNativeFontInfoDesc__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNativeFontInfoDesc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getNativeFontInfoDesc", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getNativeFontInfoDesc__LRString__args, // the arguments
  0, //arguments count
  Font_methods_getNativeFontInfoDesc__LRString__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getNativeFontInfoDesc__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getNativeFontInfoUserDesc__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getNativeFontInfoUserDesc__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getNativeFontInfoUserDesc__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNativeFontInfoUserDesc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getNativeFontInfoUserDesc", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getNativeFontInfoUserDesc__LRString__args, // the arguments
  0, //arguments count
  Font_methods_getNativeFontInfoUserDesc__LRString__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getNativeFontInfoUserDesc__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getNormalFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getNormalFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getNormalFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNormalFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_n_getNormalFont", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getNormalFont__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_getNormalFont__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getNormalFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getPointSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getPointSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getPointSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPointSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getPointSize", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getPointSize__I_args, // the arguments
  0, //arguments count
  Font_methods_getPointSize__I_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getPointSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getSmallFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getSmallFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getSmallFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSmallFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_o_getSmallFont", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getSmallFont__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_getSmallFont__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getSmallFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getStyle", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getStyle__I_args, // the arguments
  0, //arguments count
  Font_methods_getStyle__I_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getSwissFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getSwissFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getSwissFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSwissFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_q_getSwissFont", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getSwissFont__LRFont__args, // the arguments
  0, //arguments count
  Font_methods_getSwissFont__LRFont__exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getSwissFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getUnderlined__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getUnderlined__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getUnderlined__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnderlined", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_getUnderlined", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getUnderlined__Z_args, // the arguments
  0, //arguments count
  Font_methods_getUnderlined__Z_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getUnderlined__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_getWeight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_getWeight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_getWeight__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getWeight", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_getWeight__I_args, // the arguments
  0, //arguments count
  Font_methods_getWeight__I_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_getWeight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_isFixedWidth__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_isFixedWidth__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_isFixedWidth__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFixedWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_isFixedWidth", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_isFixedWidth__Z_args, // the arguments
  0, //arguments count
  Font_methods_isFixedWidth__Z_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_isFixedWidth__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setEncoding_I_V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setEncoding_I_V_args[] = 
{
  &Font_methods_setEncoding_I_V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setEncoding_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setEncoding_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setEncoding", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setEncoding_I_V_args, // the arguments
  0, //arguments count
  Font_methods_setEncoding_I_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setEncoding_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setFaceName_INLRString__V_arg_faceName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "faceName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setFaceName_INLRString__V_args[] = 
{
  &Font_methods_setFaceName_INLRString__V_arg_faceName,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setFaceName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setFaceName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFaceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setFaceName", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setFaceName_INLRString__V_args, // the arguments
  0, //arguments count
  Font_methods_setFaceName_INLRString__V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setFaceName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setFamily_I_V_arg_family = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "family", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setFamily_I_V_args[] = 
{
  &Font_methods_setFamily_I_V_arg_family,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setFamily_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setFamily_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFamily", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setFamily", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setFamily_I_V_args, // the arguments
  0, //arguments count
  Font_methods_setFamily_I_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setFamily_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setPointSize_I_V_arg_pointSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pointSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setPointSize_I_V_args[] = 
{
  &Font_methods_setPointSize_I_V_arg_pointSize,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setPointSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setPointSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPointSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setPointSize", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setPointSize_I_V_args, // the arguments
  0, //arguments count
  Font_methods_setPointSize_I_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setPointSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setStyle_I_V_args[] = 
{
  &Font_methods_setStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setStyle", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setStyle_I_V_args, // the arguments
  0, //arguments count
  Font_methods_setStyle_I_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setUnderlined_Z_V_arg_underlined = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "underlined", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setUnderlined_Z_V_args[] = 
{
  &Font_methods_setUnderlined_Z_V_arg_underlined,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setUnderlined_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setUnderlined_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUnderlined", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setUnderlined", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setUnderlined_Z_V_args, // the arguments
  0, //arguments count
  Font_methods_setUnderlined_Z_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setUnderlined_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Font_methods_setWeight_I_V_arg_weight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "weight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Font_methods_setWeight_I_V_args[] = 
{
  &Font_methods_setWeight_I_V_arg_weight,
  0
};

::acdk::lang::dmi::ClazzInfo* Font_methods_setWeight_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Font_method_setWeight_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setWeight", // alternative name of method
  -1, // altlabelHashCode
  Font_methods_setWeight_I_V_args, // the arguments
  0, //arguments count
  Font_methods_setWeight_I_V_exceptions, // the declared exceptions
  Font_MetainfoWrapper::Font_method_setWeight_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Font_methods[] = 
{
  &Font_method_Font__LRFont_,
  &Font_method_Font_IIIIZINLRString_I_LRFont_,
  &Font_method_Font_IIII_LRFont_,
  &Font_method_Font_IIIIZ_LRFont_,
  &Font_method_Font_IIIIZINLRString__LRFont_,
  &Font_method_Font_INLRString__LRFont_,
  &Font_method_GetClass__L_acdk_lang_RClass_,
  &Font_method_getEncoding__LFontEncoding_,
  &Font_method_getFaceName__LRString_,
  &Font_method_getFamily__I,
  &Font_method_getItalicFont__LRFont_,
  &Font_method_getNativeFontInfoDesc__LRString_,
  &Font_method_getNativeFontInfoUserDesc__LRString_,
  &Font_method_getNormalFont__LRFont_,
  &Font_method_getPointSize__I,
  &Font_method_getSmallFont__LRFont_,
  &Font_method_getStyle__I,
  &Font_method_getSwissFont__LRFont_,
  &Font_method_getUnderlined__Z,
  &Font_method_getWeight__I,
  &Font_method_isFixedWidth__Z,
  &Font_method_setEncoding_I_V,
  &Font_method_setFaceName_INLRString__V,
  &Font_method_setFamily_I_V,
  &Font_method_setPointSize_I_V,
  &Font_method_setStyle_I_V,
  &Font_method_setUnderlined_Z_V,
  &Font_method_setWeight_I_V,
  0
};


struct Font_MetaInfoInitializer
{  Font_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Font::clazzInfo();
    ci->fields =  _Font_fields;
    ci->methods =  _Font_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Font_MetaInfoInitializer Font_MetaInfoInitializer_staticinstance__;


struct Font_clazzInfo_ClazzAttributesResInitializer7
{
  Font_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Font_methods_Font_IIIIZINLRString_I_LRFont__arg_encoding, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FontEncodingMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Font_method_getEncoding__LFontEncoding_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FontEncodingMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Font_methods_setEncoding_I_V_arg_encoding, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)FontEncodingMetaInf::GetEnumInfo()));
  }
};

Font_clazzInfo_ClazzAttributesResInitializer7 Font_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FontData_create_array(int length)
{
  return new ObjectArrayImpl<RFontData>(length);
}

//static
::acdk::lang::RObject
FontData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FontData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_FontData__LRFontData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FontData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FontData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_enableEffects_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::enableEffects(args[0].getBoolVar());
    else
        This->enableEffects(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getAllowSymbols__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FontData::getAllowSymbols();
    else
      ret = This->getAllowSymbols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getChosenFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FontData::getChosenFont();
    else
        ret = (::acdk::lang::RObject)This->getChosenFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FontData::getColour();
    else
        ret = (::acdk::lang::RObject)This->getColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getEnableEffects__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FontData::getEnableEffects();
    else
      ret = This->getEnableEffects();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getInitialFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FontData::getInitialFont();
    else
        ret = (::acdk::lang::RObject)This->getInitialFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_getShowHelp__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FontData::getShowHelp();
    else
      ret = This->getShowHelp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setAllowSymbols_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setAllowSymbols(args[0].getBoolVar());
    else
        This->setAllowSymbols(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setChosenFont_INLRFont__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setChosenFont((RFont)args[0].getObjectVar());
    else
        This->setChosenFont((RFont)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setColour_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setColour((RColour)args[0].getObjectVar());
    else
        This->setColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setInitialFont_INLRFont__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setInitialFont((RFont)args[0].getObjectVar());
    else
        This->setInitialFont((RFont)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setRange(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setRange(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontData_method_setShowHelp_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontData* This = dmi_cast<FontData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FontData::setShowHelp(args[0].getBoolVar());
    else
        This->setShowHelp(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FontData_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_FontData__LRFontData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_FontData__LRFontData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_FontData__LRFontData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FontData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FontData::clazzInfo(), // return type
  "_0_FontData", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_FontData__LRFontData__args, // the arguments
  0, //arguments count
  FontData_methods_FontData__LRFontData__exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_FontData__LRFontData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FontData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_enableEffects_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_enableEffects_Z_V_args[] = 
{
  &FontData_methods_enableEffects_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_enableEffects_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_enableEffects_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enableEffects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_enableEffects", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_enableEffects_Z_V_args, // the arguments
  0, //arguments count
  FontData_methods_enableEffects_Z_V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_enableEffects_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getAllowSymbols__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getAllowSymbols__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getAllowSymbols__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllowSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_getAllowSymbols", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getAllowSymbols__Z_args, // the arguments
  0, //arguments count
  FontData_methods_getAllowSymbols__Z_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getAllowSymbols__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getChosenFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getChosenFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getChosenFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChosenFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_4_getChosenFont", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getChosenFont__LRFont__args, // the arguments
  0, //arguments count
  FontData_methods_getChosenFont__LRFont__exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getChosenFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_3_getColour", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getColour__LRColour__args, // the arguments
  0, //arguments count
  FontData_methods_getColour__LRColour__exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getEnableEffects__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getEnableEffects__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getEnableEffects__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnableEffects", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getEnableEffects", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getEnableEffects__Z_args, // the arguments
  0, //arguments count
  FontData_methods_getEnableEffects__Z_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getEnableEffects__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getInitialFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getInitialFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getInitialFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInitialFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_6_getInitialFont", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getInitialFont__LRFont__args, // the arguments
  0, //arguments count
  FontData_methods_getInitialFont__LRFont__exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getInitialFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_getShowHelp__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_getShowHelp__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_getShowHelp__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShowHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getShowHelp", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_getShowHelp__Z_args, // the arguments
  0, //arguments count
  FontData_methods_getShowHelp__Z_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_getShowHelp__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setAllowSymbols_Z_V_arg_allowSymbols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "allowSymbols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setAllowSymbols_Z_V_args[] = 
{
  &FontData_methods_setAllowSymbols_Z_V_arg_allowSymbols,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setAllowSymbols_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setAllowSymbols_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAllowSymbols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setAllowSymbols", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setAllowSymbols_Z_V_args, // the arguments
  0, //arguments count
  FontData_methods_setAllowSymbols_Z_V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setAllowSymbols_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setChosenFont_INLRFont__V_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setChosenFont_INLRFont__V_args[] = 
{
  &FontData_methods_setChosenFont_INLRFont__V_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setChosenFont_INLRFont__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setChosenFont_INLRFont__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setChosenFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setChosenFont", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setChosenFont_INLRFont__V_args, // the arguments
  0, //arguments count
  FontData_methods_setChosenFont_INLRFont__V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setChosenFont_INLRFont__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setColour_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setColour_INLRColour__V_args[] = 
{
  &FontData_methods_setColour_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setColour_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setColour_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setColour", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setColour_INLRColour__V_args, // the arguments
  0, //arguments count
  FontData_methods_setColour_INLRColour__V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setColour_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setInitialFont_INLRFont__V_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setInitialFont_INLRFont__V_args[] = 
{
  &FontData_methods_setInitialFont_INLRFont__V_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setInitialFont_INLRFont__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setInitialFont_INLRFont__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInitialFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setInitialFont", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setInitialFont_INLRFont__V_args, // the arguments
  0, //arguments count
  FontData_methods_setInitialFont_INLRFont__V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setInitialFont_INLRFont__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setRange_II_V_arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setRange_II_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setRange_II_V_args[] = 
{
  &FontData_methods_setRange_II_V_arg_min,
  &FontData_methods_setRange_II_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setRange", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setRange_II_V_args, // the arguments
  0, //arguments count
  FontData_methods_setRange_II_V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontData_methods_setShowHelp_Z_V_arg_showHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "showHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontData_methods_setShowHelp_Z_V_args[] = 
{
  &FontData_methods_setShowHelp_Z_V_arg_showHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* FontData_methods_setShowHelp_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontData_method_setShowHelp_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShowHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setShowHelp", // alternative name of method
  -1, // altlabelHashCode
  FontData_methods_setShowHelp_Z_V_args, // the arguments
  0, //arguments count
  FontData_methods_setShowHelp_Z_V_exceptions, // the declared exceptions
  FontData_MetainfoWrapper::FontData_method_setShowHelp_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FontData_methods[] = 
{
  &FontData_method_FontData__LRFontData_,
  &FontData_method_GetClass__L_acdk_lang_RClass_,
  &FontData_method_enableEffects_Z_V,
  &FontData_method_getAllowSymbols__Z,
  &FontData_method_getChosenFont__LRFont_,
  &FontData_method_getColour__LRColour_,
  &FontData_method_getEnableEffects__Z,
  &FontData_method_getInitialFont__LRFont_,
  &FontData_method_getShowHelp__Z,
  &FontData_method_setAllowSymbols_Z_V,
  &FontData_method_setChosenFont_INLRFont__V,
  &FontData_method_setColour_INLRColour__V,
  &FontData_method_setInitialFont_INLRFont__V,
  &FontData_method_setRange_II_V,
  &FontData_method_setShowHelp_Z_V,
  0
};


struct FontData_MetaInfoInitializer
{  FontData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FontData::clazzInfo();
    ci->fields =  _FontData_fields;
    ci->methods =  _FontData_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FontData_MetaInfoInitializer FontData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
FontDialog_create_array(int length)
{
  return new ObjectArrayImpl<RFontDialog>(length);
}

//static
::acdk::lang::RObject
FontDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FontDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_FontDialog_INLRWindow_INLRFontData__LRFontDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FontDialog((RWindow)args[0].getObjectVar(), (RFontData)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_FontDialog_INLRWindow__LRFontDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FontDialog((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_FontDialog__LRFontDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FontDialog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FontDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_getFontData__LRFontData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontDialog* This = dmi_cast<FontDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FontDialog::getFontData();
    else
        ret = (::acdk::lang::RObject)This->getFontData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FontDialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FontDialog* This = dmi_cast<FontDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FontDialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FontDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__arg_fontData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fontData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFontData::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__args[] = 
{
  &FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__arg_parent,
  &FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__arg_fontData,
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_FontDialog_INLRWindow_INLRFontData__LRFontDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FontDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FontDialog::clazzInfo(), // return type
  "_0_FontDialog", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__args, // the arguments
  0, //arguments count
  FontDialog_methods_FontDialog_INLRWindow_INLRFontData__LRFontDialog__exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_FontDialog_INLRWindow_INLRFontData__LRFontDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__args[] = 
{
  &FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_FontDialog_INLRWindow__LRFontDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FontDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FontDialog::clazzInfo(), // return type
  "_1_FontDialog", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__args, // the arguments
  0, //arguments count
  FontDialog_methods_FontDialog_INLRWindow__LRFontDialog__exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_FontDialog_INLRWindow__LRFontDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_FontDialog__LRFontDialog__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_FontDialog__LRFontDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_FontDialog__LRFontDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FontDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FontDialog::clazzInfo(), // return type
  "_2_FontDialog", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_FontDialog__LRFontDialog__args, // the arguments
  0, //arguments count
  FontDialog_methods_FontDialog__LRFontDialog__exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_FontDialog__LRFontDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FontDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_getFontData__LRFontData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_getFontData__LRFontData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_getFontData__LRFontData_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFontData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFontData::clazzInfo(), // return type
  "_3_getFontData", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_getFontData__LRFontData__args, // the arguments
  0, //arguments count
  FontDialog_methods_getFontData__LRFontData__exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_getFontData__LRFontData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FontDialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FontDialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FontDialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_showModal", // alternative name of method
  -1, // altlabelHashCode
  FontDialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  FontDialog_methods_showModal__I_exceptions, // the declared exceptions
  FontDialog_MetainfoWrapper::FontDialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FontDialog_methods[] = 
{
  &FontDialog_method_FontDialog_INLRWindow_INLRFontData__LRFontDialog_,
  &FontDialog_method_FontDialog_INLRWindow__LRFontDialog_,
  &FontDialog_method_FontDialog__LRFontDialog_,
  &FontDialog_method_GetClass__L_acdk_lang_RClass_,
  &FontDialog_method_getFontData__LRFontData_,
  &FontDialog_method_showModal__I,
  0
};


struct FontDialog_MetaInfoInitializer
{  FontDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FontDialog::clazzInfo();
    ci->fields =  _FontDialog_fields;
    ci->methods =  _FontDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FontDialog_MetaInfoInitializer FontDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TopLevelWindow_create_array(int length)
{
  return new ObjectArrayImpl<RTopLevelWindow>(length);
}

//static
::acdk::lang::RObject
TopLevelWindow_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TopLevelWindow_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TopLevelWindow_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TopLevelWindow::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TopLevelWindow_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TopLevelWindow_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TopLevelWindow_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TopLevelWindow_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TopLevelWindow_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TopLevelWindow_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TopLevelWindow_MetainfoWrapper::TopLevelWindow_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TopLevelWindow_methods[] = 
{
  &TopLevelWindow_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct TopLevelWindow_MetaInfoInitializer
{  TopLevelWindow_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TopLevelWindow::clazzInfo();
    ci->fields =  _TopLevelWindow_fields;
    ci->methods =  _TopLevelWindow_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TopLevelWindow_MetaInfoInitializer TopLevelWindow_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Frame_create_array(int length)
{
  return new ObjectArrayImpl<RFrame>(length);
}

//static
::acdk::lang::RObject
Frame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Frame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRString__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRWindow_IINLRString__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Frame((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Frame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createStatusBar__LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createStatusBar();
    else
        ret = (::acdk::lang::RObject)This->createStatusBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createStatusBar_I_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createStatusBar(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createStatusBar(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createStatusBar_II_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createStatusBar(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createStatusBar(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createStatusBar_III_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createStatusBar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createStatusBar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createStatusBar_IIIINLRString__LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createStatusBar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->createStatusBar(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createToolBar_I_LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createToolBar(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createToolBar(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createToolBar_II_LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createToolBar(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createToolBar(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_createToolBar__LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::createToolBar();
    else
        ret = (::acdk::lang::RObject)This->createToolBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_getStatusBar__LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::getStatusBar();
    else
        ret = (::acdk::lang::RObject)This->getStatusBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_getStatusBarPane__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Frame::getStatusBarPane();
    else
      ret = This->getStatusBarPane();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_onCreateStatusBar_IIINLRString__LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::onCreateStatusBar(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->onCreateStatusBar(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_onCreateStatusBar__LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::onCreateStatusBar();
    else
        ret = (::acdk::lang::RObject)This->onCreateStatusBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_onCreateStatusBar_I_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::onCreateStatusBar(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->onCreateStatusBar(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_onCreateStatusBar_II_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Frame::onCreateStatusBar(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->onCreateStatusBar(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_popStatusText_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::popStatusText(args[0].getIntVar());
    else
        This->popStatusText(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_popStatusText__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::popStatusText();
    else
        This->popStatusText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_positionStatusBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::positionStatusBar();
    else
        This->positionStatusBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_pushStatusText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::pushStatusText((RString)args[0].getObjectVar());
    else
        This->pushStatusText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_pushStatusText_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::pushStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->pushStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setMenuBar_INLRMenuBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setMenuBar((RMenuBar)args[0].getObjectVar());
    else
        This->setMenuBar((RMenuBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setStatusBar_INLRStatusBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setStatusBar((RStatusBar)args[0].getObjectVar());
    else
        This->setStatusBar((RStatusBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setStatusBarPane_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setStatusBarPane(args[0].getIntVar());
    else
        This->setStatusBarPane(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setStatusText_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->setStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setStatusText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setStatusText((RString)args[0].getObjectVar());
    else
        This->setStatusText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Frame_method_setStatusWidths_IINLRintArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Frame* This = dmi_cast<Frame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Frame::setStatusWidths(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    else
        This->setStatusWidths(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Frame_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRString__LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRString__LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRString__LRFrame__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRString__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRString__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_0_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRString__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRString__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRString__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame__LRFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_1_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_parent,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_id,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_title,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_pos,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_size,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_style,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_2_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_parent,
  &Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_id,
  &Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRWindow_IINLRString__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_3_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRWindow_IINLRString__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRWindow_IINLRString__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_parent,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_id,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_title,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_4_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_parent,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_id,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_title,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_pos,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_5_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__args[] = 
{
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_parent,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_id,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_title,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_pos,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_size,
  &Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Frame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Frame::clazzInfo(), // return type
  "_6_Frame", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__args, // the arguments
  0, //arguments count
  Frame_methods_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_w_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Frame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createStatusBar__LRStatusBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createStatusBar__LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createStatusBar__LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_c_createStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createStatusBar__LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_createStatusBar__LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createStatusBar__LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_I_LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createStatusBar_I_LRStatusBar__args[] = 
{
  &Frame_methods_createStatusBar_I_LRStatusBar__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createStatusBar_I_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createStatusBar_I_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_d_createStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createStatusBar_I_LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_createStatusBar_I_LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createStatusBar_I_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_II_LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_II_LRStatusBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createStatusBar_II_LRStatusBar__args[] = 
{
  &Frame_methods_createStatusBar_II_LRStatusBar__arg_number,
  &Frame_methods_createStatusBar_II_LRStatusBar__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createStatusBar_II_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createStatusBar_II_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_e_createStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createStatusBar_II_LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_createStatusBar_II_LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createStatusBar_II_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_III_LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_III_LRStatusBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_III_LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createStatusBar_III_LRStatusBar__args[] = 
{
  &Frame_methods_createStatusBar_III_LRStatusBar__arg_number,
  &Frame_methods_createStatusBar_III_LRStatusBar__arg_style,
  &Frame_methods_createStatusBar_III_LRStatusBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createStatusBar_III_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createStatusBar_III_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_f_createStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createStatusBar_III_LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_createStatusBar_III_LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createStatusBar_III_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__args[] = 
{
  &Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_number,
  &Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_style,
  &Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_id,
  &Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createStatusBar_IIIINLRString__LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_b_createStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_createStatusBar_IIIINLRString__LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createStatusBar_IIIINLRString__LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createToolBar_I_LRToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createToolBar_I_LRToolBar__args[] = 
{
  &Frame_methods_createToolBar_I_LRToolBar__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createToolBar_I_LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createToolBar_I_LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo(), // return type
  "_a_createToolBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createToolBar_I_LRToolBar__args, // the arguments
  0, //arguments count
  Frame_methods_createToolBar_I_LRToolBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createToolBar_I_LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createToolBar_II_LRToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_createToolBar_II_LRToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createToolBar_II_LRToolBar__args[] = 
{
  &Frame_methods_createToolBar_II_LRToolBar__arg_style,
  &Frame_methods_createToolBar_II_LRToolBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createToolBar_II_LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createToolBar_II_LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo(), // return type
  "_8_createToolBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createToolBar_II_LRToolBar__args, // the arguments
  0, //arguments count
  Frame_methods_createToolBar_II_LRToolBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createToolBar_II_LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_createToolBar__LRToolBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_createToolBar__LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_createToolBar__LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "createToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo(), // return type
  "_9_createToolBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_createToolBar__LRToolBar__args, // the arguments
  0, //arguments count
  Frame_methods_createToolBar__LRToolBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_createToolBar__LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_getStatusBar__LRStatusBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_getStatusBar__LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_getStatusBar__LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_g_getStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_getStatusBar__LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_getStatusBar__LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_getStatusBar__LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_getStatusBarPane__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_getStatusBarPane__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_getStatusBarPane__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatusBarPane", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getStatusBarPane", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_getStatusBarPane__I_args, // the arguments
  0, //arguments count
  Frame_methods_getStatusBarPane__I_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_getStatusBarPane__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__args[] = 
{
  &Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_number,
  &Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_id,
  &Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_onCreateStatusBar_IIINLRString__LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onCreateStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_r_onCreateStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_onCreateStatusBar_IIINLRString__LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_onCreateStatusBar_IIINLRString__LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_onCreateStatusBar__LRStatusBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_onCreateStatusBar__LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_onCreateStatusBar__LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "onCreateStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_s_onCreateStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_onCreateStatusBar__LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_onCreateStatusBar__LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_onCreateStatusBar__LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_I_LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_onCreateStatusBar_I_LRStatusBar__args[] = 
{
  &Frame_methods_onCreateStatusBar_I_LRStatusBar__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_onCreateStatusBar_I_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_onCreateStatusBar_I_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "onCreateStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_t_onCreateStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_onCreateStatusBar_I_LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_onCreateStatusBar_I_LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_onCreateStatusBar_I_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_II_LRStatusBar__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_onCreateStatusBar_II_LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_onCreateStatusBar_II_LRStatusBar__args[] = 
{
  &Frame_methods_onCreateStatusBar_II_LRStatusBar__arg_number,
  &Frame_methods_onCreateStatusBar_II_LRStatusBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_onCreateStatusBar_II_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_onCreateStatusBar_II_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "onCreateStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo(), // return type
  "_u_onCreateStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_onCreateStatusBar_II_LRStatusBar__args, // the arguments
  0, //arguments count
  Frame_methods_onCreateStatusBar_II_LRStatusBar__exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_onCreateStatusBar_II_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_popStatusText_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_popStatusText_I_V_args[] = 
{
  &Frame_methods_popStatusText_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_popStatusText_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_popStatusText_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_popStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_popStatusText_I_V_args, // the arguments
  0, //arguments count
  Frame_methods_popStatusText_I_V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_popStatusText_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_popStatusText__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_popStatusText__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_popStatusText__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "popStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_popStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_popStatusText__V_args, // the arguments
  0, //arguments count
  Frame_methods_popStatusText__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_popStatusText__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_positionStatusBar__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_positionStatusBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_positionStatusBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_positionStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_positionStatusBar__V_args, // the arguments
  0, //arguments count
  Frame_methods_positionStatusBar__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_positionStatusBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_pushStatusText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_pushStatusText_INLRString__V_args[] = 
{
  &Frame_methods_pushStatusText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_pushStatusText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_pushStatusText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "pushStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_pushStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_pushStatusText_INLRString__V_args, // the arguments
  0, //arguments count
  Frame_methods_pushStatusText_INLRString__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_pushStatusText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_pushStatusText_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_pushStatusText_INLRString_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_pushStatusText_INLRString_I_V_args[] = 
{
  &Frame_methods_pushStatusText_INLRString_I_V_arg_text,
  &Frame_methods_pushStatusText_INLRString_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_pushStatusText_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_pushStatusText_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_pushStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_pushStatusText_INLRString_I_V_args, // the arguments
  0, //arguments count
  Frame_methods_pushStatusText_INLRString_I_V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_pushStatusText_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setMenuBar_INLRMenuBar__V_arg_mbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMenuBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setMenuBar_INLRMenuBar__V_args[] = 
{
  &Frame_methods_setMenuBar_INLRMenuBar__V_arg_mbar,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setMenuBar_INLRMenuBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setMenuBar_INLRMenuBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMenuBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setMenuBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setMenuBar_INLRMenuBar__V_args, // the arguments
  0, //arguments count
  Frame_methods_setMenuBar_INLRMenuBar__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setMenuBar_INLRMenuBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusBar_INLRStatusBar__V_arg_statBar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "statBar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatusBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setStatusBar_INLRStatusBar__V_args[] = 
{
  &Frame_methods_setStatusBar_INLRStatusBar__V_arg_statBar,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setStatusBar_INLRStatusBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setStatusBar_INLRStatusBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setStatusBar", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setStatusBar_INLRStatusBar__V_args, // the arguments
  0, //arguments count
  Frame_methods_setStatusBar_INLRStatusBar__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setStatusBar_INLRStatusBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusBarPane_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setStatusBarPane_I_V_args[] = 
{
  &Frame_methods_setStatusBarPane_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setStatusBarPane_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setStatusBarPane_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusBarPane", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setStatusBarPane", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setStatusBarPane_I_V_args, // the arguments
  0, //arguments count
  Frame_methods_setStatusBarPane_I_V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setStatusBarPane_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusText_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusText_INLRString_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setStatusText_INLRString_I_V_args[] = 
{
  &Frame_methods_setStatusText_INLRString_I_V_arg_text,
  &Frame_methods_setStatusText_INLRString_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setStatusText_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setStatusText_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setStatusText_INLRString_I_V_args, // the arguments
  0, //arguments count
  Frame_methods_setStatusText_INLRString_I_V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setStatusText_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setStatusText_INLRString__V_args[] = 
{
  &Frame_methods_setStatusText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setStatusText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setStatusText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setStatusText", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setStatusText_INLRString__V_args, // the arguments
  0, //arguments count
  Frame_methods_setStatusText_INLRString__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setStatusText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusWidths_IINLRintArray__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Frame_methods_setStatusWidths_IINLRintArray__V_arg_widths_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "widths_field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Frame_methods_setStatusWidths_IINLRintArray__V_args[] = 
{
  &Frame_methods_setStatusWidths_IINLRintArray__V_arg_n,
  &Frame_methods_setStatusWidths_IINLRintArray__V_arg_widths_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Frame_methods_setStatusWidths_IINLRintArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Frame_method_setStatusWidths_IINLRintArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusWidths", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setStatusWidths", // alternative name of method
  -1, // altlabelHashCode
  Frame_methods_setStatusWidths_IINLRintArray__V_args, // the arguments
  0, //arguments count
  Frame_methods_setStatusWidths_IINLRintArray__V_exceptions, // the declared exceptions
  Frame_MetainfoWrapper::Frame_method_setStatusWidths_IINLRintArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Frame_methods[] = 
{
  &Frame_method_Frame_INLRString__LRFrame_,
  &Frame_method_Frame__LRFrame_,
  &Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRFrame_,
  &Frame_method_Frame_INLRWindow_IINLRString__LRFrame_,
  &Frame_method_Frame_INLRWindow_IINLRString_INLRPoint__LRFrame_,
  &Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize__LRFrame_,
  &Frame_method_Frame_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRFrame_,
  &Frame_method_GetClass__L_acdk_lang_RClass_,
  &Frame_method_createStatusBar__LRStatusBar_,
  &Frame_method_createStatusBar_I_LRStatusBar_,
  &Frame_method_createStatusBar_II_LRStatusBar_,
  &Frame_method_createStatusBar_III_LRStatusBar_,
  &Frame_method_createStatusBar_IIIINLRString__LRStatusBar_,
  &Frame_method_createToolBar_I_LRToolBar_,
  &Frame_method_createToolBar_II_LRToolBar_,
  &Frame_method_createToolBar__LRToolBar_,
  &Frame_method_getStatusBar__LRStatusBar_,
  &Frame_method_getStatusBarPane__I,
  &Frame_method_onCreateStatusBar_IIINLRString__LRStatusBar_,
  &Frame_method_onCreateStatusBar__LRStatusBar_,
  &Frame_method_onCreateStatusBar_I_LRStatusBar_,
  &Frame_method_onCreateStatusBar_II_LRStatusBar_,
  &Frame_method_popStatusText_I_V,
  &Frame_method_popStatusText__V,
  &Frame_method_positionStatusBar__V,
  &Frame_method_pushStatusText_INLRString__V,
  &Frame_method_pushStatusText_INLRString_I_V,
  &Frame_method_setMenuBar_INLRMenuBar__V,
  &Frame_method_setStatusBar_INLRStatusBar__V,
  &Frame_method_setStatusBarPane_I_V,
  &Frame_method_setStatusText_INLRString_I_V,
  &Frame_method_setStatusText_INLRString__V,
  &Frame_method_setStatusWidths_IINLRintArray__V,
  0
};


struct Frame_MetaInfoInitializer
{  Frame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Frame::clazzInfo();
    ci->fields =  _Frame_fields;
    ci->methods =  _Frame_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Frame_MetaInfoInitializer Frame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Gauge_create_array(int length)
{
  return new ObjectArrayImpl<RGauge>(length);
}

//static
::acdk::lang::RObject
Gauge_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Gauge_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar(), (RValidator)args[7].getObjectVar(), (RString)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_II_LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint__LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Gauge((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RStringArray)args[6].getObjectVar(), (RValidator)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Gauge::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_acceptsFocus__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::acceptsFocus();
    else
      ret = This->acceptsFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_getBezelFace__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::getBezelFace();
    else
      ret = This->getBezelFace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_getRange__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::getRange();
    else
      ret = This->getRange();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_getShadowWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::getShadowWidth();
    else
      ret = This->getShadowWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_getValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setBackgroundColour_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::setBackgroundColour((RColour)args[0].getObjectVar());
    else
      ret = This->setBackgroundColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setBezelFace_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Gauge::setBezelFace(args[0].getIntVar());
    else
        This->setBezelFace(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setForegroundColour_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Gauge::setForegroundColour((RColour)args[0].getObjectVar());
    else
      ret = This->setForegroundColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setRange_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Gauge::setRange(args[0].getIntVar());
    else
        This->setRange(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setShadowWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Gauge::setShadowWidth(args[0].getIntVar());
    else
        This->setShadowWidth(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Gauge_method_setValue_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Gauge* This = dmi_cast<Gauge>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Gauge::setValue(args[0].getIntVar());
    else
        This->setValue(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Gauge_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_pos,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_size,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_style,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_choices,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_validator,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_0_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_II_LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_II_LRGauge__arg_range,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_II_LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_II_LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_1_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_II_LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_II_LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_II_LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint__LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_2_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint__LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint__LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_pos,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_3_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_pos,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_size,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_4_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_pos,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_size,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_style,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_5_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_range = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "range", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__args[] = 
{
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_parent,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_id,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_range,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_pos,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_size,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_style,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_choices,
  &Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Gauge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Gauge::clazzInfo(), // return type
  "_6_Gauge", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__args, // the arguments
  0, //arguments count
  Gauge_methods_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Gauge_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_acceptsFocus__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_acceptsFocus__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_acceptsFocus__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_acceptsFocus", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_acceptsFocus__Z_args, // the arguments
  0, //arguments count
  Gauge_methods_acceptsFocus__Z_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_acceptsFocus__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_getBezelFace__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_getBezelFace__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_getBezelFace__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBezelFace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getBezelFace", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_getBezelFace__I_args, // the arguments
  0, //arguments count
  Gauge_methods_getBezelFace__I_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_getBezelFace__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_getRange__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_getRange__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_getRange__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getRange", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_getRange__I_args, // the arguments
  0, //arguments count
  Gauge_methods_getRange__I_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_getRange__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_getShadowWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_getShadowWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_getShadowWidth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShadowWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getShadowWidth", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_getShadowWidth__I_args, // the arguments
  0, //arguments count
  Gauge_methods_getShadowWidth__I_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_getShadowWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_getValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_getValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_getValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getValue", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_getValue__I_args, // the arguments
  0, //arguments count
  Gauge_methods_getValue__I_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_getValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setBackgroundColour_INLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setBackgroundColour_INLRColour__Z_args[] = 
{
  &Gauge_methods_setBackgroundColour_INLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setBackgroundColour_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setBackgroundColour_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackgroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_setBackgroundColour", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setBackgroundColour_INLRColour__Z_args, // the arguments
  0, //arguments count
  Gauge_methods_setBackgroundColour_INLRColour__Z_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setBackgroundColour_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setBezelFace_I_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setBezelFace_I_V_args[] = 
{
  &Gauge_methods_setBezelFace_I_V_arg_w,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setBezelFace_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setBezelFace_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBezelFace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setBezelFace", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setBezelFace_I_V_args, // the arguments
  0, //arguments count
  Gauge_methods_setBezelFace_I_V_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setBezelFace_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setForegroundColour_INLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setForegroundColour_INLRColour__Z_args[] = 
{
  &Gauge_methods_setForegroundColour_INLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setForegroundColour_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setForegroundColour_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setForegroundColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_setForegroundColour", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setForegroundColour_INLRColour__Z_args, // the arguments
  0, //arguments count
  Gauge_methods_setForegroundColour_INLRColour__Z_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setForegroundColour_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setRange_I_V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setRange_I_V_args[] = 
{
  &Gauge_methods_setRange_I_V_arg_r,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setRange_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setRange_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setRange", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setRange_I_V_args, // the arguments
  0, //arguments count
  Gauge_methods_setRange_I_V_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setRange_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setShadowWidth_I_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setShadowWidth_I_V_args[] = 
{
  &Gauge_methods_setShadowWidth_I_V_arg_w,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setShadowWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setShadowWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShadowWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setShadowWidth", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setShadowWidth_I_V_args, // the arguments
  0, //arguments count
  Gauge_methods_setShadowWidth_I_V_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setShadowWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Gauge_methods_setValue_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Gauge_methods_setValue_I_V_args[] = 
{
  &Gauge_methods_setValue_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Gauge_methods_setValue_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Gauge_method_setValue_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setValue", // alternative name of method
  -1, // altlabelHashCode
  Gauge_methods_setValue_I_V_args, // the arguments
  0, //arguments count
  Gauge_methods_setValue_I_V_exceptions, // the declared exceptions
  Gauge_MetainfoWrapper::Gauge_method_setValue_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Gauge_methods[] = 
{
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRGauge_,
  &Gauge_method_Gauge_INLRWindow_II_LRGauge_,
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint__LRGauge_,
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize__LRGauge_,
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_I_LRGauge_,
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray__LRGauge_,
  &Gauge_method_Gauge_INLRWindow_IIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRGauge_,
  &Gauge_method_GetClass__L_acdk_lang_RClass_,
  &Gauge_method_acceptsFocus__Z,
  &Gauge_method_getBezelFace__I,
  &Gauge_method_getRange__I,
  &Gauge_method_getShadowWidth__I,
  &Gauge_method_getValue__I,
  &Gauge_method_setBackgroundColour_INLRColour__Z,
  &Gauge_method_setBezelFace_I_V,
  &Gauge_method_setForegroundColour_INLRColour__Z,
  &Gauge_method_setRange_I_V,
  &Gauge_method_setShadowWidth_I_V,
  &Gauge_method_setValue_I_V,
  0
};


struct Gauge_MetaInfoInitializer
{  Gauge_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Gauge::clazzInfo();
    ci->fields =  _Gauge_fields;
    ci->methods =  _Gauge_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Gauge_MetaInfoInitializer Gauge_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
GDIImage_create_array(int length)
{
  return new ObjectArrayImpl<RGDIImage>(length);
}

//static
::acdk::lang::RObject
GDIImage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GDIImage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GDIImage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GDIImage::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _GDIImage_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GDIImage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GDIImage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GDIImage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GDIImage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GDIImage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GDIImage_MetainfoWrapper::GDIImage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GDIImage_methods[] = 
{
  &GDIImage_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct GDIImage_MetaInfoInitializer
{  GDIImage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GDIImage::clazzInfo();
    ci->fields =  _GDIImage_fields;
    ci->methods =  _GDIImage_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GDIImage_MetaInfoInitializer GDIImage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
GDIObject_create_array(int length)
{
  return new ObjectArrayImpl<RGDIObject>(length);
}

//static
::acdk::lang::RObject
GDIObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GDIObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GDIObject_method_GDIObject__LRGDIObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GDIObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GDIObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GDIObject::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _GDIObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GDIObject_methods_GDIObject__LRGDIObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GDIObject_methods_GDIObject__LRGDIObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GDIObject_method_GDIObject__LRGDIObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GDIObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GDIObject::clazzInfo(), // return type
  "_0_GDIObject", // alternative name of method
  -1, // altlabelHashCode
  GDIObject_methods_GDIObject__LRGDIObject__args, // the arguments
  0, //arguments count
  GDIObject_methods_GDIObject__LRGDIObject__exceptions, // the declared exceptions
  GDIObject_MetainfoWrapper::GDIObject_method_GDIObject__LRGDIObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GDIObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GDIObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GDIObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GDIObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GDIObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GDIObject_MetainfoWrapper::GDIObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GDIObject_methods[] = 
{
  &GDIObject_method_GDIObject__LRGDIObject_,
  &GDIObject_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct GDIObject_MetaInfoInitializer
{  GDIObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GDIObject::clazzInfo();
    ci->fields =  _GDIObject_fields;
    ci->methods =  _GDIObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GDIObject_MetaInfoInitializer GDIObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
HtmlWindow_create_array(int length)
{
  return new ObjectArrayImpl<RHtmlWindow>(length);
}

//static
::acdk::lang::RObject
HtmlWindow_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HtmlWindow_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HtmlWindow::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HtmlWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_HtmlWindow_INLRWindow_I_LRHtmlWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HtmlWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HtmlWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HtmlWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HtmlWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_appendToPage_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::appendToPage((RString)args[0].getObjectVar());
    else
      ret = This->appendToPage((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_getOpenedAnchor__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HtmlWindow::getOpenedAnchor();
    else
        ret = (::acdk::lang::RObject)This->getOpenedAnchor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_getOpenedPage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HtmlWindow::getOpenedPage();
    else
        ret = (::acdk::lang::RObject)This->getOpenedPage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_getOpenedPageTitle__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HtmlWindow::getOpenedPageTitle();
    else
        ret = (::acdk::lang::RObject)This->getOpenedPageTitle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_getRelatedFrame__LRFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HtmlWindow::getRelatedFrame();
    else
        ret = (::acdk::lang::RObject)This->getRelatedFrame();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_historyBack__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::historyBack();
    else
      ret = This->historyBack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_historyCanBack__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::historyCanBack();
    else
      ret = This->historyCanBack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_historyCanForward__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::historyCanForward();
    else
      ret = This->historyCanForward();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_historyClear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HtmlWindow::historyClear();
    else
        This->historyClear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_historyForward__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::historyForward();
    else
      ret = This->historyForward();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_loadFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::loadFile((RString)args[0].getObjectVar());
    else
      ret = This->loadFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_loadPage_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::loadPage((RString)args[0].getObjectVar());
    else
      ret = This->loadPage((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_setBorders_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HtmlWindow::setBorders(args[0].getIntVar());
    else
        This->setBorders(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_setPage_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HtmlWindow::setPage((RString)args[0].getObjectVar());
    else
      ret = This->setPage((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_setRelatedFrame_INLRFrame_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HtmlWindow::setRelatedFrame((RFrame)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->setRelatedFrame((RFrame)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HtmlWindow_method_setRelatedStatusBar_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HtmlWindow* This = dmi_cast<HtmlWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HtmlWindow::setRelatedStatusBar(args[0].getIntVar());
    else
        This->setRelatedStatusBar(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _HtmlWindow_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__args[] = 
{
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_parent,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_id,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_pos,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_size,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_style,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HtmlWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HtmlWindow::clazzInfo(), // return type
  "_0_HtmlWindow", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__args[] = 
{
  &HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__arg_parent,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_HtmlWindow_INLRWindow_I_LRHtmlWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HtmlWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HtmlWindow::clazzInfo(), // return type
  "_1_HtmlWindow", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_HtmlWindow_INLRWindow_I_LRHtmlWindow__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_HtmlWindow_INLRWindow_I_LRHtmlWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__args[] = 
{
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_parent,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_id,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HtmlWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HtmlWindow::clazzInfo(), // return type
  "_2_HtmlWindow", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__args[] = 
{
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_parent,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_id,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_pos,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HtmlWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HtmlWindow::clazzInfo(), // return type
  "_3_HtmlWindow", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__args[] = 
{
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_parent,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_id,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_pos,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_size,
  &HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HtmlWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HtmlWindow::clazzInfo(), // return type
  "_4_HtmlWindow", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_appendToPage_INLRString__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_appendToPage_INLRString__Z_args[] = 
{
  &HtmlWindow_methods_appendToPage_INLRString__Z_arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_appendToPage_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_appendToPage_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendToPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_appendToPage", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_appendToPage_INLRString__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_appendToPage_INLRString__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_appendToPage_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_getOpenedAnchor__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_getOpenedAnchor__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_getOpenedAnchor__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOpenedAnchor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getOpenedAnchor", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_getOpenedAnchor__LRString__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_getOpenedAnchor__LRString__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_getOpenedAnchor__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_getOpenedPage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_getOpenedPage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_getOpenedPage__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOpenedPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getOpenedPage", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_getOpenedPage__LRString__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_getOpenedPage__LRString__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_getOpenedPage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_getOpenedPageTitle__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_getOpenedPageTitle__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_getOpenedPageTitle__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOpenedPageTitle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getOpenedPageTitle", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_getOpenedPageTitle__LRString__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_getOpenedPageTitle__LRString__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_getOpenedPageTitle__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_getRelatedFrame__LRFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_getRelatedFrame__LRFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_getRelatedFrame__LRFrame_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRelatedFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFrame::clazzInfo(), // return type
  "_d_getRelatedFrame", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_getRelatedFrame__LRFrame__args, // the arguments
  0, //arguments count
  HtmlWindow_methods_getRelatedFrame__LRFrame__exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_getRelatedFrame__LRFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_historyBack__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_historyBack__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_historyBack__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "historyBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_historyBack", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_historyBack__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_historyBack__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_historyBack__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_historyCanBack__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_historyCanBack__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_historyCanBack__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "historyCanBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_historyCanBack", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_historyCanBack__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_historyCanBack__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_historyCanBack__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_historyCanForward__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_historyCanForward__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_historyCanForward__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "historyCanForward", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_historyCanForward", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_historyCanForward__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_historyCanForward__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_historyCanForward__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_historyClear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_historyClear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_historyClear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "historyClear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_historyClear", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_historyClear__V_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_historyClear__V_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_historyClear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_historyForward__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_historyForward__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_historyForward__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "historyForward", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_historyForward", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_historyForward__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_historyForward__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_historyForward__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_loadFile_INLRString__Z_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_loadFile_INLRString__Z_args[] = 
{
  &HtmlWindow_methods_loadFile_INLRString__Z_arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_loadFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_loadFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_loadFile", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_loadFile_INLRString__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_loadFile_INLRString__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_loadFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_loadPage_INLRString__Z_arg_location = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "location", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_loadPage_INLRString__Z_args[] = 
{
  &HtmlWindow_methods_loadPage_INLRString__Z_arg_location,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_loadPage_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_loadPage_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_loadPage", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_loadPage_INLRString__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_loadPage_INLRString__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_loadPage_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_setBorders_I_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_setBorders_I_V_args[] = 
{
  &HtmlWindow_methods_setBorders_I_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_setBorders_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_setBorders_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBorders", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setBorders", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_setBorders_I_V_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_setBorders_I_V_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_setBorders_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_setPage_INLRString__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_setPage_INLRString__Z_args[] = 
{
  &HtmlWindow_methods_setPage_INLRString__Z_arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_setPage_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_setPage_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_setPage", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_setPage_INLRString__Z_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_setPage_INLRString__Z_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_setPage_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_args[] = 
{
  &HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_arg_frame,
  &HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_setRelatedFrame_INLRFrame_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRelatedFrame", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setRelatedFrame", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_setRelatedFrame_INLRFrame_INLRString__V_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_setRelatedFrame_INLRFrame_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HtmlWindow_methods_setRelatedStatusBar_I_V_arg_bar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HtmlWindow_methods_setRelatedStatusBar_I_V_args[] = 
{
  &HtmlWindow_methods_setRelatedStatusBar_I_V_arg_bar,
  0
};

::acdk::lang::dmi::ClazzInfo* HtmlWindow_methods_setRelatedStatusBar_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HtmlWindow_method_setRelatedStatusBar_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRelatedStatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setRelatedStatusBar", // alternative name of method
  -1, // altlabelHashCode
  HtmlWindow_methods_setRelatedStatusBar_I_V_args, // the arguments
  0, //arguments count
  HtmlWindow_methods_setRelatedStatusBar_I_V_exceptions, // the declared exceptions
  HtmlWindow_MetainfoWrapper::HtmlWindow_method_setRelatedStatusBar_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HtmlWindow_methods[] = 
{
  &HtmlWindow_method_GetClass__L_acdk_lang_RClass_,
  &HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRHtmlWindow_,
  &HtmlWindow_method_HtmlWindow_INLRWindow_I_LRHtmlWindow_,
  &HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint__LRHtmlWindow_,
  &HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize__LRHtmlWindow_,
  &HtmlWindow_method_HtmlWindow_INLRWindow_IINLRPoint_INLRSize_I_LRHtmlWindow_,
  &HtmlWindow_method_appendToPage_INLRString__Z,
  &HtmlWindow_method_getOpenedAnchor__LRString_,
  &HtmlWindow_method_getOpenedPage__LRString_,
  &HtmlWindow_method_getOpenedPageTitle__LRString_,
  &HtmlWindow_method_getRelatedFrame__LRFrame_,
  &HtmlWindow_method_historyBack__Z,
  &HtmlWindow_method_historyCanBack__Z,
  &HtmlWindow_method_historyCanForward__Z,
  &HtmlWindow_method_historyClear__V,
  &HtmlWindow_method_historyForward__Z,
  &HtmlWindow_method_loadFile_INLRString__Z,
  &HtmlWindow_method_loadPage_INLRString__Z,
  &HtmlWindow_method_setBorders_I_V,
  &HtmlWindow_method_setPage_INLRString__Z,
  &HtmlWindow_method_setRelatedFrame_INLRFrame_INLRString__V,
  &HtmlWindow_method_setRelatedStatusBar_I_V,
  0
};


struct HtmlWindow_MetaInfoInitializer
{  HtmlWindow_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HtmlWindow::clazzInfo();
    ci->fields =  _HtmlWindow_fields;
    ci->methods =  _HtmlWindow_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HtmlWindow_MetaInfoInitializer HtmlWindow_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Icon_create_array(int length)
{
  return new ObjectArrayImpl<RIcon>(length);
}

//static
::acdk::lang::RObject
Icon_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Icon_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Icon::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_Icon__LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Icon();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_Icon_INLRString_III_LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Icon((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_Icon_INLRString_I_LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Icon((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_Icon_INLRString_II_LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Icon((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_getDepth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Icon::getDepth();
    else
      ret = This->getDepth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_getHeight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Icon::getHeight();
    else
      ret = This->getHeight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_getWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Icon::getWidth();
    else
      ret = This->getWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_loadFile_INLRString_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Icon::loadFile((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
      ret = This->loadFile((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_nullIcon__LRIcon__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Icon::nullIcon();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_ok__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Icon::ok();
    else
      ret = This->ok();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_setDepth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Icon::setDepth(args[0].getIntVar());
    else
        This->setDepth(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_setHeight_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Icon::setHeight(args[0].getIntVar());
    else
        This->setHeight(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Icon_method_setWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Icon* This = dmi_cast<Icon>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Icon::setWidth(args[0].getIntVar());
    else
        This->setWidth(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Icon_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Icon_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_Icon__LRIcon__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_Icon__LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_Icon__LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Icon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Icon::clazzInfo(), // return type
  "_0_Icon", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_Icon__LRIcon__args, // the arguments
  0, //arguments count
  Icon_methods_Icon__LRIcon__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_Icon__LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_III_LRIcon__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_III_LRIcon__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_III_LRIcon__arg_desiredWidth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desiredWidth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_III_LRIcon__arg_desiredHeight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desiredHeight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_Icon_INLRString_III_LRIcon__args[] = 
{
  &Icon_methods_Icon_INLRString_III_LRIcon__arg_name,
  &Icon_methods_Icon_INLRString_III_LRIcon__arg_type,
  &Icon_methods_Icon_INLRString_III_LRIcon__arg_desiredWidth,
  &Icon_methods_Icon_INLRString_III_LRIcon__arg_desiredHeight,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_Icon_INLRString_III_LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_Icon_INLRString_III_LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Icon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Icon::clazzInfo(), // return type
  "_1_Icon", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_Icon_INLRString_III_LRIcon__args, // the arguments
  0, //arguments count
  Icon_methods_Icon_INLRString_III_LRIcon__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_Icon_INLRString_III_LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_I_LRIcon__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_I_LRIcon__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_Icon_INLRString_I_LRIcon__args[] = 
{
  &Icon_methods_Icon_INLRString_I_LRIcon__arg_name,
  &Icon_methods_Icon_INLRString_I_LRIcon__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_Icon_INLRString_I_LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_Icon_INLRString_I_LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Icon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Icon::clazzInfo(), // return type
  "_2_Icon", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_Icon_INLRString_I_LRIcon__args, // the arguments
  0, //arguments count
  Icon_methods_Icon_INLRString_I_LRIcon__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_Icon_INLRString_I_LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_II_LRIcon__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_II_LRIcon__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_Icon_INLRString_II_LRIcon__arg_desiredWidth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desiredWidth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_Icon_INLRString_II_LRIcon__args[] = 
{
  &Icon_methods_Icon_INLRString_II_LRIcon__arg_name,
  &Icon_methods_Icon_INLRString_II_LRIcon__arg_type,
  &Icon_methods_Icon_INLRString_II_LRIcon__arg_desiredWidth,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_Icon_INLRString_II_LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_Icon_INLRString_II_LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Icon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Icon::clazzInfo(), // return type
  "_3_Icon", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_Icon_INLRString_II_LRIcon__args, // the arguments
  0, //arguments count
  Icon_methods_Icon_INLRString_II_LRIcon__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_Icon_INLRString_II_LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_getDepth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_getDepth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_getDepth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDepth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getDepth", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_getDepth__I_args, // the arguments
  0, //arguments count
  Icon_methods_getDepth__I_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_getDepth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_getHeight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_getHeight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_getHeight__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getHeight", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_getHeight__I_args, // the arguments
  0, //arguments count
  Icon_methods_getHeight__I_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_getHeight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_getWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_getWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_getWidth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getWidth", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_getWidth__I_args, // the arguments
  0, //arguments count
  Icon_methods_getWidth__I_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_getWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_loadFile_INLRString_I_Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_loadFile_INLRString_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_loadFile_INLRString_I_Z_args[] = 
{
  &Icon_methods_loadFile_INLRString_I_Z_arg_name,
  &Icon_methods_loadFile_INLRString_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_loadFile_INLRString_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_loadFile_INLRString_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_loadFile", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_loadFile_INLRString_I_Z_args, // the arguments
  0, //arguments count
  Icon_methods_loadFile_INLRString_I_Z_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_loadFile_INLRString_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_nullIcon__LRIcon__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_nullIcon__LRIcon__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_nullIcon__LRIcon_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo(), // return type
  "_c_nullIcon", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_nullIcon__LRIcon__args, // the arguments
  0, //arguments count
  Icon_methods_nullIcon__LRIcon__exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_nullIcon__LRIcon__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_ok__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_ok__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_ok__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ok", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_ok", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_ok__Z_args, // the arguments
  0, //arguments count
  Icon_methods_ok__Z_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_ok__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_setDepth_I_V_arg_depth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "depth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_setDepth_I_V_args[] = 
{
  &Icon_methods_setDepth_I_V_arg_depth,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_setDepth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_setDepth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDepth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setDepth", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_setDepth_I_V_args, // the arguments
  0, //arguments count
  Icon_methods_setDepth_I_V_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_setDepth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_setHeight_I_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_setHeight_I_V_args[] = 
{
  &Icon_methods_setHeight_I_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_setHeight_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_setHeight_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setHeight", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_setHeight_I_V_args, // the arguments
  0, //arguments count
  Icon_methods_setHeight_I_V_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_setHeight_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Icon_methods_setWidth_I_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Icon_methods_setWidth_I_V_args[] = 
{
  &Icon_methods_setWidth_I_V_arg_width,
  0
};

::acdk::lang::dmi::ClazzInfo* Icon_methods_setWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Icon_method_setWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setWidth", // alternative name of method
  -1, // altlabelHashCode
  Icon_methods_setWidth_I_V_args, // the arguments
  0, //arguments count
  Icon_methods_setWidth_I_V_exceptions, // the declared exceptions
  Icon_MetainfoWrapper::Icon_method_setWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Icon_methods[] = 
{
  &Icon_method_GetClass__L_acdk_lang_RClass_,
  &Icon_method_Icon__LRIcon_,
  &Icon_method_Icon_INLRString_III_LRIcon_,
  &Icon_method_Icon_INLRString_I_LRIcon_,
  &Icon_method_Icon_INLRString_II_LRIcon_,
  &Icon_method_getDepth__I,
  &Icon_method_getHeight__I,
  &Icon_method_getWidth__I,
  &Icon_method_loadFile_INLRString_I_Z,
  &Icon_method_nullIcon__LRIcon_,
  &Icon_method_ok__Z,
  &Icon_method_setDepth_I_V,
  &Icon_method_setHeight_I_V,
  &Icon_method_setWidth_I_V,
  0
};


struct Icon_MetaInfoInitializer
{  Icon_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Icon::clazzInfo();
    ci->fields =  _Icon_fields;
    ci->methods =  _Icon_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Icon_MetaInfoInitializer Icon_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
IndividualLayoutConstraint_create_array(int length)
{
  return new ObjectArrayImpl<RIndividualLayoutConstraint>(length);
}

//static
::acdk::lang::RObject
IndividualLayoutConstraint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IndividualLayoutConstraint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IndividualLayoutConstraint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_IndividualLayoutConstraint__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IndividualLayoutConstraint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_above_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::above((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->above((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_above_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::above((RWindow)args[0].getObjectVar());
    else
        This->above((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_absolute_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::absolute(args[0].getIntVar());
    else
        This->absolute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_asIs__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::asIs();
    else
        This->asIs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_below_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::below((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->below((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_below_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::below((RWindow)args[0].getObjectVar());
    else
        This->below((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getDone__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getDone();
    else
      ret = This->getDone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getEdge_IINLRWindow_INLRWindow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getEdge((Edge)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RWindow)args[2].getObjectVar());
    else
      ret = This->getEdge((Edge)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (RWindow)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getMargin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getMargin();
    else
      ret = This->getMargin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getMyEdge__LEdge__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (Edge)This->IndividualLayoutConstraint::getMyEdge();
    else
      ret = (Edge)This->getMyEdge();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getOtherEdge__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getOtherEdge();
    else
      ret = This->getOtherEdge();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getOtherWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IndividualLayoutConstraint::getOtherWindow();
    else
        ret = (::acdk::lang::RObject)This->getOtherWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getPercent__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getPercent();
    else
      ret = This->getPercent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getRelationship__LLayoutRelationship__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (LayoutRelationship)This->IndividualLayoutConstraint::getRelationship();
    else
      ret = (LayoutRelationship)This->getRelationship();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_getValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_leftOf_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::leftOf((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->leftOf((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_leftOf_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::leftOf((RWindow)args[0].getObjectVar());
    else
        This->leftOf((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_percentOf_INLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::percentOf((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar(), args[2].getIntVar());
    else
        This->percentOf((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_resetIfWin_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::resetIfWin((RWindow)args[0].getObjectVar());
    else
      ret = This->resetIfWin((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_rightOf_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::rightOf((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->rightOf((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_rightOf_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::rightOf((RWindow)args[0].getObjectVar());
    else
        This->rightOf((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_sameAs_INLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::sameAs((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar(), args[2].getIntVar());
    else
        This->sameAs((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_sameAs_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::sameAs((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar());
    else
        This->sameAs((RWindow)args[0].getObjectVar(), (Edge)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IndividualLayoutConstraint::satisfyConstraint((RLayoutConstraints)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    else
      ret = This->satisfyConstraint((RLayoutConstraints)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_set_IINLRWindow_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_set_IINLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar());
    else
        This->set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_set_IINLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar(), args[3].getIntVar());
    else
        This->set((LayoutRelationship)args[0].getIntVar(), (RWindow)args[1].getObjectVar(), (Edge)args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_setDone_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::setDone(args[0].getBoolVar());
    else
        This->setDone(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_setEdge_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::setEdge((Edge)args[0].getIntVar());
    else
        This->setEdge((Edge)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_setMargin_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::setMargin(args[0].getIntVar());
    else
        This->setMargin(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_setRelationship_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::setRelationship((LayoutRelationship)args[0].getIntVar());
    else
        This->setRelationship((LayoutRelationship)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_setValue_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::setValue(args[0].getIntVar());
    else
        This->setValue(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IndividualLayoutConstraint_method_unconstrained__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IndividualLayoutConstraint* This = dmi_cast<IndividualLayoutConstraint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->IndividualLayoutConstraint::unconstrained();
    else
        This->unconstrained();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _IndividualLayoutConstraint_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_y_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_IndividualLayoutConstraint__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_IndividualLayoutConstraint__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_IndividualLayoutConstraint__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IndividualLayoutConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IndividualLayoutConstraint::clazzInfo(), // return type
  "_0_IndividualLayoutConstraint", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_IndividualLayoutConstraint__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_IndividualLayoutConstraint__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_IndividualLayoutConstraint__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_above_INLRWindow_I_V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_above_INLRWindow_I_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_above_INLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_above_INLRWindow_I_V_arg_sibling,
  &IndividualLayoutConstraint_methods_above_INLRWindow_I_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_above_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_above_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "above", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_above", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_above_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_above_INLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_above_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_above_INLRWindow__V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_above_INLRWindow__V_args[] = 
{
  &IndividualLayoutConstraint_methods_above_INLRWindow__V_arg_sibling,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_above_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_above_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "above", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_above", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_above_INLRWindow__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_above_INLRWindow__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_above_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_absolute_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_absolute_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_absolute_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_absolute_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_absolute_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "absolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_absolute", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_absolute_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_absolute_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_absolute_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_asIs__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_asIs__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_asIs__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asIs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_asIs", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_asIs__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_asIs__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_asIs__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_below_INLRWindow_I_V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_below_INLRWindow_I_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_below_INLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_below_INLRWindow_I_V_arg_sibling,
  &IndividualLayoutConstraint_methods_below_INLRWindow_I_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_below_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_below_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "below", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_below", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_below_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_below_INLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_below_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_below_INLRWindow__V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_below_INLRWindow__V_args[] = 
{
  &IndividualLayoutConstraint_methods_below_INLRWindow__V_arg_sibling,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_below_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_below_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "below", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_below", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_below_INLRWindow__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_below_INLRWindow__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_below_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getDone__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getDone__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getDone__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_getDone", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getDone__Z_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getDone__Z_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getDone__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_which = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "which", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_thisWin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thisWin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_args[] = 
{
  &IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_which,
  &IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_thisWin,
  &IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getEdge_IINLRWindow_INLRWindow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEdge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getEdge", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getEdge_IINLRWindow_INLRWindow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getMargin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getMargin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getMargin__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMargin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getMargin", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getMargin__I_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getMargin__I_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getMargin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getMyEdge__LEdge__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getMyEdge__LEdge__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getMyEdge__LEdge_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMyEdge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getMyEdge", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getMyEdge__LEdge__args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getMyEdge__LEdge__exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getMyEdge__LEdge__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getOtherEdge__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getOtherEdge__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getOtherEdge__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOtherEdge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getOtherEdge", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getOtherEdge__I_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getOtherEdge__I_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getOtherEdge__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getOtherWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getOtherWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getOtherWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOtherWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_i_getOtherWindow", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getOtherWindow__LRWindow__args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getOtherWindow__LRWindow__exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getOtherWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getPercent__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getPercent__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getPercent__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPercent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getPercent", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getPercent__I_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getPercent__I_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getPercent__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getRelationship__LLayoutRelationship__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getRelationship__LLayoutRelationship__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getRelationship__LLayoutRelationship_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRelationship", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_getRelationship", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getRelationship__LLayoutRelationship__args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getRelationship__LLayoutRelationship__exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getRelationship__LLayoutRelationship__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_getValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_getValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_getValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getValue", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_getValue__I_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_getValue__I_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_getValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_arg_sibling,
  &IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_leftOf_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_leftOf", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_leftOf_INLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_leftOf_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_args[] = 
{
  &IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_arg_sibling,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_leftOf_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "leftOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_leftOf", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_leftOf_INLRWindow__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_leftOf_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_wh = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "wh", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_per = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "per", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_args[] = 
{
  &IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_otherW,
  &IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_wh,
  &IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_per,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_percentOf_INLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "percentOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_percentOf", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_percentOf_INLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_args[] = 
{
  &IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_arg_otherW,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_resetIfWin_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetIfWin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_resetIfWin", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_resetIfWin_INLRWindow__Z_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_resetIfWin_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_arg_sibling,
  &IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_rightOf_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_rightOf", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_rightOf_INLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_rightOf_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_arg_sibling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sibling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_args[] = 
{
  &IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_arg_sibling,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_rightOf_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "rightOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_rightOf", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_rightOf_INLRWindow__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_rightOf_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_edge = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "edge", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_args[] = 
{
  &IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_otherW,
  &IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_edge,
  &IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_sameAs_INLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sameAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_sameAs", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_sameAs_INLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_arg_edge = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "edge", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_arg_otherW,
  &IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_arg_edge,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_sameAs_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "sameAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_sameAs", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_sameAs_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_arg_constraints = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "constraints", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLayoutConstraints::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_arg_win = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "win", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_args[] = 
{
  &IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_arg_constraints,
  &IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_arg_win,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "satisfyConstraint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_satisfyConstraint", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_rel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_otherE = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherE", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_marg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "marg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_args[] = 
{
  &IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_rel,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_otherW,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_otherE,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_val,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_marg,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_set_IINLRWindow_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_set", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_set_IINLRWindow_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_rel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_otherE = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherE", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_rel,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_otherW,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_otherE,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_set_IINLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_set", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_set_IINLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_rel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_otherW = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "otherW", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_otherE = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherE", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_args[] = 
{
  &IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_rel,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_otherW,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_otherE,
  &IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_set_IINLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_set", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_set_IINLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_setDone_Z_V_arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_setDone_Z_V_args[] = 
{
  &IndividualLayoutConstraint_methods_setDone_Z_V_arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_setDone_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_setDone_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setDone", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_setDone_Z_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_setDone_Z_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_setDone_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_setEdge_I_V_arg_which = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "which", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_setEdge_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_setEdge_I_V_arg_which,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_setEdge_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_setEdge_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEdge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setEdge", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_setEdge_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_setEdge_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_setEdge_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_setMargin_I_V_arg_m = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "m", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_setMargin_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_setMargin_I_V_arg_m,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_setMargin_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_setMargin_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setMargin", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_setMargin_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_setMargin_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_setMargin_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_setRelationship_I_V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_setRelationship_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_setRelationship_I_V_arg_r,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_setRelationship_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_setRelationship_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRelationship", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setRelationship", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_setRelationship_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_setRelationship_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_setRelationship_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IndividualLayoutConstraint_methods_setValue_I_V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_setValue_I_V_args[] = 
{
  &IndividualLayoutConstraint_methods_setValue_I_V_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_setValue_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_setValue_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setValue", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_setValue_I_V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_setValue_I_V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_setValue_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IndividualLayoutConstraint_methods_unconstrained__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IndividualLayoutConstraint_methods_unconstrained__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IndividualLayoutConstraint_method_unconstrained__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unconstrained", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_unconstrained", // alternative name of method
  -1, // altlabelHashCode
  IndividualLayoutConstraint_methods_unconstrained__V_args, // the arguments
  0, //arguments count
  IndividualLayoutConstraint_methods_unconstrained__V_exceptions, // the declared exceptions
  IndividualLayoutConstraint_MetainfoWrapper::IndividualLayoutConstraint_method_unconstrained__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IndividualLayoutConstraint_methods[] = 
{
  &IndividualLayoutConstraint_method_GetClass__L_acdk_lang_RClass_,
  &IndividualLayoutConstraint_method_IndividualLayoutConstraint__LRIndividualLayoutConstraint_,
  &IndividualLayoutConstraint_method_above_INLRWindow_I_V,
  &IndividualLayoutConstraint_method_above_INLRWindow__V,
  &IndividualLayoutConstraint_method_absolute_I_V,
  &IndividualLayoutConstraint_method_asIs__V,
  &IndividualLayoutConstraint_method_below_INLRWindow_I_V,
  &IndividualLayoutConstraint_method_below_INLRWindow__V,
  &IndividualLayoutConstraint_method_getDone__Z,
  &IndividualLayoutConstraint_method_getEdge_IINLRWindow_INLRWindow__I,
  &IndividualLayoutConstraint_method_getMargin__I,
  &IndividualLayoutConstraint_method_getMyEdge__LEdge_,
  &IndividualLayoutConstraint_method_getOtherEdge__I,
  &IndividualLayoutConstraint_method_getOtherWindow__LRWindow_,
  &IndividualLayoutConstraint_method_getPercent__I,
  &IndividualLayoutConstraint_method_getRelationship__LLayoutRelationship_,
  &IndividualLayoutConstraint_method_getValue__I,
  &IndividualLayoutConstraint_method_leftOf_INLRWindow_I_V,
  &IndividualLayoutConstraint_method_leftOf_INLRWindow__V,
  &IndividualLayoutConstraint_method_percentOf_INLRWindow_II_V,
  &IndividualLayoutConstraint_method_resetIfWin_INLRWindow__Z,
  &IndividualLayoutConstraint_method_rightOf_INLRWindow_I_V,
  &IndividualLayoutConstraint_method_rightOf_INLRWindow__V,
  &IndividualLayoutConstraint_method_sameAs_INLRWindow_II_V,
  &IndividualLayoutConstraint_method_sameAs_INLRWindow_I_V,
  &IndividualLayoutConstraint_method_satisfyConstraint_INLRLayoutConstraints_INLRWindow__Z,
  &IndividualLayoutConstraint_method_set_IINLRWindow_III_V,
  &IndividualLayoutConstraint_method_set_IINLRWindow_I_V,
  &IndividualLayoutConstraint_method_set_IINLRWindow_II_V,
  &IndividualLayoutConstraint_method_setDone_Z_V,
  &IndividualLayoutConstraint_method_setEdge_I_V,
  &IndividualLayoutConstraint_method_setMargin_I_V,
  &IndividualLayoutConstraint_method_setRelationship_I_V,
  &IndividualLayoutConstraint_method_setValue_I_V,
  &IndividualLayoutConstraint_method_unconstrained__V,
  0
};


struct IndividualLayoutConstraint_MetaInfoInitializer
{  IndividualLayoutConstraint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IndividualLayoutConstraint::clazzInfo();
    ci->fields =  _IndividualLayoutConstraint_fields;
    ci->methods =  _IndividualLayoutConstraint_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IndividualLayoutConstraint_MetaInfoInitializer IndividualLayoutConstraint_MetaInfoInitializer_staticinstance__;


struct IndividualLayoutConstraint_clazzInfo_ClazzAttributesResInitializer8
{
  IndividualLayoutConstraint_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_rel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LayoutRelationshipMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_rel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LayoutRelationshipMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_rel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LayoutRelationshipMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_III_V_arg_otherE, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_I_V_arg_otherE, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_set_IINLRWindow_II_V_arg_otherE, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_sameAs_INLRWindow_II_V_arg_edge, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_sameAs_INLRWindow_I_V_arg_edge, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_percentOf_INLRWindow_II_V_arg_wh, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_method_getMyEdge__LEdge_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_setEdge_I_V_arg_which, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_method_getRelationship__LLayoutRelationship_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LayoutRelationshipMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_setRelationship_I_V_arg_r, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LayoutRelationshipMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IndividualLayoutConstraint_methods_getEdge_IINLRWindow_INLRWindow__I_arg_which, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)EdgeMetaInf::GetEnumInfo()));
  }
};

IndividualLayoutConstraint_clazzInfo_ClazzAttributesResInitializer8 IndividualLayoutConstraint_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
LayoutConstraints_create_array(int length)
{
  return new ObjectArrayImpl<RLayoutConstraints>(length);
}

//static
::acdk::lang::RObject
LayoutConstraints_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LayoutConstraints_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LayoutConstraints::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_LayoutConstraints__LRLayoutConstraints__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LayoutConstraints();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_bottom__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::bottom();
    else
        ret = (::acdk::lang::RObject)This->bottom();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_centreX__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::centreX();
    else
        ret = (::acdk::lang::RObject)This->centreX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_centreY__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::centreY();
    else
        ret = (::acdk::lang::RObject)This->centreY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_height__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::height();
    else
        ret = (::acdk::lang::RObject)This->height();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_left__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::left();
    else
        ret = (::acdk::lang::RObject)This->left();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_right__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::right();
    else
        ret = (::acdk::lang::RObject)This->right();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_top__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::top();
    else
        ret = (::acdk::lang::RObject)This->top();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LayoutConstraints_method_width__LRIndividualLayoutConstraint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LayoutConstraints* This = dmi_cast<LayoutConstraints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LayoutConstraints::width();
    else
        ret = (::acdk::lang::RObject)This->width();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LayoutConstraints_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_LayoutConstraints__LRLayoutConstraints__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_LayoutConstraints__LRLayoutConstraints__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_LayoutConstraints__LRLayoutConstraints_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LayoutConstraints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LayoutConstraints::clazzInfo(), // return type
  "_0_LayoutConstraints", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_LayoutConstraints__LRLayoutConstraints__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_LayoutConstraints__LRLayoutConstraints__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_LayoutConstraints__LRLayoutConstraints__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_bottom__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_bottom__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_bottom__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bottom", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_4_bottom", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_bottom__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_bottom__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_bottom__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_centreX__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_centreX__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_centreX__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "centreX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_7_centreX", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_centreX__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_centreX__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_centreX__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_centreY__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_centreY__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_centreY__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "centreY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_8_centreY", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_centreY__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_centreY__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_centreY__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_height__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_height__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_height__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "height", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_6_height", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_height__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_height__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_height__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_left__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_left__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_left__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "left", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_1_left", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_left__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_left__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_left__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_right__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_right__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_right__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "right", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_3_right", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_right__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_right__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_right__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_top__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_top__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_top__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "top", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_2_top", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_top__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_top__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_top__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LayoutConstraints_methods_width__LRIndividualLayoutConstraint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LayoutConstraints_methods_width__LRIndividualLayoutConstraint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LayoutConstraints_method_width__LRIndividualLayoutConstraint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "width", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIndividualLayoutConstraint::clazzInfo(), // return type
  "_5_width", // alternative name of method
  -1, // altlabelHashCode
  LayoutConstraints_methods_width__LRIndividualLayoutConstraint__args, // the arguments
  0, //arguments count
  LayoutConstraints_methods_width__LRIndividualLayoutConstraint__exceptions, // the declared exceptions
  LayoutConstraints_MetainfoWrapper::LayoutConstraints_method_width__LRIndividualLayoutConstraint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LayoutConstraints_methods[] = 
{
  &LayoutConstraints_method_GetClass__L_acdk_lang_RClass_,
  &LayoutConstraints_method_LayoutConstraints__LRLayoutConstraints_,
  &LayoutConstraints_method_bottom__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_centreX__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_centreY__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_height__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_left__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_right__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_top__LRIndividualLayoutConstraint_,
  &LayoutConstraints_method_width__LRIndividualLayoutConstraint_,
  0
};


struct LayoutConstraints_MetaInfoInitializer
{  LayoutConstraints_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LayoutConstraints::clazzInfo();
    ci->fields =  _LayoutConstraints_fields;
    ci->methods =  _LayoutConstraints_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LayoutConstraints_MetaInfoInitializer LayoutConstraints_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

