// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../inspector.h"
#include "../CfgScriptConsole.h"
#include "../ClassTreeCtrl.h"
#include "../inspector.h"
#include "../ObjectTreeCtrl.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 


//static
::acdk::lang::RObject
CfgScriptConsole_create_array(int length)
{
  return new ObjectArrayImpl<RCfgScriptConsole>(length);
}

//static
::acdk::lang::RObject
CfgScriptConsole_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CfgScriptConsole_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CfgScriptConsole((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CfgScriptConsole((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CfgScriptConsole((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CfgScriptConsole::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method__eval_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::_eval((RString)args[0].getObjectVar());
    else
        This->_eval((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method__processCommand_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::_processCommand((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->_processCommand((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method__prompt__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::_prompt();
    else
        This->_prompt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_callGc_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::callGc(args[0].getBoolVar());
    else
        This->callGc(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_onTextUpdated_INLRCommandEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::onTextUpdated((RCommandEvent)args[0].getObjectVar());
    else
        This->onTextUpdated((RCommandEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptConsole_method_printText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptConsole::printText((RString)args[0].getObjectVar());
    else
        This->printText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptConsole_fields__consoleState_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_consoleState, flags);
    else
      This->_consoleState = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptConsole_fields__props_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_props, flags);
    else
      This->_props = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptConsole_fields__script_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_script, flags);
    else
      This->_script = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptConsole_fields__scriptBeginPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptConsole* This = dmi_cast<CfgScriptConsole>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scriptBeginPos, flags);
    else
      This->_scriptBeginPos = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptConsole_fields__consoleState = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_consoleState", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_fields__consoleState_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptConsole_fields__props = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_props", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_fields__props_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptConsole_fields__script = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_script", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_fields__script_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptConsole_fields__scriptBeginPos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scriptBeginPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_fields__scriptBeginPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CfgScriptConsole_fields[] = 
{
  &CfgScriptConsole_fields__consoleState,
  &CfgScriptConsole_fields__props,
  &CfgScriptConsole_fields__script,
  &CfgScriptConsole_fields__scriptBeginPos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__args[] = 
{
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_parent,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_id,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_point,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CfgScriptConsole", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CfgScriptConsole::clazzInfo(), // return type
  "_0_CfgScriptConsole", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__args[] = 
{
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__arg_parent,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CfgScriptConsole", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CfgScriptConsole::clazzInfo(), // return type
  "_1_CfgScriptConsole", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__args[] = 
{
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_parent,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_id,
  &CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__arg_point,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CfgScriptConsole", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CfgScriptConsole::clazzInfo(), // return type
  "_2_CfgScriptConsole", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods__eval_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods__eval_INLRString__V_args[] = 
{
  &CfgScriptConsole_methods__eval_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods__eval_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method__eval_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__eval", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods__eval_INLRString__V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods__eval_INLRString__V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method__eval_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_args[] = 
{
  &CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_arg_text,
  &CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method__processCommand_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_processCommand", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6__processCommand", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods__processCommand_INLRString_INLRString__V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method__processCommand_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods__prompt__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods__prompt__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method__prompt__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_prompt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__prompt", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods__prompt__V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods__prompt__V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method__prompt__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_callGc_Z_V_arg_all = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "all", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_callGc_Z_V_args[] = 
{
  &CfgScriptConsole_methods_callGc_Z_V_arg_all,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_callGc_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_callGc_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "callGc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_callGc", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_callGc_Z_V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_callGc_Z_V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_callGc_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCommandEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_args[] = 
{
  &CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_onTextUpdated_INLRCommandEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onTextUpdated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_onTextUpdated", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_onTextUpdated_INLRCommandEvent__V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_onTextUpdated_INLRCommandEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptConsole_methods_printText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptConsole_methods_printText_INLRString__V_args[] = 
{
  &CfgScriptConsole_methods_printText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole_methods_printText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptConsole_method_printText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_printText", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptConsole_methods_printText_INLRString__V_args, // the arguments
  0, //arguments count
  CfgScriptConsole_methods_printText_INLRString__V_exceptions, // the declared exceptions
  CfgScriptConsole_MetainfoWrapper::CfgScriptConsole_method_printText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CfgScriptConsole_methods[] = 
{
  &CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint_INLRSize__LRCfgScriptConsole_,
  &CfgScriptConsole_method_CfgScriptConsole_INLRWindow_I_LRCfgScriptConsole_,
  &CfgScriptConsole_method_CfgScriptConsole_INLRWindow_IINLRPoint__LRCfgScriptConsole_,
  &CfgScriptConsole_method_GetClass__L_acdk_lang_RClass_,
  &CfgScriptConsole_method__eval_INLRString__V,
  &CfgScriptConsole_method__processCommand_INLRString_INLRString__V,
  &CfgScriptConsole_method__prompt__V,
  &CfgScriptConsole_method_callGc_Z_V,
  &CfgScriptConsole_method_onTextUpdated_INLRCommandEvent__V,
  &CfgScriptConsole_method_printText_INLRString__V,
  0
};


struct CfgScriptConsole_MetaInfoInitializer
{  CfgScriptConsole_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CfgScriptConsole::clazzInfo();
    ci->fields =  _CfgScriptConsole_fields;
    ci->methods =  _CfgScriptConsole_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CfgScriptConsole_MetaInfoInitializer CfgScriptConsole_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 


//static
::acdk::lang::RObject
ClassTreeCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RClassTreeCtrl>(length);
}

//static
::acdk::lang::RObject
ClassTreeCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassTreeCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassTreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassTreeCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::_expand((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->_expand((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method__expandAll_INLRTreeItemId__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::_expandAll((RTreeItemId)args[0].getObjectVar());
    else
        This->_expandAll((RTreeItemId)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_expandAll__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::expandAll();
    else
        This->expandAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_getObjectDescription_INLRObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassTreeCtrl::getObjectDescription((RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObjectDescription((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ClassTreeCtrl::getOverViewTextCtrl();
    else
        ret = (::acdk::lang::RObject)This->getOverViewTextCtrl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::onListBoxExpanded((RTreeEvent)args[0].getObjectVar());
    else
        This->onListBoxExpanded((RTreeEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_onSelChanged_INLRTreeEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::onSelChanged((RTreeEvent)args[0].getObjectVar());
    else
        This->onSelChanged((RTreeEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_reload__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::reload();
    else
        This->reload();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_selectClass_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::selectClass((RClass)args[0].getObjectVar());
    else
        This->selectClass((RClass)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_setFilter_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::setFilter((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->setFilter((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ClassTreeCtrl::setOverViewTextCtrl((RTextCtrl)args[0].getObjectVar());
    else
        This->setOverViewTextCtrl((RTextCtrl)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassTreeCtrl_fields__filter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filter, flags);
    else
      This->_filter = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassTreeCtrl_fields__filterFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filterFlags, flags);
    else
      This->_filterFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassTreeCtrl_fields__overViewTextCtrl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassTreeCtrl* This = dmi_cast<ClassTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_overViewTextCtrl, flags);
    else
      This->_overViewTextCtrl = (RTextCtrl)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClassTreeCtrl_fields__filter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_fields__filter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ClassTreeCtrl_fields__filterFlags = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filterFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_fields__filterFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ClassTreeCtrl_fields__overViewTextCtrl = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_overViewTextCtrl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(),
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_fields__overViewTextCtrl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClassTreeCtrl_fields[] = 
{
  &ClassTreeCtrl_fields__filter,
  &ClassTreeCtrl_fields__filterFlags,
  &ClassTreeCtrl_fields__overViewTextCtrl,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__args[] = 
{
  &ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_parent,
  &ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_id,
  &ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_point,
  &ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassTreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassTreeCtrl::clazzInfo(), // return type
  "_0_ClassTreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_tid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_args[] = 
{
  &ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_tid,
  &ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_expand", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4__expand", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_args[] = 
{
  &ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method__expandAll_INLRTreeItemId__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_expandAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b__expandAll", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods__expandAll_INLRTreeItemId__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method__expandAll_INLRTreeItemId__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_expandAll__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_expandAll__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_expandAll__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expandAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_expandAll", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_expandAll__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_expandAll__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_expandAll__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__args[] = 
{
  &ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_getObjectDescription_INLRObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getObjectDescription", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_getObjectDescription_INLRObject__LRString__exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_getObjectDescription_INLRObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOverViewTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(), // return type
  "_6_getOverViewTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_args[] = 
{
  &ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onListBoxExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_onListBoxExpanded", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_args[] = 
{
  &ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_onSelChanged_INLRTreeEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onSelChanged", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_onSelChanged", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_onSelChanged_INLRTreeEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_reload__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_reload__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_reload__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reload", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_reload", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_reload__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_reload__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_reload__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_selectClass_INLRClass__V_arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_selectClass_INLRClass__V_args[] = 
{
  &ClassTreeCtrl_methods_selectClass_INLRClass__V_arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_selectClass_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_selectClass_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "selectClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_selectClass", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_selectClass_INLRClass__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_selectClass_INLRClass__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_selectClass_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_setFilter_INLRString_I_V_arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_setFilter_INLRString_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_setFilter_INLRString_I_V_args[] = 
{
  &ClassTreeCtrl_methods_setFilter_INLRString_I_V_arg_filter,
  &ClassTreeCtrl_methods_setFilter_INLRString_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_setFilter_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_setFilter_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setFilter", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_setFilter_INLRString_I_V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_setFilter_INLRString_I_V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_setFilter_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_arg_txtctrl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "txtctrl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_args[] = 
{
  &ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_arg_txtctrl,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOverViewTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setOverViewTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_args, // the arguments
  0, //arguments count
  ClassTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_exceptions, // the declared exceptions
  ClassTreeCtrl_MetainfoWrapper::ClassTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassTreeCtrl_methods[] = 
{
  &ClassTreeCtrl_method_ClassTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRClassTreeCtrl_,
  &ClassTreeCtrl_method_GetClass__L_acdk_lang_RClass_,
  &ClassTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V,
  &ClassTreeCtrl_method__expandAll_INLRTreeItemId__V,
  &ClassTreeCtrl_method_expandAll__V,
  &ClassTreeCtrl_method_getObjectDescription_INLRObject__LRString_,
  &ClassTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl_,
  &ClassTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V,
  &ClassTreeCtrl_method_onSelChanged_INLRTreeEvent__V,
  &ClassTreeCtrl_method_reload__V,
  &ClassTreeCtrl_method_selectClass_INLRClass__V,
  &ClassTreeCtrl_method_setFilter_INLRString_I_V,
  &ClassTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V,
  0
};


struct ClassTreeCtrl_MetaInfoInitializer
{  ClassTreeCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassTreeCtrl::clazzInfo();
    ci->fields =  _ClassTreeCtrl_fields;
    ci->methods =  _ClassTreeCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassTreeCtrl_MetaInfoInitializer ClassTreeCtrl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 


//static
::acdk::lang::RObject
ObjectTreeCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RObjectTreeCtrl>(length);
}

//static
::acdk::lang::RObject
ObjectTreeCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ObjectTreeCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ObjectTreeCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ObjectTreeCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::_expand((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->_expand((RTreeItemId)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_fillRoot__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::fillRoot();
    else
        This->fillRoot();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_getObjectDescription_INLRObject__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectTreeCtrl::getObjectDescription((RObject)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObjectDescription((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ObjectTreeCtrl::getOverViewTextCtrl();
    else
        ret = (::acdk::lang::RObject)This->getOverViewTextCtrl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::onListBoxExpanded((RTreeEvent)args[0].getObjectVar());
    else
        This->onListBoxExpanded((RTreeEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_onSelChanged_INLRTreeEvent__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::onSelChanged((RTreeEvent)args[0].getObjectVar());
    else
        This->onSelChanged((RTreeEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_reload_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::reload((ObjectFilterFlags)args[0].getIntVar());
    else
        This->reload((ObjectFilterFlags)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_reload__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::reload();
    else
        This->reload();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_setFilter_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::setFilter((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->setFilter((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ObjectTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ObjectTreeCtrl::setOverViewTextCtrl((RTextCtrl)args[0].getObjectVar());
    else
        This->setOverViewTextCtrl((RTextCtrl)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectTreeCtrl_fields__filter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filter, flags);
    else
      This->_filter = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectTreeCtrl_fields__filterFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filterFlags, flags);
    else
      This->_filterFlags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ObjectTreeCtrl_fields__overViewTextCtrl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ObjectTreeCtrl* This = dmi_cast<ObjectTreeCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_overViewTextCtrl, flags);
    else
      This->_overViewTextCtrl = (RTextCtrl)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ObjectTreeCtrl_fields__filter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_fields__filter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ObjectTreeCtrl_fields__filterFlags = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filterFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_fields__filterFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ObjectTreeCtrl_fields__overViewTextCtrl = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_overViewTextCtrl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(),
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_fields__overViewTextCtrl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ObjectTreeCtrl_fields[] = 
{
  &ObjectTreeCtrl_fields__filter,
  &ObjectTreeCtrl_fields__filterFlags,
  &ObjectTreeCtrl_fields__overViewTextCtrl,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_point = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "point", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__args[] = 
{
  &ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_parent,
  &ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_id,
  &ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_point,
  &ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ObjectTreeCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectTreeCtrl::clazzInfo(), // return type
  "_0_ObjectTreeCtrl", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_tid = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tid", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeItemId::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_args[] = 
{
  &ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_tid,
  &ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_expand", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__expand", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods__expand_INLRTreeItemId_INLRObject__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_fillRoot__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_fillRoot__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_fillRoot__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fillRoot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_fillRoot", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_fillRoot__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_fillRoot__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_fillRoot__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__args[] = 
{
  &ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_getObjectDescription_INLRObject__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getObjectDescription", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_getObjectDescription_INLRObject__LRString__exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_getObjectDescription_INLRObject__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOverViewTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(), // return type
  "_1_getOverViewTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_getOverViewTextCtrl__LRTextCtrl__exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_args[] = 
{
  &ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onListBoxExpanded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_onListBoxExpanded", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_onListBoxExpanded_INLRTreeEvent__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_args[] = 
{
  &ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_onSelChanged_INLRTreeEvent__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onSelChanged", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_onSelChanged", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_onSelChanged_INLRTreeEvent__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_onSelChanged_INLRTreeEvent__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_reload_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_reload_I_V_args[] = 
{
  &ObjectTreeCtrl_methods_reload_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_reload_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_reload_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reload", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_reload", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_reload_I_V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_reload_I_V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_reload_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_reload__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_reload__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_reload__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "reload", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_reload", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_reload__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_reload__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_reload__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_setFilter_INLRString_I_V_arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_setFilter_INLRString_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_setFilter_INLRString_I_V_args[] = 
{
  &ObjectTreeCtrl_methods_setFilter_INLRString_I_V_arg_filter,
  &ObjectTreeCtrl_methods_setFilter_INLRString_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_setFilter_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_setFilter_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFilter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setFilter", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_setFilter_INLRString_I_V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_setFilter_INLRString_I_V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_setFilter_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_arg_txtctrl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "txtctrl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_args[] = 
{
  &ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_arg_txtctrl,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ObjectTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOverViewTextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setOverViewTextCtrl", // alternative name of method
  -1, // altlabelHashCode
  ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_args, // the arguments
  0, //arguments count
  ObjectTreeCtrl_methods_setOverViewTextCtrl_INLRTextCtrl__V_exceptions, // the declared exceptions
  ObjectTreeCtrl_MetainfoWrapper::ObjectTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ObjectTreeCtrl_methods[] = 
{
  &ObjectTreeCtrl_method_GetClass__L_acdk_lang_RClass_,
  &ObjectTreeCtrl_method_ObjectTreeCtrl_INLRWindow_IINLRPoint_INLRSize__LRObjectTreeCtrl_,
  &ObjectTreeCtrl_method__expand_INLRTreeItemId_INLRObject__V,
  &ObjectTreeCtrl_method_fillRoot__V,
  &ObjectTreeCtrl_method_getObjectDescription_INLRObject__LRString_,
  &ObjectTreeCtrl_method_getOverViewTextCtrl__LRTextCtrl_,
  &ObjectTreeCtrl_method_onListBoxExpanded_INLRTreeEvent__V,
  &ObjectTreeCtrl_method_onSelChanged_INLRTreeEvent__V,
  &ObjectTreeCtrl_method_reload_I_V,
  &ObjectTreeCtrl_method_reload__V,
  &ObjectTreeCtrl_method_setFilter_INLRString_I_V,
  &ObjectTreeCtrl_method_setOverViewTextCtrl_INLRTextCtrl__V,
  0
};


struct ObjectTreeCtrl_MetaInfoInitializer
{  ObjectTreeCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ObjectTreeCtrl::clazzInfo();
    ci->fields =  _ObjectTreeCtrl_fields;
    ci->methods =  _ObjectTreeCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ObjectTreeCtrl_MetaInfoInitializer ObjectTreeCtrl_MetaInfoInitializer_staticinstance__;


struct ObjectTreeCtrl_clazzInfo_ClazzAttributesResInitializer1
{
  ObjectTreeCtrl_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ObjectTreeCtrl_methods_reload_I_V_arg_flags, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ObjectFilterFlagsMetaInf::GetEnumInfo()));
  }
};

ObjectTreeCtrl_clazzInfo_ClazzAttributesResInitializer1 ObjectTreeCtrl_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) inspector_dummyExportFunc() {}
#endif

