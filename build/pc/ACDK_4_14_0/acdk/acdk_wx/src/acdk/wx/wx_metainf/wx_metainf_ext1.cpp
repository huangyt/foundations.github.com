// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ControlWithItems_create_array(int length)
{
  return new ObjectArrayImpl<RControlWithItems>(length);
}

//static
::acdk::lang::RObject
ControlWithItems_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ControlWithItems_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ControlWithItems_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ControlWithItems::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ControlWithItems_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ControlWithItems_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ControlWithItems_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ControlWithItems_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ControlWithItems_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ControlWithItems_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ControlWithItems_MetainfoWrapper::ControlWithItems_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ControlWithItems_methods[] = 
{
  &ControlWithItems_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ControlWithItems_MetaInfoInitializer
{  ControlWithItems_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ControlWithItems::clazzInfo();
    ci->fields =  _ControlWithItems_fields;
    ci->methods =  _ControlWithItems_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ControlWithItems_MetaInfoInitializer ControlWithItems_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Cursor_create_array(int length)
{
  return new ObjectArrayImpl<RCursor>(length);
}

//static
::acdk::lang::RObject
Cursor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Cursor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_Cursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Cursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_Cursor_I_LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Cursor(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cursor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_getCrossCursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cursor::getCrossCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_getHourglassCursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cursor::getHourglassCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_getNullCursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cursor::getNullCursor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Cursor_method_getStandardCursor__LRCursor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Cursor::getStandardCursor();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Cursor_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_Cursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_Cursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_Cursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Cursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Cursor::clazzInfo(), // return type
  "_0_Cursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_Cursor__LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_Cursor__LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_Cursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Cursor_methods_Cursor_I_LRCursor__arg_cursor_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cursor_type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_Cursor_I_LRCursor__args[] = 
{
  &Cursor_methods_Cursor_I_LRCursor__arg_cursor_type,
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_Cursor_I_LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_Cursor_I_LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Cursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Cursor::clazzInfo(), // return type
  "_1_Cursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_Cursor_I_LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_Cursor_I_LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_Cursor_I_LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Cursor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_getCrossCursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_getCrossCursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_getCrossCursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCrossCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo(), // return type
  "_4_getCrossCursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_getCrossCursor__LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_getCrossCursor__LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_getCrossCursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_getHourglassCursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_getHourglassCursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_getHourglassCursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHourglassCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo(), // return type
  "_3_getHourglassCursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_getHourglassCursor__LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_getHourglassCursor__LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_getHourglassCursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_getNullCursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_getNullCursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_getNullCursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo(), // return type
  "_5_getNullCursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_getNullCursor__LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_getNullCursor__LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_getNullCursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Cursor_methods_getStandardCursor__LRCursor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Cursor_methods_getStandardCursor__LRCursor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Cursor_method_getStandardCursor__LRCursor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStandardCursor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCursor::clazzInfo(), // return type
  "_2_getStandardCursor", // alternative name of method
  -1, // altlabelHashCode
  Cursor_methods_getStandardCursor__LRCursor__args, // the arguments
  0, //arguments count
  Cursor_methods_getStandardCursor__LRCursor__exceptions, // the declared exceptions
  Cursor_MetainfoWrapper::Cursor_method_getStandardCursor__LRCursor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Cursor_methods[] = 
{
  &Cursor_method_Cursor__LRCursor_,
  &Cursor_method_Cursor_I_LRCursor_,
  &Cursor_method_GetClass__L_acdk_lang_RClass_,
  &Cursor_method_getCrossCursor__LRCursor_,
  &Cursor_method_getHourglassCursor__LRCursor_,
  &Cursor_method_getNullCursor__LRCursor_,
  &Cursor_method_getStandardCursor__LRCursor_,
  0
};


struct Cursor_MetaInfoInitializer
{  Cursor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Cursor::clazzInfo();
    ci->fields =  _Cursor_fields;
    ci->methods =  _Cursor_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Cursor_MetaInfoInitializer Cursor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DataFormat_create_array(int length)
{
  return new ObjectArrayImpl<RDataFormat>(length);
}

//static
::acdk::lang::RObject
DataFormat_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataFormat_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_DataFormat_I_LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataFormat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_DataFormat__LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_DataFormat_INLRString__LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataFormat((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataFormat::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_equals_INLRDataFormat__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataFormat::equals((RDataFormat)args[0].getObjectVar());
    else
      ret = This->equals((RDataFormat)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataFormat::equals((RObject)args[0].getObjectVar());
    else
      ret = This->equals((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_getFormatId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataFormat::getFormatId();
    else
      ret = This->getFormatId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_getId__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataFormat::getId();
    else
        ret = (::acdk::lang::RObject)This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_getInvalid__LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataFormat::getInvalid();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_getType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataFormat::getType();
    else
      ret = This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_isStandard__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataFormat::isStandard();
    else
      ret = This->isStandard();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_setId_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DataFormat::setId((RString)args[0].getObjectVar());
    else
        This->setId((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataFormat_method_setType_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataFormat* This = dmi_cast<DataFormat>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DataFormat::setType(args[0].getIntVar());
    else
        This->setType(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataFormat_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_DataFormat_I_LRDataFormat__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_DataFormat_I_LRDataFormat__args[] = 
{
  &DataFormat_methods_DataFormat_I_LRDataFormat__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_DataFormat_I_LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_DataFormat_I_LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DataFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataFormat::clazzInfo(), // return type
  "_0_DataFormat", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_DataFormat_I_LRDataFormat__args, // the arguments
  0, //arguments count
  DataFormat_methods_DataFormat_I_LRDataFormat__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_DataFormat_I_LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_DataFormat__LRDataFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_DataFormat__LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_DataFormat__LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DataFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataFormat::clazzInfo(), // return type
  "_1_DataFormat", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_DataFormat__LRDataFormat__args, // the arguments
  0, //arguments count
  DataFormat_methods_DataFormat__LRDataFormat__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_DataFormat__LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_DataFormat_INLRString__LRDataFormat__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_DataFormat_INLRString__LRDataFormat__args[] = 
{
  &DataFormat_methods_DataFormat_INLRString__LRDataFormat__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_DataFormat_INLRString__LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_DataFormat_INLRString__LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DataFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataFormat::clazzInfo(), // return type
  "_2_DataFormat", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_DataFormat_INLRString__LRDataFormat__args, // the arguments
  0, //arguments count
  DataFormat_methods_DataFormat_INLRString__LRDataFormat__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_DataFormat_INLRString__LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataFormat_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_equals_INLRDataFormat__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_equals_INLRDataFormat__Z_args[] = 
{
  &DataFormat_methods_equals_INLRDataFormat__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_equals_INLRDataFormat__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_equals_INLRDataFormat__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_equals", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_equals_INLRDataFormat__Z_args, // the arguments
  0, //arguments count
  DataFormat_methods_equals_INLRDataFormat__Z_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_equals_INLRDataFormat__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_equals_INLRObject__Z_args[] = 
{
  &DataFormat_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  DataFormat_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_getFormatId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_getFormatId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_getFormatId__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFormatId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getFormatId", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_getFormatId__I_args, // the arguments
  0, //arguments count
  DataFormat_methods_getFormatId__I_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_getFormatId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_getId__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_getId__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_getId__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getId", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_getId__LRString__args, // the arguments
  0, //arguments count
  DataFormat_methods_getId__LRString__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_getId__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_getInvalid__LRDataFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_getInvalid__LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_getInvalid__LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInvalid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo(), // return type
  "_b_getInvalid", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_getInvalid__LRDataFormat__args, // the arguments
  0, //arguments count
  DataFormat_methods_getInvalid__LRDataFormat__exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_getInvalid__LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_getType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_getType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_getType__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getType", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_getType__I_args, // the arguments
  0, //arguments count
  DataFormat_methods_getType__I_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_getType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_isStandard__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_isStandard__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_isStandard__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isStandard", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isStandard", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_isStandard__Z_args, // the arguments
  0, //arguments count
  DataFormat_methods_isStandard__Z_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_isStandard__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_setId_INLRString__V_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_setId_INLRString__V_args[] = 
{
  &DataFormat_methods_setId_INLRString__V_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_setId_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_setId_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setId", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_setId_INLRString__V_args, // the arguments
  0, //arguments count
  DataFormat_methods_setId_INLRString__V_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_setId_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataFormat_methods_setType_I_V_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataFormat_methods_setType_I_V_args[] = 
{
  &DataFormat_methods_setType_I_V_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataFormat_methods_setType_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataFormat_method_setType_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setType", // alternative name of method
  -1, // altlabelHashCode
  DataFormat_methods_setType_I_V_args, // the arguments
  0, //arguments count
  DataFormat_methods_setType_I_V_exceptions, // the declared exceptions
  DataFormat_MetainfoWrapper::DataFormat_method_setType_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataFormat_methods[] = 
{
  &DataFormat_method_DataFormat_I_LRDataFormat_,
  &DataFormat_method_DataFormat__LRDataFormat_,
  &DataFormat_method_DataFormat_INLRString__LRDataFormat_,
  &DataFormat_method_GetClass__L_acdk_lang_RClass_,
  &DataFormat_method_equals_INLRDataFormat__Z,
  &DataFormat_method_equals_INLRObject__Z,
  &DataFormat_method_getFormatId__I,
  &DataFormat_method_getId__LRString_,
  &DataFormat_method_getInvalid__LRDataFormat_,
  &DataFormat_method_getType__I,
  &DataFormat_method_isStandard__Z,
  &DataFormat_method_setId_INLRString__V,
  &DataFormat_method_setType_I_V,
  0
};


struct DataFormat_MetaInfoInitializer
{  DataFormat_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataFormat::clazzInfo();
    ci->fields =  _DataFormat_fields;
    ci->methods =  _DataFormat_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataFormat_MetaInfoInitializer DataFormat_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DataObject_create_array(int length)
{
  return new ObjectArrayImpl<RDataObject>(length);
}

//static
::acdk::lang::RObject
DataObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getAllFormats_I_LRDataFormatArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataObject::getAllFormats((DataObjectDirection)args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getAllFormats((DataObjectDirection)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getAllFormats__LRDataFormatArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataObject::getAllFormats();
    else
        ret = (::acdk::lang::RObject)This->getAllFormats();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::getDataHere((RDataFormat)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RbyteArray >(args[1]));
    else
      ret = This->getDataHere((RDataFormat)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RbyteArray >(args[1]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getDataSize_INLRDataFormat__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::getDataSize((RDataFormat)args[0].getObjectVar());
    else
      ret = This->getDataSize((RDataFormat)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getFormatCount_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::getFormatCount((DataObjectDirection)args[0].getIntVar());
    else
      ret = This->getFormatCount((DataObjectDirection)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getFormatCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::getFormatCount();
    else
      ret = This->getFormatCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getPreferredFormat_I_LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataObject::getPreferredFormat((DataObjectDirection)args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getPreferredFormat((DataObjectDirection)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_getPreferredFormat__LRDataFormat__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataObject::getPreferredFormat();
    else
        ret = (::acdk::lang::RObject)This->getPreferredFormat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_isSupported_INLRDataFormat__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::isSupported((RDataFormat)args[0].getObjectVar());
    else
      ret = This->isSupported((RDataFormat)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_isSupported_INLRDataFormat_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::isSupported((RDataFormat)args[0].getObjectVar(), (DataObjectDirection)args[1].getIntVar());
    else
      ret = This->isSupported((RDataFormat)args[0].getObjectVar(), (DataObjectDirection)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObject_method_setData_INLRDataFormat_INLRbyteArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObject* This = dmi_cast<DataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DataObject::setData((RDataFormat)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    else
      ret = This->setData((RDataFormat)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getAllFormats_I_LRDataFormatArray__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getAllFormats_I_LRDataFormatArray__args[] = 
{
  &DataObject_methods_getAllFormats_I_LRDataFormatArray__arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getAllFormats_I_LRDataFormatArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getAllFormats_I_LRDataFormatArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllFormats", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormatArray::clazzInfo(), // return type
  "_4_getAllFormats", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getAllFormats_I_LRDataFormatArray__args, // the arguments
  0, //arguments count
  DataObject_methods_getAllFormats_I_LRDataFormatArray__exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getAllFormats_I_LRDataFormatArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getAllFormats__LRDataFormatArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getAllFormats__LRDataFormatArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getAllFormats__LRDataFormatArray_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllFormats", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormatArray::clazzInfo(), // return type
  "_5_getAllFormats", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getAllFormats__LRDataFormatArray__args, // the arguments
  0, //arguments count
  DataObject_methods_getAllFormats__LRDataFormatArray__exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getAllFormats__LRDataFormatArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_args[] = 
{
  &DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_arg_format,
  &DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getDataHere_INLRDataFormat_OUTLRbyteArray__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDataHere", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getDataHere", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_args, // the arguments
  0, //arguments count
  DataObject_methods_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getDataHere_INLRDataFormat_OUTLRbyteArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getDataSize_INLRDataFormat__I_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getDataSize_INLRDataFormat__I_args[] = 
{
  &DataObject_methods_getDataSize_INLRDataFormat__I_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getDataSize_INLRDataFormat__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getDataSize_INLRDataFormat__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDataSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getDataSize", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getDataSize_INLRDataFormat__I_args, // the arguments
  0, //arguments count
  DataObject_methods_getDataSize_INLRDataFormat__I_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getDataSize_INLRDataFormat__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getFormatCount_I_I_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getFormatCount_I_I_args[] = 
{
  &DataObject_methods_getFormatCount_I_I_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getFormatCount_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getFormatCount_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFormatCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getFormatCount", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getFormatCount_I_I_args, // the arguments
  0, //arguments count
  DataObject_methods_getFormatCount_I_I_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getFormatCount_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getFormatCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getFormatCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getFormatCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getFormatCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getFormatCount", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getFormatCount__I_args, // the arguments
  0, //arguments count
  DataObject_methods_getFormatCount__I_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getFormatCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_getPreferredFormat_I_LRDataFormat__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getPreferredFormat_I_LRDataFormat__args[] = 
{
  &DataObject_methods_getPreferredFormat_I_LRDataFormat__arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getPreferredFormat_I_LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getPreferredFormat_I_LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPreferredFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo(), // return type
  "_0_getPreferredFormat", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getPreferredFormat_I_LRDataFormat__args, // the arguments
  0, //arguments count
  DataObject_methods_getPreferredFormat_I_LRDataFormat__exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getPreferredFormat_I_LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_getPreferredFormat__LRDataFormat__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_getPreferredFormat__LRDataFormat__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_getPreferredFormat__LRDataFormat_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getPreferredFormat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo(), // return type
  "_1_getPreferredFormat", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_getPreferredFormat__LRDataFormat__args, // the arguments
  0, //arguments count
  DataObject_methods_getPreferredFormat__LRDataFormat__exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_getPreferredFormat__LRDataFormat__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_isSupported_INLRDataFormat__Z_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_isSupported_INLRDataFormat__Z_args[] = 
{
  &DataObject_methods_isSupported_INLRDataFormat__Z_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_isSupported_INLRDataFormat__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_isSupported_INLRDataFormat__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "isSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isSupported", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_isSupported_INLRDataFormat__Z_args, // the arguments
  0, //arguments count
  DataObject_methods_isSupported_INLRDataFormat__Z_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_isSupported_INLRDataFormat__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_isSupported_INLRDataFormat_I_Z_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_isSupported_INLRDataFormat_I_Z_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_isSupported_INLRDataFormat_I_Z_args[] = 
{
  &DataObject_methods_isSupported_INLRDataFormat_I_Z_arg_format,
  &DataObject_methods_isSupported_INLRDataFormat_I_Z_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_isSupported_INLRDataFormat_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_isSupported_INLRDataFormat_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isSupported", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_isSupported_INLRDataFormat_I_Z_args, // the arguments
  0, //arguments count
  DataObject_methods_isSupported_INLRDataFormat_I_Z_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_isSupported_INLRDataFormat_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_args[] = 
{
  &DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_arg_format,
  &DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObject_method_setData_INLRDataFormat_INLRbyteArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_setData", // alternative name of method
  -1, // altlabelHashCode
  DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_args, // the arguments
  0, //arguments count
  DataObject_methods_setData_INLRDataFormat_INLRbyteArray__Z_exceptions, // the declared exceptions
  DataObject_MetainfoWrapper::DataObject_method_setData_INLRDataFormat_INLRbyteArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataObject_methods[] = 
{
  &DataObject_method_GetClass__L_acdk_lang_RClass_,
  &DataObject_method_getAllFormats_I_LRDataFormatArray_,
  &DataObject_method_getAllFormats__LRDataFormatArray_,
  &DataObject_method_getDataHere_INLRDataFormat_OUTLRbyteArray__Z,
  &DataObject_method_getDataSize_INLRDataFormat__I,
  &DataObject_method_getFormatCount_I_I,
  &DataObject_method_getFormatCount__I,
  &DataObject_method_getPreferredFormat_I_LRDataFormat_,
  &DataObject_method_getPreferredFormat__LRDataFormat_,
  &DataObject_method_isSupported_INLRDataFormat__Z,
  &DataObject_method_isSupported_INLRDataFormat_I_Z,
  &DataObject_method_setData_INLRDataFormat_INLRbyteArray__Z,
  0
};


struct DataObject_MetaInfoInitializer
{  DataObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataObject::clazzInfo();
    ci->fields =  _DataObject_fields;
    ci->methods =  _DataObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataObject_MetaInfoInitializer DataObject_MetaInfoInitializer_staticinstance__;


struct DataObject_clazzInfo_ClazzAttributesResInitializer2
{
  DataObject_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DataObject_methods_getPreferredFormat_I_LRDataFormat__arg_dir, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DataObjectDirectionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DataObject_methods_getFormatCount_I_I_arg_dir, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DataObjectDirectionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DataObject_methods_getAllFormats_I_LRDataFormatArray__arg_dir, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DataObjectDirectionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DataObject_methods_isSupported_INLRDataFormat_I_Z_arg_dir, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DataObjectDirectionMetaInf::GetEnumInfo()));
  }
};

DataObject_clazzInfo_ClazzAttributesResInitializer2 DataObject_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DataObjectComposite_create_array(int length)
{
  return new ObjectArrayImpl<RDataObjectComposite>(length);
}

//static
::acdk::lang::RObject
DataObjectComposite_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataObjectComposite_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectComposite_method_DataObjectComposite__LRDataObjectComposite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataObjectComposite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectComposite_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataObjectComposite::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectComposite_method_add_INLRDataObjectSimple_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObjectComposite* This = dmi_cast<DataObjectComposite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DataObjectComposite::add((RDataObjectSimple)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->add((RDataObjectSimple)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectComposite_method_add_INLRDataObjectSimple__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataObjectComposite* This = dmi_cast<DataObjectComposite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DataObjectComposite::add((RDataObjectSimple)args[0].getObjectVar());
    else
        This->add((RDataObjectSimple)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataObjectComposite_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectComposite_methods_DataObjectComposite__LRDataObjectComposite__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectComposite_methods_DataObjectComposite__LRDataObjectComposite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectComposite_method_DataObjectComposite__LRDataObjectComposite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DataObjectComposite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataObjectComposite::clazzInfo(), // return type
  "_0_DataObjectComposite", // alternative name of method
  -1, // altlabelHashCode
  DataObjectComposite_methods_DataObjectComposite__LRDataObjectComposite__args, // the arguments
  0, //arguments count
  DataObjectComposite_methods_DataObjectComposite__LRDataObjectComposite__exceptions, // the declared exceptions
  DataObjectComposite_MetainfoWrapper::DataObjectComposite_method_DataObjectComposite__LRDataObjectComposite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectComposite_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectComposite_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectComposite_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataObjectComposite_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataObjectComposite_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataObjectComposite_MetainfoWrapper::DataObjectComposite_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_arg_dataObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dataObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObjectSimple::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_arg_preferred = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "preferred", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_args[] = 
{
  &DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_arg_dataObject,
  &DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_arg_preferred,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectComposite_method_add_INLRDataObjectSimple_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_args, // the arguments
  0, //arguments count
  DataObjectComposite_methods_add_INLRDataObjectSimple_Z_V_exceptions, // the declared exceptions
  DataObjectComposite_MetainfoWrapper::DataObjectComposite_method_add_INLRDataObjectSimple_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObjectComposite_methods_add_INLRDataObjectSimple__V_arg_dataObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dataObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataObjectSimple::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectComposite_methods_add_INLRDataObjectSimple__V_args[] = 
{
  &DataObjectComposite_methods_add_INLRDataObjectSimple__V_arg_dataObject,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectComposite_methods_add_INLRDataObjectSimple__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectComposite_method_add_INLRDataObjectSimple__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  DataObjectComposite_methods_add_INLRDataObjectSimple__V_args, // the arguments
  0, //arguments count
  DataObjectComposite_methods_add_INLRDataObjectSimple__V_exceptions, // the declared exceptions
  DataObjectComposite_MetainfoWrapper::DataObjectComposite_method_add_INLRDataObjectSimple__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataObjectComposite_methods[] = 
{
  &DataObjectComposite_method_DataObjectComposite__LRDataObjectComposite_,
  &DataObjectComposite_method_GetClass__L_acdk_lang_RClass_,
  &DataObjectComposite_method_add_INLRDataObjectSimple_Z_V,
  &DataObjectComposite_method_add_INLRDataObjectSimple__V,
  0
};


struct DataObjectComposite_MetaInfoInitializer
{  DataObjectComposite_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataObjectComposite::clazzInfo();
    ci->fields =  _DataObjectComposite_fields;
    ci->methods =  _DataObjectComposite_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataObjectComposite_MetaInfoInitializer DataObjectComposite_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DataObjectSimple_create_array(int length)
{
  return new ObjectArrayImpl<RDataObjectSimple>(length);
}

//static
::acdk::lang::RObject
DataObjectSimple_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataObjectSimple_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectSimple_method_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataObjectSimple((RDataFormat)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectSimple_method_DataObjectSimple__LRDataObjectSimple__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DataObjectSimple();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataObjectSimple_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataObjectSimple::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataObjectSimple_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataFormat::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__args[] = 
{
  &DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectSimple_method_DataObjectSimple_INLRDataFormat__LRDataObjectSimple_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DataObjectSimple", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataObjectSimple::clazzInfo(), // return type
  "_0_DataObjectSimple", // alternative name of method
  -1, // altlabelHashCode
  DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__args, // the arguments
  0, //arguments count
  DataObjectSimple_methods_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__exceptions, // the declared exceptions
  DataObjectSimple_MetainfoWrapper::DataObjectSimple_method_DataObjectSimple_INLRDataFormat__LRDataObjectSimple__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectSimple_methods_DataObjectSimple__LRDataObjectSimple__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectSimple_methods_DataObjectSimple__LRDataObjectSimple__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectSimple_method_DataObjectSimple__LRDataObjectSimple_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DataObjectSimple", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DataObjectSimple::clazzInfo(), // return type
  "_1_DataObjectSimple", // alternative name of method
  -1, // altlabelHashCode
  DataObjectSimple_methods_DataObjectSimple__LRDataObjectSimple__args, // the arguments
  0, //arguments count
  DataObjectSimple_methods_DataObjectSimple__LRDataObjectSimple__exceptions, // the declared exceptions
  DataObjectSimple_MetainfoWrapper::DataObjectSimple_method_DataObjectSimple__LRDataObjectSimple__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataObjectSimple_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataObjectSimple_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataObjectSimple_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataObjectSimple_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataObjectSimple_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataObjectSimple_MetainfoWrapper::DataObjectSimple_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataObjectSimple_methods[] = 
{
  &DataObjectSimple_method_DataObjectSimple_INLRDataFormat__LRDataObjectSimple_,
  &DataObjectSimple_method_DataObjectSimple__LRDataObjectSimple_,
  &DataObjectSimple_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DataObjectSimple_MetaInfoInitializer
{  DataObjectSimple_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataObjectSimple::clazzInfo();
    ci->fields =  _DataObjectSimple_fields;
    ci->methods =  _DataObjectSimple_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataObjectSimple_MetaInfoInitializer DataObjectSimple_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DC_create_array(int length)
{
  return new ObjectArrayImpl<RDC>(length);
}

//static
::acdk::lang::RObject
DC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DC::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_beginDrawing__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::beginDrawing();
    else
        This->beginDrawing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_IIIIINLRDC_IIIZII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar(), args[9].getIntVar(), args[10].getIntVar());
    else
      ret = This->blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar(), args[9].getIntVar(), args[10].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_IIIIINLRDC_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar());
    else
      ret = This->blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_IIIIINLRDC_III_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar());
    else
      ret = This->blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_IIIIINLRDC_IIIZ_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar());
    else
      ret = This->blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_IIIIINLRDC_IIIZI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar(), args[9].getIntVar());
    else
      ret = This->blit(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RDC)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getBoolVar(), args[9].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar(), args[5].getBoolVar(), (RPoint)args[6].getObjectVar());
    else
      ret = This->blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar(), args[5].getBoolVar(), (RPoint)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    else
      ret = This->blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar());
    else
      ret = This->blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar(), args[5].getBoolVar());
    else
      ret = This->blit((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), (RDC)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), args[4].getIntVar(), args[5].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_calcBoundingBox_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::calcBoundingBox(args[0].getIntVar(), args[1].getIntVar());
    else
        This->calcBoundingBox(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_canDrawBitmap__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::canDrawBitmap();
    else
      ret = This->canDrawBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_canGetTextExtent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::canGetTextExtent();
    else
      ret = This->canGetTextExtent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_crossHair_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::crossHair(args[0].getIntVar(), args[1].getIntVar());
    else
        This->crossHair(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_crossHair_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::crossHair((RPoint)args[0].getObjectVar());
    else
        This->crossHair((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_destroyClippingRegion__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::destroyClippingRegion();
    else
        This->destroyClippingRegion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_deviceToLogicalX_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::deviceToLogicalX(args[0].getIntVar());
    else
      ret = This->deviceToLogicalX(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_deviceToLogicalXRel_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::deviceToLogicalXRel(args[0].getIntVar());
    else
      ret = This->deviceToLogicalXRel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_deviceToLogicalY_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::deviceToLogicalY(args[0].getIntVar());
    else
      ret = This->deviceToLogicalY(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_deviceToLogicalYRel_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::deviceToLogicalYRel(args[0].getIntVar());
    else
      ret = This->deviceToLogicalYRel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawArc_IIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawArc(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    else
        This->drawArc(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawArc_INLRPoint_INLRPoint_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawArc((RPoint)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), (RPoint)args[2].getObjectVar());
    else
        This->drawArc((RPoint)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawBitmap_INLRBitmap_IIZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawBitmap((RBitmap)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getBoolVar());
    else
        This->drawBitmap((RBitmap)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawBitmap_INLRBitmap_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawBitmap((RBitmap)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawBitmap((RBitmap)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawBitmap_INLRBitmap_INLRPoint_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawBitmap((RBitmap)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), args[2].getBoolVar());
    else
        This->drawBitmap((RBitmap)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawBitmap_INLRBitmap_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawBitmap((RBitmap)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    else
        This->drawBitmap((RBitmap)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawCheckMark_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawCheckMark(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawCheckMark(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawCheckMark_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawCheckMark((RRect)args[0].getObjectVar());
    else
        This->drawCheckMark((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawCircle_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawCircle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawCircle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawCircle_INLRPoint_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawCircle((RPoint)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->drawCircle((RPoint)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawEllipse_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawEllipse(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawEllipse(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawEllipse_INLRPoint_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawEllipse((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    else
        This->drawEllipse((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawEllipse_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawEllipse((RRect)args[0].getObjectVar());
    else
        This->drawEllipse((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawEllipticArc_IIIIDD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawEllipticArc(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getDoubleVar(), args[5].getDoubleVar());
    else
        This->drawEllipticArc(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getDoubleVar(), args[5].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawEllipticArc_INLRPoint_INLRSize_DD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawEllipticArc((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), args[2].getDoubleVar(), args[3].getDoubleVar());
    else
        This->drawEllipticArc((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), args[2].getDoubleVar(), args[3].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawIcon_INLRIcon_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawIcon((RIcon)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawIcon((RIcon)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawIcon_INLRIcon_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawIcon((RIcon)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    else
        This->drawIcon((RIcon)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRRect_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRBitmap_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar(), args[3].getIntVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RBitmap)args[1].getObjectVar(), (RRect)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLabel_INLRString_INLRRect_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawLabel((RString)args[0].getObjectVar(), (RRect)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLine_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLine(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawLine(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLine_INLRPoint_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLine((RPoint)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    else
        This->drawLine((RPoint)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLines_INLRPointArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLines((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawLines((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLines_INLRPointArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLines((RPointArray)args[0].getObjectVar());
    else
        This->drawLines((RPointArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawLines_INLRPointArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawLines((RPointArray)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->drawLines((RPointArray)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPoint_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPoint(args[0].getIntVar(), args[1].getIntVar());
    else
        This->drawPoint(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPoint_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPoint((RPoint)args[0].getObjectVar());
    else
        This->drawPoint((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPolygon_INLRPointArray_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPolygon_INLRPointArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPolygon((RPointArray)args[0].getObjectVar());
    else
        This->drawPolygon((RPointArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPolygon_INLRPointArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawPolygon_INLRPointArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawPolygon((RPointArray)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRectangle_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRectangle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->drawRectangle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRectangle_INLRPoint_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRectangle((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    else
        This->drawRectangle((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRectangle_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRectangle((RRect)args[0].getObjectVar());
    else
        This->drawRectangle((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRotatedText_INLRString_IID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRotatedText((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getDoubleVar());
    else
        This->drawRotatedText((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRotatedText_INLRString_INLRPoint_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRotatedText((RString)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), args[2].getDoubleVar());
    else
        This->drawRotatedText((RString)args[0].getObjectVar(), (RPoint)args[1].getObjectVar(), args[2].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRoundedRectangle_IIIID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRoundedRectangle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getDoubleVar());
    else
        This->drawRoundedRectangle(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRoundedRectangle_INLRPoint_INLRSize_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRoundedRectangle((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), args[2].getDoubleVar());
    else
        This->drawRoundedRectangle((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar(), args[2].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawRoundedRectangle_INLRRect_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawRoundedRectangle((RRect)args[0].getObjectVar(), args[1].getDoubleVar());
    else
        This->drawRoundedRectangle((RRect)args[0].getObjectVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawSpline_IIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawSpline(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    else
        This->drawSpline(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawSpline_INLRPointArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawSpline((RPointArray)args[0].getObjectVar());
    else
        This->drawSpline((RPointArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawText_INLRString_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawText((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->drawText((RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_drawText_INLRString_INLRPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::drawText((RString)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    else
        This->drawText((RString)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_endDoc__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::endDoc();
    else
        This->endDoc();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_endDrawing__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::endDrawing();
    else
        This->endDrawing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_endPage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::endPage();
    else
        This->endPage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_floodFill_IIINLRColour_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::floodFill(args[0].getIntVar(), args[1].getIntVar(), (RColour)args[2].getObjectVar(), args[3].getIntVar());
    else
      ret = This->floodFill(args[0].getIntVar(), args[1].getIntVar(), (RColour)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_floodFill_IIINLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::floodFill(args[0].getIntVar(), args[1].getIntVar(), (RColour)args[2].getObjectVar());
    else
      ret = This->floodFill(args[0].getIntVar(), args[1].getIntVar(), (RColour)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_floodFill_INLRPoint_INLRColour_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::floodFill((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar(), args[2].getIntVar());
    else
      ret = This->floodFill((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_floodFill_INLRPoint_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::floodFill((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
      ret = This->floodFill((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getBackground__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getBackground();
    else
        ret = (::acdk::lang::RObject)This->getBackground();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getBackgroundMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getBackgroundMode();
    else
      ret = This->getBackgroundMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getBrush();
    else
        ret = (::acdk::lang::RObject)This->getBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getCharHeight__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getCharHeight();
    else
      ret = This->getCharHeight();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getCharWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getCharWidth();
    else
      ret = This->getCharWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getClippingBox_OUTIOUTIOUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getClippingBox(args[0].getIntRef(), args[1].getIntRef(), args[2].getIntRef(), args[3].getIntRef());
    else
        This->getClippingBox(args[0].getIntRef(), args[1].getIntRef(), args[2].getIntRef(), args[3].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getClippingBox_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getClippingBox((RRect)args[0].getObjectVar());
    else
        This->getClippingBox((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getDepth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getDepth();
    else
      ret = This->getDepth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getDeviceOrigin_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getDeviceOrigin(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getDeviceOrigin(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getDeviceOrigin__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getDeviceOrigin();
    else
        ret = (::acdk::lang::RObject)This->getDeviceOrigin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getFont__LRFont__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getFont();
    else
        ret = (::acdk::lang::RObject)This->getFont();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getLogicalFunction__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getLogicalFunction();
    else
      ret = This->getLogicalFunction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getLogicalOrigin_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getLogicalOrigin(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getLogicalOrigin(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getLogicalOrigin__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getLogicalOrigin();
    else
        ret = (::acdk::lang::RObject)This->getLogicalOrigin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getLogicalScale_OUTDOUTD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getLogicalScale(args[0].getDoubleRef(), args[1].getDoubleRef());
    else
        This->getLogicalScale(args[0].getDoubleRef(), args[1].getDoubleRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getMapMode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getMapMode();
    else
      ret = This->getMapMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getPPI__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getPPI();
    else
        ret = (::acdk::lang::RObject)This->getPPI();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getPen();
    else
        ret = (::acdk::lang::RObject)This->getPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getPixel_IIOUTLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getPixel(args[0].getIntVar(), args[1].getIntVar(),  ::acdk::lang::getTypedObjectRef< RColour >(args[2]));
    else
      ret = This->getPixel(args[0].getIntVar(), args[1].getIntVar(),  ::acdk::lang::getTypedObjectRef< RColour >(args[2]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getPixel_INLRPoint_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::getPixel((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
      ret = This->getPixel((RPoint)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getSize_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getSize(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSize(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getSize();
    else
        ret = (::acdk::lang::RObject)This->getSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getSizeMM_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getSizeMM(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSizeMM(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getSizeMM__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getSizeMM();
    else
        ret = (::acdk::lang::RObject)This->getSizeMM();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getTextBackground__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getTextBackground();
    else
        ret = (::acdk::lang::RObject)This->getTextBackground();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getTextForeground__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DC::getTextForeground();
    else
        ret = (::acdk::lang::RObject)This->getTextForeground();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_getUserScale_OUTDOUTD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::getUserScale(args[0].getDoubleRef(), args[1].getDoubleRef());
    else
        This->getUserScale(args[0].getDoubleRef(), args[1].getDoubleRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_logicalToDeviceX_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::logicalToDeviceX(args[0].getIntVar());
    else
      ret = This->logicalToDeviceX(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_logicalToDeviceXRel_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::logicalToDeviceXRel(args[0].getIntVar());
    else
      ret = This->logicalToDeviceXRel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_logicalToDeviceY_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::logicalToDeviceY(args[0].getIntVar());
    else
      ret = This->logicalToDeviceY(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_logicalToDeviceYRel_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::logicalToDeviceYRel(args[0].getIntVar());
    else
      ret = This->logicalToDeviceYRel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_maxX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::maxX();
    else
      ret = This->maxX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_maxY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::maxY();
    else
      ret = This->maxY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_minX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::minX();
    else
      ret = This->minX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_minY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::minY();
    else
      ret = This->minY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_ok__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::ok();
    else
      ret = This->ok();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_resetBoundingBox__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::resetBoundingBox();
    else
        This->resetBoundingBox();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setAxisOrientation_ZZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setAxisOrientation(args[0].getBoolVar(), args[1].getBoolVar());
    else
        This->setAxisOrientation(args[0].getBoolVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setBackground_INLRBrush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setBackground((RBrush)args[0].getObjectVar());
    else
        This->setBackground((RBrush)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setBackgroundMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setBackgroundMode(args[0].getIntVar());
    else
        This->setBackgroundMode(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setBrush_INLRBrush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setBrush((RBrush)args[0].getObjectVar());
    else
        This->setBrush((RBrush)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setClippingRegion_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setClippingRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setClippingRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setClippingRegion_INLRRegion__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setClippingRegion((RRegion)args[0].getObjectVar());
    else
        This->setClippingRegion((RRegion)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setClippingRegion_INLRPoint_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setClippingRegion((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    else
        This->setClippingRegion((RPoint)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setClippingRegion_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setClippingRegion((RRect)args[0].getObjectVar());
    else
        This->setClippingRegion((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setDeviceOrigin_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setDeviceOrigin(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setDeviceOrigin(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setFont_INLRFont__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setFont((RFont)args[0].getObjectVar());
    else
        This->setFont((RFont)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setLogicalFunction_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setLogicalFunction(args[0].getIntVar());
    else
        This->setLogicalFunction(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setLogicalOrigin_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setLogicalOrigin(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setLogicalOrigin(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setLogicalScale_DD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setLogicalScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    else
        This->setLogicalScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setMapMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setMapMode(args[0].getIntVar());
    else
        This->setMapMode(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setPen_INLRPen__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setPen((RPen)args[0].getObjectVar());
    else
        This->setPen((RPen)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setTextBackground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setTextBackground((RColour)args[0].getObjectVar());
    else
        This->setTextBackground((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setTextForeground_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setTextForeground((RColour)args[0].getObjectVar());
    else
        This->setTextForeground((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_setUserScale_DD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::setUserScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    else
        This->setUserScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_startDoc_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DC::startDoc((RString)args[0].getObjectVar());
    else
      ret = This->startDoc((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DC_method_startPage__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DC* This = dmi_cast<DC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DC::startPage();
    else
        This->startPage();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_27_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_beginDrawing__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_beginDrawing__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_beginDrawing__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beginDrawing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_beginDrawing", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_beginDrawing__V_args, // the arguments
  0, //arguments count
  DC_methods_beginDrawing__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_beginDrawing__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xdest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xdest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ydest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ydest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xsrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xsrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ysrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ysrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xsrcMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xsrcMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ysrcMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ysrcMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_IIIIINLRDC_IIIZII_Z_args[] = 
{
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xdest,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ydest,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_width,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_height,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_source,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xsrc,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ysrc,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_rop,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_useMask,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_xsrcMask,
  &DC_methods_blit_IIIIINLRDC_IIIZII_Z_arg_ysrcMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_IIIIINLRDC_IIIZII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_IIIIINLRDC_IIIZII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_IIIIINLRDC_IIIZII_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_IIIIINLRDC_IIIZII_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_IIIIINLRDC_IIIZII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_xdest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xdest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_ydest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ydest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_xsrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xsrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_II_Z_arg_ysrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ysrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_IIIIINLRDC_II_Z_args[] = 
{
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_xdest,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_ydest,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_width,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_height,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_source,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_xsrc,
  &DC_methods_blit_IIIIINLRDC_II_Z_arg_ysrc,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_IIIIINLRDC_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_IIIIINLRDC_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_T_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_IIIIINLRDC_II_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_IIIIINLRDC_II_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_IIIIINLRDC_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_xdest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xdest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_ydest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ydest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_xsrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xsrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_ysrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ysrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_III_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_IIIIINLRDC_III_Z_args[] = 
{
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_xdest,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_ydest,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_width,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_height,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_source,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_xsrc,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_ysrc,
  &DC_methods_blit_IIIIINLRDC_III_Z_arg_rop,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_IIIIINLRDC_III_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_IIIIINLRDC_III_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_U_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_IIIIINLRDC_III_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_IIIIINLRDC_III_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_IIIIINLRDC_III_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_xdest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xdest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_ydest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ydest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_xsrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xsrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_ysrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ysrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_IIIIINLRDC_IIIZ_Z_args[] = 
{
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_xdest,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_ydest,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_width,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_height,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_source,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_xsrc,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_ysrc,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_rop,
  &DC_methods_blit_IIIIINLRDC_IIIZ_Z_arg_useMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_IIIIINLRDC_IIIZ_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_IIIIINLRDC_IIIZ_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_IIIIINLRDC_IIIZ_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_IIIIINLRDC_IIIZ_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_IIIIINLRDC_IIIZ_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xdest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xdest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_ydest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ydest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xsrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xsrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_ysrc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ysrc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xsrcMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xsrcMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_IIIIINLRDC_IIIZI_Z_args[] = 
{
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xdest,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_ydest,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_width,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_height,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_source,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xsrc,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_ysrc,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_rop,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_useMask,
  &DC_methods_blit_IIIIINLRDC_IIIZI_Z_arg_xsrcMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_IIIIINLRDC_IIIZI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_IIIIINLRDC_IIIZI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_IIIIINLRDC_IIIZI_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_IIIIINLRDC_IIIZI_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_IIIIINLRDC_IIIZI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_destPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "destPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_srcPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "srcPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_srcPtMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "srcPtMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_args[] = 
{
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_destPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_sz,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_source,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_srcPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_rop,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_useMask,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_arg_srcPtMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_destPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "destPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_srcPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "srcPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_args[] = 
{
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_destPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_sz,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_source,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_arg_srcPt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_destPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "destPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_srcPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "srcPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_args[] = 
{
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_destPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_sz,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_source,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_srcPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_arg_rop,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Z_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_destPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "destPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_srcPt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "srcPt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_rop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "rop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_args[] = 
{
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_destPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_sz,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_source,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_srcPt,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_rop,
  &DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_arg_useMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "blit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_10_blit", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_args, // the arguments
  0, //arguments count
  DC_methods_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_calcBoundingBox_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_calcBoundingBox_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_calcBoundingBox_II_V_args[] = 
{
  &DC_methods_calcBoundingBox_II_V_arg_x,
  &DC_methods_calcBoundingBox_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_calcBoundingBox_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_calcBoundingBox_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcBoundingBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_21_calcBoundingBox", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_calcBoundingBox_II_V_args, // the arguments
  0, //arguments count
  DC_methods_calcBoundingBox_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_calcBoundingBox_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_canDrawBitmap__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_canDrawBitmap__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_canDrawBitmap__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canDrawBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1y_canDrawBitmap", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_canDrawBitmap__Z_args, // the arguments
  0, //arguments count
  DC_methods_canDrawBitmap__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_canDrawBitmap__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_canGetTextExtent__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_canGetTextExtent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_canGetTextExtent__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canGetTextExtent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1z_canGetTextExtent", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_canGetTextExtent__Z_args, // the arguments
  0, //arguments count
  DC_methods_canGetTextExtent__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_canGetTextExtent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_clear", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_clear__V_args, // the arguments
  0, //arguments count
  DC_methods_clear__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_crossHair_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_crossHair_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_crossHair_II_V_args[] = 
{
  &DC_methods_crossHair_II_V_arg_x,
  &DC_methods_crossHair_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_crossHair_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_crossHair_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "crossHair", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_crossHair", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_crossHair_II_V_args, // the arguments
  0, //arguments count
  DC_methods_crossHair_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_crossHair_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_crossHair_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_crossHair_INLRPoint__V_args[] = 
{
  &DC_methods_crossHair_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_crossHair_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_crossHair_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "crossHair", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_crossHair", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_crossHair_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_crossHair_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_crossHair_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_destroyClippingRegion__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_destroyClippingRegion__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_destroyClippingRegion__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "destroyClippingRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1h_destroyClippingRegion", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_destroyClippingRegion__V_args, // the arguments
  0, //arguments count
  DC_methods_destroyClippingRegion__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_destroyClippingRegion__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_deviceToLogicalX_I_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_deviceToLogicalX_I_I_args[] = 
{
  &DC_methods_deviceToLogicalX_I_I_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_deviceToLogicalX_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_deviceToLogicalX_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deviceToLogicalX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1q_deviceToLogicalX", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_deviceToLogicalX_I_I_args, // the arguments
  0, //arguments count
  DC_methods_deviceToLogicalX_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_deviceToLogicalX_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_deviceToLogicalXRel_I_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_deviceToLogicalXRel_I_I_args[] = 
{
  &DC_methods_deviceToLogicalXRel_I_I_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_deviceToLogicalXRel_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_deviceToLogicalXRel_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deviceToLogicalXRel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1s_deviceToLogicalXRel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_deviceToLogicalXRel_I_I_args, // the arguments
  0, //arguments count
  DC_methods_deviceToLogicalXRel_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_deviceToLogicalXRel_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_deviceToLogicalY_I_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_deviceToLogicalY_I_I_args[] = 
{
  &DC_methods_deviceToLogicalY_I_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_deviceToLogicalY_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_deviceToLogicalY_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deviceToLogicalY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1r_deviceToLogicalY", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_deviceToLogicalY_I_I_args, // the arguments
  0, //arguments count
  DC_methods_deviceToLogicalY_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_deviceToLogicalY_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_deviceToLogicalYRel_I_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_deviceToLogicalYRel_I_I_args[] = 
{
  &DC_methods_deviceToLogicalYRel_I_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_deviceToLogicalYRel_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_deviceToLogicalYRel_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deviceToLogicalYRel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1t_deviceToLogicalYRel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_deviceToLogicalYRel_I_I_args, // the arguments
  0, //arguments count
  DC_methods_deviceToLogicalYRel_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_deviceToLogicalYRel_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_x1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_y1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_x2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_y2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_xc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_IIIIII_V_arg_yc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "yc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawArc_IIIIII_V_args[] = 
{
  &DC_methods_drawArc_IIIIII_V_arg_x1,
  &DC_methods_drawArc_IIIIII_V_arg_y1,
  &DC_methods_drawArc_IIIIII_V_arg_x2,
  &DC_methods_drawArc_IIIIII_V_arg_y2,
  &DC_methods_drawArc_IIIIII_V_arg_xc,
  &DC_methods_drawArc_IIIIII_V_arg_yc,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawArc_IIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawArc_IIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawArc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_drawArc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawArc_IIIIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawArc_IIIIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawArc_IIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_pt1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_pt2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_centre = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "centre", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_args[] = 
{
  &DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_pt1,
  &DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_pt2,
  &DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_arg_centre,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawArc_INLRPoint_INLRPoint_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawArc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_drawArc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawArc_INLRPoint_INLRPoint_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawArc_INLRPoint_INLRPoint_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawBitmap_INLRBitmap_IIZ_V_args[] = 
{
  &DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_bmp,
  &DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_x,
  &DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_y,
  &DC_methods_drawBitmap_INLRBitmap_IIZ_V_arg_useMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawBitmap_INLRBitmap_IIZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawBitmap_INLRBitmap_IIZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_drawBitmap", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawBitmap_INLRBitmap_IIZ_V_args, // the arguments
  0, //arguments count
  DC_methods_drawBitmap_INLRBitmap_IIZ_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawBitmap_INLRBitmap_IIZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_II_V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawBitmap_INLRBitmap_II_V_args[] = 
{
  &DC_methods_drawBitmap_INLRBitmap_II_V_arg_bmp,
  &DC_methods_drawBitmap_INLRBitmap_II_V_arg_x,
  &DC_methods_drawBitmap_INLRBitmap_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawBitmap_INLRBitmap_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawBitmap_INLRBitmap_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_drawBitmap", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawBitmap_INLRBitmap_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawBitmap_INLRBitmap_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawBitmap_INLRBitmap_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_useMask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useMask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_args[] = 
{
  &DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_bmp,
  &DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_pt,
  &DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_arg_useMask,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawBitmap_INLRBitmap_INLRPoint_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_drawBitmap", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_args, // the arguments
  0, //arguments count
  DC_methods_drawBitmap_INLRBitmap_INLRPoint_Z_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawBitmap_INLRBitmap_INLRPoint_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_args[] = 
{
  &DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_arg_bmp,
  &DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawBitmap_INLRBitmap_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_drawBitmap", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawBitmap_INLRBitmap_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawBitmap_INLRBitmap_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCheckMark_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCheckMark_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCheckMark_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCheckMark_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawCheckMark_IIII_V_args[] = 
{
  &DC_methods_drawCheckMark_IIII_V_arg_x,
  &DC_methods_drawCheckMark_IIII_V_arg_y,
  &DC_methods_drawCheckMark_IIII_V_arg_width,
  &DC_methods_drawCheckMark_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawCheckMark_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawCheckMark_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawCheckMark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_drawCheckMark", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawCheckMark_IIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawCheckMark_IIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawCheckMark_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCheckMark_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawCheckMark_INLRRect__V_args[] = 
{
  &DC_methods_drawCheckMark_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawCheckMark_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawCheckMark_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawCheckMark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_drawCheckMark", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawCheckMark_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_drawCheckMark_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawCheckMark_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCircle_III_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCircle_III_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCircle_III_V_arg_radius = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radius", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawCircle_III_V_args[] = 
{
  &DC_methods_drawCircle_III_V_arg_x,
  &DC_methods_drawCircle_III_V_arg_y,
  &DC_methods_drawCircle_III_V_arg_radius,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawCircle_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawCircle_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawCircle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_drawCircle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawCircle_III_V_args, // the arguments
  0, //arguments count
  DC_methods_drawCircle_III_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawCircle_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCircle_INLRPoint_I_V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawCircle_INLRPoint_I_V_arg_radius = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radius", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawCircle_INLRPoint_I_V_args[] = 
{
  &DC_methods_drawCircle_INLRPoint_I_V_arg_pt,
  &DC_methods_drawCircle_INLRPoint_I_V_arg_radius,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawCircle_INLRPoint_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawCircle_INLRPoint_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawCircle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_drawCircle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawCircle_INLRPoint_I_V_args, // the arguments
  0, //arguments count
  DC_methods_drawCircle_INLRPoint_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawCircle_INLRPoint_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawEllipse_IIII_V_args[] = 
{
  &DC_methods_drawEllipse_IIII_V_arg_x,
  &DC_methods_drawEllipse_IIII_V_arg_y,
  &DC_methods_drawEllipse_IIII_V_arg_width,
  &DC_methods_drawEllipse_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawEllipse_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawEllipse_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawEllipse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_drawEllipse", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawEllipse_IIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawEllipse_IIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawEllipse_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_INLRPoint_INLRSize__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_INLRPoint_INLRSize__V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawEllipse_INLRPoint_INLRSize__V_args[] = 
{
  &DC_methods_drawEllipse_INLRPoint_INLRSize__V_arg_pt,
  &DC_methods_drawEllipse_INLRPoint_INLRSize__V_arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawEllipse_INLRPoint_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawEllipse_INLRPoint_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawEllipse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_drawEllipse", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawEllipse_INLRPoint_INLRSize__V_args, // the arguments
  0, //arguments count
  DC_methods_drawEllipse_INLRPoint_INLRSize__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawEllipse_INLRPoint_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipse_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawEllipse_INLRRect__V_args[] = 
{
  &DC_methods_drawEllipse_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawEllipse_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawEllipse_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawEllipse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_drawEllipse", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawEllipse_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_drawEllipse_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawEllipse_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_IIIIDD_V_arg_ea = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ea", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawEllipticArc_IIIIDD_V_args[] = 
{
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_x,
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_y,
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_w,
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_h,
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_sa,
  &DC_methods_drawEllipticArc_IIIIDD_V_arg_ea,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawEllipticArc_IIIIDD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawEllipticArc_IIIIDD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawEllipticArc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_drawEllipticArc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawEllipticArc_IIIIDD_V_args, // the arguments
  0, //arguments count
  DC_methods_drawEllipticArc_IIIIDD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawEllipticArc_IIIIDD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_ea = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ea", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_args[] = 
{
  &DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_pt,
  &DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_sz,
  &DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_sa,
  &DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_arg_ea,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawEllipticArc_INLRPoint_INLRSize_DD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawEllipticArc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_drawEllipticArc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_args, // the arguments
  0, //arguments count
  DC_methods_drawEllipticArc_INLRPoint_INLRSize_DD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawEllipticArc_INLRPoint_INLRSize_DD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawIcon_INLRIcon_II_V_arg_icon = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "icon", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawIcon_INLRIcon_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawIcon_INLRIcon_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawIcon_INLRIcon_II_V_args[] = 
{
  &DC_methods_drawIcon_INLRIcon_II_V_arg_icon,
  &DC_methods_drawIcon_INLRIcon_II_V_arg_x,
  &DC_methods_drawIcon_INLRIcon_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawIcon_INLRIcon_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawIcon_INLRIcon_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_drawIcon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawIcon_INLRIcon_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawIcon_INLRIcon_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawIcon_INLRIcon_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawIcon_INLRIcon_INLRPoint__V_arg_icon = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "icon", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIcon::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawIcon_INLRIcon_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawIcon_INLRIcon_INLRPoint__V_args[] = 
{
  &DC_methods_drawIcon_INLRIcon_INLRPoint__V_arg_icon,
  &DC_methods_drawIcon_INLRIcon_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawIcon_INLRIcon_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawIcon_INLRIcon_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawIcon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_drawIcon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawIcon_INLRIcon_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawIcon_INLRIcon_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawIcon_INLRIcon_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRRect__V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRRect__V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Q_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRRect_I_V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_rect,
  &DC_methods_drawLabel_INLRString_INLRRect_I_V_arg_alignment,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRRect_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRRect_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_R_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRRect_I_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRRect_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRRect_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_indexAccel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indexAccel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_image,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_rect,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_alignment,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_arg_indexAccel,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_image,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRBitmap_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRBitmap_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_image = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "image", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_image,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_rect,
  &DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_arg_alignment,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_alignment = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alignment", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_indexAccel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indexAccel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLabel_INLRString_INLRRect_II_V_args[] = 
{
  &DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_text,
  &DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_rect,
  &DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_alignment,
  &DC_methods_drawLabel_INLRString_INLRRect_II_V_arg_indexAccel,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLabel_INLRString_INLRRect_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLabel_INLRString_INLRRect_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_P_drawLabel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLabel_INLRString_INLRRect_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLabel_INLRString_INLRRect_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLabel_INLRString_INLRRect_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_IIII_V_arg_x1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_IIII_V_arg_y1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_IIII_V_arg_x2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_IIII_V_arg_y2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLine_IIII_V_args[] = 
{
  &DC_methods_drawLine_IIII_V_arg_x1,
  &DC_methods_drawLine_IIII_V_arg_y1,
  &DC_methods_drawLine_IIII_V_arg_x2,
  &DC_methods_drawLine_IIII_V_arg_y2,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLine_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLine_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_drawLine", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLine_IIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLine_IIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLine_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_INLRPoint_INLRPoint__V_arg_pt1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLine_INLRPoint_INLRPoint__V_arg_pt2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLine_INLRPoint_INLRPoint__V_args[] = 
{
  &DC_methods_drawLine_INLRPoint_INLRPoint__V_arg_pt1,
  &DC_methods_drawLine_INLRPoint_INLRPoint__V_arg_pt2,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLine_INLRPoint_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLine_INLRPoint_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_drawLine", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLine_INLRPoint_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawLine_INLRPoint_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLine_INLRPoint_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray_II_V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray_II_V_arg_xoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray_II_V_arg_yoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "yoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLines_INLRPointArray_II_V_args[] = 
{
  &DC_methods_drawLines_INLRPointArray_II_V_arg_points,
  &DC_methods_drawLines_INLRPointArray_II_V_arg_xoffset,
  &DC_methods_drawLines_INLRPointArray_II_V_arg_yoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLines_INLRPointArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLines_INLRPointArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_drawLines", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLines_INLRPointArray_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLines_INLRPointArray_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLines_INLRPointArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray__V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLines_INLRPointArray__V_args[] = 
{
  &DC_methods_drawLines_INLRPointArray__V_arg_points,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLines_INLRPointArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLines_INLRPointArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_drawLines", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLines_INLRPointArray__V_args, // the arguments
  0, //arguments count
  DC_methods_drawLines_INLRPointArray__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLines_INLRPointArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray_I_V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawLines_INLRPointArray_I_V_arg_xoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawLines_INLRPointArray_I_V_args[] = 
{
  &DC_methods_drawLines_INLRPointArray_I_V_arg_points,
  &DC_methods_drawLines_INLRPointArray_I_V_arg_xoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawLines_INLRPointArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawLines_INLRPointArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_drawLines", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawLines_INLRPointArray_I_V_args, // the arguments
  0, //arguments count
  DC_methods_drawLines_INLRPointArray_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawLines_INLRPointArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPoint_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPoint_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPoint_II_V_args[] = 
{
  &DC_methods_drawPoint_II_V_arg_x,
  &DC_methods_drawPoint_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPoint_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPoint_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_drawPoint", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPoint_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawPoint_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPoint_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPoint_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPoint_INLRPoint__V_args[] = 
{
  &DC_methods_drawPoint_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPoint_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPoint_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_drawPoint", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPoint_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawPoint_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPoint_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_III_V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_III_V_arg_xoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_III_V_arg_yoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "yoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_III_V_arg_fillStyle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fillStyle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPolygon_INLRPointArray_III_V_args[] = 
{
  &DC_methods_drawPolygon_INLRPointArray_III_V_arg_points,
  &DC_methods_drawPolygon_INLRPointArray_III_V_arg_xoffset,
  &DC_methods_drawPolygon_INLRPointArray_III_V_arg_yoffset,
  &DC_methods_drawPolygon_INLRPointArray_III_V_arg_fillStyle,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPolygon_INLRPointArray_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPolygon_INLRPointArray_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPolygon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_drawPolygon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPolygon_INLRPointArray_III_V_args, // the arguments
  0, //arguments count
  DC_methods_drawPolygon_INLRPointArray_III_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPolygon_INLRPointArray_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray__V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPolygon_INLRPointArray__V_args[] = 
{
  &DC_methods_drawPolygon_INLRPointArray__V_arg_points,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPolygon_INLRPointArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPolygon_INLRPointArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPolygon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_drawPolygon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPolygon_INLRPointArray__V_args, // the arguments
  0, //arguments count
  DC_methods_drawPolygon_INLRPointArray__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPolygon_INLRPointArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_I_V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_I_V_arg_xoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPolygon_INLRPointArray_I_V_args[] = 
{
  &DC_methods_drawPolygon_INLRPointArray_I_V_arg_points,
  &DC_methods_drawPolygon_INLRPointArray_I_V_arg_xoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPolygon_INLRPointArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPolygon_INLRPointArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPolygon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_drawPolygon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPolygon_INLRPointArray_I_V_args, // the arguments
  0, //arguments count
  DC_methods_drawPolygon_INLRPointArray_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPolygon_INLRPointArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_II_V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_II_V_arg_xoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawPolygon_INLRPointArray_II_V_arg_yoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "yoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawPolygon_INLRPointArray_II_V_args[] = 
{
  &DC_methods_drawPolygon_INLRPointArray_II_V_arg_points,
  &DC_methods_drawPolygon_INLRPointArray_II_V_arg_xoffset,
  &DC_methods_drawPolygon_INLRPointArray_II_V_arg_yoffset,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawPolygon_INLRPointArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawPolygon_INLRPointArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "drawPolygon", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_drawPolygon", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawPolygon_INLRPointArray_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawPolygon_INLRPointArray_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawPolygon_INLRPointArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRectangle_IIII_V_args[] = 
{
  &DC_methods_drawRectangle_IIII_V_arg_x,
  &DC_methods_drawRectangle_IIII_V_arg_y,
  &DC_methods_drawRectangle_IIII_V_arg_width,
  &DC_methods_drawRectangle_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRectangle_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRectangle_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_drawRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRectangle_IIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRectangle_IIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRectangle_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_INLRPoint_INLRSize__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_INLRPoint_INLRSize__V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRectangle_INLRPoint_INLRSize__V_args[] = 
{
  &DC_methods_drawRectangle_INLRPoint_INLRSize__V_arg_pt,
  &DC_methods_drawRectangle_INLRPoint_INLRSize__V_arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRectangle_INLRPoint_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRectangle_INLRPoint_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_drawRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRectangle_INLRPoint_INLRSize__V_args, // the arguments
  0, //arguments count
  DC_methods_drawRectangle_INLRPoint_INLRSize__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRectangle_INLRPoint_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRectangle_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRectangle_INLRRect__V_args[] = 
{
  &DC_methods_drawRectangle_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRectangle_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRectangle_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_drawRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRectangle_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_drawRectangle_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRectangle_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_IID_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_IID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_IID_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_IID_V_arg_angle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "angle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRotatedText_INLRString_IID_V_args[] = 
{
  &DC_methods_drawRotatedText_INLRString_IID_V_arg_text,
  &DC_methods_drawRotatedText_INLRString_IID_V_arg_x,
  &DC_methods_drawRotatedText_INLRString_IID_V_arg_y,
  &DC_methods_drawRotatedText_INLRString_IID_V_arg_angle,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRotatedText_INLRString_IID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRotatedText_INLRString_IID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRotatedText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_drawRotatedText", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRotatedText_INLRString_IID_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRotatedText_INLRString_IID_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRotatedText_INLRString_IID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_angle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "angle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_args[] = 
{
  &DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_text,
  &DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_pt,
  &DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_arg_angle,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRotatedText_INLRString_INLRPoint_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRotatedText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_drawRotatedText", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRotatedText_INLRString_INLRPoint_D_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRotatedText_INLRString_INLRPoint_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_IIIID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_IIIID_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_IIIID_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_IIIID_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_IIIID_V_arg_radius = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radius", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRoundedRectangle_IIIID_V_args[] = 
{
  &DC_methods_drawRoundedRectangle_IIIID_V_arg_x,
  &DC_methods_drawRoundedRectangle_IIIID_V_arg_y,
  &DC_methods_drawRoundedRectangle_IIIID_V_arg_width,
  &DC_methods_drawRoundedRectangle_IIIID_V_arg_height,
  &DC_methods_drawRoundedRectangle_IIIID_V_arg_radius,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRoundedRectangle_IIIID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRoundedRectangle_IIIID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRoundedRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_drawRoundedRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRoundedRectangle_IIIID_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRoundedRectangle_IIIID_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRoundedRectangle_IIIID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_radius = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radius", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_args[] = 
{
  &DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_pt,
  &DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_sz,
  &DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_arg_radius,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRoundedRectangle_INLRPoint_INLRSize_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRoundedRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_drawRoundedRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRoundedRectangle_INLRPoint_INLRSize_D_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRoundedRectangle_INLRPoint_INLRSize_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_INLRRect_D_V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawRoundedRectangle_INLRRect_D_V_arg_radius = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "radius", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawRoundedRectangle_INLRRect_D_V_args[] = 
{
  &DC_methods_drawRoundedRectangle_INLRRect_D_V_arg_r,
  &DC_methods_drawRoundedRectangle_INLRRect_D_V_arg_radius,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawRoundedRectangle_INLRRect_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawRoundedRectangle_INLRRect_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawRoundedRectangle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_drawRoundedRectangle", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawRoundedRectangle_INLRRect_D_V_args, // the arguments
  0, //arguments count
  DC_methods_drawRoundedRectangle_INLRRect_D_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawRoundedRectangle_INLRRect_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_x1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_y1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_x2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_y2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_x3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_IIIIII_V_arg_y3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawSpline_IIIIII_V_args[] = 
{
  &DC_methods_drawSpline_IIIIII_V_arg_x1,
  &DC_methods_drawSpline_IIIIII_V_arg_y1,
  &DC_methods_drawSpline_IIIIII_V_arg_x2,
  &DC_methods_drawSpline_IIIIII_V_arg_y2,
  &DC_methods_drawSpline_IIIIII_V_arg_x3,
  &DC_methods_drawSpline_IIIIII_V_arg_y3,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawSpline_IIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawSpline_IIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawSpline", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_drawSpline", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawSpline_IIIIII_V_args, // the arguments
  0, //arguments count
  DC_methods_drawSpline_IIIIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawSpline_IIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawSpline_INLRPointArray__V_arg_points = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "points", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPointArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawSpline_INLRPointArray__V_args[] = 
{
  &DC_methods_drawSpline_INLRPointArray__V_arg_points,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawSpline_INLRPointArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawSpline_INLRPointArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawSpline", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_drawSpline", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawSpline_INLRPointArray__V_args, // the arguments
  0, //arguments count
  DC_methods_drawSpline_INLRPointArray__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawSpline_INLRPointArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawText_INLRString_II_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawText_INLRString_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawText_INLRString_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawText_INLRString_II_V_args[] = 
{
  &DC_methods_drawText_INLRString_II_V_arg_text,
  &DC_methods_drawText_INLRString_II_V_arg_x,
  &DC_methods_drawText_INLRString_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawText_INLRString_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawText_INLRString_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_drawText", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawText_INLRString_II_V_args, // the arguments
  0, //arguments count
  DC_methods_drawText_INLRString_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawText_INLRString_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawText_INLRString_INLRPoint__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_drawText_INLRString_INLRPoint__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_drawText_INLRString_INLRPoint__V_args[] = 
{
  &DC_methods_drawText_INLRString_INLRPoint__V_arg_text,
  &DC_methods_drawText_INLRString_INLRPoint__V_arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_drawText_INLRString_INLRPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_drawText_INLRString_INLRPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "drawText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_drawText", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_drawText_INLRString_INLRPoint__V_args, // the arguments
  0, //arguments count
  DC_methods_drawText_INLRString_INLRPoint__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_drawText_INLRString_INLRPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_endDoc__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_endDoc__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_endDoc__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDoc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_endDoc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_endDoc__V_args, // the arguments
  0, //arguments count
  DC_methods_endDoc__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_endDoc__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_endDrawing__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_endDrawing__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_endDrawing__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDrawing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_endDrawing", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_endDrawing__V_args, // the arguments
  0, //arguments count
  DC_methods_endDrawing__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_endDrawing__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_endPage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_endPage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_endPage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_17_endPage", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_endPage__V_args, // the arguments
  0, //arguments count
  DC_methods_endPage__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_endPage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour_I_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour_I_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour_I_Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour_I_Z_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_floodFill_IIINLRColour_I_Z_args[] = 
{
  &DC_methods_floodFill_IIINLRColour_I_Z_arg_x,
  &DC_methods_floodFill_IIINLRColour_I_Z_arg_y,
  &DC_methods_floodFill_IIINLRColour_I_Z_arg_col,
  &DC_methods_floodFill_IIINLRColour_I_Z_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_floodFill_IIINLRColour_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_floodFill_IIINLRColour_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "floodFill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_floodFill", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_floodFill_IIINLRColour_I_Z_args, // the arguments
  0, //arguments count
  DC_methods_floodFill_IIINLRColour_I_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_floodFill_IIINLRColour_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour__Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour__Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_IIINLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_floodFill_IIINLRColour__Z_args[] = 
{
  &DC_methods_floodFill_IIINLRColour__Z_arg_x,
  &DC_methods_floodFill_IIINLRColour__Z_arg_y,
  &DC_methods_floodFill_IIINLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_floodFill_IIINLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_floodFill_IIINLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "floodFill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_floodFill", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_floodFill_IIINLRColour__Z_args, // the arguments
  0, //arguments count
  DC_methods_floodFill_IIINLRColour__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_floodFill_IIINLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_floodFill_INLRPoint_INLRColour_I_Z_args[] = 
{
  &DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_pt,
  &DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_col,
  &DC_methods_floodFill_INLRPoint_INLRColour_I_Z_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_floodFill_INLRPoint_INLRColour_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_floodFill_INLRPoint_INLRColour_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "floodFill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_floodFill", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_floodFill_INLRPoint_INLRColour_I_Z_args, // the arguments
  0, //arguments count
  DC_methods_floodFill_INLRPoint_INLRColour_I_Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_floodFill_INLRPoint_INLRColour_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_INLRPoint_INLRColour__Z_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_floodFill_INLRPoint_INLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_floodFill_INLRPoint_INLRColour__Z_args[] = 
{
  &DC_methods_floodFill_INLRPoint_INLRColour__Z_arg_pt,
  &DC_methods_floodFill_INLRPoint_INLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_floodFill_INLRPoint_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_floodFill_INLRPoint_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "floodFill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_floodFill", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_floodFill_INLRPoint_INLRColour__Z_args, // the arguments
  0, //arguments count
  DC_methods_floodFill_INLRPoint_INLRColour__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_floodFill_INLRPoint_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getBackground__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getBackground__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getBackground__LRBrush_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_1E_getBackground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getBackground__LRBrush__args, // the arguments
  0, //arguments count
  DC_methods_getBackground__LRBrush__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getBackground__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getBackgroundMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getBackgroundMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getBackgroundMode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBackgroundMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1D_getBackgroundMode", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getBackgroundMode__I_args, // the arguments
  0, //arguments count
  DC_methods_getBackgroundMode__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getBackgroundMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_1F_getBrush", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getBrush__LRBrush__args, // the arguments
  0, //arguments count
  DC_methods_getBrush__LRBrush__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getCharHeight__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getCharHeight__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getCharHeight__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1k_getCharHeight", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getCharHeight__I_args, // the arguments
  0, //arguments count
  DC_methods_getCharHeight__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getCharHeight__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getCharWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getCharWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getCharWidth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1l_getCharWidth", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getCharWidth__I_args, // the arguments
  0, //arguments count
  DC_methods_getCharWidth__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getCharWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_args[] = 
{
  &DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_x,
  &DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_y,
  &DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_w,
  &DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getClippingBox_OUTIOUTIOUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClippingBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_getClippingBox", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_args, // the arguments
  0, //arguments count
  DC_methods_getClippingBox_OUTIOUTIOUTIOUTI_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getClippingBox_OUTIOUTIOUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getClippingBox_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getClippingBox_INLRRect__V_args[] = 
{
  &DC_methods_getClippingBox_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getClippingBox_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getClippingBox_INLRRect__V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClippingBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_getClippingBox", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getClippingBox_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_getClippingBox_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getClippingBox_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getDepth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getDepth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getDepth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDepth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_getDepth", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getDepth__I_args, // the arguments
  0, //arguments count
  DC_methods_getDepth__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getDepth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getDeviceOrigin_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getDeviceOrigin_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getDeviceOrigin_OUTIOUTI_V_args[] = 
{
  &DC_methods_getDeviceOrigin_OUTIOUTI_V_arg_x,
  &DC_methods_getDeviceOrigin_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getDeviceOrigin_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getDeviceOrigin_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1V_getDeviceOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getDeviceOrigin_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  DC_methods_getDeviceOrigin_OUTIOUTI_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getDeviceOrigin_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getDeviceOrigin__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getDeviceOrigin__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getDeviceOrigin__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_1W_getDeviceOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getDeviceOrigin__LRPoint__args, // the arguments
  0, //arguments count
  DC_methods_getDeviceOrigin__LRPoint__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getDeviceOrigin__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getFont__LRFont__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getFont__LRFont__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getFont__LRFont_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo(), // return type
  "_1G_getFont", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getFont__LRFont__args, // the arguments
  0, //arguments count
  DC_methods_getFont__LRFont__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getFont__LRFont__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getLogicalFunction__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getLogicalFunction__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getLogicalFunction__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogicalFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1Z_getLogicalFunction", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getLogicalFunction__I_args, // the arguments
  0, //arguments count
  DC_methods_getLogicalFunction__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getLogicalFunction__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getLogicalOrigin_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getLogicalOrigin_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getLogicalOrigin_OUTIOUTI_V_args[] = 
{
  &DC_methods_getLogicalOrigin_OUTIOUTI_V_arg_x,
  &DC_methods_getLogicalOrigin_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getLogicalOrigin_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getLogicalOrigin_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogicalOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1S_getLogicalOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getLogicalOrigin_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  DC_methods_getLogicalOrigin_OUTIOUTI_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getLogicalOrigin_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getLogicalOrigin__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getLogicalOrigin__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getLogicalOrigin__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogicalOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_1T_getLogicalOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getLogicalOrigin__LRPoint__args, // the arguments
  0, //arguments count
  DC_methods_getLogicalOrigin__LRPoint__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getLogicalOrigin__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getLogicalScale_OUTDOUTD_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getLogicalScale_OUTDOUTD_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getLogicalScale_OUTDOUTD_V_args[] = 
{
  &DC_methods_getLogicalScale_OUTDOUTD_V_arg_x,
  &DC_methods_getLogicalScale_OUTDOUTD_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getLogicalScale_OUTDOUTD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getLogicalScale_OUTDOUTD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogicalScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Q_getLogicalScale", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getLogicalScale_OUTDOUTD_V_args, // the arguments
  0, //arguments count
  DC_methods_getLogicalScale_OUTDOUTD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getLogicalScale_OUTDOUTD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getMapMode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getMapMode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getMapMode__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1M_getMapMode", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getMapMode__I_args, // the arguments
  0, //arguments count
  DC_methods_getMapMode__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getMapMode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getPPI__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getPPI__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getPPI__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPPI", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1B_getPPI", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getPPI__LRSize__args, // the arguments
  0, //arguments count
  DC_methods_getPPI__LRSize__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getPPI__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_1H_getPen", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getPen__LRPen__args, // the arguments
  0, //arguments count
  DC_methods_getPen__LRPen__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getPixel_IIOUTLRColour__Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getPixel_IIOUTLRColour__Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getPixel_IIOUTLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getPixel_IIOUTLRColour__Z_args[] = 
{
  &DC_methods_getPixel_IIOUTLRColour__Z_arg_x,
  &DC_methods_getPixel_IIOUTLRColour__Z_arg_y,
  &DC_methods_getPixel_IIOUTLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getPixel_IIOUTLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getPixel_IIOUTLRColour__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPixel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getPixel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getPixel_IIOUTLRColour__Z_args, // the arguments
  0, //arguments count
  DC_methods_getPixel_IIOUTLRColour__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getPixel_IIOUTLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getPixel_INLRPoint_INLRColour__Z_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getPixel_INLRPoint_INLRColour__Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getPixel_INLRPoint_INLRColour__Z_args[] = 
{
  &DC_methods_getPixel_INLRPoint_INLRColour__Z_arg_pt,
  &DC_methods_getPixel_INLRPoint_INLRColour__Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getPixel_INLRPoint_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getPixel_INLRPoint_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPixel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getPixel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getPixel_INLRPoint_INLRColour__Z_args, // the arguments
  0, //arguments count
  DC_methods_getPixel_INLRPoint_INLRColour__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getPixel_INLRPoint_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getSize_OUTIOUTI_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getSize_OUTIOUTI_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getSize_OUTIOUTI_V_args[] = 
{
  &DC_methods_getSize_OUTIOUTI_V_arg_width,
  &DC_methods_getSize_OUTIOUTI_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getSize_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getSize_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1m_getSize", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getSize_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  DC_methods_getSize_OUTIOUTI_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getSize_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1n_getSize", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getSize__LRSize__args, // the arguments
  0, //arguments count
  DC_methods_getSize__LRSize__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getSizeMM_OUTIOUTI_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getSizeMM_OUTIOUTI_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getSizeMM_OUTIOUTI_V_args[] = 
{
  &DC_methods_getSizeMM_OUTIOUTI_V_arg_width,
  &DC_methods_getSizeMM_OUTIOUTI_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getSizeMM_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getSizeMM_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSizeMM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_getSizeMM", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getSizeMM_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  DC_methods_getSizeMM_OUTIOUTI_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getSizeMM_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getSizeMM__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getSizeMM__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getSizeMM__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSizeMM", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_1p_getSizeMM", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getSizeMM__LRSize__args, // the arguments
  0, //arguments count
  DC_methods_getSizeMM__LRSize__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getSizeMM__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getTextBackground__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getTextBackground__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getTextBackground__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_1I_getTextBackground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getTextBackground__LRColour__args, // the arguments
  0, //arguments count
  DC_methods_getTextBackground__LRColour__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getTextBackground__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getTextForeground__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getTextForeground__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getTextForeground__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_1J_getTextForeground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getTextForeground__LRColour__args, // the arguments
  0, //arguments count
  DC_methods_getTextForeground__LRColour__exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getTextForeground__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getUserScale_OUTDOUTD_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_getUserScale_OUTDOUTD_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_getUserScale_OUTDOUTD_V_args[] = 
{
  &DC_methods_getUserScale_OUTDOUTD_V_arg_x,
  &DC_methods_getUserScale_OUTDOUTD_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_getUserScale_OUTDOUTD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_getUserScale_OUTDOUTD_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1O_getUserScale", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_getUserScale_OUTDOUTD_V_args, // the arguments
  0, //arguments count
  DC_methods_getUserScale_OUTDOUTD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_getUserScale_OUTDOUTD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_logicalToDeviceX_I_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_logicalToDeviceX_I_I_args[] = 
{
  &DC_methods_logicalToDeviceX_I_I_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_logicalToDeviceX_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_logicalToDeviceX_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logicalToDeviceX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1u_logicalToDeviceX", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_logicalToDeviceX_I_I_args, // the arguments
  0, //arguments count
  DC_methods_logicalToDeviceX_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_logicalToDeviceX_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_logicalToDeviceXRel_I_I_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_logicalToDeviceXRel_I_I_args[] = 
{
  &DC_methods_logicalToDeviceXRel_I_I_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_logicalToDeviceXRel_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_logicalToDeviceXRel_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logicalToDeviceXRel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1w_logicalToDeviceXRel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_logicalToDeviceXRel_I_I_args, // the arguments
  0, //arguments count
  DC_methods_logicalToDeviceXRel_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_logicalToDeviceXRel_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_logicalToDeviceY_I_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_logicalToDeviceY_I_I_args[] = 
{
  &DC_methods_logicalToDeviceY_I_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_logicalToDeviceY_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_logicalToDeviceY_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logicalToDeviceY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1v_logicalToDeviceY", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_logicalToDeviceY_I_I_args, // the arguments
  0, //arguments count
  DC_methods_logicalToDeviceY_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_logicalToDeviceY_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_logicalToDeviceYRel_I_I_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_logicalToDeviceYRel_I_I_args[] = 
{
  &DC_methods_logicalToDeviceYRel_I_I_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_logicalToDeviceYRel_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_logicalToDeviceYRel_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logicalToDeviceYRel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1x_logicalToDeviceYRel", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_logicalToDeviceYRel_I_I_args, // the arguments
  0, //arguments count
  DC_methods_logicalToDeviceYRel_I_I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_logicalToDeviceYRel_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_maxX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_maxX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_maxX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "maxX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_24_maxX", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_maxX__I_args, // the arguments
  0, //arguments count
  DC_methods_maxX__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_maxX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_maxY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_maxY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_maxY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "maxY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_26_maxY", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_maxY__I_args, // the arguments
  0, //arguments count
  DC_methods_maxY__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_maxY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_minX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_minX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_minX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "minX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_23_minX", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_minX__I_args, // the arguments
  0, //arguments count
  DC_methods_minX__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_minX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_minY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_minY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_minY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "minY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_25_minY", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_minY__I_args, // the arguments
  0, //arguments count
  DC_methods_minY__I_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_minY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_ok__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_ok__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_ok__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ok", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1C_ok", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_ok__Z_args, // the arguments
  0, //arguments count
  DC_methods_ok__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_ok__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_resetBoundingBox__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_resetBoundingBox__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_resetBoundingBox__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetBoundingBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_22_resetBoundingBox", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_resetBoundingBox__V_args, // the arguments
  0, //arguments count
  DC_methods_resetBoundingBox__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_resetBoundingBox__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setAxisOrientation_ZZ_V_arg_xLeftRight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xLeftRight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setAxisOrientation_ZZ_V_arg_yBottomUp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "yBottomUp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setAxisOrientation_ZZ_V_args[] = 
{
  &DC_methods_setAxisOrientation_ZZ_V_arg_xLeftRight,
  &DC_methods_setAxisOrientation_ZZ_V_arg_yBottomUp,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setAxisOrientation_ZZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setAxisOrientation_ZZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAxisOrientation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Y_setAxisOrientation", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setAxisOrientation_ZZ_V_args, // the arguments
  0, //arguments count
  DC_methods_setAxisOrientation_ZZ_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setAxisOrientation_ZZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setBackground_INLRBrush__V_arg_brush = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "brush", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setBackground_INLRBrush__V_args[] = 
{
  &DC_methods_setBackground_INLRBrush__V_arg_brush,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setBackground_INLRBrush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setBackground_INLRBrush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_setBackground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setBackground_INLRBrush__V_args, // the arguments
  0, //arguments count
  DC_methods_setBackground_INLRBrush__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setBackground_INLRBrush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setBackgroundMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setBackgroundMode_I_V_args[] = 
{
  &DC_methods_setBackgroundMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setBackgroundMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setBackgroundMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBackgroundMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_setBackgroundMode", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setBackgroundMode_I_V_args, // the arguments
  0, //arguments count
  DC_methods_setBackgroundMode_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setBackgroundMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setBrush_INLRBrush__V_arg_brush = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "brush", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setBrush_INLRBrush__V_args[] = 
{
  &DC_methods_setBrush_INLRBrush__V_arg_brush,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setBrush_INLRBrush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setBrush_INLRBrush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setBrush", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setBrush_INLRBrush__V_args, // the arguments
  0, //arguments count
  DC_methods_setBrush_INLRBrush__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setBrush_INLRBrush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setClippingRegion_IIII_V_args[] = 
{
  &DC_methods_setClippingRegion_IIII_V_arg_x,
  &DC_methods_setClippingRegion_IIII_V_arg_y,
  &DC_methods_setClippingRegion_IIII_V_arg_width,
  &DC_methods_setClippingRegion_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setClippingRegion_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setClippingRegion_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClippingRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_setClippingRegion", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setClippingRegion_IIII_V_args, // the arguments
  0, //arguments count
  DC_methods_setClippingRegion_IIII_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setClippingRegion_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_INLRRegion__V_arg_region = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "region", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setClippingRegion_INLRRegion__V_args[] = 
{
  &DC_methods_setClippingRegion_INLRRegion__V_arg_region,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setClippingRegion_INLRRegion__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setClippingRegion_INLRRegion__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClippingRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_setClippingRegion", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setClippingRegion_INLRRegion__V_args, // the arguments
  0, //arguments count
  DC_methods_setClippingRegion_INLRRegion__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setClippingRegion_INLRRegion__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_INLRPoint_INLRSize__V_arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_INLRPoint_INLRSize__V_arg_sz = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sz", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setClippingRegion_INLRPoint_INLRSize__V_args[] = 
{
  &DC_methods_setClippingRegion_INLRPoint_INLRSize__V_arg_pt,
  &DC_methods_setClippingRegion_INLRPoint_INLRSize__V_arg_sz,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setClippingRegion_INLRPoint_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setClippingRegion_INLRPoint_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClippingRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_setClippingRegion", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setClippingRegion_INLRPoint_INLRSize__V_args, // the arguments
  0, //arguments count
  DC_methods_setClippingRegion_INLRPoint_INLRSize__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setClippingRegion_INLRPoint_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setClippingRegion_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setClippingRegion_INLRRect__V_args[] = 
{
  &DC_methods_setClippingRegion_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setClippingRegion_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setClippingRegion_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClippingRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_setClippingRegion", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setClippingRegion_INLRRect__V_args, // the arguments
  0, //arguments count
  DC_methods_setClippingRegion_INLRRect__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setClippingRegion_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setDeviceOrigin_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setDeviceOrigin_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setDeviceOrigin_II_V_args[] = 
{
  &DC_methods_setDeviceOrigin_II_V_arg_x,
  &DC_methods_setDeviceOrigin_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setDeviceOrigin_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setDeviceOrigin_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDeviceOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1X_setDeviceOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setDeviceOrigin_II_V_args, // the arguments
  0, //arguments count
  DC_methods_setDeviceOrigin_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setDeviceOrigin_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setFont_INLRFont__V_arg_font = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "font", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFont::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setFont_INLRFont__V_args[] = 
{
  &DC_methods_setFont_INLRFont__V_arg_font,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setFont_INLRFont__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setFont_INLRFont__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFont", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_18_setFont", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setFont_INLRFont__V_args, // the arguments
  0, //arguments count
  DC_methods_setFont_INLRFont__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setFont_INLRFont__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setLogicalFunction_I_V_arg_function = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "function", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setLogicalFunction_I_V_args[] = 
{
  &DC_methods_setLogicalFunction_I_V_arg_function,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setLogicalFunction_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setLogicalFunction_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLogicalFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_20_setLogicalFunction", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setLogicalFunction_I_V_args, // the arguments
  0, //arguments count
  DC_methods_setLogicalFunction_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setLogicalFunction_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setLogicalOrigin_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setLogicalOrigin_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setLogicalOrigin_II_V_args[] = 
{
  &DC_methods_setLogicalOrigin_II_V_arg_x,
  &DC_methods_setLogicalOrigin_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setLogicalOrigin_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setLogicalOrigin_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLogicalOrigin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1U_setLogicalOrigin", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setLogicalOrigin_II_V_args, // the arguments
  0, //arguments count
  DC_methods_setLogicalOrigin_II_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setLogicalOrigin_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setLogicalScale_DD_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setLogicalScale_DD_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setLogicalScale_DD_V_args[] = 
{
  &DC_methods_setLogicalScale_DD_V_arg_x,
  &DC_methods_setLogicalScale_DD_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setLogicalScale_DD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setLogicalScale_DD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLogicalScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1R_setLogicalScale", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setLogicalScale_DD_V_args, // the arguments
  0, //arguments count
  DC_methods_setLogicalScale_DD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setLogicalScale_DD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setMapMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setMapMode_I_V_args[] = 
{
  &DC_methods_setMapMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setMapMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setMapMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMapMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1N_setMapMode", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setMapMode_I_V_args, // the arguments
  0, //arguments count
  DC_methods_setMapMode_I_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setMapMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setPen_INLRPen__V_arg_pen = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pen", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setPen_INLRPen__V_args[] = 
{
  &DC_methods_setPen_INLRPen__V_arg_pen,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setPen_INLRPen__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setPen_INLRPen__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_setPen", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setPen_INLRPen__V_args, // the arguments
  0, //arguments count
  DC_methods_setPen_INLRPen__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setPen_INLRPen__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setTextBackground_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setTextBackground_INLRColour__V_args[] = 
{
  &DC_methods_setTextBackground_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setTextBackground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setTextBackground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTextBackground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1L_setTextBackground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setTextBackground_INLRColour__V_args, // the arguments
  0, //arguments count
  DC_methods_setTextBackground_INLRColour__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setTextBackground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setTextForeground_INLRColour__V_arg_colour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setTextForeground_INLRColour__V_args[] = 
{
  &DC_methods_setTextForeground_INLRColour__V_arg_colour,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setTextForeground_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setTextForeground_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTextForeground", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1K_setTextForeground", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setTextForeground_INLRColour__V_args, // the arguments
  0, //arguments count
  DC_methods_setTextForeground_INLRColour__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setTextForeground_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setUserScale_DD_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_setUserScale_DD_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_setUserScale_DD_V_args[] = 
{
  &DC_methods_setUserScale_DD_V_arg_x,
  &DC_methods_setUserScale_DD_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_setUserScale_DD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_setUserScale_DD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUserScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1P_setUserScale", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_setUserScale_DD_V_args, // the arguments
  0, //arguments count
  DC_methods_setUserScale_DD_V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_setUserScale_DD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DC_methods_startDoc_INLRString__Z_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_startDoc_INLRString__Z_args[] = 
{
  &DC_methods_startDoc_INLRString__Z_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_startDoc_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_startDoc_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDoc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_startDoc", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_startDoc_INLRString__Z_args, // the arguments
  0, //arguments count
  DC_methods_startDoc_INLRString__Z_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_startDoc_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DC_methods_startPage__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DC_methods_startPage__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DC_method_startPage__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startPage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_16_startPage", // alternative name of method
  -1, // altlabelHashCode
  DC_methods_startPage__V_args, // the arguments
  0, //arguments count
  DC_methods_startPage__V_exceptions, // the declared exceptions
  DC_MetainfoWrapper::DC_method_startPage__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DC_methods[] = 
{
  &DC_method_GetClass__L_acdk_lang_RClass_,
  &DC_method_beginDrawing__V,
  &DC_method_blit_IIIIINLRDC_IIIZII_Z,
  &DC_method_blit_IIIIINLRDC_II_Z,
  &DC_method_blit_IIIIINLRDC_III_Z,
  &DC_method_blit_IIIIINLRDC_IIIZ_Z,
  &DC_method_blit_IIIIINLRDC_IIIZI_Z,
  &DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZINLRPoint__Z,
  &DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint__Z,
  &DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_I_Z,
  &DC_method_blit_INLRPoint_INLRSize_INLRDC_INLRPoint_IZ_Z,
  &DC_method_calcBoundingBox_II_V,
  &DC_method_canDrawBitmap__Z,
  &DC_method_canGetTextExtent__Z,
  &DC_method_clear__V,
  &DC_method_crossHair_II_V,
  &DC_method_crossHair_INLRPoint__V,
  &DC_method_destroyClippingRegion__V,
  &DC_method_deviceToLogicalX_I_I,
  &DC_method_deviceToLogicalXRel_I_I,
  &DC_method_deviceToLogicalY_I_I,
  &DC_method_deviceToLogicalYRel_I_I,
  &DC_method_drawArc_IIIIII_V,
  &DC_method_drawArc_INLRPoint_INLRPoint_INLRPoint__V,
  &DC_method_drawBitmap_INLRBitmap_IIZ_V,
  &DC_method_drawBitmap_INLRBitmap_II_V,
  &DC_method_drawBitmap_INLRBitmap_INLRPoint_Z_V,
  &DC_method_drawBitmap_INLRBitmap_INLRPoint__V,
  &DC_method_drawCheckMark_IIII_V,
  &DC_method_drawCheckMark_INLRRect__V,
  &DC_method_drawCircle_III_V,
  &DC_method_drawCircle_INLRPoint_I_V,
  &DC_method_drawEllipse_IIII_V,
  &DC_method_drawEllipse_INLRPoint_INLRSize__V,
  &DC_method_drawEllipse_INLRRect__V,
  &DC_method_drawEllipticArc_IIIIDD_V,
  &DC_method_drawEllipticArc_INLRPoint_INLRSize_DD_V,
  &DC_method_drawIcon_INLRIcon_II_V,
  &DC_method_drawIcon_INLRIcon_INLRPoint__V,
  &DC_method_drawLabel_INLRString_INLRRect__V,
  &DC_method_drawLabel_INLRString_INLRRect_I_V,
  &DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_II_V,
  &DC_method_drawLabel_INLRString_INLRBitmap_INLRRect__V,
  &DC_method_drawLabel_INLRString_INLRBitmap_INLRRect_I_V,
  &DC_method_drawLabel_INLRString_INLRRect_II_V,
  &DC_method_drawLine_IIII_V,
  &DC_method_drawLine_INLRPoint_INLRPoint__V,
  &DC_method_drawLines_INLRPointArray_II_V,
  &DC_method_drawLines_INLRPointArray__V,
  &DC_method_drawLines_INLRPointArray_I_V,
  &DC_method_drawPoint_II_V,
  &DC_method_drawPoint_INLRPoint__V,
  &DC_method_drawPolygon_INLRPointArray_III_V,
  &DC_method_drawPolygon_INLRPointArray__V,
  &DC_method_drawPolygon_INLRPointArray_I_V,
  &DC_method_drawPolygon_INLRPointArray_II_V,
  &DC_method_drawRectangle_IIII_V,
  &DC_method_drawRectangle_INLRPoint_INLRSize__V,
  &DC_method_drawRectangle_INLRRect__V,
  &DC_method_drawRotatedText_INLRString_IID_V,
  &DC_method_drawRotatedText_INLRString_INLRPoint_D_V,
  &DC_method_drawRoundedRectangle_IIIID_V,
  &DC_method_drawRoundedRectangle_INLRPoint_INLRSize_D_V,
  &DC_method_drawRoundedRectangle_INLRRect_D_V,
  &DC_method_drawSpline_IIIIII_V,
  &DC_method_drawSpline_INLRPointArray__V,
  &DC_method_drawText_INLRString_II_V,
  &DC_method_drawText_INLRString_INLRPoint__V,
  &DC_method_endDoc__V,
  &DC_method_endDrawing__V,
  &DC_method_endPage__V,
  &DC_method_floodFill_IIINLRColour_I_Z,
  &DC_method_floodFill_IIINLRColour__Z,
  &DC_method_floodFill_INLRPoint_INLRColour_I_Z,
  &DC_method_floodFill_INLRPoint_INLRColour__Z,
  &DC_method_getBackground__LRBrush_,
  &DC_method_getBackgroundMode__I,
  &DC_method_getBrush__LRBrush_,
  &DC_method_getCharHeight__I,
  &DC_method_getCharWidth__I,
  &DC_method_getClippingBox_OUTIOUTIOUTIOUTI_V,
  &DC_method_getClippingBox_INLRRect__V,
  &DC_method_getDepth__I,
  &DC_method_getDeviceOrigin_OUTIOUTI_V,
  &DC_method_getDeviceOrigin__LRPoint_,
  &DC_method_getFont__LRFont_,
  &DC_method_getLogicalFunction__I,
  &DC_method_getLogicalOrigin_OUTIOUTI_V,
  &DC_method_getLogicalOrigin__LRPoint_,
  &DC_method_getLogicalScale_OUTDOUTD_V,
  &DC_method_getMapMode__I,
  &DC_method_getPPI__LRSize_,
  &DC_method_getPen__LRPen_,
  &DC_method_getPixel_IIOUTLRColour__Z,
  &DC_method_getPixel_INLRPoint_INLRColour__Z,
  &DC_method_getSize_OUTIOUTI_V,
  &DC_method_getSize__LRSize_,
  &DC_method_getSizeMM_OUTIOUTI_V,
  &DC_method_getSizeMM__LRSize_,
  &DC_method_getTextBackground__LRColour_,
  &DC_method_getTextForeground__LRColour_,
  &DC_method_getUserScale_OUTDOUTD_V,
  &DC_method_logicalToDeviceX_I_I,
  &DC_method_logicalToDeviceXRel_I_I,
  &DC_method_logicalToDeviceY_I_I,
  &DC_method_logicalToDeviceYRel_I_I,
  &DC_method_maxX__I,
  &DC_method_maxY__I,
  &DC_method_minX__I,
  &DC_method_minY__I,
  &DC_method_ok__Z,
  &DC_method_resetBoundingBox__V,
  &DC_method_setAxisOrientation_ZZ_V,
  &DC_method_setBackground_INLRBrush__V,
  &DC_method_setBackgroundMode_I_V,
  &DC_method_setBrush_INLRBrush__V,
  &DC_method_setClippingRegion_IIII_V,
  &DC_method_setClippingRegion_INLRRegion__V,
  &DC_method_setClippingRegion_INLRPoint_INLRSize__V,
  &DC_method_setClippingRegion_INLRRect__V,
  &DC_method_setDeviceOrigin_II_V,
  &DC_method_setFont_INLRFont__V,
  &DC_method_setLogicalFunction_I_V,
  &DC_method_setLogicalOrigin_II_V,
  &DC_method_setLogicalScale_DD_V,
  &DC_method_setMapMode_I_V,
  &DC_method_setPen_INLRPen__V,
  &DC_method_setTextBackground_INLRColour__V,
  &DC_method_setTextForeground_INLRColour__V,
  &DC_method_setUserScale_DD_V,
  &DC_method_startDoc_INLRString__Z,
  &DC_method_startPage__V,
  0
};


struct DC_MetaInfoInitializer
{  DC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DC::clazzInfo();
    ci->fields =  _DC_fields;
    ci->methods =  _DC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DC_MetaInfoInitializer DC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
PaintEvent_create_array(int length)
{
  return new ObjectArrayImpl<RPaintEvent>(length);
}

//static
::acdk::lang::RObject
PaintEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PaintEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PaintEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintEvent_method_PaintEvent_I_LRPaintEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PaintEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintEvent_method_PaintEvent__LRPaintEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PaintEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintEvent_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PaintEvent* This = dmi_cast<PaintEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PaintEvent::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PaintEvent_fields_EvtNcPaint_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(PaintEvent::EvtNcPaint, flags);
    else
      PaintEvent::EvtNcPaint = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PaintEvent_fields_EvtPaint_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(PaintEvent::EvtPaint, flags);
    else
      PaintEvent::EvtPaint = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PaintEvent_fields_EvtPaintIcon_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(PaintEvent::EvtPaintIcon, flags);
    else
      PaintEvent::EvtPaintIcon = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PaintEvent_fields_EvtNcPaint = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtNcPaint", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PaintEvent_MetainfoWrapper::PaintEvent_fields_EvtNcPaint_accessor, // read/write access to this fields
  (void*)&PaintEvent::EvtNcPaint // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PaintEvent_fields_EvtPaint = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtPaint", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PaintEvent_MetainfoWrapper::PaintEvent_fields_EvtPaint_accessor, // read/write access to this fields
  (void*)&PaintEvent::EvtPaint // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PaintEvent_fields_EvtPaintIcon = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtPaintIcon", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PaintEvent_MetainfoWrapper::PaintEvent_fields_EvtPaintIcon_accessor, // read/write access to this fields
  (void*)&PaintEvent::EvtPaintIcon // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PaintEvent_fields[] = 
{
  &PaintEvent_fields_EvtNcPaint,
  &PaintEvent_fields_EvtPaint,
  &PaintEvent_fields_EvtPaintIcon,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PaintEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PaintEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PaintEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PaintEvent_MetainfoWrapper::PaintEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PaintEvent_methods_PaintEvent_I_LRPaintEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintEvent_methods_PaintEvent_I_LRPaintEvent__args[] = 
{
  &PaintEvent_methods_PaintEvent_I_LRPaintEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* PaintEvent_methods_PaintEvent_I_LRPaintEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintEvent_method_PaintEvent_I_LRPaintEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PaintEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PaintEvent::clazzInfo(), // return type
  "_0_PaintEvent", // alternative name of method
  -1, // altlabelHashCode
  PaintEvent_methods_PaintEvent_I_LRPaintEvent__args, // the arguments
  0, //arguments count
  PaintEvent_methods_PaintEvent_I_LRPaintEvent__exceptions, // the declared exceptions
  PaintEvent_MetainfoWrapper::PaintEvent_method_PaintEvent_I_LRPaintEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintEvent_methods_PaintEvent__LRPaintEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PaintEvent_methods_PaintEvent__LRPaintEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintEvent_method_PaintEvent__LRPaintEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "PaintEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PaintEvent::clazzInfo(), // return type
  "_1_PaintEvent", // alternative name of method
  -1, // altlabelHashCode
  PaintEvent_methods_PaintEvent__LRPaintEvent__args, // the arguments
  0, //arguments count
  PaintEvent_methods_PaintEvent__LRPaintEvent__exceptions, // the declared exceptions
  PaintEvent_MetainfoWrapper::PaintEvent_method_PaintEvent__LRPaintEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintEvent_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PaintEvent_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintEvent_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_clone", // alternative name of method
  -1, // altlabelHashCode
  PaintEvent_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  PaintEvent_methods_clone__LRObject__exceptions, // the declared exceptions
  PaintEvent_MetainfoWrapper::PaintEvent_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PaintEvent_methods[] = 
{
  &PaintEvent_method_GetClass__L_acdk_lang_RClass_,
  &PaintEvent_method_PaintEvent_I_LRPaintEvent_,
  &PaintEvent_method_PaintEvent__LRPaintEvent_,
  &PaintEvent_method_clone__LRObject_,
  0
};


struct PaintEvent_MetaInfoInitializer
{  PaintEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PaintEvent::clazzInfo();
    ci->fields =  _PaintEvent_fields;
    ci->methods =  _PaintEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PaintEvent_MetaInfoInitializer PaintEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
EraseEvent_create_array(int length)
{
  return new ObjectArrayImpl<REraseEvent>(length);
}

//static
::acdk::lang::RObject
EraseEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EraseEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EraseEvent_method_EraseEvent_IINLRDC__LREraseEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EraseEvent(args[0].getIntVar(), (RDC)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EraseEvent_method_EraseEvent__LREraseEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EraseEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EraseEvent_method_EraseEvent_I_LREraseEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EraseEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EraseEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EraseEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EraseEvent_method_getDC__LRDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EraseEvent* This = dmi_cast<EraseEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EraseEvent::getDC();
    else
        ret = (::acdk::lang::RObject)This->getDC();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  EraseEvent_fields_EvtEraseBackground_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(EraseEvent::EvtEraseBackground, flags);
    else
      EraseEvent::EvtEraseBackground = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo EraseEvent_fields_EvtEraseBackground = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtEraseBackground", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  EraseEvent_MetainfoWrapper::EraseEvent_fields_EvtEraseBackground_accessor, // read/write access to this fields
  (void*)&EraseEvent::EvtEraseBackground // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _EraseEvent_fields[] = 
{
  &EraseEvent_fields_EvtEraseBackground,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__arg_dc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__args[] = 
{
  &EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__arg_id,
  &EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__arg_dc,
  0
};

::acdk::lang::dmi::ClazzInfo* EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EraseEvent_method_EraseEvent_IINLRDC__LREraseEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EraseEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EraseEvent::clazzInfo(), // return type
  "_0_EraseEvent", // alternative name of method
  -1, // altlabelHashCode
  EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__args, // the arguments
  0, //arguments count
  EraseEvent_methods_EraseEvent_IINLRDC__LREraseEvent__exceptions, // the declared exceptions
  EraseEvent_MetainfoWrapper::EraseEvent_method_EraseEvent_IINLRDC__LREraseEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EraseEvent_methods_EraseEvent__LREraseEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EraseEvent_methods_EraseEvent__LREraseEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EraseEvent_method_EraseEvent__LREraseEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "EraseEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EraseEvent::clazzInfo(), // return type
  "_1_EraseEvent", // alternative name of method
  -1, // altlabelHashCode
  EraseEvent_methods_EraseEvent__LREraseEvent__args, // the arguments
  0, //arguments count
  EraseEvent_methods_EraseEvent__LREraseEvent__exceptions, // the declared exceptions
  EraseEvent_MetainfoWrapper::EraseEvent_method_EraseEvent__LREraseEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EraseEvent_methods_EraseEvent_I_LREraseEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EraseEvent_methods_EraseEvent_I_LREraseEvent__args[] = 
{
  &EraseEvent_methods_EraseEvent_I_LREraseEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* EraseEvent_methods_EraseEvent_I_LREraseEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EraseEvent_method_EraseEvent_I_LREraseEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "EraseEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EraseEvent::clazzInfo(), // return type
  "_2_EraseEvent", // alternative name of method
  -1, // altlabelHashCode
  EraseEvent_methods_EraseEvent_I_LREraseEvent__args, // the arguments
  0, //arguments count
  EraseEvent_methods_EraseEvent_I_LREraseEvent__exceptions, // the declared exceptions
  EraseEvent_MetainfoWrapper::EraseEvent_method_EraseEvent_I_LREraseEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EraseEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EraseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EraseEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EraseEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EraseEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EraseEvent_MetainfoWrapper::EraseEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EraseEvent_methods_getDC__LRDC__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EraseEvent_methods_getDC__LRDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EraseEvent_method_getDC__LRDC_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDC::clazzInfo(), // return type
  "_3_getDC", // alternative name of method
  -1, // altlabelHashCode
  EraseEvent_methods_getDC__LRDC__args, // the arguments
  0, //arguments count
  EraseEvent_methods_getDC__LRDC__exceptions, // the declared exceptions
  EraseEvent_MetainfoWrapper::EraseEvent_method_getDC__LRDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EraseEvent_methods[] = 
{
  &EraseEvent_method_EraseEvent_IINLRDC__LREraseEvent_,
  &EraseEvent_method_EraseEvent__LREraseEvent_,
  &EraseEvent_method_EraseEvent_I_LREraseEvent_,
  &EraseEvent_method_GetClass__L_acdk_lang_RClass_,
  &EraseEvent_method_getDC__LRDC_,
  0
};


struct EraseEvent_MetaInfoInitializer
{  EraseEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EraseEvent::clazzInfo();
    ci->fields =  _EraseEvent_fields;
    ci->methods =  _EraseEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EraseEvent_MetaInfoInitializer EraseEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Dialog_create_array(int length)
{
  return new ObjectArrayImpl<RDialog>(length);
}

//static
::acdk::lang::RObject
Dialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Dialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog_INLRWindow_IINLRString__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Dialog((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Dialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_endModal_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dialog* This = dmi_cast<Dialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Dialog::endModal(args[0].getIntVar());
    else
        This->endModal(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_isModal__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dialog* This = dmi_cast<Dialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Dialog::isModal();
    else
      ret = This->isModal();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dialog* This = dmi_cast<Dialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Dialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Dialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog__LRDialog__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_0_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog__LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog__LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__args[] = 
{
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_parent,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_id,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_title,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_pos,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_size,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_style,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_1_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__args[] = 
{
  &Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_parent,
  &Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_id,
  &Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog_INLRWindow_IINLRString__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_2_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog_INLRWindow_IINLRString__LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog_INLRWindow_IINLRString__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__args[] = 
{
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_parent,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_id,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_title,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_3_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__args[] = 
{
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_parent,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_id,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_title,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_pos,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_4_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__args[] = 
{
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_parent,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_id,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_title,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_pos,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_size,
  &Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Dialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dialog::clazzInfo(), // return type
  "_5_Dialog", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__args, // the arguments
  0, //arguments count
  Dialog_methods_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Dialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dialog_methods_endModal_I_V_arg_retCode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "retCode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_endModal_I_V_args[] = 
{
  &Dialog_methods_endModal_I_V_arg_retCode,
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_endModal_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_endModal_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_endModal", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_endModal_I_V_args, // the arguments
  0, //arguments count
  Dialog_methods_endModal_I_V_exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_endModal_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_isModal__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_isModal__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_isModal__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isModal", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_isModal__Z_args, // the arguments
  0, //arguments count
  Dialog_methods_isModal__Z_exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_isModal__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_showModal", // alternative name of method
  -1, // altlabelHashCode
  Dialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  Dialog_methods_showModal__I_exceptions, // the declared exceptions
  Dialog_MetainfoWrapper::Dialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Dialog_methods[] = 
{
  &Dialog_method_Dialog__LRDialog_,
  &Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRDialog_,
  &Dialog_method_Dialog_INLRWindow_IINLRString__LRDialog_,
  &Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint__LRDialog_,
  &Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize__LRDialog_,
  &Dialog_method_Dialog_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRDialog_,
  &Dialog_method_GetClass__L_acdk_lang_RClass_,
  &Dialog_method_endModal_I_V,
  &Dialog_method_isModal__Z,
  &Dialog_method_showModal__I,
  0
};


struct Dialog_MetaInfoInitializer
{  Dialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Dialog::clazzInfo();
    ci->fields =  _Dialog_fields;
    ci->methods =  _Dialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Dialog_MetaInfoInitializer Dialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
DirDialog_create_array(int length)
{
  return new ObjectArrayImpl<RDirDialog>(length);
}

//static
::acdk::lang::RObject
DirDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DirDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), (RPoint)args[4].getObjectVar(), (RSize)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_DirDialog_INLRWindow_INLRString__LRDirDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), (RPoint)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DirDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DirDialog::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DirDialog::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DirDialog::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_setMessage_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DirDialog::setMessage((RString)args[0].getObjectVar());
    else
        This->setMessage((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_setPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DirDialog::setPath((RString)args[0].getObjectVar());
    else
        This->setPath((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_setStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DirDialog::setStyle(args[0].getIntVar());
    else
        This->setStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirDialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirDialog* This = dmi_cast<DirDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DirDialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DirDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_defaultPath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultPath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__args[] = 
{
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_parent,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_message,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_defaultPath,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_style,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_pos,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DirDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirDialog::clazzInfo(), // return type
  "_0_DirDialog", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__args, // the arguments
  0, //arguments count
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__args[] = 
{
  &DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__arg_parent,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_DirDialog_INLRWindow_INLRString__LRDirDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DirDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirDialog::clazzInfo(), // return type
  "_1_DirDialog", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__args, // the arguments
  0, //arguments count
  DirDialog_methods_DirDialog_INLRWindow_INLRString__LRDirDialog__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_DirDialog_INLRWindow_INLRString__LRDirDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_defaultPath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultPath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__args[] = 
{
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_parent,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_message,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__arg_defaultPath,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DirDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirDialog::clazzInfo(), // return type
  "_2_DirDialog", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__args, // the arguments
  0, //arguments count
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_defaultPath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultPath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__args[] = 
{
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_parent,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_message,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_defaultPath,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DirDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirDialog::clazzInfo(), // return type
  "_3_DirDialog", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__args, // the arguments
  0, //arguments count
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_defaultPath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultPath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__args[] = 
{
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_parent,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_message,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_defaultPath,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_style,
  &DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DirDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirDialog::clazzInfo(), // return type
  "_4_DirDialog", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__args, // the arguments
  0, //arguments count
  DirDialog_methods_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DirDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getMessage", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  DirDialog_methods_getMessage__LRString__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getPath", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  DirDialog_methods_getPath__LRString__exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getStyle", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_getStyle__I_args, // the arguments
  0, //arguments count
  DirDialog_methods_getStyle__I_exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_setMessage_INLRString__V_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_setMessage_INLRString__V_args[] = 
{
  &DirDialog_methods_setMessage_INLRString__V_arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_setMessage_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_setMessage_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setMessage", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_setMessage_INLRString__V_args, // the arguments
  0, //arguments count
  DirDialog_methods_setMessage_INLRString__V_exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_setMessage_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_setPath_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_setPath_INLRString__V_args[] = 
{
  &DirDialog_methods_setPath_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_setPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_setPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setPath", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_setPath_INLRString__V_args, // the arguments
  0, //arguments count
  DirDialog_methods_setPath_INLRString__V_exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_setPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirDialog_methods_setStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_setStyle_I_V_args[] = 
{
  &DirDialog_methods_setStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_setStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_setStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setStyle", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_setStyle_I_V_args, // the arguments
  0, //arguments count
  DirDialog_methods_setStyle_I_V_exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_setStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirDialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirDialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirDialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_showModal", // alternative name of method
  -1, // altlabelHashCode
  DirDialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  DirDialog_methods_showModal__I_exceptions, // the declared exceptions
  DirDialog_MetainfoWrapper::DirDialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DirDialog_methods[] = 
{
  &DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint_INLRSize__LRDirDialog_,
  &DirDialog_method_DirDialog_INLRWindow_INLRString__LRDirDialog_,
  &DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString__LRDirDialog_,
  &DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_I_LRDirDialog_,
  &DirDialog_method_DirDialog_INLRWindow_INLRString_INLRString_IINLRPoint__LRDirDialog_,
  &DirDialog_method_GetClass__L_acdk_lang_RClass_,
  &DirDialog_method_getMessage__LRString_,
  &DirDialog_method_getPath__LRString_,
  &DirDialog_method_getStyle__I,
  &DirDialog_method_setMessage_INLRString__V,
  &DirDialog_method_setPath_INLRString__V,
  &DirDialog_method_setStyle_I_V,
  &DirDialog_method_showModal__I,
  0
};


struct DirDialog_MetaInfoInitializer
{  DirDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DirDialog::clazzInfo();
    ci->fields =  _DirDialog_fields;
    ci->methods =  _DirDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DirDialog_MetaInfoInitializer DirDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

