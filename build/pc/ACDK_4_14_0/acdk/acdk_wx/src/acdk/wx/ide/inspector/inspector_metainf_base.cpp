// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "CfgScriptConsole.h"
#include "ClassTreeCtrl.h"
#include "inspector.h"
#include "ObjectTreeCtrl.h"

namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 

::acdk::lang::dmi::ClazzSuperInfo _CfgScriptConsole_super_TextCtrl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TextCtrl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CfgScriptConsole_interfaces[] =
{
  &_CfgScriptConsole_super_TextCtrl,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptConsole::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CfgScriptConsole", // name of class
  -1, // hashCode
  "acdk/wx/ide/inspector", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CfgScriptConsole_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CfgScriptConsole::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CfgScriptConsole(CfgScriptConsole::clazzInfo());

::acdk::lang::RClass
CfgScriptConsole::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CfgScriptConsole::getCollectableFields(FieldReferences& fields)
{
  TextCtrl::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_props._ref_this()); // RObject _props 
  fields.push_back((::acdk::lang::RObject*)this->_script._ref_this()); // RObject _script 
}


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 


::acdk::lang::dmi::ClazzEnumValueInfo ClassTreeFilterFlags_ClassTreeFilterAll = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ClassTreeFilterAll", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::wx::ide::inspector::ClassTreeFilterAll, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ClassTreeFilterFlags_enumValues[] = {
  &ClassTreeFilterFlags_ClassTreeFilterAll,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ClassTreeFilterFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ClassTreeFilterFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ClassTreeFilterFlags", // name
  -1, // hashCode
  "acdk/wx/ide/inspector", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassTreeFilterFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ClassTreeFilterFlags(&ClassTreeFilterFlags_enumInfo);

  return &ClassTreeFilterFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ClassTreeFilterFlagsEnumInfo(ClassTreeFilterFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 

::acdk::lang::dmi::ClazzSuperInfo _ClassTreeCtrl_super_TreeCtrl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeCtrl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassTreeCtrl_interfaces[] =
{
  &_ClassTreeCtrl_super_TreeCtrl,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassTreeCtrl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ClassTreeCtrl", // name of class
  -1, // hashCode
  "acdk/wx/ide/inspector", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ClassTreeCtrl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ClassTreeCtrl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassTreeCtrl(ClassTreeCtrl::clazzInfo());

::acdk::lang::RClass
ClassTreeCtrl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ClassTreeCtrl::getCollectableFields(FieldReferences& fields)
{
  TreeCtrl::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filter._ref_this()); // RString _filter 
  fields.push_back((::acdk::lang::RObject*)this->_overViewTextCtrl._ref_this()); // RTextCtrl _overViewTextCtrl 
}


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 


::acdk::lang::dmi::ClazzEnumValueInfo ObjectFilterFlags_ObjectFilterCurrent = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ObjectFilterCurrent", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::wx::ide::inspector::ObjectFilterCurrent, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ObjectFilterFlags_ObjectFilterRootsOnly = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ObjectFilterRootsOnly", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::wx::ide::inspector::ObjectFilterRootsOnly, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ObjectFilterFlags_ObjectFilterAllObjects = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ObjectFilterAllObjects", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::wx::ide::inspector::ObjectFilterAllObjects, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ObjectFilterFlags_ObjectFilterGcAble = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ObjectFilterGcAble", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::wx::ide::inspector::ObjectFilterGcAble, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ObjectFilterFlags_enumValues[] = {
  &ObjectFilterFlags_ObjectFilterCurrent,
  &ObjectFilterFlags_ObjectFilterRootsOnly,
  &ObjectFilterFlags_ObjectFilterAllObjects,
  &ObjectFilterFlags_ObjectFilterGcAble,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ObjectFilterFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ObjectFilterFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ObjectFilterFlags", // name
  -1, // hashCode
  "acdk/wx/ide/inspector", // ns
  0, // _scopeParent
  0, // _nextSibling
  ObjectFilterFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ObjectFilterFlags(&ObjectFilterFlags_enumInfo);

  return &ObjectFilterFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ObjectFilterFlagsEnumInfo(ObjectFilterFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector


namespace acdk { 
namespace wx { 
namespace ide { 
namespace inspector { 

::acdk::lang::dmi::ClazzSuperInfo _ObjectTreeCtrl_super_TreeCtrl =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TreeCtrl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectTreeCtrl_interfaces[] =
{
  &_ObjectTreeCtrl_super_TreeCtrl,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectTreeCtrl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ObjectTreeCtrl", // name of class
  -1, // hashCode
  "acdk/wx/ide/inspector", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectTreeCtrl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectTreeCtrl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectTreeCtrl(ObjectTreeCtrl::clazzInfo());

::acdk::lang::RClass
ObjectTreeCtrl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectTreeCtrl::getCollectableFields(FieldReferences& fields)
{
  TreeCtrl::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filter._ref_this()); // RString _filter 
  fields.push_back((::acdk::lang::RObject*)this->_overViewTextCtrl._ref_this()); // RTextCtrl _overViewTextCtrl 
}


} // namespace acdk
} // namespace wx
} // namespace ide
} // namespace inspector

