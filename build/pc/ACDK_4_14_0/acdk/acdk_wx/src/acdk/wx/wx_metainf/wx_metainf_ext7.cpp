// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextCtrlCharWriter_create_array(int length)
{
  return new ObjectArrayImpl<RTextCtrlCharWriter>(length);
}

//static
::acdk::lang::RObject
TextCtrlCharWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextCtrlCharWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextCtrlCharWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrlCharWriter((RTextCtrl)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrlCharWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrlCharWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrlCharWriter::writeChar(args[0].getCharVar());
    else
        This->writeChar(args[0].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrlCharWriter::writeChar(args[0].getUcCharVar());
    else
        This->writeChar(args[0].getUcCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrlCharWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrlCharWriter::writeString((RString)args[0].getObjectVar());
    else
        This->writeString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TextCtrlCharWriter_fields__textCtrl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TextCtrlCharWriter* This = dmi_cast<TextCtrlCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_textCtrl, flags);
    else
      This->_textCtrl = (RTextCtrl)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TextCtrlCharWriter_fields__textCtrl = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_textCtrl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo(),
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_fields__textCtrl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TextCtrlCharWriter_fields[] = 
{
  &TextCtrlCharWriter_fields__textCtrl,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__arg_textCtrl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "textCtrl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextCtrl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__args[] = 
{
  &TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__arg_textCtrl,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrlCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrlCharWriter::clazzInfo(), // return type
  "_0_TextCtrlCharWriter", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_close__V_args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_close__V_exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_flush", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_flush__V_exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrlCharWriter_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_writeChar_C_V_args[] = 
{
  &TextCtrlCharWriter_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrlCharWriter_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_writeChar_UC_V_args[] = 
{
  &TextCtrlCharWriter_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_writeChar_UC_V_exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrlCharWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrlCharWriter_methods_writeString_INLRString__V_args[] = 
{
  &TextCtrlCharWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrlCharWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrlCharWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_writeString", // alternative name of method
  -1, // altlabelHashCode
  TextCtrlCharWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  TextCtrlCharWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  TextCtrlCharWriter_MetainfoWrapper::TextCtrlCharWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextCtrlCharWriter_methods[] = 
{
  &TextCtrlCharWriter_method_GetClass__L_acdk_lang_RClass_,
  &TextCtrlCharWriter_method_TextCtrlCharWriter_INLRTextCtrl__LRTextCtrlCharWriter_,
  &TextCtrlCharWriter_method_close__V,
  &TextCtrlCharWriter_method_flush__V,
  &TextCtrlCharWriter_method_writeChar_C_V,
  &TextCtrlCharWriter_method_writeChar_UC_V,
  &TextCtrlCharWriter_method_writeString_INLRString__V,
  0
};


struct TextCtrlCharWriter_MetaInfoInitializer
{  TextCtrlCharWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextCtrlCharWriter::clazzInfo();
    ci->fields =  _TextCtrlCharWriter_fields;
    ci->methods =  _TextCtrlCharWriter_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextCtrlCharWriter_MetaInfoInitializer TextCtrlCharWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextDataObject_create_array(int length)
{
  return new ObjectArrayImpl<RTextDataObject>(length);
}

//static
::acdk::lang::RObject
TextDataObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextDataObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextDataObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_TextDataObject_INLRString__LRTextDataObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextDataObject((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_TextDataObject__LRTextDataObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextDataObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_getText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDataObject* This = dmi_cast<TextDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TextDataObject::getText();
    else
        ret = (::acdk::lang::RObject)This->getText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_getTextLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDataObject* This = dmi_cast<TextDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextDataObject::getTextLength();
    else
      ret = This->getTextLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDataObject_method_setText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDataObject* This = dmi_cast<TextDataObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextDataObject::setText((RString)args[0].getObjectVar());
    else
        This->setText((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TextDataObject_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextDataObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__args[] = 
{
  &TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_TextDataObject_INLRString__LRTextDataObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextDataObject::clazzInfo(), // return type
  "_0_TextDataObject", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__args, // the arguments
  0, //arguments count
  TextDataObject_methods_TextDataObject_INLRString__LRTextDataObject__exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_TextDataObject_INLRString__LRTextDataObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_TextDataObject__LRTextDataObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_TextDataObject__LRTextDataObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_TextDataObject__LRTextDataObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextDataObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextDataObject::clazzInfo(), // return type
  "_1_TextDataObject", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_TextDataObject__LRTextDataObject__args, // the arguments
  0, //arguments count
  TextDataObject_methods_TextDataObject__LRTextDataObject__exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_TextDataObject__LRTextDataObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_getText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_getText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_getText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getText", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_getText__LRString__args, // the arguments
  0, //arguments count
  TextDataObject_methods_getText__LRString__exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_getText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_getTextLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_getTextLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_getTextLength__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTextLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getTextLength", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_getTextLength__I_args, // the arguments
  0, //arguments count
  TextDataObject_methods_getTextLength__I_exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_getTextLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDataObject_methods_setText_INLRString__V_arg_strText = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "strText", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDataObject_methods_setText_INLRString__V_args[] = 
{
  &TextDataObject_methods_setText_INLRString__V_arg_strText,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDataObject_methods_setText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDataObject_method_setText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setText", // alternative name of method
  -1, // altlabelHashCode
  TextDataObject_methods_setText_INLRString__V_args, // the arguments
  0, //arguments count
  TextDataObject_methods_setText_INLRString__V_exceptions, // the declared exceptions
  TextDataObject_MetainfoWrapper::TextDataObject_method_setText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextDataObject_methods[] = 
{
  &TextDataObject_method_GetClass__L_acdk_lang_RClass_,
  &TextDataObject_method_TextDataObject_INLRString__LRTextDataObject_,
  &TextDataObject_method_TextDataObject__LRTextDataObject_,
  &TextDataObject_method_getText__LRString_,
  &TextDataObject_method_getTextLength__I,
  &TextDataObject_method_setText_INLRString__V,
  0
};


struct TextDataObject_MetaInfoInitializer
{  TextDataObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextDataObject::clazzInfo();
    ci->fields =  _TextDataObject_fields;
    ci->methods =  _TextDataObject_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextDataObject_MetaInfoInitializer TextDataObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextDropTarget_create_array(int length)
{
  return new ObjectArrayImpl<RTextDropTarget>(length);
}

//static
::acdk::lang::RObject
TextDropTarget_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextDropTarget_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextDropTarget::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_TextDropTarget__LRTextDropTarget__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextDropTarget();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_getData__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextDropTarget::getData();
    else
      ret = This->getData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onData_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->TextDropTarget::onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onData(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onDragOver_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->TextDropTarget::onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onDragOver(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onDrop_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextDropTarget::onDrop(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->onDrop(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onDropText_IIINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextDropTarget::onDropText(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
      ret = This->onDropText(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onEnter_III_LDragResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DragResult)This->TextDropTarget::onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    else
      ret = (DragResult)This->onEnter(args[0].getIntVar(), args[1].getIntVar(), (DragResult)args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextDropTarget_method_onLeave__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextDropTarget* This = dmi_cast<TextDropTarget>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextDropTarget::onLeave();
    else
        This->onLeave();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TextDropTarget_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextDropTarget_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_TextDropTarget__LRTextDropTarget__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_TextDropTarget__LRTextDropTarget__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_TextDropTarget__LRTextDropTarget_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextDropTarget", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextDropTarget::clazzInfo(), // return type
  "_0_TextDropTarget", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_TextDropTarget__LRTextDropTarget__args, // the arguments
  0, //arguments count
  TextDropTarget_methods_TextDropTarget__LRTextDropTarget__exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_TextDropTarget__LRTextDropTarget__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_getData__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_getData__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_getData__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getData", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_getData__Z_args, // the arguments
  0, //arguments count
  TextDropTarget_methods_getData__Z_exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_getData__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onData_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onData_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onData_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onData_III_LDragResult__args[] = 
{
  &TextDropTarget_methods_onData_III_LDragResult__arg_x,
  &TextDropTarget_methods_onData_III_LDragResult__arg_y,
  &TextDropTarget_methods_onData_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onData_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onData_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_onData", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onData_III_LDragResult__args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onData_III_LDragResult__exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onData_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDragOver_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDragOver_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDragOver_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onDragOver_III_LDragResult__args[] = 
{
  &TextDropTarget_methods_onDragOver_III_LDragResult__arg_x,
  &TextDropTarget_methods_onDragOver_III_LDragResult__arg_y,
  &TextDropTarget_methods_onDragOver_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onDragOver_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onDragOver_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDragOver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_onDragOver", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onDragOver_III_LDragResult__args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onDragOver_III_LDragResult__exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onDragOver_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDrop_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDrop_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onDrop_II_Z_args[] = 
{
  &TextDropTarget_methods_onDrop_II_Z_arg_x,
  &TextDropTarget_methods_onDrop_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onDrop_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onDrop_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDrop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_onDrop", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onDrop_II_Z_args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onDrop_II_Z_exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onDrop_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDropText_IIINLRString__Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDropText_IIINLRString__Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onDropText_IIINLRString__Z_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onDropText_IIINLRString__Z_args[] = 
{
  &TextDropTarget_methods_onDropText_IIINLRString__Z_arg_x,
  &TextDropTarget_methods_onDropText_IIINLRString__Z_arg_y,
  &TextDropTarget_methods_onDropText_IIINLRString__Z_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onDropText_IIINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onDropText_IIINLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDropText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_onDropText", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onDropText_IIINLRString__Z_args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onDropText_IIINLRString__Z_exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onDropText_IIINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onEnter_III_LDragResult__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onEnter_III_LDragResult__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextDropTarget_methods_onEnter_III_LDragResult__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onEnter_III_LDragResult__args[] = 
{
  &TextDropTarget_methods_onEnter_III_LDragResult__arg_x,
  &TextDropTarget_methods_onEnter_III_LDragResult__arg_y,
  &TextDropTarget_methods_onEnter_III_LDragResult__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onEnter_III_LDragResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onEnter_III_LDragResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onEnter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_onEnter", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onEnter_III_LDragResult__args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onEnter_III_LDragResult__exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onEnter_III_LDragResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextDropTarget_methods_onLeave__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextDropTarget_methods_onLeave__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextDropTarget_method_onLeave__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onLeave", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_onLeave", // alternative name of method
  -1, // altlabelHashCode
  TextDropTarget_methods_onLeave__V_args, // the arguments
  0, //arguments count
  TextDropTarget_methods_onLeave__V_exceptions, // the declared exceptions
  TextDropTarget_MetainfoWrapper::TextDropTarget_method_onLeave__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextDropTarget_methods[] = 
{
  &TextDropTarget_method_GetClass__L_acdk_lang_RClass_,
  &TextDropTarget_method_TextDropTarget__LRTextDropTarget_,
  &TextDropTarget_method_getData__Z,
  &TextDropTarget_method_onData_III_LDragResult_,
  &TextDropTarget_method_onDragOver_III_LDragResult_,
  &TextDropTarget_method_onDrop_II_Z,
  &TextDropTarget_method_onDropText_IIINLRString__Z,
  &TextDropTarget_method_onEnter_III_LDragResult_,
  &TextDropTarget_method_onLeave__V,
  0
};


struct TextDropTarget_MetaInfoInitializer
{  TextDropTarget_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextDropTarget::clazzInfo();
    ci->fields =  _TextDropTarget_fields;
    ci->methods =  _TextDropTarget_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextDropTarget_MetaInfoInitializer TextDropTarget_MetaInfoInitializer_staticinstance__;


struct TextDropTarget_clazzInfo_ClazzAttributesResInitializer13
{
  TextDropTarget_clazzInfo_ClazzAttributesResInitializer13()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_methods_onEnter_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_method_onEnter_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_methods_onDragOver_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_method_onDragOver_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_methods_onData_III_LDragResult__arg_def, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TextDropTarget_method_onData_III_LDragResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DragResultMetaInf::GetEnumInfo()));
  }
};

TextDropTarget_clazzInfo_ClazzAttributesResInitializer13 TextDropTarget_clazzInfo_ClazzAttributesResInitializer13_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextEntryDialog_create_array(int length)
{
  return new ObjectArrayImpl<RTextEntryDialog>(length);
}

//static
::acdk::lang::RObject
TextEntryDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextEntryDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextEntryDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextEntryDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextEntryDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextEntryDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextEntryDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextEntryDialog((RWindow)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_getValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextEntryDialog* This = dmi_cast<TextEntryDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TextEntryDialog::getValue();
    else
        ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextEntryDialog* This = dmi_cast<TextEntryDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextEntryDialog::setValue((RString)args[0].getObjectVar());
    else
        This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextEntryDialog_method_showModal__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextEntryDialog* This = dmi_cast<TextEntryDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextEntryDialog::showModal();
    else
      ret = This->showModal();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TextEntryDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_defaultValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__args[] = 
{
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_parent,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_message,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_caption,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_defaultValue,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_style,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextEntryDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextEntryDialog::clazzInfo(), // return type
  "_0_TextEntryDialog", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__args[] = 
{
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__arg_parent,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextEntryDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextEntryDialog::clazzInfo(), // return type
  "_1_TextEntryDialog", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__args[] = 
{
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_parent,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_message,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__arg_caption,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextEntryDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextEntryDialog::clazzInfo(), // return type
  "_2_TextEntryDialog", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_defaultValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__args[] = 
{
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_parent,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_message,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_caption,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__arg_defaultValue,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextEntryDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextEntryDialog::clazzInfo(), // return type
  "_3_TextEntryDialog", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_caption = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "caption", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_defaultValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__args[] = 
{
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_parent,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_message,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_caption,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_defaultValue,
  &TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextEntryDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextEntryDialog::clazzInfo(), // return type
  "_4_TextEntryDialog", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_getValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_getValue__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_getValue__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_getValue__LRString__args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_getValue__LRString__exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_getValue__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextEntryDialog_methods_setValue_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_setValue_INLRString__V_args[] = 
{
  &TextEntryDialog_methods_setValue_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setValue", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextEntryDialog_methods_showModal__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextEntryDialog_methods_showModal__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextEntryDialog_method_showModal__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showModal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_showModal", // alternative name of method
  -1, // altlabelHashCode
  TextEntryDialog_methods_showModal__I_args, // the arguments
  0, //arguments count
  TextEntryDialog_methods_showModal__I_exceptions, // the declared exceptions
  TextEntryDialog_MetainfoWrapper::TextEntryDialog_method_showModal__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextEntryDialog_methods[] = 
{
  &TextEntryDialog_method_GetClass__L_acdk_lang_RClass_,
  &TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_IINLRPoint__LRTextEntryDialog_,
  &TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString__LRTextEntryDialog_,
  &TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString__LRTextEntryDialog_,
  &TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString__LRTextEntryDialog_,
  &TextEntryDialog_method_TextEntryDialog_INLRWindow_INLRString_INLRString_INLRString_I_LRTextEntryDialog_,
  &TextEntryDialog_method_getValue__LRString_,
  &TextEntryDialog_method_setValue_INLRString__V,
  &TextEntryDialog_method_showModal__I,
  0
};


struct TextEntryDialog_MetaInfoInitializer
{  TextEntryDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextEntryDialog::clazzInfo();
    ci->fields =  _TextEntryDialog_fields;
    ci->methods =  _TextEntryDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextEntryDialog_MetaInfoInitializer TextEntryDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TimerEvent_create_array(int length)
{
  return new ObjectArrayImpl<RTimerEvent>(length);
}

//static
::acdk::lang::RObject
TimerEvent_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TimerEvent_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimerEvent_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimerEvent::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimerEvent_method_TimerEvent_II_LRTimerEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TimerEvent(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimerEvent_method_TimerEvent__LRTimerEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TimerEvent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimerEvent_method_TimerEvent_I_LRTimerEvent__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TimerEvent(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimerEvent_method_getInterval__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimerEvent* This = dmi_cast<TimerEvent>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TimerEvent::getInterval();
    else
      ret = This->getInterval();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimerEvent_fields_EvtTimer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimerEvent::EvtTimer, flags);
    else
      TimerEvent::EvtTimer = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TimerEvent_fields_EvtTimer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "EvtTimer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TimerEvent_MetainfoWrapper::TimerEvent_fields_EvtTimer_accessor, // read/write access to this fields
  (void*)&TimerEvent::EvtTimer // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TimerEvent_fields[] = 
{
  &TimerEvent_fields_EvtTimer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TimerEvent_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TimerEvent_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TimerEvent_MetainfoWrapper::TimerEvent_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_methods_TimerEvent_II_LRTimerEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_methods_TimerEvent_II_LRTimerEvent__arg_interval = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "interval", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods_TimerEvent_II_LRTimerEvent__args[] = 
{
  &TimerEvent_methods_TimerEvent_II_LRTimerEvent__arg_id,
  &TimerEvent_methods_TimerEvent_II_LRTimerEvent__arg_interval,
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_methods_TimerEvent_II_LRTimerEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_method_TimerEvent_II_LRTimerEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TimerEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TimerEvent::clazzInfo(), // return type
  "_0_TimerEvent", // alternative name of method
  -1, // altlabelHashCode
  TimerEvent_methods_TimerEvent_II_LRTimerEvent__args, // the arguments
  0, //arguments count
  TimerEvent_methods_TimerEvent_II_LRTimerEvent__exceptions, // the declared exceptions
  TimerEvent_MetainfoWrapper::TimerEvent_method_TimerEvent_II_LRTimerEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods_TimerEvent__LRTimerEvent__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_methods_TimerEvent__LRTimerEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_method_TimerEvent__LRTimerEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TimerEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TimerEvent::clazzInfo(), // return type
  "_1_TimerEvent", // alternative name of method
  -1, // altlabelHashCode
  TimerEvent_methods_TimerEvent__LRTimerEvent__args, // the arguments
  0, //arguments count
  TimerEvent_methods_TimerEvent__LRTimerEvent__exceptions, // the declared exceptions
  TimerEvent_MetainfoWrapper::TimerEvent_method_TimerEvent__LRTimerEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimerEvent_methods_TimerEvent_I_LRTimerEvent__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods_TimerEvent_I_LRTimerEvent__args[] = 
{
  &TimerEvent_methods_TimerEvent_I_LRTimerEvent__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_methods_TimerEvent_I_LRTimerEvent__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_method_TimerEvent_I_LRTimerEvent_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TimerEvent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TimerEvent::clazzInfo(), // return type
  "_2_TimerEvent", // alternative name of method
  -1, // altlabelHashCode
  TimerEvent_methods_TimerEvent_I_LRTimerEvent__args, // the arguments
  0, //arguments count
  TimerEvent_methods_TimerEvent_I_LRTimerEvent__exceptions, // the declared exceptions
  TimerEvent_MetainfoWrapper::TimerEvent_method_TimerEvent_I_LRTimerEvent__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimerEvent_methods_getInterval__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimerEvent_methods_getInterval__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimerEvent_method_getInterval__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInterval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getInterval", // alternative name of method
  -1, // altlabelHashCode
  TimerEvent_methods_getInterval__I_args, // the arguments
  0, //arguments count
  TimerEvent_methods_getInterval__I_exceptions, // the declared exceptions
  TimerEvent_MetainfoWrapper::TimerEvent_method_getInterval__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TimerEvent_methods[] = 
{
  &TimerEvent_method_GetClass__L_acdk_lang_RClass_,
  &TimerEvent_method_TimerEvent_II_LRTimerEvent_,
  &TimerEvent_method_TimerEvent__LRTimerEvent_,
  &TimerEvent_method_TimerEvent_I_LRTimerEvent_,
  &TimerEvent_method_getInterval__I,
  0
};


struct TimerEvent_MetaInfoInitializer
{  TimerEvent_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TimerEvent::clazzInfo();
    ci->fields =  _TimerEvent_fields;
    ci->methods =  _TimerEvent_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TimerEvent_MetaInfoInitializer TimerEvent_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Timer_create_array(int length)
{
  return new ObjectArrayImpl<RTimer>(length);
}

//static
::acdk::lang::RObject
Timer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Timer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Timer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_Timer__LRTimer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Timer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_Timer_INLRWindow_I_LRTimer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Timer((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_Timer_INLRWindow__LRTimer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Timer((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_isRunning__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timer* This = dmi_cast<Timer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timer::isRunning();
    else
      ret = This->isRunning();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_start_IZ_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timer* This = dmi_cast<Timer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timer::start(args[0].getIntVar(), args[1].getBoolVar());
    else
      ret = This->start(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_start__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timer* This = dmi_cast<Timer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timer::start();
    else
      ret = This->start();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_start_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timer* This = dmi_cast<Timer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Timer::start(args[0].getIntVar());
    else
      ret = This->start(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Timer_method_stop__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Timer* This = dmi_cast<Timer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Timer::stop();
    else
        This->stop();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Timer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Timer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_Timer__LRTimer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_Timer__LRTimer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_Timer__LRTimer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Timer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Timer::clazzInfo(), // return type
  "_0_Timer", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_Timer__LRTimer__args, // the arguments
  0, //arguments count
  Timer_methods_Timer__LRTimer__exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_Timer__LRTimer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_Timer_INLRWindow_I_LRTimer__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_Timer_INLRWindow_I_LRTimer__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_Timer_INLRWindow_I_LRTimer__args[] = 
{
  &Timer_methods_Timer_INLRWindow_I_LRTimer__arg_parent,
  &Timer_methods_Timer_INLRWindow_I_LRTimer__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_Timer_INLRWindow_I_LRTimer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_Timer_INLRWindow_I_LRTimer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Timer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Timer::clazzInfo(), // return type
  "_1_Timer", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_Timer_INLRWindow_I_LRTimer__args, // the arguments
  0, //arguments count
  Timer_methods_Timer_INLRWindow_I_LRTimer__exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_Timer_INLRWindow_I_LRTimer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_Timer_INLRWindow__LRTimer__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_Timer_INLRWindow__LRTimer__args[] = 
{
  &Timer_methods_Timer_INLRWindow__LRTimer__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_Timer_INLRWindow__LRTimer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_Timer_INLRWindow__LRTimer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Timer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Timer::clazzInfo(), // return type
  "_2_Timer", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_Timer_INLRWindow__LRTimer__args, // the arguments
  0, //arguments count
  Timer_methods_Timer_INLRWindow__LRTimer__exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_Timer_INLRWindow__LRTimer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_isRunning__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_isRunning__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_isRunning__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isRunning", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isRunning", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_isRunning__Z_args, // the arguments
  0, //arguments count
  Timer_methods_isRunning__Z_exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_isRunning__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_start_IZ_Z_arg_milliseconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "milliseconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_start_IZ_Z_arg_oneShot = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "oneShot", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_start_IZ_Z_args[] = 
{
  &Timer_methods_start_IZ_Z_arg_milliseconds,
  &Timer_methods_start_IZ_Z_arg_oneShot,
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_start_IZ_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_start_IZ_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_start", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_start_IZ_Z_args, // the arguments
  0, //arguments count
  Timer_methods_start_IZ_Z_exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_start_IZ_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_start__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_start__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_start__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_start", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_start__Z_args, // the arguments
  0, //arguments count
  Timer_methods_start__Z_exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_start__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Timer_methods_start_I_Z_arg_milliseconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "milliseconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_start_I_Z_args[] = 
{
  &Timer_methods_start_I_Z_arg_milliseconds,
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_start_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_start_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "start", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_start", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_start_I_Z_args, // the arguments
  0, //arguments count
  Timer_methods_start_I_Z_exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_start_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Timer_methods_stop__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Timer_methods_stop__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Timer_method_stop__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_stop", // alternative name of method
  -1, // altlabelHashCode
  Timer_methods_stop__V_args, // the arguments
  0, //arguments count
  Timer_methods_stop__V_exceptions, // the declared exceptions
  Timer_MetainfoWrapper::Timer_method_stop__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Timer_methods[] = 
{
  &Timer_method_GetClass__L_acdk_lang_RClass_,
  &Timer_method_Timer__LRTimer_,
  &Timer_method_Timer_INLRWindow_I_LRTimer_,
  &Timer_method_Timer_INLRWindow__LRTimer_,
  &Timer_method_isRunning__Z,
  &Timer_method_start_IZ_Z,
  &Timer_method_start__Z,
  &Timer_method_start_I_Z,
  &Timer_method_stop__V,
  0
};


struct Timer_MetaInfoInitializer
{  Timer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Timer::clazzInfo();
    ci->fields =  _Timer_fields;
    ci->methods =  _Timer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Timer_MetaInfoInitializer Timer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ToggleButton_create_array(int length)
{
  return new ObjectArrayImpl<RToggleButton>(length);
}

//static
::acdk::lang::RObject
ToggleButton_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToggleButton_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToggleButton::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToggleButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_ToggleButton_INLRWindow_IINLRString__LRToggleButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToggleButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToggleButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToggleButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToggleButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_getValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToggleButton* This = dmi_cast<ToggleButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToggleButton::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToggleButton_method_setValue_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToggleButton* This = dmi_cast<ToggleButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToggleButton::setValue(args[0].getBoolVar());
    else
        This->setValue(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToggleButton_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToggleButton_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__args[] = 
{
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_parent,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_id,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_label,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_pos,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_size,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_style,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ToggleButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToggleButton::clazzInfo(), // return type
  "_0_ToggleButton", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__args, // the arguments
  0, //arguments count
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__args[] = 
{
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_parent,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_id,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_ToggleButton_INLRWindow_IINLRString__LRToggleButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToggleButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToggleButton::clazzInfo(), // return type
  "_1_ToggleButton", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__args, // the arguments
  0, //arguments count
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString__LRToggleButton__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_ToggleButton_INLRWindow_IINLRString__LRToggleButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__args[] = 
{
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_parent,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_id,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_label,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToggleButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToggleButton::clazzInfo(), // return type
  "_2_ToggleButton", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__args, // the arguments
  0, //arguments count
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__args[] = 
{
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_parent,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_id,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_label,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_pos,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToggleButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToggleButton::clazzInfo(), // return type
  "_3_ToggleButton", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__args, // the arguments
  0, //arguments count
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__args[] = 
{
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_parent,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_id,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_label,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_pos,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_size,
  &ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToggleButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToggleButton::clazzInfo(), // return type
  "_4_ToggleButton", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__args, // the arguments
  0, //arguments count
  ToggleButton_methods_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_getValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_getValue__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_getValue__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_getValue__Z_args, // the arguments
  0, //arguments count
  ToggleButton_methods_getValue__Z_exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_getValue__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToggleButton_methods_setValue_Z_V_arg_state = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "state", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToggleButton_methods_setValue_Z_V_args[] = 
{
  &ToggleButton_methods_setValue_Z_V_arg_state,
  0
};

::acdk::lang::dmi::ClazzInfo* ToggleButton_methods_setValue_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToggleButton_method_setValue_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setValue", // alternative name of method
  -1, // altlabelHashCode
  ToggleButton_methods_setValue_Z_V_args, // the arguments
  0, //arguments count
  ToggleButton_methods_setValue_Z_V_exceptions, // the declared exceptions
  ToggleButton_MetainfoWrapper::ToggleButton_method_setValue_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToggleButton_methods[] = 
{
  &ToggleButton_method_GetClass__L_acdk_lang_RClass_,
  &ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRToggleButton_,
  &ToggleButton_method_ToggleButton_INLRWindow_IINLRString__LRToggleButton_,
  &ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint__LRToggleButton_,
  &ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRToggleButton_,
  &ToggleButton_method_ToggleButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRToggleButton_,
  &ToggleButton_method_getValue__Z,
  &ToggleButton_method_setValue_Z_V,
  0
};


struct ToggleButton_MetaInfoInitializer
{  ToggleButton_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToggleButton::clazzInfo();
    ci->fields =  _ToggleButton_fields;
    ci->methods =  _ToggleButton_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToggleButton_MetaInfoInitializer ToggleButton_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ToolBarToolBase_create_array(int length)
{
  return new ObjectArrayImpl<RToolBarToolBase>(length);
}

//static
::acdk::lang::RObject
ToolBarToolBase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToolBarToolBase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToolBarToolBase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RObject)args[6].getObjectVar(), (RString)args[7].getObjectVar(), (RString)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RObject)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBarToolBase((RToolBar)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RObject)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_attach_INLRToolBar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::attach((RToolBar)args[0].getObjectVar());
    else
        This->attach((RToolBar)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_canBeToggled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::canBeToggled();
    else
      ret = This->canBeToggled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_detach__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::detach();
    else
        This->detach();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_enable_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::enable(args[0].getBoolVar());
    else
      ret = This->enable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getBitmap();
    else
        ret = (::acdk::lang::RObject)This->getBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getClientData__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getClientData();
    else
        ret = (::acdk::lang::RObject)This->getClientData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getControl__LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getControl();
    else
        ret = (::acdk::lang::RObject)This->getControl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getDisabledBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getDisabledBitmap();
    else
        ret = (::acdk::lang::RObject)This->getDisabledBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getId__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::getId();
    else
      ret = This->getId();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getKind__LItemKind__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (ItemKind)This->ToolBarToolBase::getKind();
    else
      ret = (ItemKind)This->getKind();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getLabel__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getLabel();
    else
        ret = (::acdk::lang::RObject)This->getLabel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getLongHelp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getLongHelp();
    else
        ret = (::acdk::lang::RObject)This->getLongHelp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getNormalBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getNormalBitmap();
    else
        ret = (::acdk::lang::RObject)This->getNormalBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getShortHelp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getShortHelp();
    else
        ret = (::acdk::lang::RObject)This->getShortHelp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_getToolBar__LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarToolBase::getToolBar();
    else
        ret = (::acdk::lang::RObject)This->getToolBar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_isButton__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::isButton();
    else
      ret = This->isButton();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_isControl__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::isControl();
    else
      ret = This->isControl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_isEnabled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::isEnabled();
    else
      ret = This->isEnabled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_isSeparator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::isSeparator();
    else
      ret = This->isSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_isToggled__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::isToggled();
    else
      ret = This->isToggled();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setClientData_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::setClientData((RObject)args[0].getObjectVar());
    else
        This->setClientData((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setDisabledBitmap_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::setDisabledBitmap((RBitmap)args[0].getObjectVar());
    else
        This->setDisabledBitmap((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setLabel_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::setLabel((RString)args[0].getObjectVar());
    else
        This->setLabel((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setLongHelp_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::setLongHelp((RString)args[0].getObjectVar());
    else
      ret = This->setLongHelp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setNormalBitmap_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::setNormalBitmap((RBitmap)args[0].getObjectVar());
    else
        This->setNormalBitmap((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setShortHelp_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::setShortHelp((RString)args[0].getObjectVar());
    else
      ret = This->setShortHelp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_setToggle_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::setToggle(args[0].getBoolVar());
    else
      ret = This->setToggle(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_toggle_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarToolBase::toggle(args[0].getBoolVar());
    else
      ret = This->toggle(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarToolBase_method_toggle__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarToolBase* This = dmi_cast<ToolBarToolBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarToolBase::toggle();
    else
        This->toggle();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToolBarToolBase_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_E_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_shortHelpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_longHelpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_bmpNormal,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_kind,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_clientData,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_shortHelpString,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_longHelpString,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_0_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase__LRToolBarToolBase__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_1_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__arg_tbar,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_2_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_3_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_4_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bmpNormal,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_5_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpNormal,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_6_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpNormal,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_7_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_bmpNormal,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_kind,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_clientData,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_8_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_bmpNormal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpNormal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_shortHelpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_tbar,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_bmpNormal,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_kind,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_clientData,
  &ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_shortHelpString,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBarToolBase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBarToolBase::clazzInfo(), // return type
  "_9_ToolBarToolBase", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_attach_INLRToolBar__V_arg_tbar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tbar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_attach_INLRToolBar__V_args[] = 
{
  &ToolBarToolBase_methods_attach_INLRToolBar__V_arg_tbar,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_attach_INLRToolBar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_attach_INLRToolBar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "attach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_attach", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_attach_INLRToolBar__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_attach_INLRToolBar__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_attach_INLRToolBar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_canBeToggled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_canBeToggled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_canBeToggled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canBeToggled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_canBeToggled", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_canBeToggled__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_canBeToggled__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_canBeToggled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_detach__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_detach__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_detach__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_detach", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_detach__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_detach__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_detach__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_enable_Z_Z_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_enable_Z_Z_args[] = 
{
  &ToolBarToolBase_methods_enable_Z_Z_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_enable_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_enable_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_enable", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_enable_Z_Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_enable_Z_Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_enable_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_n_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getBitmap__LRBitmap__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getClientData__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getClientData__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getClientData__LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClientData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_r_getClientData", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getClientData__LRObject__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getClientData__LRObject__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getClientData__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getControl__LRControl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getControl__LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getControl__LRControl_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RControl::clazzInfo(), // return type
  "_b_getControl", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getControl__LRControl__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getControl__LRControl__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getControl__LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getDisabledBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getDisabledBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getDisabledBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisabledBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_m_getDisabledBitmap", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getDisabledBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getDisabledBitmap__LRBitmap__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getDisabledBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getId__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getId__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getId__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getId", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getId", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getId__I_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getId__I_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getId__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getKind__LItemKind__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getKind__LItemKind__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getKind__LItemKind_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKind", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getKind", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getKind__LItemKind__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getKind__LItemKind__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getKind__LItemKind__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getLabel__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getLabel__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getLabel__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_getLabel", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getLabel__LRString__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getLabel__LRString__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getLabel__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getLongHelp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getLongHelp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getLongHelp__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLongHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getLongHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getLongHelp__LRString__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getLongHelp__LRString__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getLongHelp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getNormalBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getNormalBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getNormalBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNormalBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_l_getNormalBitmap", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getNormalBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getNormalBitmap__LRBitmap__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getNormalBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getShortHelp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getShortHelp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getShortHelp__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShortHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_getShortHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getShortHelp__LRString__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getShortHelp__LRString__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getShortHelp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getStyle", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getStyle__I_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getStyle__I_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_getToolBar__LRToolBar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_getToolBar__LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_getToolBar__LRToolBar_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBar::clazzInfo(), // return type
  "_c_getToolBar", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_getToolBar__LRToolBar__args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_getToolBar__LRToolBar__exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_getToolBar__LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_isButton__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_isButton__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_isButton__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isButton", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_isButton__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_isButton__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_isButton__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_isControl__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_isControl__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_isControl__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isControl", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_isControl__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_isControl__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_isControl__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_isEnabled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_isEnabled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_isEnabled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isEnabled", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_isEnabled__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_isEnabled__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_isEnabled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_isSeparator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_isSeparator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_isSeparator__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isSeparator", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_isSeparator__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_isSeparator__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_isSeparator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_isToggled__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_isToggled__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_isToggled__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isToggled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isToggled", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_isToggled__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_isToggled__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_isToggled__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setClientData_INLRObject__V_arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setClientData_INLRObject__V_args[] = 
{
  &ToolBarToolBase_methods_setClientData_INLRObject__V_arg_clientData,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setClientData_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setClientData_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setClientData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setClientData", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setClientData_INLRObject__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setClientData_INLRObject__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setClientData_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_args[] = 
{
  &ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setDisabledBitmap_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDisabledBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_setDisabledBitmap", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setDisabledBitmap_INLRBitmap__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setDisabledBitmap_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setLabel_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setLabel_INLRString__V_args[] = 
{
  &ToolBarToolBase_methods_setLabel_INLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setLabel_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setLabel_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_setLabel", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setLabel_INLRString__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setLabel_INLRString__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setLabel_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setLongHelp_INLRString__Z_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setLongHelp_INLRString__Z_args[] = 
{
  &ToolBarToolBase_methods_setLongHelp_INLRString__Z_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setLongHelp_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setLongHelp_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLongHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_setLongHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setLongHelp_INLRString__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setLongHelp_INLRString__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setLongHelp_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_args[] = 
{
  &ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setNormalBitmap_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNormalBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setNormalBitmap", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setNormalBitmap_INLRBitmap__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setNormalBitmap_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setShortHelp_INLRString__Z_arg_help = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "help", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setShortHelp_INLRString__Z_args[] = 
{
  &ToolBarToolBase_methods_setShortHelp_INLRString__Z_arg_help,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setShortHelp_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setShortHelp_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShortHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_setShortHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setShortHelp_INLRString__Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setShortHelp_INLRString__Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setShortHelp_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_setToggle_Z_Z_arg_toggle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toggle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_setToggle_Z_Z_args[] = 
{
  &ToolBarToolBase_methods_setToggle_Z_Z_arg_toggle,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_setToggle_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_setToggle_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_setToggle", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_setToggle_Z_Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_setToggle_Z_Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_setToggle_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarToolBase_methods_toggle_Z_Z_arg_toggle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toggle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_toggle_Z_Z_args[] = 
{
  &ToolBarToolBase_methods_toggle_Z_Z_arg_toggle,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_toggle_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_toggle_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_toggle", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_toggle_Z_Z_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_toggle_Z_Z_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_toggle_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarToolBase_methods_toggle__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarToolBase_methods_toggle__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarToolBase_method_toggle__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_toggle", // alternative name of method
  -1, // altlabelHashCode
  ToolBarToolBase_methods_toggle__V_args, // the arguments
  0, //arguments count
  ToolBarToolBase_methods_toggle__V_exceptions, // the declared exceptions
  ToolBarToolBase_MetainfoWrapper::ToolBarToolBase_method_toggle__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToolBarToolBase_methods[] = 
{
  &ToolBarToolBase_method_GetClass__L_acdk_lang_RClass_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_I_LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase_,
  &ToolBarToolBase_method_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase_,
  &ToolBarToolBase_method_attach_INLRToolBar__V,
  &ToolBarToolBase_method_canBeToggled__Z,
  &ToolBarToolBase_method_detach__V,
  &ToolBarToolBase_method_enable_Z_Z,
  &ToolBarToolBase_method_getBitmap__LRBitmap_,
  &ToolBarToolBase_method_getClientData__LRObject_,
  &ToolBarToolBase_method_getControl__LRControl_,
  &ToolBarToolBase_method_getDisabledBitmap__LRBitmap_,
  &ToolBarToolBase_method_getId__I,
  &ToolBarToolBase_method_getKind__LItemKind_,
  &ToolBarToolBase_method_getLabel__LRString_,
  &ToolBarToolBase_method_getLongHelp__LRString_,
  &ToolBarToolBase_method_getNormalBitmap__LRBitmap_,
  &ToolBarToolBase_method_getShortHelp__LRString_,
  &ToolBarToolBase_method_getStyle__I,
  &ToolBarToolBase_method_getToolBar__LRToolBar_,
  &ToolBarToolBase_method_isButton__Z,
  &ToolBarToolBase_method_isControl__Z,
  &ToolBarToolBase_method_isEnabled__Z,
  &ToolBarToolBase_method_isSeparator__Z,
  &ToolBarToolBase_method_isToggled__Z,
  &ToolBarToolBase_method_setClientData_INLRObject__V,
  &ToolBarToolBase_method_setDisabledBitmap_INLRBitmap__V,
  &ToolBarToolBase_method_setLabel_INLRString__V,
  &ToolBarToolBase_method_setLongHelp_INLRString__Z,
  &ToolBarToolBase_method_setNormalBitmap_INLRBitmap__V,
  &ToolBarToolBase_method_setShortHelp_INLRString__Z,
  &ToolBarToolBase_method_setToggle_Z_Z,
  &ToolBarToolBase_method_toggle_Z_Z,
  &ToolBarToolBase_method_toggle__V,
  0
};


struct ToolBarToolBase_MetaInfoInitializer
{  ToolBarToolBase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToolBarToolBase::clazzInfo();
    ci->fields =  _ToolBarToolBase_fields;
    ci->methods =  _ToolBarToolBase_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToolBarToolBase_MetaInfoInitializer ToolBarToolBase_MetaInfoInitializer_staticinstance__;


struct ToolBarToolBase_clazzInfo_ClazzAttributesResInitializer14
{
  ToolBarToolBase_clazzInfo_ClazzAttributesResInitializer14()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString_INLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarToolBase_methods_ToolBarToolBase_INLRToolBar_IINLRString_INLRBitmap_INLRBitmap_IINLRObject_INLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarToolBase_method_getKind__LItemKind_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
  }
};

ToolBarToolBase_clazzInfo_ClazzAttributesResInitializer14 ToolBarToolBase_clazzInfo_ClazzAttributesResInitializer14_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ToolBarBase_create_array(int length)
{
  return new ObjectArrayImpl<RToolBarBase>(length);
}

//static
::acdk::lang::RObject
ToolBarBase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToolBarBase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToolBarBase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar(), (RObject)args[6].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar(), (RObject)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addCheckTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addControl_INLRControl__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addControl((RControl)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addControl((RControl)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar(), (RObject)args[6].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar(), (RObject)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addRadioTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addSeparator__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addSeparator();
    else
        ret = (::acdk::lang::RObject)This->addSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar(), (RString)args[6].getObjectVar(), (RObject)args[7].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar(), (RString)args[6].getObjectVar(), (RObject)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar(), (RString)args[6].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (ItemKind)args[4].getIntVar(), (RString)args[5].getObjectVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (ItemKind)args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->addTool(args[0].getIntVar(), (RString)args[1].getObjectVar(), (RBitmap)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_clearTools__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::clearTools();
    else
        This->clearTools();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_deleteTool_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::deleteTool(args[0].getIntVar());
    else
      ret = This->deleteTool(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_deleteToolByPos_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::deleteToolByPos(args[0].getIntVar());
    else
      ret = This->deleteToolByPos(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_enableTool_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::enableTool(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->enableTool(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_findControl_I_LRControl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::findControl(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->findControl(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_findToolForPosition_II_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::findToolForPosition(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->findToolForPosition(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getMaxCols__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getMaxCols();
    else
      ret = This->getMaxCols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getMaxRows__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getMaxRows();
    else
      ret = This->getMaxRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolBitmapSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolBitmapSize();
    else
        ret = (::acdk::lang::RObject)This->getToolBitmapSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolClientData_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolClientData(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getToolClientData(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolEnabled_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getToolEnabled(args[0].getIntVar());
    else
      ret = This->getToolEnabled(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolLongHelp_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolLongHelp(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getToolLongHelp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolMargins__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolMargins();
    else
        ret = (::acdk::lang::RObject)This->getToolMargins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolPacking__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getToolPacking();
    else
      ret = This->getToolPacking();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolSeparation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getToolSeparation();
    else
      ret = This->getToolSeparation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolShortHelp_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolShortHelp(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getToolShortHelp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::getToolSize();
    else
        ret = (::acdk::lang::RObject)This->getToolSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_getToolState_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::getToolState(args[0].getIntVar());
    else
      ret = This->getToolState(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertControl_IINLRControl__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertControl(args[0].getIntVar(), (RControl)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertControl(args[0].getIntVar(), (RControl)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertSeparator_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertSeparator(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertSeparator(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar(), (RString)args[7].getObjectVar(), (RObject)args[8].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar(), (RString)args[7].getObjectVar(), (RObject)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->insertTool(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RBitmap)args[3].getObjectVar(), (RBitmap)args[4].getObjectVar(), (ItemKind)args[5].getIntVar(), (RString)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_isVertical__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::isVertical();
    else
      ret = This->isVertical();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_realize__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ToolBarBase::realize();
    else
      ret = This->realize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_removeTool_I_LRToolBarToolBase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolBarBase::removeTool(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->removeTool(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setMargins_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setMargins(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setMargins(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setMargins_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setMargins((RSize)args[0].getObjectVar());
    else
        This->setMargins((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setMaxRowsCols_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setMaxRowsCols(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setMaxRowsCols(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setRows_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setRows(args[0].getIntVar());
    else
        This->setRows(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToggle_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToggle(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->setToggle(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolBitmapSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolBitmapSize((RSize)args[0].getObjectVar());
    else
        This->setToolBitmapSize((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolClientData_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolClientData(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    else
        This->setToolClientData(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolLongHelp_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolLongHelp(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setToolLongHelp(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolPacking_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolPacking(args[0].getIntVar());
    else
        This->setToolPacking(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolSeparation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolSeparation(args[0].getIntVar());
    else
        This->setToolSeparation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_setToolShortHelp_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::setToolShortHelp(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setToolShortHelp(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBarBase_method_toggleTool_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolBarBase* This = dmi_cast<ToolBarBase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolBarBase::toggleTool(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->toggleTool(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToolBarBase_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_Z_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addCheckTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_8_addCheckTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addCheckTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_9_addCheckTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addCheckTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_a_addCheckTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addCheckTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_b_addCheckTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_longHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addCheckTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_c_addCheckTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__arg_control = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "control", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RControl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__arg_control,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addControl_INLRControl__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_o_addControl", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addControl_INLRControl__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addControl_INLRControl__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addRadioTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_d_addRadioTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRadioTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_e_addRadioTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRadioTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_f_addRadioTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRadioTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_g_addRadioTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__arg_longHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addRadioTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_h_addRadioTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addSeparator__LRToolBarToolBase__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addSeparator__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addSeparator__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_r_addSeparator", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addSeparator__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addSeparator__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addSeparator__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "data", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_data,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_0_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_1_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_2_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_shortHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_3_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_longHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_4_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_5_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_6_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__arg_shortHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_7_addTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_clearTools__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_clearTools__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_clearTools__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearTools", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_clearTools", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_clearTools__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_clearTools__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_clearTools__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_deleteTool_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_deleteTool_I_Z_args[] = 
{
  &ToolBarBase_methods_deleteTool_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_deleteTool_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_deleteTool_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_deleteTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_deleteTool_I_Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_deleteTool_I_Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_deleteTool_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_deleteToolByPos_I_Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_deleteToolByPos_I_Z_args[] = 
{
  &ToolBarBase_methods_deleteToolByPos_I_Z_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_deleteToolByPos_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_deleteToolByPos_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteToolByPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_deleteToolByPos", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_deleteToolByPos_I_Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_deleteToolByPos_I_Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_deleteToolByPos_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_enableTool_IZ_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_enableTool_IZ_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_enableTool_IZ_V_args[] = 
{
  &ToolBarBase_methods_enableTool_IZ_V_arg_id,
  &ToolBarBase_methods_enableTool_IZ_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_enableTool_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_enableTool_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enableTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_enableTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_enableTool_IZ_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_enableTool_IZ_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_enableTool_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_findControl_I_LRControl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_findControl_I_LRControl__args[] = 
{
  &ToolBarBase_methods_findControl_I_LRControl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_findControl_I_LRControl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_findControl_I_LRControl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RControl::clazzInfo(), // return type
  "_q_findControl", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_findControl_I_LRControl__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_findControl_I_LRControl__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_findControl_I_LRControl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__arg_x,
  &ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_findToolForPosition_II_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findToolForPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_X_findToolForPosition", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_findToolForPosition_II_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_findToolForPosition_II_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getMaxCols__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getMaxCols__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getMaxCols__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_T_getMaxCols", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getMaxCols__I_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getMaxCols__I_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getMaxCols__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getMaxRows__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getMaxRows__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getMaxRows__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_getMaxRows", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getMaxRows__I_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getMaxRows__I_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getMaxRows__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolBitmapSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolBitmapSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolBitmapSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolBitmapSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_V_getToolBitmapSize", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolBitmapSize__LRSize__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolBitmapSize__LRSize__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolBitmapSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_getToolClientData_I_LRObject__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolClientData_I_LRObject__args[] = 
{
  &ToolBarBase_methods_getToolClientData_I_LRObject__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolClientData_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolClientData_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolClientData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_B_getToolClientData", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolClientData_I_LRObject__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolClientData_I_LRObject__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolClientData_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_getToolEnabled_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolEnabled_I_Z_args[] = 
{
  &ToolBarBase_methods_getToolEnabled_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolEnabled_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolEnabled_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolEnabled", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_getToolEnabled", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolEnabled_I_Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolEnabled_I_Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolEnabled_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_getToolLongHelp_I_LRString__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolLongHelp_I_LRString__args[] = 
{
  &ToolBarBase_methods_getToolLongHelp_I_LRString__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolLongHelp_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolLongHelp_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolLongHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_I_getToolLongHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolLongHelp_I_LRString__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolLongHelp_I_LRString__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolLongHelp_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolMargins__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolMargins__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolMargins__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_N_getToolMargins", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolMargins__LRSize__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolMargins__LRSize__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolMargins__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolPacking__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolPacking__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolPacking__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolPacking", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_O_getToolPacking", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolPacking__I_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolPacking__I_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolPacking__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolSeparation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolSeparation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolSeparation__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolSeparation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_P_getToolSeparation", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolSeparation__I_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolSeparation__I_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolSeparation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_getToolShortHelp_I_LRString__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolShortHelp_I_LRString__args[] = 
{
  &ToolBarBase_methods_getToolShortHelp_I_LRString__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolShortHelp_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolShortHelp_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolShortHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_G_getToolShortHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolShortHelp_I_LRString__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolShortHelp_I_LRString__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolShortHelp_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_W_getToolSize", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolSize__LRSize__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolSize__LRSize__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_getToolState_I_Z_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_getToolState_I_Z_args[] = 
{
  &ToolBarBase_methods_getToolState_I_Z_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_getToolState_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_getToolState_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolState", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_getToolState", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_getToolState_I_Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_getToolState_I_Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_getToolState_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__arg_control = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "control", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RControl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__arg_control,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertControl_IINLRControl__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertControl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_p_insertControl", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertControl_IINLRControl__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertControl_IINLRControl__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertSeparator_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_s_insertSeparator", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertSeparator_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertSeparator_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_longHelp,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_clientData,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_i_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_j_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__arg_bmpDisabled,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_k_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_l_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_shortHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_m_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bitmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bitmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "bmpDisabled", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "kind", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_shortHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "shortHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_longHelp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "longHelp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_pos,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_id,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_label,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bitmap,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_bmpDisabled,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_shortHelp,
  &ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_longHelp,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insertTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_n_insertTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_isVertical__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_isVertical__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_isVertical__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVertical", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_isVertical", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_isVertical__Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_isVertical__Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_isVertical__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_realize__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_realize__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_realize__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "realize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_realize", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_realize__Z_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_realize__Z_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_realize__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_removeTool_I_LRToolBarToolBase__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_removeTool_I_LRToolBarToolBase__args[] = 
{
  &ToolBarBase_methods_removeTool_I_LRToolBarToolBase__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_removeTool_I_LRToolBarToolBase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_removeTool_I_LRToolBarToolBase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolBarToolBase::clazzInfo(), // return type
  "_t_removeTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_removeTool_I_LRToolBarToolBase__args, // the arguments
  0, //arguments count
  ToolBarBase_methods_removeTool_I_LRToolBarToolBase__exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_removeTool_I_LRToolBarToolBase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setMargins_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setMargins_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setMargins_II_V_args[] = 
{
  &ToolBarBase_methods_setMargins_II_V_arg_x,
  &ToolBarBase_methods_setMargins_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setMargins_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setMargins_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setMargins", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setMargins_II_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setMargins_II_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setMargins_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setMargins_INLRSize__V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setMargins_INLRSize__V_args[] = 
{
  &ToolBarBase_methods_setMargins_INLRSize__V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setMargins_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setMargins_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMargins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_setMargins", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setMargins_INLRSize__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setMargins_INLRSize__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setMargins_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setMaxRowsCols_II_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setMaxRowsCols_II_V_arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setMaxRowsCols_II_V_args[] = 
{
  &ToolBarBase_methods_setMaxRowsCols_II_V_arg_rows,
  &ToolBarBase_methods_setMaxRowsCols_II_V_arg_cols,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setMaxRowsCols_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setMaxRowsCols_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxRowsCols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_R_setMaxRowsCols", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setMaxRowsCols_II_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setMaxRowsCols_II_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setMaxRowsCols_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setRows_I_V_arg_nRows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nRows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setRows_I_V_args[] = 
{
  &ToolBarBase_methods_setRows_I_V_arg_nRows,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setRows_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setRows_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Q_setRows", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setRows_I_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setRows_I_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setRows_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToggle_IZ_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToggle_IZ_V_arg_toggle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toggle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToggle_IZ_V_args[] = 
{
  &ToolBarBase_methods_setToggle_IZ_V_arg_id,
  &ToolBarBase_methods_setToggle_IZ_V_arg_toggle,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToggle_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToggle_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToggle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_setToggle", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToggle_IZ_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToggle_IZ_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToggle_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolBitmapSize_INLRSize__V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolBitmapSize_INLRSize__V_args[] = 
{
  &ToolBarBase_methods_setToolBitmapSize_INLRSize__V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolBitmapSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolBitmapSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolBitmapSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_U_setToolBitmapSize", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolBitmapSize_INLRSize__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolBitmapSize_INLRSize__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolBitmapSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolClientData_IINLRObject__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolClientData_IINLRObject__V_arg_clientData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "clientData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolClientData_IINLRObject__V_args[] = 
{
  &ToolBarBase_methods_setToolClientData_IINLRObject__V_arg_id,
  &ToolBarBase_methods_setToolClientData_IINLRObject__V_arg_clientData,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolClientData_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolClientData_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolClientData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setToolClientData", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolClientData_IINLRObject__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolClientData_IINLRObject__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolClientData_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolLongHelp_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolLongHelp_IINLRString__V_arg_helpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "helpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolLongHelp_IINLRString__V_args[] = 
{
  &ToolBarBase_methods_setToolLongHelp_IINLRString__V_arg_id,
  &ToolBarBase_methods_setToolLongHelp_IINLRString__V_arg_helpString,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolLongHelp_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolLongHelp_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolLongHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_setToolLongHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolLongHelp_IINLRString__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolLongHelp_IINLRString__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolLongHelp_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolPacking_I_V_arg_packing = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "packing", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolPacking_I_V_args[] = 
{
  &ToolBarBase_methods_setToolPacking_I_V_arg_packing,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolPacking_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolPacking_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolPacking", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_setToolPacking", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolPacking_I_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolPacking_I_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolPacking_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolSeparation_I_V_arg_separation = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "separation", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolSeparation_I_V_args[] = 
{
  &ToolBarBase_methods_setToolSeparation_I_V_arg_separation,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolSeparation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolSeparation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolSeparation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_setToolSeparation", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolSeparation_I_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolSeparation_I_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolSeparation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolShortHelp_IINLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_setToolShortHelp_IINLRString__V_arg_helpString = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "helpString", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_setToolShortHelp_IINLRString__V_args[] = 
{
  &ToolBarBase_methods_setToolShortHelp_IINLRString__V_arg_id,
  &ToolBarBase_methods_setToolShortHelp_IINLRString__V_arg_helpString,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_setToolShortHelp_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_setToolShortHelp_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolShortHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_setToolShortHelp", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_setToolShortHelp_IINLRString__V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_setToolShortHelp_IINLRString__V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_setToolShortHelp_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_toggleTool_IZ_V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBarBase_methods_toggleTool_IZ_V_arg_toggle = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toggle", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBarBase_methods_toggleTool_IZ_V_args[] = 
{
  &ToolBarBase_methods_toggleTool_IZ_V_arg_id,
  &ToolBarBase_methods_toggleTool_IZ_V_arg_toggle,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBarBase_methods_toggleTool_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBarBase_method_toggleTool_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toggleTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_toggleTool", // alternative name of method
  -1, // altlabelHashCode
  ToolBarBase_methods_toggleTool_IZ_V_args, // the arguments
  0, //arguments count
  ToolBarBase_methods_toggleTool_IZ_V_exceptions, // the declared exceptions
  ToolBarBase_MetainfoWrapper::ToolBarBase_method_toggleTool_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToolBarBase_methods[] = 
{
  &ToolBarBase_method_GetClass__L_acdk_lang_RClass_,
  &ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase_,
  &ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addCheckTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addControl_INLRControl__LRToolBarToolBase_,
  &ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString_INLRObject__LRToolBarToolBase_,
  &ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addRadioTool_IINLRString_INLRBitmap_INLRBitmap_INLRString_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addSeparator__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_addTool_IINLRString_INLRBitmap_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_clearTools__V,
  &ToolBarBase_method_deleteTool_I_Z,
  &ToolBarBase_method_deleteToolByPos_I_Z,
  &ToolBarBase_method_enableTool_IZ_V,
  &ToolBarBase_method_findControl_I_LRControl_,
  &ToolBarBase_method_findToolForPosition_II_LRToolBarToolBase_,
  &ToolBarBase_method_getMaxCols__I,
  &ToolBarBase_method_getMaxRows__I,
  &ToolBarBase_method_getToolBitmapSize__LRSize_,
  &ToolBarBase_method_getToolClientData_I_LRObject_,
  &ToolBarBase_method_getToolEnabled_I_Z,
  &ToolBarBase_method_getToolLongHelp_I_LRString_,
  &ToolBarBase_method_getToolMargins__LRSize_,
  &ToolBarBase_method_getToolPacking__I,
  &ToolBarBase_method_getToolSeparation__I,
  &ToolBarBase_method_getToolShortHelp_I_LRString_,
  &ToolBarBase_method_getToolSize__LRSize_,
  &ToolBarBase_method_getToolState_I_Z,
  &ToolBarBase_method_insertControl_IINLRControl__LRToolBarToolBase_,
  &ToolBarBase_method_insertSeparator_I_LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap__LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase_,
  &ToolBarBase_method_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase_,
  &ToolBarBase_method_isVertical__Z,
  &ToolBarBase_method_realize__Z,
  &ToolBarBase_method_removeTool_I_LRToolBarToolBase_,
  &ToolBarBase_method_setMargins_II_V,
  &ToolBarBase_method_setMargins_INLRSize__V,
  &ToolBarBase_method_setMaxRowsCols_II_V,
  &ToolBarBase_method_setRows_I_V,
  &ToolBarBase_method_setToggle_IZ_V,
  &ToolBarBase_method_setToolBitmapSize_INLRSize__V,
  &ToolBarBase_method_setToolClientData_IINLRObject__V,
  &ToolBarBase_method_setToolLongHelp_IINLRString__V,
  &ToolBarBase_method_setToolPacking_I_V,
  &ToolBarBase_method_setToolSeparation_I_V,
  &ToolBarBase_method_setToolShortHelp_IINLRString__V,
  &ToolBarBase_method_toggleTool_IZ_V,
  0
};


struct ToolBarBase_MetaInfoInitializer
{  ToolBarBase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToolBarBase::clazzInfo();
    ci->fields =  _ToolBarBase_fields;
    ci->methods =  _ToolBarBase_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToolBarBase_MetaInfoInitializer ToolBarBase_MetaInfoInitializer_staticinstance__;


struct ToolBarBase_clazzInfo_ClazzAttributesResInitializer15
{
  ToolBarBase_clazzInfo_ClazzAttributesResInitializer15()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_addTool_IINLRString_INLRBitmap_INLRString_I_LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString_INLRObject__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_I_LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ToolBarBase_methods_insertTool_IIINLRString_INLRBitmap_INLRBitmap_IINLRString_INLRString__LRToolBarToolBase__arg_kind, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ItemKindMetaInf::GetEnumInfo()));
  }
};

ToolBarBase_clazzInfo_ClazzAttributesResInitializer15 ToolBarBase_clazzInfo_ClazzAttributesResInitializer15_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ToolBar_create_array(int length)
{
  return new ObjectArrayImpl<RToolBar>(length);
}

//static
::acdk::lang::RObject
ToolBar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToolBar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToolBar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBar((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBar_method_ToolBar_INLRWindow_I_LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBar((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBar_method_ToolBar_INLRWindow_IINLRPoint__LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBar((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolBar((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToolBar_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToolBar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToolBar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToolBar_MetainfoWrapper::ToolBar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__args[] = 
{
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_parent,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_id,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_pos,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_size,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBar::clazzInfo(), // return type
  "_0_ToolBar", // alternative name of method
  -1, // altlabelHashCode
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__args, // the arguments
  0, //arguments count
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__exceptions, // the declared exceptions
  ToolBar_MetainfoWrapper::ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__args[] = 
{
  &ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__arg_parent,
  &ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_method_ToolBar_INLRWindow_I_LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBar::clazzInfo(), // return type
  "_1_ToolBar", // alternative name of method
  -1, // altlabelHashCode
  ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__args, // the arguments
  0, //arguments count
  ToolBar_methods_ToolBar_INLRWindow_I_LRToolBar__exceptions, // the declared exceptions
  ToolBar_MetainfoWrapper::ToolBar_method_ToolBar_INLRWindow_I_LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__args[] = 
{
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_parent,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_id,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_method_ToolBar_INLRWindow_IINLRPoint__LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBar::clazzInfo(), // return type
  "_2_ToolBar", // alternative name of method
  -1, // altlabelHashCode
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__args, // the arguments
  0, //arguments count
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint__LRToolBar__exceptions, // the declared exceptions
  ToolBar_MetainfoWrapper::ToolBar_method_ToolBar_INLRWindow_IINLRPoint__LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__args[] = 
{
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_parent,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_id,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_pos,
  &ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolBar::clazzInfo(), // return type
  "_3_ToolBar", // alternative name of method
  -1, // altlabelHashCode
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__args, // the arguments
  0, //arguments count
  ToolBar_methods_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__exceptions, // the declared exceptions
  ToolBar_MetainfoWrapper::ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToolBar_methods[] = 
{
  &ToolBar_method_GetClass__L_acdk_lang_RClass_,
  &ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize_I_LRToolBar_,
  &ToolBar_method_ToolBar_INLRWindow_I_LRToolBar_,
  &ToolBar_method_ToolBar_INLRWindow_IINLRPoint__LRToolBar_,
  &ToolBar_method_ToolBar_INLRWindow_IINLRPoint_INLRSize__LRToolBar_,
  0
};


struct ToolBar_MetaInfoInitializer
{  ToolBar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToolBar::clazzInfo();
    ci->fields =  _ToolBar_fields;
    ci->methods =  _ToolBar_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToolBar_MetaInfoInitializer ToolBar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ToolTip_create_array(int length)
{
  return new ObjectArrayImpl<RToolTip>(length);
}

//static
::acdk::lang::RObject
ToolTip_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToolTip_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToolTip::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_ToolTip_INLRString__LRToolTip__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ToolTip((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_enable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolTip::enable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_getTip__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolTip* This = dmi_cast<ToolTip>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolTip::getTip();
    else
        ret = (::acdk::lang::RObject)This->getTip();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_getWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolTip* This = dmi_cast<ToolTip>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ToolTip::getWindow();
    else
        ret = (::acdk::lang::RObject)This->getWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_setDelay_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolTip::setDelay(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolTip_method_setTip_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolTip* This = dmi_cast<ToolTip>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ToolTip::setTip((RString)args[0].getObjectVar());
    else
        This->setTip((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToolTip_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToolTip_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolTip_methods_ToolTip_INLRString__LRToolTip__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_ToolTip_INLRString__LRToolTip__args[] = 
{
  &ToolTip_methods_ToolTip_INLRString__LRToolTip__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_ToolTip_INLRString__LRToolTip__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_ToolTip_INLRString__LRToolTip_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ToolTip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ToolTip::clazzInfo(), // return type
  "_0_ToolTip", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_ToolTip_INLRString__LRToolTip__args, // the arguments
  0, //arguments count
  ToolTip_methods_ToolTip_INLRString__LRToolTip__exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_ToolTip_INLRString__LRToolTip__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolTip_methods_enable_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_enable_Z_V_args[] = 
{
  &ToolTip_methods_enable_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_enable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_enable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_enable", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_enable_Z_V_args, // the arguments
  0, //arguments count
  ToolTip_methods_enable_Z_V_exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_enable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_getTip__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_getTip__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_getTip__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getTip", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_getTip__LRString__args, // the arguments
  0, //arguments count
  ToolTip_methods_getTip__LRString__exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_getTip__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_getWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_getWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_getWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_3_getWindow", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_getWindow__LRWindow__args, // the arguments
  0, //arguments count
  ToolTip_methods_getWindow__LRWindow__exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_getWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolTip_methods_setDelay_I_V_arg_msecs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "msecs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_setDelay_I_V_args[] = 
{
  &ToolTip_methods_setDelay_I_V_arg_msecs,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_setDelay_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_setDelay_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDelay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setDelay", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_setDelay_I_V_args, // the arguments
  0, //arguments count
  ToolTip_methods_setDelay_I_V_exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_setDelay_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolTip_methods_setTip_INLRString__V_arg_tip = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tip", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolTip_methods_setTip_INLRString__V_args[] = 
{
  &ToolTip_methods_setTip_INLRString__V_arg_tip,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolTip_methods_setTip_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolTip_method_setTip_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setTip", // alternative name of method
  -1, // altlabelHashCode
  ToolTip_methods_setTip_INLRString__V_args, // the arguments
  0, //arguments count
  ToolTip_methods_setTip_INLRString__V_exceptions, // the declared exceptions
  ToolTip_MetainfoWrapper::ToolTip_method_setTip_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToolTip_methods[] = 
{
  &ToolTip_method_GetClass__L_acdk_lang_RClass_,
  &ToolTip_method_ToolTip_INLRString__LRToolTip_,
  &ToolTip_method_enable_Z_V,
  &ToolTip_method_getTip__LRString_,
  &ToolTip_method_getWindow__LRWindow_,
  &ToolTip_method_setDelay_I_V,
  &ToolTip_method_setTip_INLRString__V,
  0
};


struct ToolTip_MetaInfoInitializer
{  ToolTip_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToolTip::clazzInfo();
    ci->fields =  _ToolTip_fields;
    ci->methods =  _ToolTip_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToolTip_MetaInfoInitializer ToolTip_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

