// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
PaintDC_create_array(int length)
{
  return new ObjectArrayImpl<RPaintDC>(length);
}

//static
::acdk::lang::RObject
PaintDC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PaintDC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintDC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PaintDC::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PaintDC_method_PaintDC_INLRWindow__LRPaintDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PaintDC((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _PaintDC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintDC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PaintDC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintDC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PaintDC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PaintDC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PaintDC_MetainfoWrapper::PaintDC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__args[] = 
{
  &PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PaintDC_method_PaintDC_INLRWindow__LRPaintDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PaintDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PaintDC::clazzInfo(), // return type
  "_0_PaintDC", // alternative name of method
  -1, // altlabelHashCode
  PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__args, // the arguments
  0, //arguments count
  PaintDC_methods_PaintDC_INLRWindow__LRPaintDC__exceptions, // the declared exceptions
  PaintDC_MetainfoWrapper::PaintDC_method_PaintDC_INLRWindow__LRPaintDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PaintDC_methods[] = 
{
  &PaintDC_method_GetClass__L_acdk_lang_RClass_,
  &PaintDC_method_PaintDC_INLRWindow__LRPaintDC_,
  0
};


struct PaintDC_MetaInfoInitializer
{  PaintDC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PaintDC::clazzInfo();
    ci->fields =  _PaintDC_fields;
    ci->methods =  _PaintDC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PaintDC_MetaInfoInitializer PaintDC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Panel_create_array(int length)
{
  return new ObjectArrayImpl<RPanel>(length);
}

//static
::acdk::lang::RObject
Panel_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Panel_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Panel::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_I_LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_IINLRPoint__LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_IIIII_LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_IIII_LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Panel_method_Panel_INLRWindow__LRPanel__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Panel((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Panel_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Panel_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_id,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_pos,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_6_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_I_LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_I_LRPanel__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_I_LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_I_LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_I_LRPanel__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_I_LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_I_LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_4_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_I_LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_I_LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_I_LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_id,
  &Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_IINLRPoint__LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_5_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_IINLRPoint__LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_IINLRPoint__LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_IIIII_LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_x,
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_y,
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_width,
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_height,
  &Panel_methods_Panel_INLRWindow_IIIII_LRPanel__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_IIIII_LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_IIIII_LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_0_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_IIIII_LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_IIIII_LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_IIIII_LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_IIII_LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_x,
  &Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_y,
  &Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_width,
  &Panel_methods_Panel_INLRWindow_IIII_LRPanel__arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_IIII_LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_IIII_LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_1_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_IIII_LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_IIII_LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_IIII_LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_parent,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_id,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_pos,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_size,
  &Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_2_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Panel_methods_Panel_INLRWindow__LRPanel__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Panel_methods_Panel_INLRWindow__LRPanel__args[] = 
{
  &Panel_methods_Panel_INLRWindow__LRPanel__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Panel_methods_Panel_INLRWindow__LRPanel__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Panel_method_Panel_INLRWindow__LRPanel_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Panel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Panel::clazzInfo(), // return type
  "_3_Panel", // alternative name of method
  -1, // altlabelHashCode
  Panel_methods_Panel_INLRWindow__LRPanel__args, // the arguments
  0, //arguments count
  Panel_methods_Panel_INLRWindow__LRPanel__exceptions, // the declared exceptions
  Panel_MetainfoWrapper::Panel_method_Panel_INLRWindow__LRPanel__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Panel_methods[] = 
{
  &Panel_method_GetClass__L_acdk_lang_RClass_,
  &Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize__LRPanel_,
  &Panel_method_Panel_INLRWindow_I_LRPanel_,
  &Panel_method_Panel_INLRWindow_IINLRPoint__LRPanel_,
  &Panel_method_Panel_INLRWindow_IIIII_LRPanel_,
  &Panel_method_Panel_INLRWindow_IIII_LRPanel_,
  &Panel_method_Panel_INLRWindow_IINLRPoint_INLRSize_I_LRPanel_,
  &Panel_method_Panel_INLRWindow__LRPanel_,
  0
};


struct Panel_MetaInfoInitializer
{  Panel_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Panel::clazzInfo();
    ci->fields =  _Panel_fields;
    ci->methods =  _Panel_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Panel_MetaInfoInitializer Panel_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Pen_create_array(int length)
{
  return new ObjectArrayImpl<RPen>(length);
}

//static
::acdk::lang::RObject
Pen_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Pen_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_Pen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Pen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_Pen_INLRColour_II_LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Pen((RColour)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getBlackDashedPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getBlackDashedPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getBlackPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getBlackPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getCap__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Pen::getCap();
    else
      ret = This->getCap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getCyanPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getCyanPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getGreenPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getGreenPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getGreyPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getGreyPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getJoin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Pen::getJoin();
    else
      ret = This->getJoin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getLightGreyPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getLightGreyPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getMediumGreyPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getMediumGreyPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getNullPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getNullPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getRedPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getRedPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Pen::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getTransparentPen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getTransparentPen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getWhitePen__LRPen__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Pen::getWhitePen();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_getWidth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Pen::getWidth();
    else
      ret = This->getWidth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_ok__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Pen::ok();
    else
      ret = This->ok();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setCap_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setCap(args[0].getIntVar());
    else
        This->setCap(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setColour_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setColour((RColour)args[0].getObjectVar());
    else
        This->setColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setColour_CCC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setColour(args[0].getCharVar(), args[1].getCharVar(), args[2].getCharVar());
    else
        This->setColour(args[0].getCharVar(), args[1].getCharVar(), args[2].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setJoin_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setJoin(args[0].getIntVar());
    else
        This->setJoin(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setStyle(args[0].getIntVar());
    else
        This->setStyle(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Pen_method_setWidth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Pen* This = dmi_cast<Pen>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Pen::setWidth(args[0].getIntVar());
    else
        This->setWidth(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Pen_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Pen_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_Pen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_Pen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_Pen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Pen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Pen::clazzInfo(), // return type
  "_0_Pen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_Pen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_Pen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_Pen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_Pen_INLRColour_II_LRPen__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_Pen_INLRColour_II_LRPen__arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_Pen_INLRColour_II_LRPen__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_Pen_INLRColour_II_LRPen__args[] = 
{
  &Pen_methods_Pen_INLRColour_II_LRPen__arg_col,
  &Pen_methods_Pen_INLRColour_II_LRPen__arg_width,
  &Pen_methods_Pen_INLRColour_II_LRPen__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_Pen_INLRColour_II_LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_Pen_INLRColour_II_LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Pen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Pen::clazzInfo(), // return type
  "_1_Pen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_Pen_INLRColour_II_LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_Pen_INLRColour_II_LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_Pen_INLRColour_II_LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getBlackDashedPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getBlackDashedPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getBlackDashedPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlackDashedPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_j_getBlackDashedPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getBlackDashedPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getBlackDashedPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getBlackDashedPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getBlackPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getBlackPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getBlackPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlackPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_g_getBlackPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getBlackPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getBlackPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getBlackPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getCap__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getCap__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getCap__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getCap", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getCap__I_args, // the arguments
  0, //arguments count
  Pen_methods_getCap__I_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getCap__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getCyanPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getCyanPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getCyanPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCyanPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_e_getCyanPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getCyanPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getCyanPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getCyanPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getGreenPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getGreenPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getGreenPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreenPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_f_getGreenPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getGreenPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getGreenPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getGreenPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getGreyPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getGreyPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getGreyPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreyPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_k_getGreyPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getGreyPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getGreyPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getGreyPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getJoin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getJoin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getJoin__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getJoin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getJoin", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getJoin__I_args, // the arguments
  0, //arguments count
  Pen_methods_getJoin__I_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getJoin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getLightGreyPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getLightGreyPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getLightGreyPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLightGreyPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_m_getLightGreyPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getLightGreyPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getLightGreyPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getLightGreyPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getMediumGreyPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getMediumGreyPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getMediumGreyPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMediumGreyPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_l_getMediumGreyPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getMediumGreyPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getMediumGreyPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getMediumGreyPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getNullPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getNullPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getNullPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_n_getNullPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getNullPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getNullPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getNullPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getRedPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getRedPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getRedPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRedPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_d_getRedPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getRedPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getRedPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getRedPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getStyle", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getStyle__I_args, // the arguments
  0, //arguments count
  Pen_methods_getStyle__I_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getTransparentPen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getTransparentPen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getTransparentPen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTransparentPen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_i_getTransparentPen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getTransparentPen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getTransparentPen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getTransparentPen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getWhitePen__LRPen__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getWhitePen__LRPen__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getWhitePen__LRPen_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhitePen", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPen::clazzInfo(), // return type
  "_h_getWhitePen", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getWhitePen__LRPen__args, // the arguments
  0, //arguments count
  Pen_methods_getWhitePen__LRPen__exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getWhitePen__LRPen__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_getWidth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_getWidth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_getWidth__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getWidth", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_getWidth__I_args, // the arguments
  0, //arguments count
  Pen_methods_getWidth__I_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_getWidth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_ok__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_ok__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_ok__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ok", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_ok", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_ok__Z_args, // the arguments
  0, //arguments count
  Pen_methods_ok__Z_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_ok__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setCap_I_V_arg_cap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setCap_I_V_args[] = 
{
  &Pen_methods_setCap_I_V_arg_cap,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setCap_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setCap_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setCap", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setCap_I_V_args, // the arguments
  0, //arguments count
  Pen_methods_setCap_I_V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setCap_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setColour_INLRColour__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setColour_INLRColour__V_args[] = 
{
  &Pen_methods_setColour_INLRColour__V_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setColour_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setColour_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setColour", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setColour_INLRColour__V_args, // the arguments
  0, //arguments count
  Pen_methods_setColour_INLRColour__V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setColour_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setColour_CCC_V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setColour_CCC_V_arg_g = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "g", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setColour_CCC_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setColour_CCC_V_args[] = 
{
  &Pen_methods_setColour_CCC_V_arg_r,
  &Pen_methods_setColour_CCC_V_arg_g,
  &Pen_methods_setColour_CCC_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setColour_CCC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setColour_CCC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setColour", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setColour_CCC_V_args, // the arguments
  0, //arguments count
  Pen_methods_setColour_CCC_V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setColour_CCC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setJoin_I_V_arg_join = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "join", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setJoin_I_V_args[] = 
{
  &Pen_methods_setJoin_I_V_arg_join,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setJoin_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setJoin_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setJoin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setJoin", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setJoin_I_V_args, // the arguments
  0, //arguments count
  Pen_methods_setJoin_I_V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setJoin_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setStyle_I_V_args[] = 
{
  &Pen_methods_setStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setStyle", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setStyle_I_V_args, // the arguments
  0, //arguments count
  Pen_methods_setStyle_I_V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Pen_methods_setWidth_I_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Pen_methods_setWidth_I_V_args[] = 
{
  &Pen_methods_setWidth_I_V_arg_width,
  0
};

::acdk::lang::dmi::ClazzInfo* Pen_methods_setWidth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Pen_method_setWidth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setWidth", // alternative name of method
  -1, // altlabelHashCode
  Pen_methods_setWidth_I_V_args, // the arguments
  0, //arguments count
  Pen_methods_setWidth_I_V_exceptions, // the declared exceptions
  Pen_MetainfoWrapper::Pen_method_setWidth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Pen_methods[] = 
{
  &Pen_method_GetClass__L_acdk_lang_RClass_,
  &Pen_method_Pen__LRPen_,
  &Pen_method_Pen_INLRColour_II_LRPen_,
  &Pen_method_getBlackDashedPen__LRPen_,
  &Pen_method_getBlackPen__LRPen_,
  &Pen_method_getCap__I,
  &Pen_method_getCyanPen__LRPen_,
  &Pen_method_getGreenPen__LRPen_,
  &Pen_method_getGreyPen__LRPen_,
  &Pen_method_getJoin__I,
  &Pen_method_getLightGreyPen__LRPen_,
  &Pen_method_getMediumGreyPen__LRPen_,
  &Pen_method_getNullPen__LRPen_,
  &Pen_method_getRedPen__LRPen_,
  &Pen_method_getStyle__I,
  &Pen_method_getTransparentPen__LRPen_,
  &Pen_method_getWhitePen__LRPen_,
  &Pen_method_getWidth__I,
  &Pen_method_ok__Z,
  &Pen_method_setCap_I_V,
  &Pen_method_setColour_INLRColour__V,
  &Pen_method_setColour_CCC_V,
  &Pen_method_setJoin_I_V,
  &Pen_method_setStyle_I_V,
  &Pen_method_setWidth_I_V,
  0
};


struct Pen_MetaInfoInitializer
{  Pen_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Pen::clazzInfo();
    ci->fields =  _Pen_fields;
    ci->methods =  _Pen_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Pen_MetaInfoInitializer Pen_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Brush_create_array(int length)
{
  return new ObjectArrayImpl<RBrush>(length);
}

//static
::acdk::lang::RObject
Brush_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Brush_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_Brush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Brush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_Brush_INLRColour_I_LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Brush((RColour)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_Brush_INLRBitmap__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Brush((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_Brush_INLRBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Brush((RBrush)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getBlackBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getBlackBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getBlueBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getBlueBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getColour__LRColour__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Brush::getColour();
    else
        ret = (::acdk::lang::RObject)This->getColour();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getCyanBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getCyanBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getGreenBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getGreenBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getGreyBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getGreyBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getLightGreyBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getLightGreyBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getMediumGreyBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getMediumGreyBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getNullBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getNullBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getRedBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getRedBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getStipple__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Brush::getStipple();
    else
        ret = (::acdk::lang::RObject)This->getStipple();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getStyle__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Brush::getStyle();
    else
      ret = This->getStyle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getTransparentBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getTransparentBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_getWhiteBrush__LRBrush__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Brush::getWhiteBrush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_ok__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Brush::ok();
    else
      ret = This->ok();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_setColour_INLRColour__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Brush::setColour((RColour)args[0].getObjectVar());
    else
        This->setColour((RColour)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_setColour_CCC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Brush::setColour(args[0].getCharVar(), args[1].getCharVar(), args[2].getCharVar());
    else
        This->setColour(args[0].getCharVar(), args[1].getCharVar(), args[2].getCharVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_setStipple_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Brush::setStipple((RBitmap)args[0].getObjectVar());
    else
        This->setStipple((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Brush_method_setStyle_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Brush* This = dmi_cast<Brush>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Brush::setStyle(args[0].getIntVar());
    else
        This->setStyle(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Brush_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_Brush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_Brush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_Brush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Brush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Brush::clazzInfo(), // return type
  "_0_Brush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_Brush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_Brush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_Brush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_Brush_INLRColour_I_LRBrush__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_Brush_INLRColour_I_LRBrush__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_Brush_INLRColour_I_LRBrush__args[] = 
{
  &Brush_methods_Brush_INLRColour_I_LRBrush__arg_col,
  &Brush_methods_Brush_INLRColour_I_LRBrush__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_Brush_INLRColour_I_LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_Brush_INLRColour_I_LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Brush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Brush::clazzInfo(), // return type
  "_1_Brush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_Brush_INLRColour_I_LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_Brush_INLRColour_I_LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_Brush_INLRColour_I_LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_Brush_INLRBitmap__LRBrush__arg_stipple = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stipple", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_Brush_INLRBitmap__LRBrush__args[] = 
{
  &Brush_methods_Brush_INLRBitmap__LRBrush__arg_stipple,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_Brush_INLRBitmap__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_Brush_INLRBitmap__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Brush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Brush::clazzInfo(), // return type
  "_2_Brush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_Brush_INLRBitmap__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_Brush_INLRBitmap__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_Brush_INLRBitmap__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_Brush_INLRBrush__LRBrush__arg_brush = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "brush", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_Brush_INLRBrush__LRBrush__args[] = 
{
  &Brush_methods_Brush_INLRBrush__LRBrush__arg_brush,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_Brush_INLRBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_Brush_INLRBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Brush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Brush::clazzInfo(), // return type
  "_3_Brush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_Brush_INLRBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_Brush_INLRBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_Brush_INLRBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_n_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Brush_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getBlackBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getBlackBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getBlackBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlackBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_g_getBlackBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getBlackBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getBlackBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getBlackBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getBlueBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getBlueBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getBlueBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlueBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_d_getBlueBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getBlueBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getBlueBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getBlueBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getColour__LRColour__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getColour__LRColour__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getColour__LRColour_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo(), // return type
  "_8_getColour", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getColour__LRColour__args, // the arguments
  0, //arguments count
  Brush_methods_getColour__LRColour__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getColour__LRColour__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getCyanBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getCyanBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getCyanBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCyanBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_l_getCyanBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getCyanBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getCyanBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getCyanBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getGreenBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getGreenBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getGreenBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreenBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_e_getGreenBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getGreenBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getGreenBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getGreenBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getGreyBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getGreyBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getGreyBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreyBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_h_getGreyBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getGreyBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getGreyBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getGreyBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getLightGreyBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getLightGreyBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getLightGreyBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLightGreyBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_j_getLightGreyBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getLightGreyBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getLightGreyBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getLightGreyBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getMediumGreyBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getMediumGreyBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getMediumGreyBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMediumGreyBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_i_getMediumGreyBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getMediumGreyBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getMediumGreyBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getMediumGreyBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getNullBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getNullBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getNullBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_c_getNullBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getNullBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getNullBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getNullBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getRedBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getRedBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getRedBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRedBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_m_getRedBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getRedBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getRedBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getRedBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getStipple__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getStipple__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getStipple__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStipple", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_a_getStipple", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getStipple__LRBitmap__args, // the arguments
  0, //arguments count
  Brush_methods_getStipple__LRBitmap__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getStipple__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getStyle__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getStyle__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getStyle__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getStyle", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getStyle__I_args, // the arguments
  0, //arguments count
  Brush_methods_getStyle__I_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getStyle__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getTransparentBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getTransparentBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getTransparentBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTransparentBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_k_getTransparentBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getTransparentBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getTransparentBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getTransparentBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_getWhiteBrush__LRBrush__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_getWhiteBrush__LRBrush__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_getWhiteBrush__LRBrush_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWhiteBrush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBrush::clazzInfo(), // return type
  "_f_getWhiteBrush", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_getWhiteBrush__LRBrush__args, // the arguments
  0, //arguments count
  Brush_methods_getWhiteBrush__LRBrush__exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_getWhiteBrush__LRBrush__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_ok__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_ok__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_ok__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ok", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_ok", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_ok__Z_args, // the arguments
  0, //arguments count
  Brush_methods_ok__Z_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_ok__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setColour_INLRColour__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_setColour_INLRColour__V_args[] = 
{
  &Brush_methods_setColour_INLRColour__V_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_setColour_INLRColour__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_setColour_INLRColour__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setColour", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_setColour_INLRColour__V_args, // the arguments
  0, //arguments count
  Brush_methods_setColour_INLRColour__V_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_setColour_INLRColour__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setColour_CCC_V_arg_r = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "r", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setColour_CCC_V_arg_g = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "g", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setColour_CCC_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_setColour_CCC_V_args[] = 
{
  &Brush_methods_setColour_CCC_V_arg_r,
  &Brush_methods_setColour_CCC_V_arg_g,
  &Brush_methods_setColour_CCC_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_setColour_CCC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_setColour_CCC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setColour", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setColour", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_setColour_CCC_V_args, // the arguments
  0, //arguments count
  Brush_methods_setColour_CCC_V_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_setColour_CCC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setStipple_INLRBitmap__V_arg_stipple = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stipple", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_setStipple_INLRBitmap__V_args[] = 
{
  &Brush_methods_setStipple_INLRBitmap__V_arg_stipple,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_setStipple_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_setStipple_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStipple", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setStipple", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_setStipple_INLRBitmap__V_args, // the arguments
  0, //arguments count
  Brush_methods_setStipple_INLRBitmap__V_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_setStipple_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Brush_methods_setStyle_I_V_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Brush_methods_setStyle_I_V_args[] = 
{
  &Brush_methods_setStyle_I_V_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Brush_methods_setStyle_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Brush_method_setStyle_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setStyle", // alternative name of method
  -1, // altlabelHashCode
  Brush_methods_setStyle_I_V_args, // the arguments
  0, //arguments count
  Brush_methods_setStyle_I_V_exceptions, // the declared exceptions
  Brush_MetainfoWrapper::Brush_method_setStyle_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Brush_methods[] = 
{
  &Brush_method_Brush__LRBrush_,
  &Brush_method_Brush_INLRColour_I_LRBrush_,
  &Brush_method_Brush_INLRBitmap__LRBrush_,
  &Brush_method_Brush_INLRBrush__LRBrush_,
  &Brush_method_GetClass__L_acdk_lang_RClass_,
  &Brush_method_getBlackBrush__LRBrush_,
  &Brush_method_getBlueBrush__LRBrush_,
  &Brush_method_getColour__LRColour_,
  &Brush_method_getCyanBrush__LRBrush_,
  &Brush_method_getGreenBrush__LRBrush_,
  &Brush_method_getGreyBrush__LRBrush_,
  &Brush_method_getLightGreyBrush__LRBrush_,
  &Brush_method_getMediumGreyBrush__LRBrush_,
  &Brush_method_getNullBrush__LRBrush_,
  &Brush_method_getRedBrush__LRBrush_,
  &Brush_method_getStipple__LRBitmap_,
  &Brush_method_getStyle__I,
  &Brush_method_getTransparentBrush__LRBrush_,
  &Brush_method_getWhiteBrush__LRBrush_,
  &Brush_method_ok__Z,
  &Brush_method_setColour_INLRColour__V,
  &Brush_method_setColour_CCC_V,
  &Brush_method_setStipple_INLRBitmap__V,
  &Brush_method_setStyle_I_V,
  0
};


struct Brush_MetaInfoInitializer
{  Brush_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Brush::clazzInfo();
    ci->fields =  _Brush_fields;
    ci->methods =  _Brush_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Brush_MetaInfoInitializer Brush_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ProgressDialog_create_array(int length)
{
  return new ObjectArrayImpl<RProgressDialog>(length);
}

//static
::acdk::lang::RObject
ProgressDialog_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProgressDialog_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProgressDialog::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProgressDialog((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RWindow)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_ProgressDialog_INLRString_INLRString__LRProgressDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProgressDialog((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProgressDialog((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProgressDialog((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getIntVar(), (RWindow)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_resume__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProgressDialog* This = dmi_cast<ProgressDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProgressDialog::resume();
    else
        This->resume();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_update_IINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProgressDialog* This = dmi_cast<ProgressDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ProgressDialog::update(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
      ret = This->update(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProgressDialog_method_update_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProgressDialog* This = dmi_cast<ProgressDialog>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ProgressDialog::update(args[0].getIntVar());
    else
      ret = This->update(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ProgressDialog_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProgressDialog_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__args[] = 
{
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_title,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_message,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_maximum,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_parent,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProgressDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProgressDialog::clazzInfo(), // return type
  "_0_ProgressDialog", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__args, // the arguments
  0, //arguments count
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__args[] = 
{
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__arg_title,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_ProgressDialog_INLRString_INLRString__LRProgressDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProgressDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProgressDialog::clazzInfo(), // return type
  "_1_ProgressDialog", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__args, // the arguments
  0, //arguments count
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString__LRProgressDialog__exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_ProgressDialog_INLRString_INLRString__LRProgressDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__args[] = 
{
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_title,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_message,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__arg_maximum,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_ProgressDialog_INLRString_INLRString_I_LRProgressDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProgressDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProgressDialog::clazzInfo(), // return type
  "_2_ProgressDialog", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__args, // the arguments
  0, //arguments count
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_ProgressDialog_INLRString_INLRString_I_LRProgressDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_maximum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maximum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__args[] = 
{
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_title,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_message,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_maximum,
  &ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProgressDialog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProgressDialog::clazzInfo(), // return type
  "_3_ProgressDialog", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__args, // the arguments
  0, //arguments count
  ProgressDialog_methods_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_resume__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_resume__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_resume__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resume", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_resume", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_resume__V_args, // the arguments
  0, //arguments count
  ProgressDialog_methods_resume__V_exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_resume__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_update_IINLRString__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_update_IINLRString__Z_arg_newmsg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "newmsg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_update_IINLRString__Z_args[] = 
{
  &ProgressDialog_methods_update_IINLRString__Z_arg_value,
  &ProgressDialog_methods_update_IINLRString__Z_arg_newmsg,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_update_IINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_update_IINLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "update", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_update", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_update_IINLRString__Z_args, // the arguments
  0, //arguments count
  ProgressDialog_methods_update_IINLRString__Z_exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_update_IINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProgressDialog_methods_update_I_Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProgressDialog_methods_update_I_Z_args[] = 
{
  &ProgressDialog_methods_update_I_Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* ProgressDialog_methods_update_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProgressDialog_method_update_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "update", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_update", // alternative name of method
  -1, // altlabelHashCode
  ProgressDialog_methods_update_I_Z_args, // the arguments
  0, //arguments count
  ProgressDialog_methods_update_I_Z_exceptions, // the declared exceptions
  ProgressDialog_MetainfoWrapper::ProgressDialog_method_update_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProgressDialog_methods[] = 
{
  &ProgressDialog_method_GetClass__L_acdk_lang_RClass_,
  &ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow_I_LRProgressDialog_,
  &ProgressDialog_method_ProgressDialog_INLRString_INLRString__LRProgressDialog_,
  &ProgressDialog_method_ProgressDialog_INLRString_INLRString_I_LRProgressDialog_,
  &ProgressDialog_method_ProgressDialog_INLRString_INLRString_IINLRWindow__LRProgressDialog_,
  &ProgressDialog_method_resume__V,
  &ProgressDialog_method_update_IINLRString__Z,
  &ProgressDialog_method_update_I_Z,
  0
};


struct ProgressDialog_MetaInfoInitializer
{  ProgressDialog_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProgressDialog::clazzInfo();
    ci->fields =  _ProgressDialog_fields;
    ci->methods =  _ProgressDialog_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProgressDialog_MetaInfoInitializer ProgressDialog_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
RadioBox_create_array(int length)
{
  return new ObjectArrayImpl<RRadioBox>(length);
}

//static
::acdk::lang::RObject
RadioBox_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RadioBox_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RadioBox::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), (RStringArray)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), (RStringArray)args[7].getObjectVar(), (RValidator)args[8].getObjectVar(), (RString)args[9].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), (RStringArray)args[7].getObjectVar(), (RValidator)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_enable_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::enable(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->enable(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_enable_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::enable(args[0].getIntVar());
    else
        This->enable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_findString_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RadioBox::findString((RString)args[0].getObjectVar());
    else
      ret = This->findString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_getCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RadioBox::getCount();
    else
      ret = This->getCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_getLengthFromStringArray_INLRStringArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = RadioBox::getLengthFromStringArray((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_getSelection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RadioBox::getSelection();
    else
      ret = This->getSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RadioBox::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_getStringSelection__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RadioBox::getStringSelection();
    else
        ret = (::acdk::lang::RObject)This->getStringSelection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_setSelection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::setSelection(args[0].getIntVar());
    else
        This->setSelection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_setStringSelection_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RadioBox::setStringSelection((RString)args[0].getObjectVar());
    else
      ret = This->setStringSelection((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_show_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::show(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->show(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioBox_method_show_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioBox* This = dmi_cast<RadioBox>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioBox::show(args[0].getIntVar());
    else
        This->show(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RadioBox_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RadioBox_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_4_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_majorDim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "majorDim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_size,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__arg_majorDim,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_5_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_majorDim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "majorDim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_size,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_majorDim,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_6_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_majorDim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "majorDim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_size,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_majorDim,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_style,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_7_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__arg_title,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_2_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_3_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_majorDim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "majorDim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_size,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_majorDim,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_style,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_choices,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_validator,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_1_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_title = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "title", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_majorDim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "majorDim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__args[] = 
{
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_parent,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_id,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_title,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_pos,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_size,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_majorDim,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_style,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_choices,
  &RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioBox::clazzInfo(), // return type
  "_8_RadioBox", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__args, // the arguments
  0, //arguments count
  RadioBox_methods_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_enable_IZ_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_enable_IZ_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_enable_IZ_V_args[] = 
{
  &RadioBox_methods_enable_IZ_V_arg_n,
  &RadioBox_methods_enable_IZ_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_enable_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_enable_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_enable", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_enable_IZ_V_args, // the arguments
  0, //arguments count
  RadioBox_methods_enable_IZ_V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_enable_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_enable_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_enable_I_V_args[] = 
{
  &RadioBox_methods_enable_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_enable_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_enable_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "enable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_enable", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_enable_I_V_args, // the arguments
  0, //arguments count
  RadioBox_methods_enable_I_V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_enable_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_findString_INLRString__I_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_findString_INLRString__I_args[] = 
{
  &RadioBox_methods_findString_INLRString__I_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_findString_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_findString_INLRString__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_findString", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_findString_INLRString__I_args, // the arguments
  0, //arguments count
  RadioBox_methods_findString_INLRString__I_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_findString_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_getCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_getCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_getCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getCount", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_getCount__I_args, // the arguments
  0, //arguments count
  RadioBox_methods_getCount__I_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_getCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_args[] = 
{
  &RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_arg_sa,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_getLengthFromStringArray_INLRStringArray__I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLengthFromStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getLengthFromStringArray", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_args, // the arguments
  0, //arguments count
  RadioBox_methods_getLengthFromStringArray_INLRStringArray__I_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_getLengthFromStringArray_INLRStringArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_getSelection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_getSelection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_getSelection__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getSelection", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_getSelection__I_args, // the arguments
  0, //arguments count
  RadioBox_methods_getSelection__I_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_getSelection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_getString_I_LRString__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_getString_I_LRString__args[] = 
{
  &RadioBox_methods_getString_I_LRString__arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getString", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  RadioBox_methods_getString_I_LRString__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_getStringSelection__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_getStringSelection__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_getStringSelection__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getStringSelection", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_getStringSelection__LRString__args, // the arguments
  0, //arguments count
  RadioBox_methods_getStringSelection__LRString__exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_getStringSelection__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_setSelection_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_setSelection_I_V_args[] = 
{
  &RadioBox_methods_setSelection_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_setSelection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_setSelection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setSelection", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_setSelection_I_V_args, // the arguments
  0, //arguments count
  RadioBox_methods_setSelection_I_V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_setSelection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_setString_IINLRString__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_setString_IINLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_setString_IINLRString__V_args[] = 
{
  &RadioBox_methods_setString_IINLRString__V_arg_n,
  &RadioBox_methods_setString_IINLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setString", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  RadioBox_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_setStringSelection_INLRString__Z_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_setStringSelection_INLRString__Z_args[] = 
{
  &RadioBox_methods_setStringSelection_INLRString__Z_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_setStringSelection_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_setStringSelection_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_setStringSelection", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_setStringSelection_INLRString__Z_args, // the arguments
  0, //arguments count
  RadioBox_methods_setStringSelection_INLRString__Z_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_setStringSelection_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_show_IZ_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_show_IZ_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_show_IZ_V_args[] = 
{
  &RadioBox_methods_show_IZ_V_arg_n,
  &RadioBox_methods_show_IZ_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_show_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_show_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_show", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_show_IZ_V_args, // the arguments
  0, //arguments count
  RadioBox_methods_show_IZ_V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_show_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioBox_methods_show_I_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioBox_methods_show_I_V_args[] = 
{
  &RadioBox_methods_show_I_V_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioBox_methods_show_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioBox_method_show_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_show", // alternative name of method
  -1, // altlabelHashCode
  RadioBox_methods_show_I_V_args, // the arguments
  0, //arguments count
  RadioBox_methods_show_I_V_exceptions, // the declared exceptions
  RadioBox_MetainfoWrapper::RadioBox_method_show_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RadioBox_methods[] = 
{
  &RadioBox_method_GetClass__L_acdk_lang_RClass_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray__LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString__LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint__LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator_INLRString__LRRadioBox_,
  &RadioBox_method_RadioBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IIINLRStringArray_INLRValidator__LRRadioBox_,
  &RadioBox_method_enable_IZ_V,
  &RadioBox_method_enable_I_V,
  &RadioBox_method_findString_INLRString__I,
  &RadioBox_method_getCount__I,
  &RadioBox_method_getLengthFromStringArray_INLRStringArray__I,
  &RadioBox_method_getSelection__I,
  &RadioBox_method_getString_I_LRString_,
  &RadioBox_method_getStringSelection__LRString_,
  &RadioBox_method_setSelection_I_V,
  &RadioBox_method_setString_IINLRString__V,
  &RadioBox_method_setStringSelection_INLRString__Z,
  &RadioBox_method_show_IZ_V,
  &RadioBox_method_show_I_V,
  0
};


struct RadioBox_MetaInfoInitializer
{  RadioBox_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RadioBox::clazzInfo();
    ci->fields =  _RadioBox_fields;
    ci->methods =  _RadioBox_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RadioBox_MetaInfoInitializer RadioBox_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
RadioButton_create_array(int length)
{
  return new ObjectArrayImpl<RRadioButton>(length);
}

//static
::acdk::lang::RObject
RadioButton_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RadioButton_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RadioButton::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar(), (RString)args[7].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString__LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RadioButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RValidator)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_getValue__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioButton* This = dmi_cast<RadioButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RadioButton::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RadioButton_method_setValue_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RadioButton* This = dmi_cast<RadioButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RadioButton::setValue(args[0].getBoolVar());
    else
        This->setValue(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RadioButton_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RadioButton_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_label,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_pos,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_size,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_style,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_validator,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_0_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString__LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_1_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString__LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString__LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_label,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_2_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_label,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_pos,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_3_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_label,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_pos,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_size,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_4_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__args[] = 
{
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_parent,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_id,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_label,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_pos,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_size,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_style,
  &RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RadioButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RadioButton::clazzInfo(), // return type
  "_5_RadioButton", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__args, // the arguments
  0, //arguments count
  RadioButton_methods_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_getValue__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_getValue__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_getValue__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_getValue", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_getValue__Z_args, // the arguments
  0, //arguments count
  RadioButton_methods_getValue__Z_exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_getValue__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RadioButton_methods_setValue_Z_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RadioButton_methods_setValue_Z_V_args[] = 
{
  &RadioButton_methods_setValue_Z_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* RadioButton_methods_setValue_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RadioButton_method_setValue_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setValue", // alternative name of method
  -1, // altlabelHashCode
  RadioButton_methods_setValue_Z_V_args, // the arguments
  0, //arguments count
  RadioButton_methods_setValue_Z_V_exceptions, // the declared exceptions
  RadioButton_MetainfoWrapper::RadioButton_method_setValue_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RadioButton_methods[] = 
{
  &RadioButton_method_GetClass__L_acdk_lang_RClass_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator_INLRString__LRRadioButton_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString__LRRadioButton_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint__LRRadioButton_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize__LRRadioButton_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRRadioButton_,
  &RadioButton_method_RadioButton_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRValidator__LRRadioButton_,
  &RadioButton_method_getValue__Z,
  &RadioButton_method_setValue_Z_V,
  0
};


struct RadioButton_MetaInfoInitializer
{  RadioButton_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RadioButton::clazzInfo();
    ci->fields =  _RadioButton_fields;
    ci->methods =  _RadioButton_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RadioButton_MetaInfoInitializer RadioButton_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Region_create_array(int length)
{
  return new ObjectArrayImpl<RRegion>(length);
}

//static
::acdk::lang::RObject
Region_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Region_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Region::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_IIII_LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_INLRPoint_INLRPoint__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region((RPoint)args[0].getObjectVar(), (RPoint)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_INLRRect__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_INLRBitmap_INLRColour_I_LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_INLRBitmap__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_Region_INLRBitmap_INLRColour__LRRegion__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Region((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Region::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_contains_INLRPoint__LRegionContain__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (RegionContain)This->Region::contains((RPoint)args[0].getObjectVar());
    else
      ret = (RegionContain)This->contains((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_contains_IIII_LRegionContain__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (RegionContain)This->Region::contains(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = (RegionContain)This->contains(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_contains_II_LRegionContain__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (RegionContain)This->Region::contains(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = (RegionContain)This->contains(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_contains_INLRRect__LRegionContain__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (RegionContain)This->Region::contains((RRect)args[0].getObjectVar());
    else
      ret = (RegionContain)This->contains((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_convertToBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Region::convertToBitmap();
    else
        ret = (::acdk::lang::RObject)This->convertToBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_empty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::empty();
    else
      ret = This->empty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_getBox__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Region::getBox();
    else
        ret = (::acdk::lang::RObject)This->getBox();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_getBox_OUTIOUTIOUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Region::getBox(args[0].getIntRef(), args[1].getIntRef(), args[2].getIntRef(), args[3].getIntRef());
    else
        This->getBox(args[0].getIntRef(), args[1].getIntRef(), args[2].getIntRef(), args[3].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_intersect_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::intersect(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->intersect(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_intersect_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::intersect((RRect)args[0].getObjectVar());
    else
      ret = This->intersect((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_intersect_INLRRegion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::intersect((RRegion)args[0].getObjectVar());
    else
      ret = This->intersect((RRegion)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_offset_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::offset(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->offset(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_subtract_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::subtract(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->subtract(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_subtract_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::subtract((RRect)args[0].getObjectVar());
    else
      ret = This->subtract((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_subtract_INLRRegion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::subtract((RRegion)args[0].getObjectVar());
    else
      ret = This->subtract((RRegion)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->unionRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion((RRect)args[0].getObjectVar());
    else
      ret = This->unionRegion((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_INLRRegion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion((RRegion)args[0].getObjectVar());
    else
      ret = This->unionRegion((RRegion)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_INLRBitmap_INLRColour_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar(), args[2].getIntVar());
    else
      ret = This->unionRegion((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_INLRBitmap__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion((RBitmap)args[0].getObjectVar());
    else
      ret = This->unionRegion((RBitmap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_unionRegion_INLRBitmap_INLRColour__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::unionRegion((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    else
      ret = This->unionRegion((RBitmap)args[0].getObjectVar(), (RColour)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_xorRegion_IIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::xorRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
      ret = This->xorRegion(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_xorRegion_INLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::xorRegion((RRect)args[0].getObjectVar());
    else
      ret = This->xorRegion((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Region_method_xorRegion_INLRRegion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Region* This = dmi_cast<Region>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Region::xorRegion((RRegion)args[0].getObjectVar());
    else
      ret = This->xorRegion((RRegion)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Region_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_x_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Region_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region__LRRegion__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region__LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_0_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region__LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region__LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_IIII_LRRegion__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_IIII_LRRegion__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_IIII_LRRegion__arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_IIII_LRRegion__arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_IIII_LRRegion__args[] = 
{
  &Region_methods_Region_IIII_LRRegion__arg_x,
  &Region_methods_Region_IIII_LRRegion__arg_y,
  &Region_methods_Region_IIII_LRRegion__arg_w,
  &Region_methods_Region_IIII_LRRegion__arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_IIII_LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_IIII_LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_1_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_IIII_LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_IIII_LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_IIII_LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRPoint_INLRPoint__LRRegion__arg_topLeft = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "topLeft", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRPoint_INLRPoint__LRRegion__arg_bottomRight = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bottomRight", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_INLRPoint_INLRPoint__LRRegion__args[] = 
{
  &Region_methods_Region_INLRPoint_INLRPoint__LRRegion__arg_topLeft,
  &Region_methods_Region_INLRPoint_INLRPoint__LRRegion__arg_bottomRight,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_INLRPoint_INLRPoint__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_INLRPoint_INLRPoint__LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_2_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_INLRPoint_INLRPoint__LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_INLRPoint_INLRPoint__LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_INLRPoint_INLRPoint__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRRect__LRRegion__arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_INLRRect__LRRegion__args[] = 
{
  &Region_methods_Region_INLRRect__LRRegion__arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_INLRRect__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_INLRRect__LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_3_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_INLRRect__LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_INLRRect__LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_INLRRect__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_transColour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "transColour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_tolerance = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tolerance", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__args[] = 
{
  &Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_bmp,
  &Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_transColour,
  &Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__arg_tolerance,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_INLRBitmap_INLRColour_I_LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_4_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_INLRBitmap_INLRColour_I_LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_INLRBitmap_INLRColour_I_LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap__LRRegion__arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_INLRBitmap__LRRegion__args[] = 
{
  &Region_methods_Region_INLRBitmap__LRRegion__arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_INLRBitmap__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_INLRBitmap__LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_5_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_INLRBitmap__LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_INLRBitmap__LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_INLRBitmap__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap_INLRColour__LRRegion__arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_Region_INLRBitmap_INLRColour__LRRegion__arg_transColour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "transColour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_Region_INLRBitmap_INLRColour__LRRegion__args[] = 
{
  &Region_methods_Region_INLRBitmap_INLRColour__LRRegion__arg_bmp,
  &Region_methods_Region_INLRBitmap_INLRColour__LRRegion__arg_transColour,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_Region_INLRBitmap_INLRColour__LRRegion__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_Region_INLRBitmap_INLRColour__LRRegion_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Region", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Region::clazzInfo(), // return type
  "_6_Region", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_Region_INLRBitmap_INLRColour__LRRegion__args, // the arguments
  0, //arguments count
  Region_methods_Region_INLRBitmap_INLRColour__LRRegion__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_Region_INLRBitmap_INLRColour__LRRegion__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_clear", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_clear__V_args, // the arguments
  0, //arguments count
  Region_methods_clear__V_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_INLRPoint__LRegionContain__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_contains_INLRPoint__LRegionContain__args[] = 
{
  &Region_methods_contains_INLRPoint__LRegionContain__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_contains_INLRPoint__LRegionContain__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_contains_INLRPoint__LRegionContain_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_contains", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_contains_INLRPoint__LRegionContain__args, // the arguments
  0, //arguments count
  Region_methods_contains_INLRPoint__LRegionContain__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_contains_INLRPoint__LRegionContain__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_IIII_LRegionContain__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_IIII_LRegionContain__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_IIII_LRegionContain__arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_IIII_LRegionContain__arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_contains_IIII_LRegionContain__args[] = 
{
  &Region_methods_contains_IIII_LRegionContain__arg_x,
  &Region_methods_contains_IIII_LRegionContain__arg_y,
  &Region_methods_contains_IIII_LRegionContain__arg_w,
  &Region_methods_contains_IIII_LRegionContain__arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_contains_IIII_LRegionContain__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_contains_IIII_LRegionContain_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_contains", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_contains_IIII_LRegionContain__args, // the arguments
  0, //arguments count
  Region_methods_contains_IIII_LRegionContain__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_contains_IIII_LRegionContain__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_II_LRegionContain__arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_II_LRegionContain__arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_contains_II_LRegionContain__args[] = 
{
  &Region_methods_contains_II_LRegionContain__arg_x,
  &Region_methods_contains_II_LRegionContain__arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_contains_II_LRegionContain__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_contains_II_LRegionContain_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_contains", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_contains_II_LRegionContain__args, // the arguments
  0, //arguments count
  Region_methods_contains_II_LRegionContain__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_contains_II_LRegionContain__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_contains_INLRRect__LRegionContain__arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_contains_INLRRect__LRegionContain__args[] = 
{
  &Region_methods_contains_INLRRect__LRegionContain__arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_contains_INLRRect__LRegionContain__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_contains_INLRRect__LRegionContain_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_contains", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_contains_INLRRect__LRegionContain__args, // the arguments
  0, //arguments count
  Region_methods_contains_INLRRect__LRegionContain__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_contains_INLRRect__LRegionContain__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_convertToBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_convertToBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_convertToBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertToBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_t_convertToBitmap", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_convertToBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  Region_methods_convertToBitmap__LRBitmap__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_convertToBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_empty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_empty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_empty__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "empty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_empty", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_empty__Z_args, // the arguments
  0, //arguments count
  Region_methods_empty__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_empty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_getBox__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_getBox__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_getBox__LRRect_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_m_getBox", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_getBox__LRRect__args, // the arguments
  0, //arguments count
  Region_methods_getBox__LRRect__exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_getBox__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_getBox_OUTIOUTIOUTIOUTI_V_args[] = 
{
  &Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_x,
  &Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_y,
  &Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_w,
  &Region_methods_getBox_OUTIOUTIOUTIOUTI_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_getBox_OUTIOUTIOUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_getBox_OUTIOUTIOUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_getBox", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_getBox_OUTIOUTIOUTIOUTI_V_args, // the arguments
  0, //arguments count
  Region_methods_getBox_OUTIOUTIOUTIOUTI_V_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_getBox_OUTIOUTIOUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_IIII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_IIII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_intersect_IIII_Z_args[] = 
{
  &Region_methods_intersect_IIII_Z_arg_x,
  &Region_methods_intersect_IIII_Z_arg_y,
  &Region_methods_intersect_IIII_Z_arg_width,
  &Region_methods_intersect_IIII_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_intersect_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_intersect_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intersect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_intersect", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_intersect_IIII_Z_args, // the arguments
  0, //arguments count
  Region_methods_intersect_IIII_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_intersect_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_INLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_intersect_INLRRect__Z_args[] = 
{
  &Region_methods_intersect_INLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_intersect_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_intersect_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intersect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_intersect", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_intersect_INLRRect__Z_args, // the arguments
  0, //arguments count
  Region_methods_intersect_INLRRect__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_intersect_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_intersect_INLRRegion__Z_arg_region = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "region", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_intersect_INLRRegion__Z_args[] = 
{
  &Region_methods_intersect_INLRRegion__Z_arg_region,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_intersect_INLRRegion__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_intersect_INLRRegion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "intersect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_intersect", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_intersect_INLRRegion__Z_args, // the arguments
  0, //arguments count
  Region_methods_intersect_INLRRegion__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_intersect_INLRRegion__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  Region_methods_isEmpty__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_offset_II_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_offset_II_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_offset_II_Z_args[] = 
{
  &Region_methods_offset_II_Z_arg_x,
  &Region_methods_offset_II_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_offset_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_offset_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "offset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_offset", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_offset_II_Z_args, // the arguments
  0, //arguments count
  Region_methods_offset_II_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_offset_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_IIII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_IIII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_subtract_IIII_Z_args[] = 
{
  &Region_methods_subtract_IIII_Z_arg_x,
  &Region_methods_subtract_IIII_Z_arg_y,
  &Region_methods_subtract_IIII_Z_arg_width,
  &Region_methods_subtract_IIII_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_subtract_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_subtract_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtract", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_subtract", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_subtract_IIII_Z_args, // the arguments
  0, //arguments count
  Region_methods_subtract_IIII_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_subtract_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_INLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_subtract_INLRRect__Z_args[] = 
{
  &Region_methods_subtract_INLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_subtract_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_subtract_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtract", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_subtract", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_subtract_INLRRect__Z_args, // the arguments
  0, //arguments count
  Region_methods_subtract_INLRRect__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_subtract_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_subtract_INLRRegion__Z_arg_region = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "region", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_subtract_INLRRegion__Z_args[] = 
{
  &Region_methods_subtract_INLRRegion__Z_arg_region,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_subtract_INLRRegion__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_subtract_INLRRegion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subtract", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_subtract", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_subtract_INLRRegion__Z_args, // the arguments
  0, //arguments count
  Region_methods_subtract_INLRRegion__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_subtract_INLRRegion__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_IIII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_IIII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_IIII_Z_args[] = 
{
  &Region_methods_unionRegion_IIII_Z_arg_x,
  &Region_methods_unionRegion_IIII_Z_arg_y,
  &Region_methods_unionRegion_IIII_Z_arg_width,
  &Region_methods_unionRegion_IIII_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_IIII_Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_IIII_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_INLRRect__Z_args[] = 
{
  &Region_methods_unionRegion_INLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_INLRRect__Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_INLRRect__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRRegion__Z_arg_region = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "region", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_INLRRegion__Z_args[] = 
{
  &Region_methods_unionRegion_INLRRegion__Z_arg_region,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_INLRRegion__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_INLRRegion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_INLRRegion__Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_INLRRegion__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_INLRRegion__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_transColour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "transColour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_tolerance = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "tolerance", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_args[] = 
{
  &Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_bmp,
  &Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_transColour,
  &Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_arg_tolerance,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_INLRBitmap_INLRColour_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_INLRBitmap_INLRColour_I_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_INLRBitmap_INLRColour_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap__Z_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_INLRBitmap__Z_args[] = 
{
  &Region_methods_unionRegion_INLRBitmap__Z_arg_bmp,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_INLRBitmap__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_INLRBitmap__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_INLRBitmap__Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_INLRBitmap__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_INLRBitmap__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap_INLRColour__Z_arg_bmp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bmp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_unionRegion_INLRBitmap_INLRColour__Z_arg_transColour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "transColour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RColour::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_unionRegion_INLRBitmap_INLRColour__Z_args[] = 
{
  &Region_methods_unionRegion_INLRBitmap_INLRColour__Z_arg_bmp,
  &Region_methods_unionRegion_INLRBitmap_INLRColour__Z_arg_transColour,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_unionRegion_INLRBitmap_INLRColour__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_unionRegion_INLRBitmap_INLRColour__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "unionRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_unionRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_unionRegion_INLRBitmap_INLRColour__Z_args, // the arguments
  0, //arguments count
  Region_methods_unionRegion_INLRBitmap_INLRColour__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_unionRegion_INLRBitmap_INLRColour__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_IIII_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_IIII_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_IIII_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_IIII_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_xorRegion_IIII_Z_args[] = 
{
  &Region_methods_xorRegion_IIII_Z_arg_x,
  &Region_methods_xorRegion_IIII_Z_arg_y,
  &Region_methods_xorRegion_IIII_Z_arg_width,
  &Region_methods_xorRegion_IIII_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_xorRegion_IIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_xorRegion_IIII_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xorRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_xorRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_xorRegion_IIII_Z_args, // the arguments
  0, //arguments count
  Region_methods_xorRegion_IIII_Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_xorRegion_IIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_INLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_xorRegion_INLRRect__Z_args[] = 
{
  &Region_methods_xorRegion_INLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_xorRegion_INLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_xorRegion_INLRRect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xorRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_xorRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_xorRegion_INLRRect__Z_args, // the arguments
  0, //arguments count
  Region_methods_xorRegion_INLRRect__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_xorRegion_INLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Region_methods_xorRegion_INLRRegion__Z_arg_region = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "region", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRegion::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Region_methods_xorRegion_INLRRegion__Z_args[] = 
{
  &Region_methods_xorRegion_INLRRegion__Z_arg_region,
  0
};

::acdk::lang::dmi::ClazzInfo* Region_methods_xorRegion_INLRRegion__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Region_method_xorRegion_INLRRegion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "xorRegion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_xorRegion", // alternative name of method
  -1, // altlabelHashCode
  Region_methods_xorRegion_INLRRegion__Z_args, // the arguments
  0, //arguments count
  Region_methods_xorRegion_INLRRegion__Z_exceptions, // the declared exceptions
  Region_MetainfoWrapper::Region_method_xorRegion_INLRRegion__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Region_methods[] = 
{
  &Region_method_GetClass__L_acdk_lang_RClass_,
  &Region_method_Region__LRRegion_,
  &Region_method_Region_IIII_LRRegion_,
  &Region_method_Region_INLRPoint_INLRPoint__LRRegion_,
  &Region_method_Region_INLRRect__LRRegion_,
  &Region_method_Region_INLRBitmap_INLRColour_I_LRRegion_,
  &Region_method_Region_INLRBitmap__LRRegion_,
  &Region_method_Region_INLRBitmap_INLRColour__LRRegion_,
  &Region_method_clear__V,
  &Region_method_contains_INLRPoint__LRegionContain_,
  &Region_method_contains_IIII_LRegionContain_,
  &Region_method_contains_II_LRegionContain_,
  &Region_method_contains_INLRRect__LRegionContain_,
  &Region_method_convertToBitmap__LRBitmap_,
  &Region_method_empty__Z,
  &Region_method_getBox__LRRect_,
  &Region_method_getBox_OUTIOUTIOUTIOUTI_V,
  &Region_method_intersect_IIII_Z,
  &Region_method_intersect_INLRRect__Z,
  &Region_method_intersect_INLRRegion__Z,
  &Region_method_isEmpty__Z,
  &Region_method_offset_II_Z,
  &Region_method_subtract_IIII_Z,
  &Region_method_subtract_INLRRect__Z,
  &Region_method_subtract_INLRRegion__Z,
  &Region_method_unionRegion_IIII_Z,
  &Region_method_unionRegion_INLRRect__Z,
  &Region_method_unionRegion_INLRRegion__Z,
  &Region_method_unionRegion_INLRBitmap_INLRColour_I_Z,
  &Region_method_unionRegion_INLRBitmap__Z,
  &Region_method_unionRegion_INLRBitmap_INLRColour__Z,
  &Region_method_xorRegion_IIII_Z,
  &Region_method_xorRegion_INLRRect__Z,
  &Region_method_xorRegion_INLRRegion__Z,
  0
};


struct Region_MetaInfoInitializer
{  Region_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Region::clazzInfo();
    ci->fields =  _Region_fields;
    ci->methods =  _Region_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Region_MetaInfoInitializer Region_MetaInfoInitializer_staticinstance__;


struct Region_clazzInfo_ClazzAttributesResInitializer11
{
  Region_clazzInfo_ClazzAttributesResInitializer11()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Region_method_contains_II_LRegionContain_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)RegionContainMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Region_method_contains_INLRPoint__LRegionContain_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)RegionContainMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Region_method_contains_IIII_LRegionContain_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)RegionContainMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Region_method_contains_INLRRect__LRegionContain_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)RegionContainMetaInf::GetEnumInfo()));
  }
};

Region_clazzInfo_ClazzAttributesResInitializer11 Region_clazzInfo_ClazzAttributesResInitializer11_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ScreenDC_create_array(int length)
{
  return new ObjectArrayImpl<RScreenDC>(length);
}

//static
::acdk::lang::RObject
ScreenDC_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScreenDC_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScreenDC_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScreenDC::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScreenDC_method_ScreenDC__LRScreenDC__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScreenDC();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScreenDC_method_endDrawingOnTop__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScreenDC* This = dmi_cast<ScreenDC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScreenDC::endDrawingOnTop();
    else
      ret = This->endDrawingOnTop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScreenDC_method_startDrawingOnTop_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScreenDC* This = dmi_cast<ScreenDC>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScreenDC::startDrawingOnTop((RWindow)args[0].getObjectVar());
    else
      ret = This->startDrawingOnTop((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ScreenDC_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScreenDC_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScreenDC_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScreenDC_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScreenDC_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScreenDC_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScreenDC_MetainfoWrapper::ScreenDC_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScreenDC_methods_ScreenDC__LRScreenDC__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScreenDC_methods_ScreenDC__LRScreenDC__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScreenDC_method_ScreenDC__LRScreenDC_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScreenDC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScreenDC::clazzInfo(), // return type
  "_0_ScreenDC", // alternative name of method
  -1, // altlabelHashCode
  ScreenDC_methods_ScreenDC__LRScreenDC__args, // the arguments
  0, //arguments count
  ScreenDC_methods_ScreenDC__LRScreenDC__exceptions, // the declared exceptions
  ScreenDC_MetainfoWrapper::ScreenDC_method_ScreenDC__LRScreenDC__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScreenDC_methods_endDrawingOnTop__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScreenDC_methods_endDrawingOnTop__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScreenDC_method_endDrawingOnTop__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endDrawingOnTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_endDrawingOnTop", // alternative name of method
  -1, // altlabelHashCode
  ScreenDC_methods_endDrawingOnTop__Z_args, // the arguments
  0, //arguments count
  ScreenDC_methods_endDrawingOnTop__Z_exceptions, // the declared exceptions
  ScreenDC_MetainfoWrapper::ScreenDC_method_endDrawingOnTop__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_args[] = 
{
  &ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScreenDC_method_startDrawingOnTop_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startDrawingOnTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_startDrawingOnTop", // alternative name of method
  -1, // altlabelHashCode
  ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_args, // the arguments
  0, //arguments count
  ScreenDC_methods_startDrawingOnTop_INLRWindow__Z_exceptions, // the declared exceptions
  ScreenDC_MetainfoWrapper::ScreenDC_method_startDrawingOnTop_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScreenDC_methods[] = 
{
  &ScreenDC_method_GetClass__L_acdk_lang_RClass_,
  &ScreenDC_method_ScreenDC__LRScreenDC_,
  &ScreenDC_method_endDrawingOnTop__Z,
  &ScreenDC_method_startDrawingOnTop_INLRWindow__Z,
  0
};


struct ScreenDC_MetaInfoInitializer
{  ScreenDC_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScreenDC::clazzInfo();
    ci->fields =  _ScreenDC_fields;
    ci->methods =  _ScreenDC_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScreenDC_MetaInfoInitializer ScreenDC_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
ScrolledWindow_create_array(int length)
{
  return new ObjectArrayImpl<RScrolledWindow>(length);
}

//static
::acdk::lang::RObject
ScrolledWindow_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScrolledWindow_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScrolledWindow::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrolledWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_ScrolledWindow_INLRWindow_I_LRScrolledWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrolledWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrolledWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrolledWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScrolledWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_calcScrolledPosition_IIOUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::calcScrolledPosition(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntRef(), args[3].getIntRef());
    else
        This->calcScrolledPosition(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntRef(), args[3].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_calcScrolledPosition_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScrolledWindow::calcScrolledPosition((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->calcScrolledPosition((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_calcUnscrolledPosition_IIOUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::calcUnscrolledPosition(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntRef(), args[3].getIntRef());
    else
        This->calcUnscrolledPosition(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntRef(), args[3].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_calcUnscrolledPosition_INLRPoint__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScrolledWindow::calcUnscrolledPosition((RPoint)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->calcUnscrolledPosition((RPoint)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_enableScrolling_ZZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::enableScrolling(args[0].getBoolVar(), args[1].getBoolVar());
    else
        This->enableScrolling(args[0].getBoolVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getScaleX__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrolledWindow::getScaleX();
    else
      ret = This->getScaleX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getScaleY__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrolledWindow::getScaleY();
    else
      ret = This->getScaleY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getScrollPageSize_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScrolledWindow::getScrollPageSize(args[0].getIntVar());
    else
      ret = This->getScrollPageSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getScrollPixelsPerUnit_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::getScrollPixelsPerUnit(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getScrollPixelsPerUnit(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getTargetRect__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScrolledWindow::getTargetRect();
    else
        ret = (::acdk::lang::RObject)This->getTargetRect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getTargetWindow__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScrolledWindow::getTargetWindow();
    else
        ret = (::acdk::lang::RObject)This->getTargetWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_getViewStart_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::getViewStart(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getViewStart(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_scroll_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::scroll(args[0].getIntVar(), args[1].getIntVar());
    else
        This->scroll(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScale_DD_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    else
        This->setScale(args[0].getDoubleVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollPageSize_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollPageSize(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setScrollPageSize(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollRate_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollRate(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setScrollRate(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollbars_IIIIIIZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar(), args[6].getBoolVar());
    else
        This->setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar(), args[6].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollbars_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollbars_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setScrollbars_IIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    else
        This->setScrollbars(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setTargetRect_INLRRect__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setTargetRect((RRect)args[0].getObjectVar());
    else
        This->setTargetRect((RRect)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScrolledWindow_method_setTargetWindow_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScrolledWindow* This = dmi_cast<ScrolledWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScrolledWindow::setTargetWindow((RWindow)args[0].getObjectVar());
    else
        This->setTargetWindow((RWindow)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ScrolledWindow_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__args[] = 
{
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_parent,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_id,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_pos,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_size,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_style,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrolledWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrolledWindow::clazzInfo(), // return type
  "_0_ScrolledWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__args[] = 
{
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__arg_parent,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_ScrolledWindow_INLRWindow_I_LRScrolledWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrolledWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrolledWindow::clazzInfo(), // return type
  "_1_ScrolledWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_I_LRScrolledWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_ScrolledWindow_INLRWindow_I_LRScrolledWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__args[] = 
{
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_parent,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_id,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrolledWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrolledWindow::clazzInfo(), // return type
  "_2_ScrolledWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__args[] = 
{
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_parent,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_id,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_pos,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrolledWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrolledWindow::clazzInfo(), // return type
  "_3_ScrolledWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__args[] = 
{
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_parent,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_id,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_pos,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_size,
  &ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ScrolledWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScrolledWindow::clazzInfo(), // return type
  "_4_ScrolledWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_xx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "xx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_yy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "yy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_args[] = 
{
  &ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_x,
  &ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_y,
  &ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_xx,
  &ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_arg_yy,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_calcScrolledPosition_IIOUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcScrolledPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_calcScrolledPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_calcScrolledPosition_IIOUTIOUTI_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_calcScrolledPosition_IIOUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__args[] = 
{
  &ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_calcScrolledPosition_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcScrolledPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_k_calcScrolledPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_calcScrolledPosition_INLRPoint__LRPoint__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_calcScrolledPosition_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_xx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "xx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_yy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "yy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_args[] = 
{
  &ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_x,
  &ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_y,
  &ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_xx,
  &ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_arg_yy,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_calcUnscrolledPosition_IIOUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcUnscrolledPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_calcUnscrolledPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_calcUnscrolledPosition_IIOUTIOUTI_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_calcUnscrolledPosition_IIOUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__arg_pt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__args[] = 
{
  &ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__arg_pt,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_calcUnscrolledPosition_INLRPoint__LRPoint_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcUnscrolledPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_m_calcUnscrolledPosition", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_calcUnscrolledPosition_INLRPoint__LRPoint__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_calcUnscrolledPosition_INLRPoint__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_enableScrolling_ZZ_V_arg_x_scrolling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x_scrolling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_enableScrolling_ZZ_V_arg_y_scrolling = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y_scrolling", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_enableScrolling_ZZ_V_args[] = 
{
  &ScrolledWindow_methods_enableScrolling_ZZ_V_arg_x_scrolling,
  &ScrolledWindow_methods_enableScrolling_ZZ_V_arg_y_scrolling,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_enableScrolling_ZZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_enableScrolling_ZZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enableScrolling", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_enableScrolling", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_enableScrolling_ZZ_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_enableScrolling_ZZ_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_enableScrolling_ZZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getScaleX__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getScaleX__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getScaleX__D = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScaleX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_h_getScaleX", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getScaleX__D_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getScaleX__D_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getScaleX__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getScaleY__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getScaleY__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getScaleY__D = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScaleY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_i_getScaleY", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getScaleY__D_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getScaleY__D_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getScaleY__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_getScrollPageSize_I_I_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getScrollPageSize_I_I_args[] = 
{
  &ScrolledWindow_methods_getScrollPageSize_I_I_arg_orient,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getScrollPageSize_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getScrollPageSize_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getScrollPageSize", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getScrollPageSize_I_I_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getScrollPageSize_I_I_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getScrollPageSize_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_arg_pixelsPerUnitX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "pixelsPerUnitX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_arg_pixelsPerUnitY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "pixelsPerUnitY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_args[] = 
{
  &ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_arg_pixelsPerUnitX,
  &ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_arg_pixelsPerUnitY,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getScrollPixelsPerUnit_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScrollPixelsPerUnit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_getScrollPixelsPerUnit", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getScrollPixelsPerUnit_OUTIOUTI_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getScrollPixelsPerUnit_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getTargetRect__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getTargetRect__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getTargetRect__LRRect_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo(), // return type
  "_q_getTargetRect", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getTargetRect__LRRect__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getTargetRect__LRRect__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getTargetRect__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getTargetWindow__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getTargetWindow__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getTargetWindow__LRWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_o_getTargetWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getTargetWindow__LRWindow__args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getTargetWindow__LRWindow__exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getTargetWindow__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_getViewStart_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_getViewStart_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_getViewStart_OUTIOUTI_V_args[] = 
{
  &ScrolledWindow_methods_getViewStart_OUTIOUTI_V_arg_x,
  &ScrolledWindow_methods_getViewStart_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_getViewStart_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_getViewStart_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getViewStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_getViewStart", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_getViewStart_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_getViewStart_OUTIOUTI_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_getViewStart_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_scroll_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_scroll_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_scroll_II_V_args[] = 
{
  &ScrolledWindow_methods_scroll_II_V_arg_x,
  &ScrolledWindow_methods_scroll_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_scroll_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_scroll_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "scroll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_scroll", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_scroll_II_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_scroll_II_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_scroll_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScale_DD_V_arg_xs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScale_DD_V_arg_ys = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ys", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScale_DD_V_args[] = 
{
  &ScrolledWindow_methods_setScale_DD_V_arg_xs,
  &ScrolledWindow_methods_setScale_DD_V_arg_ys,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScale_DD_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScale_DD_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setScale", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScale_DD_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScale_DD_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScale_DD_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollPageSize_II_V_arg_orient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "orient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollPageSize_II_V_arg_pageSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pageSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollPageSize_II_V_args[] = 
{
  &ScrolledWindow_methods_setScrollPageSize_II_V_arg_orient,
  &ScrolledWindow_methods_setScrollPageSize_II_V_arg_pageSize,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollPageSize_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollPageSize_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setScrollPageSize", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollPageSize_II_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollPageSize_II_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollPageSize_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollRate_II_V_arg_xstep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xstep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollRate_II_V_arg_ystep = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ystep", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollRate_II_V_args[] = 
{
  &ScrolledWindow_methods_setScrollRate_II_V_arg_xstep,
  &ScrolledWindow_methods_setScrollRate_II_V_arg_ystep,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollRate_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollRate_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollRate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setScrollRate", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollRate_II_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollRate_II_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollRate_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_pixelsPerUnitX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_pixelsPerUnitY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noUnitsX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noUnitsY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_xPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_yPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "yPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noRefresh = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "noRefresh", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_args[] = 
{
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_pixelsPerUnitX,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_pixelsPerUnitY,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noUnitsX,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noUnitsY,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_xPos,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_yPos,
  &ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_arg_noRefresh,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollbars_IIIIIIZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setScrollbars", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollbars_IIIIIIZ_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollbars_IIIIIIZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIII_V_arg_pixelsPerUnitX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIII_V_arg_pixelsPerUnitY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIII_V_arg_noUnitsX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIII_V_arg_noUnitsY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollbars_IIII_V_args[] = 
{
  &ScrolledWindow_methods_setScrollbars_IIII_V_arg_pixelsPerUnitX,
  &ScrolledWindow_methods_setScrollbars_IIII_V_arg_pixelsPerUnitY,
  &ScrolledWindow_methods_setScrollbars_IIII_V_arg_noUnitsX,
  &ScrolledWindow_methods_setScrollbars_IIII_V_arg_noUnitsY,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollbars_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollbars_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setScrollbars", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollbars_IIII_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollbars_IIII_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollbars_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIII_V_arg_pixelsPerUnitX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIII_V_arg_pixelsPerUnitY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIII_V_arg_noUnitsX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIII_V_arg_noUnitsY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIII_V_arg_xPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollbars_IIIII_V_args[] = 
{
  &ScrolledWindow_methods_setScrollbars_IIIII_V_arg_pixelsPerUnitX,
  &ScrolledWindow_methods_setScrollbars_IIIII_V_arg_pixelsPerUnitY,
  &ScrolledWindow_methods_setScrollbars_IIIII_V_arg_noUnitsX,
  &ScrolledWindow_methods_setScrollbars_IIIII_V_arg_noUnitsY,
  &ScrolledWindow_methods_setScrollbars_IIIII_V_arg_xPos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollbars_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollbars_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setScrollbars", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollbars_IIIII_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollbars_IIIII_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollbars_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_pixelsPerUnitX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_pixelsPerUnitY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pixelsPerUnitY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_noUnitsX = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsX", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_noUnitsY = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "noUnitsY", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_xPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "xPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_yPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "yPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setScrollbars_IIIIII_V_args[] = 
{
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_pixelsPerUnitX,
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_pixelsPerUnitY,
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_noUnitsX,
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_noUnitsY,
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_xPos,
  &ScrolledWindow_methods_setScrollbars_IIIIII_V_arg_yPos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setScrollbars_IIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setScrollbars_IIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setScrollbars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setScrollbars", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setScrollbars_IIIIII_V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setScrollbars_IIIIII_V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setScrollbars_IIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setTargetRect_INLRRect__V_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setTargetRect_INLRRect__V_args[] = 
{
  &ScrolledWindow_methods_setTargetRect_INLRRect__V_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setTargetRect_INLRRect__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setTargetRect_INLRRect__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTargetRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setTargetRect", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setTargetRect_INLRRect__V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setTargetRect_INLRRect__V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setTargetRect_INLRRect__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScrolledWindow_methods_setTargetWindow_INLRWindow__V_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScrolledWindow_methods_setTargetWindow_INLRWindow__V_args[] = 
{
  &ScrolledWindow_methods_setTargetWindow_INLRWindow__V_arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* ScrolledWindow_methods_setTargetWindow_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScrolledWindow_method_setTargetWindow_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTargetWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setTargetWindow", // alternative name of method
  -1, // altlabelHashCode
  ScrolledWindow_methods_setTargetWindow_INLRWindow__V_args, // the arguments
  0, //arguments count
  ScrolledWindow_methods_setTargetWindow_INLRWindow__V_exceptions, // the declared exceptions
  ScrolledWindow_MetainfoWrapper::ScrolledWindow_method_setTargetWindow_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScrolledWindow_methods[] = 
{
  &ScrolledWindow_method_GetClass__L_acdk_lang_RClass_,
  &ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRScrolledWindow_,
  &ScrolledWindow_method_ScrolledWindow_INLRWindow_I_LRScrolledWindow_,
  &ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint__LRScrolledWindow_,
  &ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize__LRScrolledWindow_,
  &ScrolledWindow_method_ScrolledWindow_INLRWindow_IINLRPoint_INLRSize_I_LRScrolledWindow_,
  &ScrolledWindow_method_calcScrolledPosition_IIOUTIOUTI_V,
  &ScrolledWindow_method_calcScrolledPosition_INLRPoint__LRPoint_,
  &ScrolledWindow_method_calcUnscrolledPosition_IIOUTIOUTI_V,
  &ScrolledWindow_method_calcUnscrolledPosition_INLRPoint__LRPoint_,
  &ScrolledWindow_method_enableScrolling_ZZ_V,
  &ScrolledWindow_method_getScaleX__D,
  &ScrolledWindow_method_getScaleY__D,
  &ScrolledWindow_method_getScrollPageSize_I_I,
  &ScrolledWindow_method_getScrollPixelsPerUnit_OUTIOUTI_V,
  &ScrolledWindow_method_getTargetRect__LRRect_,
  &ScrolledWindow_method_getTargetWindow__LRWindow_,
  &ScrolledWindow_method_getViewStart_OUTIOUTI_V,
  &ScrolledWindow_method_scroll_II_V,
  &ScrolledWindow_method_setScale_DD_V,
  &ScrolledWindow_method_setScrollPageSize_II_V,
  &ScrolledWindow_method_setScrollRate_II_V,
  &ScrolledWindow_method_setScrollbars_IIIIIIZ_V,
  &ScrolledWindow_method_setScrollbars_IIII_V,
  &ScrolledWindow_method_setScrollbars_IIIII_V,
  &ScrolledWindow_method_setScrollbars_IIIIII_V,
  &ScrolledWindow_method_setTargetRect_INLRRect__V,
  &ScrolledWindow_method_setTargetWindow_INLRWindow__V,
  0
};


struct ScrolledWindow_MetaInfoInitializer
{  ScrolledWindow_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScrolledWindow::clazzInfo();
    ci->fields =  _ScrolledWindow_fields;
    ci->methods =  _ScrolledWindow_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScrolledWindow_MetaInfoInitializer ScrolledWindow_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Sizer_create_array(int length)
{
  return new ObjectArrayImpl<RSizer>(length);
}

//static
::acdk::lang::RObject
Sizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Sizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Sizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRWindow_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    else
        This->add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RWindow)args[0].getObjectVar());
    else
        This->add((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->add((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRWindow_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->add((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRSizer_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    else
        This->add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RSizer)args[0].getObjectVar());
    else
        This->add((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRSizer_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RSizer)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->add((RSizer)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRSizer_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_INLRSizer_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->add((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_IIIIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    else
        This->add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add(args[0].getIntVar(), args[1].getIntVar());
    else
        This->add(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_add_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->add(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_calcMin__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Sizer::calcMin();
    else
        ret = (::acdk::lang::RObject)This->calcMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_clear_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::clear(args[0].getBoolVar());
    else
        This->clear(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_deleteWindows__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::deleteWindows();
    else
        This->deleteWindows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_detach_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::detach((RWindow)args[0].getObjectVar());
    else
      ret = This->detach((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_fit_INLRWindow__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Sizer::fit((RWindow)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->fit((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_fitInside_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::fitInside((RWindow)args[0].getObjectVar());
    else
        This->fitInside((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_getMinSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Sizer::getMinSize();
    else
        ret = (::acdk::lang::RObject)This->getMinSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_getPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Sizer::getPosition();
    else
        ret = (::acdk::lang::RObject)This->getPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_getSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Sizer::getSize();
    else
        ret = (::acdk::lang::RObject)This->getSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_hide_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::hide((RWindow)args[0].getObjectVar());
    else
        This->hide((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_hide_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::hide((RSizer)args[0].getObjectVar());
    else
        This->hide((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRWindow_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    else
        This->insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar());
    else
        This->insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRWindow_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRSizer_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    else
        This->insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar());
    else
        This->insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRSizer_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRSizer_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IINLRSizer_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->insert(args[0].getIntVar(), (RSizer)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IIIIIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar(), (RWxObject)args[6].getObjectVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar(), (RWxObject)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_insert_IIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    else
        This->insert(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_isShown_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::isShown((RWindow)args[0].getObjectVar());
    else
      ret = This->isShown((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_isShown_INLRSizer__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::isShown((RSizer)args[0].getObjectVar());
    else
      ret = This->isShown((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_layout__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::layout();
    else
        This->layout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRWindow_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    else
        This->prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RWindow)args[0].getObjectVar());
    else
        This->prepend((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRWindow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRWindow_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRWindow_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->prepend((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRSizer_IIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    else
        This->prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), (RWxObject)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RSizer)args[0].getObjectVar());
    else
        This->prepend((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRSizer_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRSizer_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_INLRSizer_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->prepend((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_IIIIIINLRWxObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    else
        This->prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RWxObject)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend(args[0].getIntVar(), args[1].getIntVar());
    else
        This->prepend(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
        This->prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_prepend_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    else
        This->prepend(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_recalcSizes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::recalcSizes();
    else
        This->recalcSizes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_remove_INLRSizer__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::remove((RSizer)args[0].getObjectVar());
    else
      ret = This->remove((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_remove_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::remove(args[0].getIntVar());
    else
      ret = This->remove(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setDimension_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::setDimension(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setDimension(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_INLRWindow_INLRSize__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize((RWindow)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    else
      ret = This->setItemMinSize((RWindow)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_INLRSizer_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
      ret = This->setItemMinSize((RSizer)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_INLRWindow_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    else
      ret = This->setItemMinSize((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_IINLRSize__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize(args[0].getIntVar(), (RSize)args[1].getObjectVar());
    else
      ret = This->setItemMinSize(args[0].getIntVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_INLRSizer_INLRSize__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize((RSizer)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    else
      ret = This->setItemMinSize((RSizer)args[0].getObjectVar(), (RSize)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setItemMinSize_III_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Sizer::setItemMinSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    else
      ret = This->setItemMinSize(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setMinSize_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::setMinSize(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setMinSize(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setMinSize_INLRSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::setMinSize((RSize)args[0].getObjectVar());
    else
        This->setMinSize((RSize)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setSizeHints_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::setSizeHints((RWindow)args[0].getObjectVar());
    else
        This->setSizeHints((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_setVirtualSizeHints_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::setVirtualSizeHints((RWindow)args[0].getObjectVar());
    else
        This->setVirtualSizeHints((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_show_INLRWindow_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::show((RWindow)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->show((RWindow)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_show_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::show((RWindow)args[0].getObjectVar());
    else
        This->show((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_show_INLRSizer_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::show((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->show((RSizer)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_show_INLRSizer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::show((RSizer)args[0].getObjectVar());
    else
        This->show((RSizer)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Sizer_method_showItems_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Sizer* This = dmi_cast<Sizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Sizer::showItems(args[0].getBoolVar());
    else
        This->showItems(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Sizer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Sizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_window,
  &Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRWindow_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRWindow_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRWindow_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRWindow__V_args[] = 
{
  &Sizer_methods_add_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_I_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRWindow_I_V_args[] = 
{
  &Sizer_methods_add_INLRWindow_I_V_arg_window,
  &Sizer_methods_add_INLRWindow_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRWindow_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_II_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRWindow_II_V_args[] = 
{
  &Sizer_methods_add_INLRWindow_II_V_arg_window,
  &Sizer_methods_add_INLRWindow_II_V_arg_option,
  &Sizer_methods_add_INLRWindow_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRWindow_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRWindow_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_III_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRWindow_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRWindow_III_V_args[] = 
{
  &Sizer_methods_add_INLRWindow_III_V_arg_window,
  &Sizer_methods_add_INLRWindow_III_V_arg_option,
  &Sizer_methods_add_INLRWindow_III_V_arg_flag,
  &Sizer_methods_add_INLRWindow_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRWindow_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRWindow_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRWindow_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRWindow_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRWindow_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_sizer,
  &Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRSizer_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRSizer_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRSizer_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRSizer__V_args[] = 
{
  &Sizer_methods_add_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRSizer__V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRSizer__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_I_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRSizer_I_V_args[] = 
{
  &Sizer_methods_add_INLRSizer_I_V_arg_sizer,
  &Sizer_methods_add_INLRSizer_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRSizer_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRSizer_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRSizer_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRSizer_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRSizer_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_II_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRSizer_II_V_args[] = 
{
  &Sizer_methods_add_INLRSizer_II_V_arg_sizer,
  &Sizer_methods_add_INLRSizer_II_V_arg_option,
  &Sizer_methods_add_INLRSizer_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRSizer_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRSizer_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRSizer_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRSizer_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRSizer_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_III_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_INLRSizer_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_INLRSizer_III_V_args[] = 
{
  &Sizer_methods_add_INLRSizer_III_V_arg_sizer,
  &Sizer_methods_add_INLRSizer_III_V_arg_option,
  &Sizer_methods_add_INLRSizer_III_V_arg_flag,
  &Sizer_methods_add_INLRSizer_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_INLRSizer_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_INLRSizer_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_INLRSizer_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_INLRSizer_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_INLRSizer_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_IIIIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_width,
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_height,
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_option,
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_flag,
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_border,
  &Sizer_methods_add_IIIIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_IIIIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_IIIIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_IIIIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_IIIIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_IIIIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_II_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_II_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_II_V_args[] = 
{
  &Sizer_methods_add_II_V_arg_width,
  &Sizer_methods_add_II_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_III_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_III_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_III_V_args[] = 
{
  &Sizer_methods_add_III_V_arg_width,
  &Sizer_methods_add_III_V_arg_height,
  &Sizer_methods_add_III_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_IIII_V_args[] = 
{
  &Sizer_methods_add_IIII_V_arg_width,
  &Sizer_methods_add_IIII_V_arg_height,
  &Sizer_methods_add_IIII_V_arg_option,
  &Sizer_methods_add_IIII_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_IIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_IIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_add_IIIII_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_add_IIIII_V_args[] = 
{
  &Sizer_methods_add_IIIII_V_arg_width,
  &Sizer_methods_add_IIIII_V_arg_height,
  &Sizer_methods_add_IIIII_V_arg_option,
  &Sizer_methods_add_IIIII_V_arg_flag,
  &Sizer_methods_add_IIIII_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_add_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_add_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_add", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_add_IIIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_add_IIIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_add_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_calcMin__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_calcMin__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_calcMin__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_11_calcMin", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_calcMin__LRSize__args, // the arguments
  0, //arguments count
  Sizer_methods_calcMin__LRSize__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_calcMin__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_clear_Z_V_arg_delete_windows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "delete_windows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_clear_Z_V_args[] = 
{
  &Sizer_methods_clear_Z_V_arg_delete_windows,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_clear_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_clear_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_clear", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_clear_Z_V_args, // the arguments
  0, //arguments count
  Sizer_methods_clear_Z_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_clear_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_clear", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_clear__V_args, // the arguments
  0, //arguments count
  Sizer_methods_clear__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_deleteWindows__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_deleteWindows__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_deleteWindows__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteWindows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O_deleteWindows", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_deleteWindows__V_args, // the arguments
  0, //arguments count
  Sizer_methods_deleteWindows__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_deleteWindows__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_detach_INLRWindow__Z_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_detach_INLRWindow__Z_args[] = 
{
  &Sizer_methods_detach_INLRWindow__Z_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_detach_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_detach_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "detach", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_detach", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_detach_INLRWindow__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_detach_INLRWindow__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_detach_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_fit_INLRWindow__LRSize__arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_fit_INLRWindow__LRSize__args[] = 
{
  &Sizer_methods_fit_INLRWindow__LRSize__arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_fit_INLRWindow__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_fit_INLRWindow__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_13_fit", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_fit_INLRWindow__LRSize__args, // the arguments
  0, //arguments count
  Sizer_methods_fit_INLRWindow__LRSize__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_fit_INLRWindow__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_fitInside_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_fitInside_INLRWindow__V_args[] = 
{
  &Sizer_methods_fitInside_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_fitInside_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_fitInside_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fitInside", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_14_fitInside", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_fitInside_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_fitInside_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_fitInside_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_getMinSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_getMinSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_getMinSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_Z_getMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_getMinSize__LRSize__args, // the arguments
  0, //arguments count
  Sizer_methods_getMinSize__LRSize__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_getMinSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_getPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_getPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_getPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_Y_getPosition", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_getPosition__LRPoint__args, // the arguments
  0, //arguments count
  Sizer_methods_getPosition__LRPoint__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_getPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_getSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_getSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_getSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_X_getSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_getSize__LRSize__args, // the arguments
  0, //arguments count
  Sizer_methods_getSize__LRSize__exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_getSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_hide_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_hide_INLRWindow__V_args[] = 
{
  &Sizer_methods_hide_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_hide_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_hide_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_hide", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_hide_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_hide_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_hide_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_hide_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_hide_INLRSizer__V_args[] = 
{
  &Sizer_methods_hide_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_hide_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_hide_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hide", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_hide", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_hide_INLRSizer__V_args, // the arguments
  0, //arguments count
  Sizer_methods_hide_INLRSizer__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_hide_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_before,
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_window,
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRWindow_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRWindow_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRWindow_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow__V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRWindow__V_args[] = 
{
  &Sizer_methods_insert_IINLRWindow__V_arg_before,
  &Sizer_methods_insert_IINLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_I_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_I_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRWindow_I_V_args[] = 
{
  &Sizer_methods_insert_IINLRWindow_I_V_arg_before,
  &Sizer_methods_insert_IINLRWindow_I_V_arg_window,
  &Sizer_methods_insert_IINLRWindow_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRWindow_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRWindow_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_II_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_II_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRWindow_II_V_args[] = 
{
  &Sizer_methods_insert_IINLRWindow_II_V_arg_before,
  &Sizer_methods_insert_IINLRWindow_II_V_arg_window,
  &Sizer_methods_insert_IINLRWindow_II_V_arg_option,
  &Sizer_methods_insert_IINLRWindow_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRWindow_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRWindow_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_III_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_III_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRWindow_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRWindow_III_V_args[] = 
{
  &Sizer_methods_insert_IINLRWindow_III_V_arg_before,
  &Sizer_methods_insert_IINLRWindow_III_V_arg_window,
  &Sizer_methods_insert_IINLRWindow_III_V_arg_option,
  &Sizer_methods_insert_IINLRWindow_III_V_arg_flag,
  &Sizer_methods_insert_IINLRWindow_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRWindow_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRWindow_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRWindow_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRWindow_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRWindow_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_before,
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_sizer,
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRSizer_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRSizer_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRSizer_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer__V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRSizer__V_args[] = 
{
  &Sizer_methods_insert_IINLRSizer__V_arg_before,
  &Sizer_methods_insert_IINLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRSizer__V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRSizer__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_I_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_I_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRSizer_I_V_args[] = 
{
  &Sizer_methods_insert_IINLRSizer_I_V_arg_before,
  &Sizer_methods_insert_IINLRSizer_I_V_arg_sizer,
  &Sizer_methods_insert_IINLRSizer_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRSizer_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRSizer_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRSizer_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRSizer_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRSizer_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_II_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_II_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRSizer_II_V_args[] = 
{
  &Sizer_methods_insert_IINLRSizer_II_V_arg_before,
  &Sizer_methods_insert_IINLRSizer_II_V_arg_sizer,
  &Sizer_methods_insert_IINLRSizer_II_V_arg_option,
  &Sizer_methods_insert_IINLRSizer_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRSizer_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRSizer_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRSizer_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRSizer_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRSizer_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_III_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_III_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IINLRSizer_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IINLRSizer_III_V_args[] = 
{
  &Sizer_methods_insert_IINLRSizer_III_V_arg_before,
  &Sizer_methods_insert_IINLRSizer_III_V_arg_sizer,
  &Sizer_methods_insert_IINLRSizer_III_V_arg_option,
  &Sizer_methods_insert_IINLRSizer_III_V_arg_flag,
  &Sizer_methods_insert_IINLRSizer_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IINLRSizer_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IINLRSizer_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IINLRSizer_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IINLRSizer_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IINLRSizer_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IIIIIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_before,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_width,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_height,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_option,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_flag,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_border,
  &Sizer_methods_insert_IIIIIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IIIIIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IIIIIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IIIIIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IIIIIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IIIIIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_III_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_III_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_III_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_III_V_args[] = 
{
  &Sizer_methods_insert_III_V_arg_before,
  &Sizer_methods_insert_III_V_arg_width,
  &Sizer_methods_insert_III_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIII_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IIII_V_args[] = 
{
  &Sizer_methods_insert_IIII_V_arg_before,
  &Sizer_methods_insert_IIII_V_arg_width,
  &Sizer_methods_insert_IIII_V_arg_height,
  &Sizer_methods_insert_IIII_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIII_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IIIII_V_args[] = 
{
  &Sizer_methods_insert_IIIII_V_arg_before,
  &Sizer_methods_insert_IIIII_V_arg_width,
  &Sizer_methods_insert_IIIII_V_arg_height,
  &Sizer_methods_insert_IIIII_V_arg_option,
  &Sizer_methods_insert_IIIII_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IIIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IIIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_before = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "before", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_insert_IIIIII_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_insert_IIIIII_V_args[] = 
{
  &Sizer_methods_insert_IIIIII_V_arg_before,
  &Sizer_methods_insert_IIIIII_V_arg_width,
  &Sizer_methods_insert_IIIIII_V_arg_height,
  &Sizer_methods_insert_IIIIII_V_arg_option,
  &Sizer_methods_insert_IIIIII_V_arg_flag,
  &Sizer_methods_insert_IIIIII_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_insert_IIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_insert_IIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "insert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_insert", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_insert_IIIIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_insert_IIIIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_insert_IIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_isShown_INLRWindow__Z_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_isShown_INLRWindow__Z_args[] = 
{
  &Sizer_methods_isShown_INLRWindow__Z_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_isShown_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_isShown_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isShown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1e_isShown", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_isShown_INLRWindow__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_isShown_INLRWindow__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_isShown_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_isShown_INLRSizer__Z_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_isShown_INLRSizer__Z_args[] = 
{
  &Sizer_methods_isShown_INLRSizer__Z_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_isShown_INLRSizer__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_isShown_INLRSizer__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isShown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1f_isShown", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_isShown_INLRSizer__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_isShown_INLRSizer__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_isShown_INLRSizer__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_layout__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_layout__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_layout__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "layout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_layout", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_layout__V_args, // the arguments
  0, //arguments count
  Sizer_methods_layout__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_layout__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_window,
  &Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRWindow_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRWindow_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRWindow_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRWindow__V_args[] = 
{
  &Sizer_methods_prepend_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_I_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRWindow_I_V_args[] = 
{
  &Sizer_methods_prepend_INLRWindow_I_V_arg_window,
  &Sizer_methods_prepend_INLRWindow_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRWindow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRWindow_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRWindow_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRWindow_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRWindow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_II_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRWindow_II_V_args[] = 
{
  &Sizer_methods_prepend_INLRWindow_II_V_arg_window,
  &Sizer_methods_prepend_INLRWindow_II_V_arg_option,
  &Sizer_methods_prepend_INLRWindow_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRWindow_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRWindow_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRWindow_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRWindow_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRWindow_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_III_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRWindow_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRWindow_III_V_args[] = 
{
  &Sizer_methods_prepend_INLRWindow_III_V_arg_window,
  &Sizer_methods_prepend_INLRWindow_III_V_arg_option,
  &Sizer_methods_prepend_INLRWindow_III_V_arg_flag,
  &Sizer_methods_prepend_INLRWindow_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRWindow_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRWindow_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRWindow_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRWindow_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRWindow_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_sizer,
  &Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_option,
  &Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_flag,
  &Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_border,
  &Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRSizer_IIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRSizer_IIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRSizer_IIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRSizer__V_args[] = 
{
  &Sizer_methods_prepend_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRSizer__V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRSizer__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_I_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_I_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRSizer_I_V_args[] = 
{
  &Sizer_methods_prepend_INLRSizer_I_V_arg_sizer,
  &Sizer_methods_prepend_INLRSizer_I_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRSizer_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRSizer_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRSizer_I_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRSizer_I_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRSizer_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_II_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_II_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_II_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRSizer_II_V_args[] = 
{
  &Sizer_methods_prepend_INLRSizer_II_V_arg_sizer,
  &Sizer_methods_prepend_INLRSizer_II_V_arg_option,
  &Sizer_methods_prepend_INLRSizer_II_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRSizer_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRSizer_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRSizer_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRSizer_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRSizer_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_III_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_III_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_INLRSizer_III_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_INLRSizer_III_V_args[] = 
{
  &Sizer_methods_prepend_INLRSizer_III_V_arg_sizer,
  &Sizer_methods_prepend_INLRSizer_III_V_arg_option,
  &Sizer_methods_prepend_INLRSizer_III_V_arg_flag,
  &Sizer_methods_prepend_INLRSizer_III_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_INLRSizer_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_INLRSizer_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_INLRSizer_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_INLRSizer_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_INLRSizer_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_userData = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "userData", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWxObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_IIIIIINLRWxObject__V_args[] = 
{
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_width,
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_height,
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_option,
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_flag,
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_border,
  &Sizer_methods_prepend_IIIIIINLRWxObject__V_arg_userData,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_IIIIIINLRWxObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_IIIIIINLRWxObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_IIIIIINLRWxObject__V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_IIIIIINLRWxObject__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_IIIIIINLRWxObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_II_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_II_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_II_V_args[] = 
{
  &Sizer_methods_prepend_II_V_arg_width,
  &Sizer_methods_prepend_II_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_III_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_III_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_III_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_III_V_args[] = 
{
  &Sizer_methods_prepend_III_V_arg_width,
  &Sizer_methods_prepend_III_V_arg_height,
  &Sizer_methods_prepend_III_V_arg_option,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_III_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_III_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_IIII_V_args[] = 
{
  &Sizer_methods_prepend_IIII_V_arg_width,
  &Sizer_methods_prepend_IIII_V_arg_height,
  &Sizer_methods_prepend_IIII_V_arg_option,
  &Sizer_methods_prepend_IIII_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_IIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_IIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIII_V_arg_option = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "option", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIII_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_prepend_IIIII_V_arg_border = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "border", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_prepend_IIIII_V_args[] = 
{
  &Sizer_methods_prepend_IIIII_V_arg_width,
  &Sizer_methods_prepend_IIIII_V_arg_height,
  &Sizer_methods_prepend_IIIII_V_arg_option,
  &Sizer_methods_prepend_IIIII_V_arg_flag,
  &Sizer_methods_prepend_IIIII_V_arg_border,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_prepend_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_prepend_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "prepend", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_prepend", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_prepend_IIIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_prepend_IIIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_prepend_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_recalcSizes__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_recalcSizes__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_recalcSizes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcSizes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_10_recalcSizes", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_recalcSizes__V_args, // the arguments
  0, //arguments count
  Sizer_methods_recalcSizes__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_recalcSizes__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_remove_INLRSizer__Z_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_remove_INLRSizer__Z_args[] = 
{
  &Sizer_methods_remove_INLRSizer__Z_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_remove_INLRSizer__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_remove_INLRSizer__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_remove", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_remove_INLRSizer__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_remove_INLRSizer__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_remove_INLRSizer__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_remove_I_Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_remove_I_Z_args[] = 
{
  &Sizer_methods_remove_I_Z_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_remove_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_remove_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_remove", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_remove_I_Z_args, // the arguments
  0, //arguments count
  Sizer_methods_remove_I_Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_remove_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setDimension_IIII_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setDimension_IIII_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setDimension_IIII_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setDimension_IIII_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setDimension_IIII_V_args[] = 
{
  &Sizer_methods_setDimension_IIII_V_arg_x,
  &Sizer_methods_setDimension_IIII_V_arg_y,
  &Sizer_methods_setDimension_IIII_V_arg_width,
  &Sizer_methods_setDimension_IIII_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setDimension_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setDimension_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDimension", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_17_setDimension", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setDimension_IIII_V_args, // the arguments
  0, //arguments count
  Sizer_methods_setDimension_IIII_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setDimension_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_args[] = 
{
  &Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_arg_window,
  &Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_INLRWindow_INLRSize__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_INLRWindow_INLRSize__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_INLRWindow_INLRSize__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_INLRSizer_II_Z_args[] = 
{
  &Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_sizer,
  &Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_width,
  &Sizer_methods_setItemMinSize_INLRSizer_II_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_INLRSizer_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_INLRSizer_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_T_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_INLRSizer_II_Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_INLRSizer_II_Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_INLRSizer_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_INLRWindow_II_Z_args[] = 
{
  &Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_window,
  &Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_width,
  &Sizer_methods_setItemMinSize_INLRWindow_II_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_INLRWindow_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_INLRWindow_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_R_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_INLRWindow_II_Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_INLRWindow_II_Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_INLRWindow_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_IINLRSize__Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_IINLRSize__Z_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_IINLRSize__Z_args[] = 
{
  &Sizer_methods_setItemMinSize_IINLRSize__Z_arg_pos,
  &Sizer_methods_setItemMinSize_IINLRSize__Z_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_IINLRSize__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_IINLRSize__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_IINLRSize__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_IINLRSize__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_IINLRSize__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_args[] = 
{
  &Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_arg_sizer,
  &Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_INLRSizer_INLRSize__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_U_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_INLRSizer_INLRSize__Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_INLRSizer_INLRSize__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_III_Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_III_Z_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setItemMinSize_III_Z_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setItemMinSize_III_Z_args[] = 
{
  &Sizer_methods_setItemMinSize_III_Z_arg_pos,
  &Sizer_methods_setItemMinSize_III_Z_arg_width,
  &Sizer_methods_setItemMinSize_III_Z_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setItemMinSize_III_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setItemMinSize_III_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setItemMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_setItemMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setItemMinSize_III_Z_args, // the arguments
  0, //arguments count
  Sizer_methods_setItemMinSize_III_Z_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setItemMinSize_III_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setMinSize_II_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setMinSize_II_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setMinSize_II_V_args[] = 
{
  &Sizer_methods_setMinSize_II_V_arg_width,
  &Sizer_methods_setMinSize_II_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setMinSize_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setMinSize_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_P_setMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setMinSize_II_V_args, // the arguments
  0, //arguments count
  Sizer_methods_setMinSize_II_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setMinSize_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setMinSize_INLRSize__V_arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setMinSize_INLRSize__V_args[] = 
{
  &Sizer_methods_setMinSize_INLRSize__V_arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setMinSize_INLRSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setMinSize_INLRSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Q_setMinSize", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setMinSize_INLRSize__V_args, // the arguments
  0, //arguments count
  Sizer_methods_setMinSize_INLRSize__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setMinSize_INLRSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setSizeHints_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setSizeHints_INLRWindow__V_args[] = 
{
  &Sizer_methods_setSizeHints_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setSizeHints_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setSizeHints_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSizeHints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_setSizeHints", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setSizeHints_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_setSizeHints_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setSizeHints_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_setVirtualSizeHints_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_setVirtualSizeHints_INLRWindow__V_args[] = 
{
  &Sizer_methods_setVirtualSizeHints_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_setVirtualSizeHints_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_setVirtualSizeHints_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setVirtualSizeHints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_16_setVirtualSizeHints", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_setVirtualSizeHints_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_setVirtualSizeHints_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_setVirtualSizeHints_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRWindow_Z_V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRWindow_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_show_INLRWindow_Z_V_args[] = 
{
  &Sizer_methods_show_INLRWindow_Z_V_arg_window,
  &Sizer_methods_show_INLRWindow_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_show_INLRWindow_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_show_INLRWindow_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_18_show", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_show_INLRWindow_Z_V_args, // the arguments
  0, //arguments count
  Sizer_methods_show_INLRWindow_Z_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_show_INLRWindow_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_show_INLRWindow__V_args[] = 
{
  &Sizer_methods_show_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_show_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_show_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_show", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_show_INLRWindow__V_args, // the arguments
  0, //arguments count
  Sizer_methods_show_INLRWindow__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_show_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRSizer_Z_V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRSizer_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_show_INLRSizer_Z_V_args[] = 
{
  &Sizer_methods_show_INLRSizer_Z_V_arg_sizer,
  &Sizer_methods_show_INLRSizer_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_show_INLRSizer_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_show_INLRSizer_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_show", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_show_INLRSizer_Z_V_args, // the arguments
  0, //arguments count
  Sizer_methods_show_INLRSizer_Z_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_show_INLRSizer_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_show_INLRSizer__V_arg_sizer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sizer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSizer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_show_INLRSizer__V_args[] = 
{
  &Sizer_methods_show_INLRSizer__V_arg_sizer,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_show_INLRSizer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_show_INLRSizer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_show", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_show_INLRSizer__V_args, // the arguments
  0, //arguments count
  Sizer_methods_show_INLRSizer__V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_show_INLRSizer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Sizer_methods_showItems_Z_V_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Sizer_methods_showItems_Z_V_args[] = 
{
  &Sizer_methods_showItems_Z_V_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* Sizer_methods_showItems_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Sizer_method_showItems_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showItems", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_showItems", // alternative name of method
  -1, // altlabelHashCode
  Sizer_methods_showItems_Z_V_args, // the arguments
  0, //arguments count
  Sizer_methods_showItems_Z_V_exceptions, // the declared exceptions
  Sizer_MetainfoWrapper::Sizer_method_showItems_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Sizer_methods[] = 
{
  &Sizer_method_GetClass__L_acdk_lang_RClass_,
  &Sizer_method_add_INLRWindow_IIIINLRWxObject__V,
  &Sizer_method_add_INLRWindow__V,
  &Sizer_method_add_INLRWindow_I_V,
  &Sizer_method_add_INLRWindow_II_V,
  &Sizer_method_add_INLRWindow_III_V,
  &Sizer_method_add_INLRSizer_IIIINLRWxObject__V,
  &Sizer_method_add_INLRSizer__V,
  &Sizer_method_add_INLRSizer_I_V,
  &Sizer_method_add_INLRSizer_II_V,
  &Sizer_method_add_INLRSizer_III_V,
  &Sizer_method_add_IIIIIINLRWxObject__V,
  &Sizer_method_add_II_V,
  &Sizer_method_add_III_V,
  &Sizer_method_add_IIII_V,
  &Sizer_method_add_IIIII_V,
  &Sizer_method_calcMin__LRSize_,
  &Sizer_method_clear_Z_V,
  &Sizer_method_clear__V,
  &Sizer_method_deleteWindows__V,
  &Sizer_method_detach_INLRWindow__Z,
  &Sizer_method_fit_INLRWindow__LRSize_,
  &Sizer_method_fitInside_INLRWindow__V,
  &Sizer_method_getMinSize__LRSize_,
  &Sizer_method_getPosition__LRPoint_,
  &Sizer_method_getSize__LRSize_,
  &Sizer_method_hide_INLRWindow__V,
  &Sizer_method_hide_INLRSizer__V,
  &Sizer_method_insert_IINLRWindow_IIIINLRWxObject__V,
  &Sizer_method_insert_IINLRWindow__V,
  &Sizer_method_insert_IINLRWindow_I_V,
  &Sizer_method_insert_IINLRWindow_II_V,
  &Sizer_method_insert_IINLRWindow_III_V,
  &Sizer_method_insert_IINLRSizer_IIIINLRWxObject__V,
  &Sizer_method_insert_IINLRSizer__V,
  &Sizer_method_insert_IINLRSizer_I_V,
  &Sizer_method_insert_IINLRSizer_II_V,
  &Sizer_method_insert_IINLRSizer_III_V,
  &Sizer_method_insert_IIIIIIINLRWxObject__V,
  &Sizer_method_insert_III_V,
  &Sizer_method_insert_IIII_V,
  &Sizer_method_insert_IIIII_V,
  &Sizer_method_insert_IIIIII_V,
  &Sizer_method_isShown_INLRWindow__Z,
  &Sizer_method_isShown_INLRSizer__Z,
  &Sizer_method_layout__V,
  &Sizer_method_prepend_INLRWindow_IIIINLRWxObject__V,
  &Sizer_method_prepend_INLRWindow__V,
  &Sizer_method_prepend_INLRWindow_I_V,
  &Sizer_method_prepend_INLRWindow_II_V,
  &Sizer_method_prepend_INLRWindow_III_V,
  &Sizer_method_prepend_INLRSizer_IIIINLRWxObject__V,
  &Sizer_method_prepend_INLRSizer__V,
  &Sizer_method_prepend_INLRSizer_I_V,
  &Sizer_method_prepend_INLRSizer_II_V,
  &Sizer_method_prepend_INLRSizer_III_V,
  &Sizer_method_prepend_IIIIIINLRWxObject__V,
  &Sizer_method_prepend_II_V,
  &Sizer_method_prepend_III_V,
  &Sizer_method_prepend_IIII_V,
  &Sizer_method_prepend_IIIII_V,
  &Sizer_method_recalcSizes__V,
  &Sizer_method_remove_INLRSizer__Z,
  &Sizer_method_remove_I_Z,
  &Sizer_method_setDimension_IIII_V,
  &Sizer_method_setItemMinSize_INLRWindow_INLRSize__Z,
  &Sizer_method_setItemMinSize_INLRSizer_II_Z,
  &Sizer_method_setItemMinSize_INLRWindow_II_Z,
  &Sizer_method_setItemMinSize_IINLRSize__Z,
  &Sizer_method_setItemMinSize_INLRSizer_INLRSize__Z,
  &Sizer_method_setItemMinSize_III_Z,
  &Sizer_method_setMinSize_II_V,
  &Sizer_method_setMinSize_INLRSize__V,
  &Sizer_method_setSizeHints_INLRWindow__V,
  &Sizer_method_setVirtualSizeHints_INLRWindow__V,
  &Sizer_method_show_INLRWindow_Z_V,
  &Sizer_method_show_INLRWindow__V,
  &Sizer_method_show_INLRSizer_Z_V,
  &Sizer_method_show_INLRSizer__V,
  &Sizer_method_showItems_Z_V,
  0
};


struct Sizer_MetaInfoInitializer
{  Sizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Sizer::clazzInfo();
    ci->fields =  _Sizer_fields;
    ci->methods =  _Sizer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Sizer_MetaInfoInitializer Sizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
GridSizer_create_array(int length)
{
  return new ObjectArrayImpl<RGridSizer>(length);
}

//static
::acdk::lang::RObject
GridSizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GridSizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GridSizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_GridSizer_IIII_LRGridSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GridSizer(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_GridSizer_III_LRGridSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GridSizer(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_GridSizer_I_LRGridSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GridSizer(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_GridSizer_II_LRGridSizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GridSizer(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_calcMin__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->GridSizer::calcMin();
    else
        ret = (::acdk::lang::RObject)This->calcMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_getCols__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GridSizer::getCols();
    else
      ret = This->getCols();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_getHGap__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GridSizer::getHGap();
    else
      ret = This->getHGap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_getRows__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GridSizer::getRows();
    else
      ret = This->getRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_getVGap__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GridSizer::getVGap();
    else
      ret = This->getVGap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_recalcSizes__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GridSizer::recalcSizes();
    else
        This->recalcSizes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_setCols_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GridSizer::setCols(args[0].getIntVar());
    else
        This->setCols(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_setHGap_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GridSizer::setHGap(args[0].getIntVar());
    else
        This->setHGap(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_setRows_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GridSizer::setRows(args[0].getIntVar());
    else
        This->setRows(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GridSizer_method_setVGap_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GridSizer* This = dmi_cast<GridSizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GridSizer::setVGap(args[0].getIntVar());
    else
        This->setVGap(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _GridSizer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GridSizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_vgap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "vgap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_hgap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hgap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_GridSizer_IIII_LRGridSizer__args[] = 
{
  &GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_rows,
  &GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_cols,
  &GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_vgap,
  &GridSizer_methods_GridSizer_IIII_LRGridSizer__arg_hgap,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_GridSizer_IIII_LRGridSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_GridSizer_IIII_LRGridSizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GridSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GridSizer::clazzInfo(), // return type
  "_0_GridSizer", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_GridSizer_IIII_LRGridSizer__args, // the arguments
  0, //arguments count
  GridSizer_methods_GridSizer_IIII_LRGridSizer__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_GridSizer_IIII_LRGridSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_III_LRGridSizer__arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_III_LRGridSizer__arg_vgap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "vgap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_III_LRGridSizer__arg_hgap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "hgap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_GridSizer_III_LRGridSizer__args[] = 
{
  &GridSizer_methods_GridSizer_III_LRGridSizer__arg_cols,
  &GridSizer_methods_GridSizer_III_LRGridSizer__arg_vgap,
  &GridSizer_methods_GridSizer_III_LRGridSizer__arg_hgap,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_GridSizer_III_LRGridSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_GridSizer_III_LRGridSizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GridSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GridSizer::clazzInfo(), // return type
  "_1_GridSizer", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_GridSizer_III_LRGridSizer__args, // the arguments
  0, //arguments count
  GridSizer_methods_GridSizer_III_LRGridSizer__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_GridSizer_III_LRGridSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_I_LRGridSizer__arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_GridSizer_I_LRGridSizer__args[] = 
{
  &GridSizer_methods_GridSizer_I_LRGridSizer__arg_cols,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_GridSizer_I_LRGridSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_GridSizer_I_LRGridSizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "GridSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GridSizer::clazzInfo(), // return type
  "_2_GridSizer", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_GridSizer_I_LRGridSizer__args, // the arguments
  0, //arguments count
  GridSizer_methods_GridSizer_I_LRGridSizer__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_GridSizer_I_LRGridSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_II_LRGridSizer__arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_GridSizer_II_LRGridSizer__arg_vgap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "vgap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_GridSizer_II_LRGridSizer__args[] = 
{
  &GridSizer_methods_GridSizer_II_LRGridSizer__arg_cols,
  &GridSizer_methods_GridSizer_II_LRGridSizer__arg_vgap,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_GridSizer_II_LRGridSizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_GridSizer_II_LRGridSizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "GridSizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GridSizer::clazzInfo(), // return type
  "_3_GridSizer", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_GridSizer_II_LRGridSizer__args, // the arguments
  0, //arguments count
  GridSizer_methods_GridSizer_II_LRGridSizer__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_GridSizer_II_LRGridSizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_calcMin__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_calcMin__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_calcMin__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calcMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_5_calcMin", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_calcMin__LRSize__args, // the arguments
  0, //arguments count
  GridSizer_methods_calcMin__LRSize__exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_calcMin__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_getCols__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_getCols__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_getCols__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getCols", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_getCols__I_args, // the arguments
  0, //arguments count
  GridSizer_methods_getCols__I_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_getCols__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_getHGap__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_getHGap__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_getHGap__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHGap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getHGap", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_getHGap__I_args, // the arguments
  0, //arguments count
  GridSizer_methods_getHGap__I_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_getHGap__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_getRows__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_getRows__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_getRows__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getRows", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_getRows__I_args, // the arguments
  0, //arguments count
  GridSizer_methods_getRows__I_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_getRows__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_getVGap__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_getVGap__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_getVGap__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVGap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getVGap", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_getVGap__I_args, // the arguments
  0, //arguments count
  GridSizer_methods_getVGap__I_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_getVGap__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_recalcSizes__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_recalcSizes__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_recalcSizes__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "recalcSizes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_recalcSizes", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_recalcSizes__V_args, // the arguments
  0, //arguments count
  GridSizer_methods_recalcSizes__V_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_recalcSizes__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_setCols_I_V_arg_cols = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cols", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_setCols_I_V_args[] = 
{
  &GridSizer_methods_setCols_I_V_arg_cols,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_setCols_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_setCols_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCols", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setCols", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_setCols_I_V_args, // the arguments
  0, //arguments count
  GridSizer_methods_setCols_I_V_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_setCols_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_setHGap_I_V_arg_gap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "gap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_setHGap_I_V_args[] = 
{
  &GridSizer_methods_setHGap_I_V_arg_gap,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_setHGap_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_setHGap_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHGap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setHGap", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_setHGap_I_V_args, // the arguments
  0, //arguments count
  GridSizer_methods_setHGap_I_V_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_setHGap_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_setRows_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_setRows_I_V_args[] = 
{
  &GridSizer_methods_setRows_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_setRows_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_setRows_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setRows", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_setRows_I_V_args, // the arguments
  0, //arguments count
  GridSizer_methods_setRows_I_V_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_setRows_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GridSizer_methods_setVGap_I_V_arg_gap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "gap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GridSizer_methods_setVGap_I_V_args[] = 
{
  &GridSizer_methods_setVGap_I_V_arg_gap,
  0
};

::acdk::lang::dmi::ClazzInfo* GridSizer_methods_setVGap_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GridSizer_method_setVGap_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setVGap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setVGap", // alternative name of method
  -1, // altlabelHashCode
  GridSizer_methods_setVGap_I_V_args, // the arguments
  0, //arguments count
  GridSizer_methods_setVGap_I_V_exceptions, // the declared exceptions
  GridSizer_MetainfoWrapper::GridSizer_method_setVGap_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GridSizer_methods[] = 
{
  &GridSizer_method_GetClass__L_acdk_lang_RClass_,
  &GridSizer_method_GridSizer_IIII_LRGridSizer_,
  &GridSizer_method_GridSizer_III_LRGridSizer_,
  &GridSizer_method_GridSizer_I_LRGridSizer_,
  &GridSizer_method_GridSizer_II_LRGridSizer_,
  &GridSizer_method_calcMin__LRSize_,
  &GridSizer_method_getCols__I,
  &GridSizer_method_getHGap__I,
  &GridSizer_method_getRows__I,
  &GridSizer_method_getVGap__I,
  &GridSizer_method_recalcSizes__V,
  &GridSizer_method_setCols_I_V,
  &GridSizer_method_setHGap_I_V,
  &GridSizer_method_setRows_I_V,
  &GridSizer_method_setVGap_I_V,
  0
};


struct GridSizer_MetaInfoInitializer
{  GridSizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GridSizer::clazzInfo();
    ci->fields =  _GridSizer_fields;
    ci->methods =  _GridSizer_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GridSizer_MetaInfoInitializer GridSizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

