// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../wx.h"
#include "../App.h"
#include "../ArtProvider.h"
#include "../Bitmap.h"
#include "../BitmapButton.h"
#include "../BitmapDataObject.h"
#include "../BoxSizer.h"
#include "../Button.h"
#include "../Caret.h"
#include "../CheckBox.h"
#include "../Choice.h"
#include "../ClientData.h"
#include "../ClientDC.h"
#include "../Clipboard.h"
#include "../Colour.h"
#include "../ColourData.h"
#include "../ColourDialog.h"
#include "../ComboBox.h"
#include "../Config.h"
#include "../Control.h"
#include "../ControlWithItems.h"
#include "../Cursor.h"
#include "../DataFormat.h"
#include "../DataObject.h"
#include "../DataObjectComposite.h"
#include "../DataObjectSimple.h"
#include "../DC.h"
#include "../Dialog.h"
#include "../DirDialog.h"
#include "../DropSource.h"
#include "../DropTarget.h"
#include "../Event.h"
#include "../FileDataObject.h"
#include "../FileDialog.h"
#include "../FileDropTarget.h"
#include "../Font.h"
#include "../FontData.h"
#include "../FontDialog.h"
#include "../Frame.h"
#include "../Gauge.h"
#include "../GDIImage.h"
#include "../GDIObject.h"
#include "../HtmlWindow.h"
#include "../Icon.h"
#include "../LayoutConstraints.h"
#include "../ListBox.h"
#include "../MDIChildFrame.h"
#include "../MDIClientWindow.h"
#include "../MDIParentFrame.h"
#include "../MemoryDC.h"
#include "../Menu.h"
#include "../MenuBar.h"
#include "../MenuItem.h"
#include "../Notebook.h"
#include "../PaintDC.h"
#include "../Panel.h"
#include "../Pen.h"
#include "../PostScriptDC.h"
#include "../ProgressDialog.h"
#include "../RadioBox.h"
#include "../RadioButton.h"
#include "../Region.h"
#include "../ScreenDC.h"
#include "../ScrolledWindow.h"
#include "../SingleChoiceDialog.h"
#include "../Sizer.h"
#include "../Slider.h"
#include "../SpinButton.h"
#include "../SpinCtrl.h"
#include "../SplitterWindow.h"
#include "../StaticBitmap.h"
#include "../StaticBox.h"
#include "../StaticText.h"
#include "../StatusBar.h"
#include "../Structs.h"
#include "../TextCtrl.h"
#include "../TextCtrlCharWriter.h"
#include "../TextDataObject.h"
#include "../TextDropTarget.h"
#include "../TextEntryDialog.h"
#include "../Timer.h"
#include "../ToggleButton.h"
#include "../ToolBar.h"
#include "../ToolTip.h"
#include "../TreeCtrl.h"
#include "../Validator.h"
#include "../Window.h"
#include "../WindowDC.h"
#include "../WindowStyle.h"
#include "../Wizard.h"
#include "../WizardPage.h"
#include "../wx.h"
#include "../WxObject.h"
#include "../XmlResource.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Slider_create_array(int length)
{
  return new ObjectArrayImpl<RSlider>(length);
}

//static
::acdk::lang::RObject
Slider_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Slider_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Slider::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar(), (RSize)args[6].getObjectVar(), args[7].getIntVar(), (RStringArray)args[8].getObjectVar(), (RValidator)args[9].getObjectVar(), (RString)args[10].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIII_LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint__LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar(), (RSize)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar(), (RSize)args[6].getObjectVar(), args[7].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar(), (RSize)args[6].getObjectVar(), args[7].getIntVar(), (RStringArray)args[8].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Slider((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getIntVar(), (RPoint)args[5].getObjectVar(), (RSize)args[6].getObjectVar(), args[7].getIntVar(), (RStringArray)args[8].getObjectVar(), (RValidator)args[9].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_clearSel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::clearSel();
    else
        This->clearSel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_clearTicks__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::clearTicks();
    else
        This->clearTicks();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getLineSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getLineSize();
    else
      ret = This->getLineSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getMax__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getMax();
    else
      ret = This->getMax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getMin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getMin();
    else
      ret = This->getMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getPageSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getPageSize();
    else
      ret = This->getPageSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getPosition_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::getPosition(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getPosition(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getSelEnd__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getSelEnd();
    else
      ret = This->getSelEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getSelStart__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getSelStart();
    else
      ret = This->getSelStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getSize_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::getSize(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSize(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getThumbLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getThumbLength();
    else
      ret = This->getThumbLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getTickFreq__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getTickFreq();
    else
      ret = This->getTickFreq();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_getValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setLineSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setLineSize(args[0].getIntVar());
    else
        This->setLineSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setPageSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setPageSize(args[0].getIntVar());
    else
        This->setPageSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setRange(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setRange(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setSelection_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setSelection(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setSelection(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setThumbLength_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setThumbLength(args[0].getIntVar());
    else
        This->setThumbLength(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setTick_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setTick(args[0].getIntVar());
    else
        This->setTick(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setTickFreq_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setTickFreq(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setTickFreq(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_setValue_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Slider::setValue(args[0].getIntVar());
    else
        This->setValue(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_show_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::show(args[0].getBoolVar());
    else
      ret = This->show(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Slider_method_show__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Slider* This = dmi_cast<Slider>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Slider::show();
    else
      ret = This->show();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Slider_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_u_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Slider_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_pos,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_size,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_style,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_choices,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_validator,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_0_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIII_LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIII_LRSlider__arg_maxValue,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIII_LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIII_LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_1_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIII_LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIII_LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIII_LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint__LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_2_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint__LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint__LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_pos,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_3_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_pos,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_size,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_4_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_pos,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_size,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_style,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__arg_choices,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_5_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_choices = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "choices", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_validator = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "validator", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RValidator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__args[] = 
{
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_parent,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_id,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_value,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_minValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_maxValue,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_pos,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_size,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_style,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_choices,
  &Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__arg_validator,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Slider", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Slider::clazzInfo(), // return type
  "_6_Slider", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__args, // the arguments
  0, //arguments count
  Slider_methods_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_clearSel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_clearSel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_clearSel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearSel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_clearSel", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_clearSel__V_args, // the arguments
  0, //arguments count
  Slider_methods_clearSel__V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_clearSel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_clearTicks__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_clearTicks__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_clearTicks__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearTicks", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_clearTicks", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_clearTicks__V_args, // the arguments
  0, //arguments count
  Slider_methods_clearTicks__V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_clearTicks__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getLineSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getLineSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getLineSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getLineSize", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getLineSize__I_args, // the arguments
  0, //arguments count
  Slider_methods_getLineSize__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getLineSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getMax__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getMax__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getMax__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getMax", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getMax__I_args, // the arguments
  0, //arguments count
  Slider_methods_getMax__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getMax__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getMin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getMin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getMin__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getMin", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getMin__I_args, // the arguments
  0, //arguments count
  Slider_methods_getMin__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getMin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getPageSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getPageSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getPageSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getPageSize", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getPageSize__I_args, // the arguments
  0, //arguments count
  Slider_methods_getPageSize__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getPageSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_getPosition_OUTIOUTI_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_getPosition_OUTIOUTI_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getPosition_OUTIOUTI_V_args[] = 
{
  &Slider_methods_getPosition_OUTIOUTI_V_arg_x,
  &Slider_methods_getPosition_OUTIOUTI_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getPosition_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getPosition_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_getPosition", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getPosition_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Slider_methods_getPosition_OUTIOUTI_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getPosition_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getSelEnd__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getSelEnd__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getSelEnd__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getSelEnd", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getSelEnd__I_args, // the arguments
  0, //arguments count
  Slider_methods_getSelEnd__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getSelEnd__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getSelStart__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getSelStart__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getSelStart__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_p_getSelStart", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getSelStart__I_args, // the arguments
  0, //arguments count
  Slider_methods_getSelStart__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getSelStart__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_getSize_OUTIOUTI_V_arg_w = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "w", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_getSize_OUTIOUTI_V_arg_h = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "h", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getSize_OUTIOUTI_V_args[] = 
{
  &Slider_methods_getSize_OUTIOUTI_V_arg_w,
  &Slider_methods_getSize_OUTIOUTI_V_arg_h,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getSize_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getSize_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_getSize", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getSize_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  Slider_methods_getSize_OUTIOUTI_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getSize_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getThumbLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getThumbLength__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getThumbLength__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getThumbLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getThumbLength", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getThumbLength__I_args, // the arguments
  0, //arguments count
  Slider_methods_getThumbLength__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getThumbLength__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getTickFreq__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getTickFreq__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getTickFreq__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTickFreq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getTickFreq", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getTickFreq__I_args, // the arguments
  0, //arguments count
  Slider_methods_getTickFreq__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getTickFreq__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_getValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_getValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_getValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getValue", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_getValue__I_args, // the arguments
  0, //arguments count
  Slider_methods_getValue__I_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_getValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setLineSize_I_V_arg_lineSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setLineSize_I_V_args[] = 
{
  &Slider_methods_setLineSize_I_V_arg_lineSize,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setLineSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setLineSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLineSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setLineSize", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setLineSize_I_V_args, // the arguments
  0, //arguments count
  Slider_methods_setLineSize_I_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setLineSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setPageSize_I_V_arg_pageSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pageSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setPageSize_I_V_args[] = 
{
  &Slider_methods_setPageSize_I_V_arg_pageSize,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setPageSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setPageSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPageSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setPageSize", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setPageSize_I_V_args, // the arguments
  0, //arguments count
  Slider_methods_setPageSize_I_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setPageSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setRange_II_V_arg_minValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setRange_II_V_arg_maxValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setRange_II_V_args[] = 
{
  &Slider_methods_setRange_II_V_arg_minValue,
  &Slider_methods_setRange_II_V_arg_maxValue,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setRange", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setRange_II_V_args, // the arguments
  0, //arguments count
  Slider_methods_setRange_II_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setSelection_II_V_arg_minPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setSelection_II_V_arg_maxPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setSelection_II_V_args[] = 
{
  &Slider_methods_setSelection_II_V_arg_minPos,
  &Slider_methods_setSelection_II_V_arg_maxPos,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setSelection_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setSelection_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setSelection", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setSelection_II_V_args, // the arguments
  0, //arguments count
  Slider_methods_setSelection_II_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setSelection_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setThumbLength_I_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setThumbLength_I_V_args[] = 
{
  &Slider_methods_setThumbLength_I_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setThumbLength_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setThumbLength_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setThumbLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setThumbLength", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setThumbLength_I_V_args, // the arguments
  0, //arguments count
  Slider_methods_setThumbLength_I_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setThumbLength_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setTick_I_V_arg_tickPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "tickPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setTick_I_V_args[] = 
{
  &Slider_methods_setTick_I_V_arg_tickPos,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setTick_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setTick_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTick", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setTick", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setTick_I_V_args, // the arguments
  0, //arguments count
  Slider_methods_setTick_I_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setTick_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setTickFreq_II_V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setTickFreq_II_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setTickFreq_II_V_args[] = 
{
  &Slider_methods_setTickFreq_II_V_arg_n,
  &Slider_methods_setTickFreq_II_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setTickFreq_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setTickFreq_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTickFreq", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setTickFreq", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setTickFreq_II_V_args, // the arguments
  0, //arguments count
  Slider_methods_setTickFreq_II_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setTickFreq_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_setValue_I_V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_setValue_I_V_args[] = 
{
  &Slider_methods_setValue_I_V_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_setValue_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_setValue_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setValue", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_setValue_I_V_args, // the arguments
  0, //arguments count
  Slider_methods_setValue_I_V_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_setValue_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Slider_methods_show_Z_Z_arg_show = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "show", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_show_Z_Z_args[] = 
{
  &Slider_methods_show_Z_Z_arg_show,
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_show_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_show_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_show", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_show_Z_Z_args, // the arguments
  0, //arguments count
  Slider_methods_show_Z_Z_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_show_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Slider_methods_show__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Slider_methods_show__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Slider_method_show__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "show", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_show", // alternative name of method
  -1, // altlabelHashCode
  Slider_methods_show__Z_args, // the arguments
  0, //arguments count
  Slider_methods_show__Z_exceptions, // the declared exceptions
  Slider_MetainfoWrapper::Slider_method_show__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Slider_methods[] = 
{
  &Slider_method_GetClass__L_acdk_lang_RClass_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator_INLRString__LRSlider_,
  &Slider_method_Slider_INLRWindow_IIII_LRSlider_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint__LRSlider_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize__LRSlider_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_I_LRSlider_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray__LRSlider_,
  &Slider_method_Slider_INLRWindow_IIIIINLRPoint_INLRSize_IINLRStringArray_INLRValidator__LRSlider_,
  &Slider_method_clearSel__V,
  &Slider_method_clearTicks__V,
  &Slider_method_getLineSize__I,
  &Slider_method_getMax__I,
  &Slider_method_getMin__I,
  &Slider_method_getPageSize__I,
  &Slider_method_getPosition_OUTIOUTI_V,
  &Slider_method_getSelEnd__I,
  &Slider_method_getSelStart__I,
  &Slider_method_getSize_OUTIOUTI_V,
  &Slider_method_getThumbLength__I,
  &Slider_method_getTickFreq__I,
  &Slider_method_getValue__I,
  &Slider_method_setLineSize_I_V,
  &Slider_method_setPageSize_I_V,
  &Slider_method_setRange_II_V,
  &Slider_method_setSelection_II_V,
  &Slider_method_setThumbLength_I_V,
  &Slider_method_setTick_I_V,
  &Slider_method_setTickFreq_II_V,
  &Slider_method_setValue_I_V,
  &Slider_method_show_Z_Z,
  &Slider_method_show__Z,
  0
};


struct Slider_MetaInfoInitializer
{  Slider_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Slider::clazzInfo();
    ci->fields =  _Slider_fields;
    ci->methods =  _Slider_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Slider_MetaInfoInitializer Slider_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
SpinButton_create_array(int length)
{
  return new ObjectArrayImpl<RSpinButton>(length);
}

//static
::acdk::lang::RObject
SpinButton_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SpinButton_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SpinButton::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_SpinButton_INLRWindow_I_LRSpinButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinButton((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinButton((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_getMax__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinButton::getMax();
    else
      ret = This->getMax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_getMin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinButton::getMin();
    else
      ret = This->getMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_getValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinButton::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_isVertical__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinButton::isVertical();
    else
      ret = This->isVertical();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_setRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SpinButton::setRange(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setRange(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinButton_method_setValue_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinButton* This = dmi_cast<SpinButton>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SpinButton::setValue(args[0].getIntVar());
    else
        This->setValue(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SpinButton_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SpinButton_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__args[] = 
{
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_parent,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_id,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_pos,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_size,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_style,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinButton::clazzInfo(), // return type
  "_0_SpinButton", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__args, // the arguments
  0, //arguments count
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__args[] = 
{
  &SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__arg_parent,
  &SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_SpinButton_INLRWindow_I_LRSpinButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinButton::clazzInfo(), // return type
  "_1_SpinButton", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__args, // the arguments
  0, //arguments count
  SpinButton_methods_SpinButton_INLRWindow_I_LRSpinButton__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_SpinButton_INLRWindow_I_LRSpinButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__args[] = 
{
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_parent,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_id,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_SpinButton_INLRWindow_IINLRPoint__LRSpinButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinButton::clazzInfo(), // return type
  "_2_SpinButton", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__args, // the arguments
  0, //arguments count
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_SpinButton_INLRWindow_IINLRPoint__LRSpinButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__args[] = 
{
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_parent,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_id,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_pos,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinButton::clazzInfo(), // return type
  "_3_SpinButton", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__args, // the arguments
  0, //arguments count
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__args[] = 
{
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_parent,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_id,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_pos,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_size,
  &SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinButton", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinButton::clazzInfo(), // return type
  "_4_SpinButton", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__args, // the arguments
  0, //arguments count
  SpinButton_methods_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_getMax__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_getMax__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_getMax__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getMax", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_getMax__I_args, // the arguments
  0, //arguments count
  SpinButton_methods_getMax__I_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_getMax__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_getMin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_getMin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_getMin__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getMin", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_getMin__I_args, // the arguments
  0, //arguments count
  SpinButton_methods_getMin__I_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_getMin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_getValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_getValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_getValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getValue", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_getValue__I_args, // the arguments
  0, //arguments count
  SpinButton_methods_getValue__I_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_getValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_isVertical__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_isVertical__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_isVertical__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVertical", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isVertical", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_isVertical__Z_args, // the arguments
  0, //arguments count
  SpinButton_methods_isVertical__Z_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_isVertical__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_setRange_II_V_arg_minVal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minVal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_setRange_II_V_arg_maxVal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxVal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_setRange_II_V_args[] = 
{
  &SpinButton_methods_setRange_II_V_arg_minVal,
  &SpinButton_methods_setRange_II_V_arg_maxVal,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_setRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_setRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setRange", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_setRange_II_V_args, // the arguments
  0, //arguments count
  SpinButton_methods_setRange_II_V_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_setRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinButton_methods_setValue_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinButton_methods_setValue_I_V_args[] = 
{
  &SpinButton_methods_setValue_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinButton_methods_setValue_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinButton_method_setValue_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setValue", // alternative name of method
  -1, // altlabelHashCode
  SpinButton_methods_setValue_I_V_args, // the arguments
  0, //arguments count
  SpinButton_methods_setValue_I_V_exceptions, // the declared exceptions
  SpinButton_MetainfoWrapper::SpinButton_method_setValue_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SpinButton_methods[] = 
{
  &SpinButton_method_GetClass__L_acdk_lang_RClass_,
  &SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSpinButton_,
  &SpinButton_method_SpinButton_INLRWindow_I_LRSpinButton_,
  &SpinButton_method_SpinButton_INLRWindow_IINLRPoint__LRSpinButton_,
  &SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize__LRSpinButton_,
  &SpinButton_method_SpinButton_INLRWindow_IINLRPoint_INLRSize_I_LRSpinButton_,
  &SpinButton_method_getMax__I,
  &SpinButton_method_getMin__I,
  &SpinButton_method_getValue__I,
  &SpinButton_method_isVertical__Z,
  &SpinButton_method_setRange_II_V,
  &SpinButton_method_setValue_I_V,
  0
};


struct SpinButton_MetaInfoInitializer
{  SpinButton_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SpinButton::clazzInfo();
    ci->fields =  _SpinButton_fields;
    ci->methods =  _SpinButton_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SpinButton_MetaInfoInitializer SpinButton_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
SpinCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RSpinCtrl>(length);
}

//static
::acdk::lang::RObject
SpinCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SpinCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SpinCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getIntVar(), (RString)args[9].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_I_LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SpinCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), args[6].getIntVar(), args[7].getIntVar(), args[8].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_getMax__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinCtrl::getMax();
    else
      ret = This->getMax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_getMin__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinCtrl::getMin();
    else
      ret = This->getMin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_getValue__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinCtrl::getValue();
    else
      ret = This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_isVertical__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SpinCtrl::isVertical();
    else
      ret = This->isVertical();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_setRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SpinCtrl::setRange(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setRange(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SpinCtrl::setValue((RString)args[0].getObjectVar());
    else
        This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SpinCtrl_method_setValue_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SpinCtrl* This = dmi_cast<SpinCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SpinCtrl::setValue(args[0].getIntVar());
    else
        This->setValue(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SpinCtrl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_initial = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initial", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_size,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_style,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_min,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_max,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_initial,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_0_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_I_LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_1_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_I_LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_I_LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_2_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_3_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_4_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_size,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_5_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_size,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_style,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__arg_min,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_6_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_size,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_style,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_min,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_7_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_initial = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initial", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__args[] = 
{
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_parent,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_id,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_value,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_pos,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_size,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_style,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_min,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_max,
  &SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__arg_initial,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SpinCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SpinCtrl::clazzInfo(), // return type
  "_8_SpinCtrl", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__args, // the arguments
  0, //arguments count
  SpinCtrl_methods_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_getMax__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_getMax__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_getMax__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getMax", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_getMax__I_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_getMax__I_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_getMax__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_getMin__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_getMin__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_getMin__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getMin", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_getMin__I_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_getMin__I_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_getMin__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_getValue__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_getValue__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_getValue__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getValue", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_getValue__I_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_getValue__I_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_getValue__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_isVertical__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_isVertical__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_isVertical__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isVertical", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isVertical", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_isVertical__Z_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_isVertical__Z_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_isVertical__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_setRange_II_V_arg_minVal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minVal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_setRange_II_V_arg_maxVal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxVal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_setRange_II_V_args[] = 
{
  &SpinCtrl_methods_setRange_II_V_arg_minVal,
  &SpinCtrl_methods_setRange_II_V_arg_maxVal,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_setRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_setRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setRange", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_setRange_II_V_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_setRange_II_V_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_setRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_setValue_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_setValue_INLRString__V_args[] = 
{
  &SpinCtrl_methods_setValue_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setValue", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SpinCtrl_methods_setValue_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SpinCtrl_methods_setValue_I_V_args[] = 
{
  &SpinCtrl_methods_setValue_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* SpinCtrl_methods_setValue_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SpinCtrl_method_setValue_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setValue", // alternative name of method
  -1, // altlabelHashCode
  SpinCtrl_methods_setValue_I_V_args, // the arguments
  0, //arguments count
  SpinCtrl_methods_setValue_I_V_exceptions, // the declared exceptions
  SpinCtrl_MetainfoWrapper::SpinCtrl_method_setValue_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SpinCtrl_methods[] = 
{
  &SpinCtrl_method_GetClass__L_acdk_lang_RClass_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIIIINLRString__LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_I_LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString__LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint__LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_II_LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_III_LRSpinCtrl_,
  &SpinCtrl_method_SpinCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_IIII_LRSpinCtrl_,
  &SpinCtrl_method_getMax__I,
  &SpinCtrl_method_getMin__I,
  &SpinCtrl_method_getValue__I,
  &SpinCtrl_method_isVertical__Z,
  &SpinCtrl_method_setRange_II_V,
  &SpinCtrl_method_setValue_INLRString__V,
  &SpinCtrl_method_setValue_I_V,
  0
};


struct SpinCtrl_MetaInfoInitializer
{  SpinCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SpinCtrl::clazzInfo();
    ci->fields =  _SpinCtrl_fields;
    ci->methods =  _SpinCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SpinCtrl_MetaInfoInitializer SpinCtrl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
SplitterWindow_create_array(int length)
{
  return new ObjectArrayImpl<RSplitterWindow>(length);
}

//static
::acdk::lang::RObject
SplitterWindow_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SplitterWindow_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SplitterWindow::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow__LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow__LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow_I_LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SplitterWindow((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RPoint)args[2].getObjectVar(), (RSize)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getBorderSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::getBorderSize();
    else
      ret = This->getBorderSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getMinimumPaneSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::getMinimumPaneSize();
    else
      ret = This->getMinimumPaneSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getSashPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::getSashPosition();
    else
      ret = This->getSashPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getSashSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::getSashSize();
    else
      ret = This->getSashSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getSplitMode__LSplitMode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (SplitMode)This->SplitterWindow::getSplitMode();
    else
      ret = (SplitMode)This->getSplitMode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getWindow1__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SplitterWindow::getWindow1();
    else
        ret = (::acdk::lang::RObject)This->getWindow1();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_getWindow2__LRWindow__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SplitterWindow::getWindow2();
    else
        ret = (::acdk::lang::RObject)This->getWindow2();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_initialize_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::initialize((RWindow)args[0].getObjectVar());
    else
        This->initialize((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_isSplit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::isSplit();
    else
      ret = This->isSplit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_onDoubleClickSash_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::onDoubleClickSash(args[0].getIntVar(), args[1].getIntVar());
    else
        This->onDoubleClickSash(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_onSashPositionChange_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::onSashPositionChange(args[0].getIntVar());
    else
      ret = This->onSashPositionChange(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_onSashPositionChanging_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::onSashPositionChanging(args[0].getIntVar());
    else
      ret = This->onSashPositionChanging(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_onUnsplit_INLRWindow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::onUnsplit((RWindow)args[0].getObjectVar());
    else
        This->onUnsplit((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_replaceWindow_INLRWindow_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::replaceWindow((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    else
      ret = This->replaceWindow((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setBorderSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setBorderSize(args[0].getIntVar());
    else
        This->setBorderSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setMinimumPaneSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setMinimumPaneSize(args[0].getIntVar());
    else
        This->setMinimumPaneSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setSashPosition_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setSashPosition(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->setSashPosition(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setSashPosition_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setSashPosition(args[0].getIntVar());
    else
        This->setSashPosition(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setSashSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setSashSize(args[0].getIntVar());
    else
        This->setSashSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_setSplitMode_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SplitterWindow::setSplitMode(args[0].getIntVar());
    else
        This->setSplitMode(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::splitHorizontally((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    else
      ret = This->splitHorizontally((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::splitHorizontally((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    else
      ret = This->splitHorizontally((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_splitVertically_INLRWindow_INLRWindow_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::splitVertically((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    else
      ret = This->splitVertically((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_splitVertically_INLRWindow_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::splitVertically((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    else
      ret = This->splitVertically((RWindow)args[0].getObjectVar(), (RWindow)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_unsplit_INLRWindow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::unsplit((RWindow)args[0].getObjectVar());
    else
      ret = This->unsplit((RWindow)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SplitterWindow_method_unsplit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SplitterWindow* This = dmi_cast<SplitterWindow>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SplitterWindow::unsplit();
    else
      ret = This->unsplit();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SplitterWindow_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_x_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow__LRSplitterWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow__LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow__LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_0_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow__LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow__LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow__LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_parent,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_id,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_pos,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_size,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_style,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_1_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow__LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_2_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow__LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow__LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__arg_parent,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow_I_LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_3_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow_I_LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow_I_LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_parent,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_id,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_4_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_parent,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_id,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_pos,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_5_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__args[] = 
{
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_parent,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_id,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_pos,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_size,
  &SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SplitterWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SplitterWindow::clazzInfo(), // return type
  "_6_SplitterWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getBorderSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getBorderSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getBorderSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBorderSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getBorderSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getBorderSize__I_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getBorderSize__I_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getBorderSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getMinimumPaneSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getMinimumPaneSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getMinimumPaneSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimumPaneSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_getMinimumPaneSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getMinimumPaneSize__I_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getMinimumPaneSize__I_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getMinimumPaneSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getSashPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getSashPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getSashPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSashPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getSashPosition", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getSashPosition__I_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getSashPosition__I_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getSashPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getSashSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getSashSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getSashSize__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSashSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getSashSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getSashSize__I_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getSashSize__I_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getSashSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getSplitMode__LSplitMode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getSplitMode__LSplitMode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getSplitMode__LSplitMode_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSplitMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getSplitMode", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getSplitMode__LSplitMode__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getSplitMode__LSplitMode__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getSplitMode__LSplitMode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getWindow1__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getWindow1__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getWindow1__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindow1", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_7_getWindow1", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getWindow1__LRWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getWindow1__LRWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getWindow1__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_getWindow2__LRWindow__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_getWindow2__LRWindow__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_getWindow2__LRWindow_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWindow2", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo(), // return type
  "_8_getWindow2", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_getWindow2__LRWindow__args, // the arguments
  0, //arguments count
  SplitterWindow_methods_getWindow2__LRWindow__exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_getWindow2__LRWindow__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_initialize_INLRWindow__V_arg_window = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_initialize_INLRWindow__V_args[] = 
{
  &SplitterWindow_methods_initialize_INLRWindow__V_arg_window,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_initialize_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_initialize_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initialize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_initialize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_initialize_INLRWindow__V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_initialize_INLRWindow__V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_initialize_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_isSplit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_isSplit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_isSplit__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSplit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isSplit", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_isSplit__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_isSplit__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_isSplit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_onDoubleClickSash_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_onDoubleClickSash_II_V_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_onDoubleClickSash_II_V_args[] = 
{
  &SplitterWindow_methods_onDoubleClickSash_II_V_arg_x,
  &SplitterWindow_methods_onDoubleClickSash_II_V_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_onDoubleClickSash_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_onDoubleClickSash_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onDoubleClickSash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_onDoubleClickSash", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_onDoubleClickSash_II_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_onDoubleClickSash_II_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_onDoubleClickSash_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_onSashPositionChange_I_Z_arg_newSashPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSashPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_onSashPositionChange_I_Z_args[] = 
{
  &SplitterWindow_methods_onSashPositionChange_I_Z_arg_newSashPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_onSashPositionChange_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_onSashPositionChange_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onSashPositionChange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_onSashPositionChange", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_onSashPositionChange_I_Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_onSashPositionChange_I_Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_onSashPositionChange_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_onSashPositionChanging_I_I_arg_newSashPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSashPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_onSashPositionChanging_I_I_args[] = 
{
  &SplitterWindow_methods_onSashPositionChanging_I_I_arg_newSashPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_onSashPositionChanging_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_onSashPositionChanging_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onSashPositionChanging", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_onSashPositionChanging", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_onSashPositionChanging_I_I_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_onSashPositionChanging_I_I_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_onSashPositionChanging_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_onUnsplit_INLRWindow__V_arg_removed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "removed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_onUnsplit_INLRWindow__V_args[] = 
{
  &SplitterWindow_methods_onUnsplit_INLRWindow__V_arg_removed,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_onUnsplit_INLRWindow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_onUnsplit_INLRWindow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onUnsplit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_onUnsplit", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_onUnsplit_INLRWindow__V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_onUnsplit_INLRWindow__V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_onUnsplit_INLRWindow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_arg_winOld = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "winOld", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_arg_winNew = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "winNew", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_args[] = 
{
  &SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_arg_winOld,
  &SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_arg_winNew,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_replaceWindow_INLRWindow_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replaceWindow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_replaceWindow", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_replaceWindow_INLRWindow_INLRWindow__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_replaceWindow_INLRWindow_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setBorderSize_I_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setBorderSize_I_V_args[] = 
{
  &SplitterWindow_methods_setBorderSize_I_V_arg_width,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setBorderSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setBorderSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBorderSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setBorderSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setBorderSize_I_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setBorderSize_I_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setBorderSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setMinimumPaneSize_I_V_arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setMinimumPaneSize_I_V_args[] = 
{
  &SplitterWindow_methods_setMinimumPaneSize_I_V_arg_min,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setMinimumPaneSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setMinimumPaneSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinimumPaneSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setMinimumPaneSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setMinimumPaneSize_I_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setMinimumPaneSize_I_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setMinimumPaneSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setSashPosition_IZ_V_arg_position = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "position", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setSashPosition_IZ_V_arg_redraw = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "redraw", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setSashPosition_IZ_V_args[] = 
{
  &SplitterWindow_methods_setSashPosition_IZ_V_arg_position,
  &SplitterWindow_methods_setSashPosition_IZ_V_arg_redraw,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setSashPosition_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setSashPosition_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSashPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setSashPosition", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setSashPosition_IZ_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setSashPosition_IZ_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setSashPosition_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setSashPosition_I_V_arg_position = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "position", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setSashPosition_I_V_args[] = 
{
  &SplitterWindow_methods_setSashPosition_I_V_arg_position,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setSashPosition_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setSashPosition_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSashPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setSashPosition", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setSashPosition_I_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setSashPosition_I_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setSashPosition_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setSashSize_I_V_arg_width = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "width", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setSashSize_I_V_args[] = 
{
  &SplitterWindow_methods_setSashSize_I_V_arg_width,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setSashSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setSashSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSashSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setSashSize", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setSashSize_I_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setSashSize_I_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setSashSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_setSplitMode_I_V_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_setSplitMode_I_V_args[] = 
{
  &SplitterWindow_methods_setSplitMode_I_V_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_setSplitMode_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_setSplitMode_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSplitMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setSplitMode", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_setSplitMode_I_V_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_setSplitMode_I_V_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_setSplitMode_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_window1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_window2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_sashPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sashPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_args[] = 
{
  &SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_window1,
  &SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_window2,
  &SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_arg_sashPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "splitHorizontally", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_splitHorizontally", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow_I_Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_arg_window1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_arg_window2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_args[] = 
{
  &SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_arg_window1,
  &SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_arg_window2,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "splitHorizontally", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_splitHorizontally", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_splitHorizontally_INLRWindow_INLRWindow__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_window1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_window2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_sashPosition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sashPosition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_args[] = 
{
  &SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_window1,
  &SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_window2,
  &SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_arg_sashPosition,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_splitVertically_INLRWindow_INLRWindow_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "splitVertically", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_splitVertically", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow_I_Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_splitVertically_INLRWindow_INLRWindow_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_arg_window1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_arg_window2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "window2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_args[] = 
{
  &SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_arg_window1,
  &SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_arg_window2,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_splitVertically_INLRWindow_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "splitVertically", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_splitVertically", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_splitVertically_INLRWindow_INLRWindow__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_splitVertically_INLRWindow_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SplitterWindow_methods_unsplit_INLRWindow__Z_arg_toRemove = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "toRemove", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_unsplit_INLRWindow__Z_args[] = 
{
  &SplitterWindow_methods_unsplit_INLRWindow__Z_arg_toRemove,
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_unsplit_INLRWindow__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_unsplit_INLRWindow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unsplit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_unsplit", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_unsplit_INLRWindow__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_unsplit_INLRWindow__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_unsplit_INLRWindow__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SplitterWindow_methods_unsplit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SplitterWindow_methods_unsplit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SplitterWindow_method_unsplit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "unsplit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_unsplit", // alternative name of method
  -1, // altlabelHashCode
  SplitterWindow_methods_unsplit__Z_args, // the arguments
  0, //arguments count
  SplitterWindow_methods_unsplit__Z_exceptions, // the declared exceptions
  SplitterWindow_MetainfoWrapper::SplitterWindow_method_unsplit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SplitterWindow_methods[] = 
{
  &SplitterWindow_method_GetClass__L_acdk_lang_RClass_,
  &SplitterWindow_method_SplitterWindow__LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_IINLRString__LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow__LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow_I_LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint__LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize__LRSplitterWindow_,
  &SplitterWindow_method_SplitterWindow_INLRWindow_IINLRPoint_INLRSize_I_LRSplitterWindow_,
  &SplitterWindow_method_getBorderSize__I,
  &SplitterWindow_method_getMinimumPaneSize__I,
  &SplitterWindow_method_getSashPosition__I,
  &SplitterWindow_method_getSashSize__I,
  &SplitterWindow_method_getSplitMode__LSplitMode_,
  &SplitterWindow_method_getWindow1__LRWindow_,
  &SplitterWindow_method_getWindow2__LRWindow_,
  &SplitterWindow_method_initialize_INLRWindow__V,
  &SplitterWindow_method_isSplit__Z,
  &SplitterWindow_method_onDoubleClickSash_II_V,
  &SplitterWindow_method_onSashPositionChange_I_Z,
  &SplitterWindow_method_onSashPositionChanging_I_I,
  &SplitterWindow_method_onUnsplit_INLRWindow__V,
  &SplitterWindow_method_replaceWindow_INLRWindow_INLRWindow__Z,
  &SplitterWindow_method_setBorderSize_I_V,
  &SplitterWindow_method_setMinimumPaneSize_I_V,
  &SplitterWindow_method_setSashPosition_IZ_V,
  &SplitterWindow_method_setSashPosition_I_V,
  &SplitterWindow_method_setSashSize_I_V,
  &SplitterWindow_method_setSplitMode_I_V,
  &SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow_I_Z,
  &SplitterWindow_method_splitHorizontally_INLRWindow_INLRWindow__Z,
  &SplitterWindow_method_splitVertically_INLRWindow_INLRWindow_I_Z,
  &SplitterWindow_method_splitVertically_INLRWindow_INLRWindow__Z,
  &SplitterWindow_method_unsplit_INLRWindow__Z,
  &SplitterWindow_method_unsplit__Z,
  0
};


struct SplitterWindow_MetaInfoInitializer
{  SplitterWindow_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SplitterWindow::clazzInfo();
    ci->fields =  _SplitterWindow_fields;
    ci->methods =  _SplitterWindow_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SplitterWindow_MetaInfoInitializer SplitterWindow_MetaInfoInitializer_staticinstance__;


struct SplitterWindow_clazzInfo_ClazzAttributesResInitializer12
{
  SplitterWindow_clazzInfo_ClazzAttributesResInitializer12()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&SplitterWindow_method_getSplitMode__LSplitMode_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SplitModeMetaInf::GetEnumInfo()));
  }
};

SplitterWindow_clazzInfo_ClazzAttributesResInitializer12 SplitterWindow_clazzInfo_ClazzAttributesResInitializer12_instance;



} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
StaticBitmap_create_array(int length)
{
  return new ObjectArrayImpl<RStaticBitmap>(length);
}

//static
::acdk::lang::RObject
StaticBitmap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StaticBitmap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StaticBitmap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBitmap((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBitmap((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBitmap((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBitmap((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBitmap((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RBitmap)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_getBitmap__LRBitmap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StaticBitmap* This = dmi_cast<StaticBitmap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StaticBitmap::getBitmap();
    else
        ret = (::acdk::lang::RObject)This->getBitmap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBitmap_method_setBitmap_INLRBitmap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StaticBitmap* This = dmi_cast<StaticBitmap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StaticBitmap::setBitmap((RBitmap)args[0].getObjectVar());
    else
        This->setBitmap((RBitmap)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StaticBitmap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__args[] = 
{
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_parent,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_id,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_label,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_pos,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_size,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_style,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBitmap::clazzInfo(), // return type
  "_0_StaticBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__args[] = 
{
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_parent,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_id,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBitmap::clazzInfo(), // return type
  "_1_StaticBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__args[] = 
{
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_parent,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_id,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_label,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBitmap::clazzInfo(), // return type
  "_2_StaticBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__args[] = 
{
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_parent,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_id,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_label,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_pos,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBitmap::clazzInfo(), // return type
  "_3_StaticBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__args[] = 
{
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_parent,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_id,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_label,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_pos,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_size,
  &StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBitmap::clazzInfo(), // return type
  "_4_StaticBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_getBitmap__LRBitmap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_getBitmap__LRBitmap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_getBitmap__LRBitmap_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo(), // return type
  "_5_getBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_getBitmap__LRBitmap__args, // the arguments
  0, //arguments count
  StaticBitmap_methods_getBitmap__LRBitmap__exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_getBitmap__LRBitmap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBitmap_methods_setBitmap_INLRBitmap__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitmap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBitmap_methods_setBitmap_INLRBitmap__V_args[] = 
{
  &StaticBitmap_methods_setBitmap_INLRBitmap__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBitmap_methods_setBitmap_INLRBitmap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBitmap_method_setBitmap_INLRBitmap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBitmap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setBitmap", // alternative name of method
  -1, // altlabelHashCode
  StaticBitmap_methods_setBitmap_INLRBitmap__V_args, // the arguments
  0, //arguments count
  StaticBitmap_methods_setBitmap_INLRBitmap__V_exceptions, // the declared exceptions
  StaticBitmap_MetainfoWrapper::StaticBitmap_method_setBitmap_INLRBitmap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StaticBitmap_methods[] = 
{
  &StaticBitmap_method_GetClass__L_acdk_lang_RClass_,
  &StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_IINLRString__LRStaticBitmap_,
  &StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap__LRStaticBitmap_,
  &StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint__LRStaticBitmap_,
  &StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize__LRStaticBitmap_,
  &StaticBitmap_method_StaticBitmap_INLRWindow_IINLRBitmap_INLRPoint_INLRSize_I_LRStaticBitmap_,
  &StaticBitmap_method_getBitmap__LRBitmap_,
  &StaticBitmap_method_setBitmap_INLRBitmap__V,
  0
};


struct StaticBitmap_MetaInfoInitializer
{  StaticBitmap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StaticBitmap::clazzInfo();
    ci->fields =  _StaticBitmap_fields;
    ci->methods =  _StaticBitmap_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StaticBitmap_MetaInfoInitializer StaticBitmap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
StaticBox_create_array(int length)
{
  return new ObjectArrayImpl<RStaticBox>(length);
}

//static
::acdk::lang::RObject
StaticBox_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StaticBox_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StaticBox::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_StaticBox_INLRWindow_IINLRString__LRStaticBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticBox((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StaticBox_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StaticBox_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__args[] = 
{
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_parent,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_id,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_label,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_pos,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_size,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBox::clazzInfo(), // return type
  "_4_StaticBox", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__args, // the arguments
  0, //arguments count
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__args[] = 
{
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_parent,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_id,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_label,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_pos,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_size,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_style,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBox::clazzInfo(), // return type
  "_0_StaticBox", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__args, // the arguments
  0, //arguments count
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__args[] = 
{
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_parent,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_id,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_StaticBox_INLRWindow_IINLRString__LRStaticBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBox::clazzInfo(), // return type
  "_1_StaticBox", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__args, // the arguments
  0, //arguments count
  StaticBox_methods_StaticBox_INLRWindow_IINLRString__LRStaticBox__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_StaticBox_INLRWindow_IINLRString__LRStaticBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__args[] = 
{
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_parent,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_id,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_label,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBox::clazzInfo(), // return type
  "_2_StaticBox", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__args, // the arguments
  0, //arguments count
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__args[] = 
{
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_parent,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_id,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_label,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_pos,
  &StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticBox", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticBox::clazzInfo(), // return type
  "_3_StaticBox", // alternative name of method
  -1, // altlabelHashCode
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__args, // the arguments
  0, //arguments count
  StaticBox_methods_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__exceptions, // the declared exceptions
  StaticBox_MetainfoWrapper::StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StaticBox_methods[] = 
{
  &StaticBox_method_GetClass__L_acdk_lang_RClass_,
  &StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticBox_,
  &StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticBox_,
  &StaticBox_method_StaticBox_INLRWindow_IINLRString__LRStaticBox_,
  &StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint__LRStaticBox_,
  &StaticBox_method_StaticBox_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticBox_,
  0
};


struct StaticBox_MetaInfoInitializer
{  StaticBox_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StaticBox::clazzInfo();
    ci->fields =  _StaticBox_fields;
    ci->methods =  _StaticBox_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StaticBox_MetaInfoInitializer StaticBox_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
StaticText_create_array(int length)
{
  return new ObjectArrayImpl<RStaticText>(length);
}

//static
::acdk::lang::RObject
StaticText_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StaticText_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StaticText::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticText((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar(), (RString)args[6].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_StaticText_INLRWindow_IINLRString__LRStaticText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticText((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticText((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticText((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StaticText((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StaticText_method_setLabel_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StaticText* This = dmi_cast<StaticText>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StaticText::setLabel((RString)args[0].getObjectVar());
    else
        This->setLabel((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StaticText_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StaticText_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__args[] = 
{
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_parent,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_id,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_label,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_pos,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_size,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_style,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticText::clazzInfo(), // return type
  "_0_StaticText", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__args, // the arguments
  0, //arguments count
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__args[] = 
{
  &StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_parent,
  &StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_id,
  &StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_StaticText_INLRWindow_IINLRString__LRStaticText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticText::clazzInfo(), // return type
  "_1_StaticText", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__args, // the arguments
  0, //arguments count
  StaticText_methods_StaticText_INLRWindow_IINLRString__LRStaticText__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_StaticText_INLRWindow_IINLRString__LRStaticText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__args[] = 
{
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_parent,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_id,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_label,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticText::clazzInfo(), // return type
  "_2_StaticText", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__args, // the arguments
  0, //arguments count
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__args[] = 
{
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_parent,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_id,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_label,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_pos,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticText::clazzInfo(), // return type
  "_3_StaticText", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__args, // the arguments
  0, //arguments count
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__args[] = 
{
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_parent,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_id,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_label,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_pos,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_size,
  &StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StaticText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StaticText::clazzInfo(), // return type
  "_4_StaticText", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__args, // the arguments
  0, //arguments count
  StaticText_methods_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StaticText_methods_setLabel_INLRString__V_arg_label = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "label", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StaticText_methods_setLabel_INLRString__V_args[] = 
{
  &StaticText_methods_setLabel_INLRString__V_arg_label,
  0
};

::acdk::lang::dmi::ClazzInfo* StaticText_methods_setLabel_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StaticText_method_setLabel_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setLabel", // alternative name of method
  -1, // altlabelHashCode
  StaticText_methods_setLabel_INLRString__V_args, // the arguments
  0, //arguments count
  StaticText_methods_setLabel_INLRString__V_exceptions, // the declared exceptions
  StaticText_MetainfoWrapper::StaticText_method_setLabel_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StaticText_methods[] = 
{
  &StaticText_method_GetClass__L_acdk_lang_RClass_,
  &StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_IINLRString__LRStaticText_,
  &StaticText_method_StaticText_INLRWindow_IINLRString__LRStaticText_,
  &StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint__LRStaticText_,
  &StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize__LRStaticText_,
  &StaticText_method_StaticText_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRStaticText_,
  &StaticText_method_setLabel_INLRString__V,
  0
};


struct StaticText_MetaInfoInitializer
{  StaticText_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StaticText::clazzInfo();
    ci->fields =  _StaticText_fields;
    ci->methods =  _StaticText_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StaticText_MetaInfoInitializer StaticText_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
StatusBar_create_array(int length)
{
  return new ObjectArrayImpl<RStatusBar>(length);
}

//static
::acdk::lang::RObject
StatusBar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StatusBar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StatusBar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_StatusBar_INLRWindow_II_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StatusBar((RWindow)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_StatusBar_INLRWindow_I_LRStatusBar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StatusBar((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_acceptsFocus__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StatusBar::acceptsFocus();
    else
      ret = This->acceptsFocus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getBorderX__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StatusBar::getBorderX();
    else
      ret = This->getBorderX();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getBorderY__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StatusBar::getBorderY();
    else
      ret = This->getBorderY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getFieldRect_IOUTLRRect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StatusBar::getFieldRect(args[0].getIntVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]));
    else
      ret = This->getFieldRect(args[0].getIntVar(),  ::acdk::lang::getTypedObjectRef< RRect >(args[1]));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getFieldsCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StatusBar::getFieldsCount();
    else
      ret = This->getFieldsCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getStatusText_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StatusBar::getStatusText(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getStatusText(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_getStatusText__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StatusBar::getStatusText();
    else
        ret = (::acdk::lang::RObject)This->getStatusText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_popStatusText_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::popStatusText(args[0].getIntVar());
    else
        This->popStatusText(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_popStatusText__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::popStatusText();
    else
        This->popStatusText();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_pushStatusText_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::pushStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->pushStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_pushStatusText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::pushStatusText((RString)args[0].getObjectVar());
    else
        This->pushStatusText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setFieldsCount_IINLRintArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setFieldsCount(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    else
        This->setFieldsCount(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setFieldsCount__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setFieldsCount();
    else
        This->setFieldsCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setFieldsCount_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setFieldsCount(args[0].getIntVar());
    else
        This->setFieldsCount(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setMinHeight_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setMinHeight(args[0].getIntVar());
    else
        This->setMinHeight(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setStatusText_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->setStatusText((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setStatusText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setStatusText((RString)args[0].getObjectVar());
    else
        This->setStatusText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StatusBar_method_setStatusWidths_IINLRintArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StatusBar* This = dmi_cast<StatusBar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StatusBar::setStatusWidths(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    else
        This->setStatusWidths(args[0].getIntVar(), (RintArray)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StatusBar_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_k_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StatusBar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__args[] = 
{
  &StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_parent,
  &StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_id,
  &StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_StatusBar_INLRWindow_II_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StatusBar::clazzInfo(), // return type
  "_0_StatusBar", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__args, // the arguments
  0, //arguments count
  StatusBar_methods_StatusBar_INLRWindow_II_LRStatusBar__exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_StatusBar_INLRWindow_II_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__args[] = 
{
  &StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__arg_parent,
  &StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_StatusBar_INLRWindow_I_LRStatusBar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StatusBar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StatusBar::clazzInfo(), // return type
  "_1_StatusBar", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__args, // the arguments
  0, //arguments count
  StatusBar_methods_StatusBar_INLRWindow_I_LRStatusBar__exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_StatusBar_INLRWindow_I_LRStatusBar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_acceptsFocus__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_acceptsFocus__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_acceptsFocus__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsFocus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_acceptsFocus", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_acceptsFocus__Z_args, // the arguments
  0, //arguments count
  StatusBar_methods_acceptsFocus__Z_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_acceptsFocus__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getBorderX__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getBorderX__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getBorderX__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBorderX", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getBorderX", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getBorderX__I_args, // the arguments
  0, //arguments count
  StatusBar_methods_getBorderX__I_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getBorderX__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getBorderY__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getBorderY__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getBorderY__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBorderY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getBorderY", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getBorderY__I_args, // the arguments
  0, //arguments count
  StatusBar_methods_getBorderY__I_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getBorderY__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_getFieldRect_IOUTLRRect__Z_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_getFieldRect_IOUTLRRect__Z_arg_rect = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "rect", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRect::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getFieldRect_IOUTLRRect__Z_args[] = 
{
  &StatusBar_methods_getFieldRect_IOUTLRRect__Z_arg_i,
  &StatusBar_methods_getFieldRect_IOUTLRRect__Z_arg_rect,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getFieldRect_IOUTLRRect__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getFieldRect_IOUTLRRect__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFieldRect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getFieldRect", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getFieldRect_IOUTLRRect__Z_args, // the arguments
  0, //arguments count
  StatusBar_methods_getFieldRect_IOUTLRRect__Z_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getFieldRect_IOUTLRRect__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getFieldsCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getFieldsCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getFieldsCount__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFieldsCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getFieldsCount", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getFieldsCount__I_args, // the arguments
  0, //arguments count
  StatusBar_methods_getFieldsCount__I_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getFieldsCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_getStatusText_I_LRString__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getStatusText_I_LRString__args[] = 
{
  &StatusBar_methods_getStatusText_I_LRString__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getStatusText_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getStatusText_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getStatusText_I_LRString__args, // the arguments
  0, //arguments count
  StatusBar_methods_getStatusText_I_LRString__exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getStatusText_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_getStatusText__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_getStatusText__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_getStatusText__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_getStatusText__LRString__args, // the arguments
  0, //arguments count
  StatusBar_methods_getStatusText__LRString__exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_getStatusText__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_popStatusText_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_popStatusText_I_V_args[] = 
{
  &StatusBar_methods_popStatusText_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_popStatusText_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_popStatusText_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "popStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_popStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_popStatusText_I_V_args, // the arguments
  0, //arguments count
  StatusBar_methods_popStatusText_I_V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_popStatusText_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_popStatusText__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_popStatusText__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_popStatusText__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "popStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_popStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_popStatusText__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_popStatusText__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_popStatusText__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_pushStatusText_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_pushStatusText_INLRString_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_pushStatusText_INLRString_I_V_args[] = 
{
  &StatusBar_methods_pushStatusText_INLRString_I_V_arg_text,
  &StatusBar_methods_pushStatusText_INLRString_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_pushStatusText_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_pushStatusText_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_pushStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_pushStatusText_INLRString_I_V_args, // the arguments
  0, //arguments count
  StatusBar_methods_pushStatusText_INLRString_I_V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_pushStatusText_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_pushStatusText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_pushStatusText_INLRString__V_args[] = 
{
  &StatusBar_methods_pushStatusText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_pushStatusText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_pushStatusText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "pushStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_pushStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_pushStatusText_INLRString__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_pushStatusText_INLRString__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_pushStatusText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setFieldsCount_IINLRintArray__V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setFieldsCount_IINLRintArray__V_arg_widths = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "widths", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setFieldsCount_IINLRintArray__V_args[] = 
{
  &StatusBar_methods_setFieldsCount_IINLRintArray__V_arg_number,
  &StatusBar_methods_setFieldsCount_IINLRintArray__V_arg_widths,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setFieldsCount_IINLRintArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setFieldsCount_IINLRintArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFieldsCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setFieldsCount", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setFieldsCount_IINLRintArray__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setFieldsCount_IINLRintArray__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setFieldsCount_IINLRintArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setFieldsCount__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setFieldsCount__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setFieldsCount__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setFieldsCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setFieldsCount", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setFieldsCount__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setFieldsCount__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setFieldsCount__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setFieldsCount_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setFieldsCount_I_V_args[] = 
{
  &StatusBar_methods_setFieldsCount_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setFieldsCount_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setFieldsCount_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setFieldsCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setFieldsCount", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setFieldsCount_I_V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setFieldsCount_I_V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setFieldsCount_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setMinHeight_I_V_arg_height = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "height", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setMinHeight_I_V_args[] = 
{
  &StatusBar_methods_setMinHeight_I_V_arg_height,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setMinHeight_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setMinHeight_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinHeight", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setMinHeight", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setMinHeight_I_V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setMinHeight_I_V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setMinHeight_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setStatusText_INLRString_I_V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setStatusText_INLRString_I_V_arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setStatusText_INLRString_I_V_args[] = 
{
  &StatusBar_methods_setStatusText_INLRString_I_V_arg_text,
  &StatusBar_methods_setStatusText_INLRString_I_V_arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setStatusText_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setStatusText_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setStatusText_INLRString_I_V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setStatusText_INLRString_I_V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setStatusText_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setStatusText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setStatusText_INLRString__V_args[] = 
{
  &StatusBar_methods_setStatusText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setStatusText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setStatusText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setStatusText", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setStatusText_INLRString__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setStatusText_INLRString__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setStatusText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setStatusWidths_IINLRintArray__V_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StatusBar_methods_setStatusWidths_IINLRintArray__V_arg_widths = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "widths", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StatusBar_methods_setStatusWidths_IINLRintArray__V_args[] = 
{
  &StatusBar_methods_setStatusWidths_IINLRintArray__V_arg_n,
  &StatusBar_methods_setStatusWidths_IINLRintArray__V_arg_widths,
  0
};

::acdk::lang::dmi::ClazzInfo* StatusBar_methods_setStatusWidths_IINLRintArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StatusBar_method_setStatusWidths_IINLRintArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStatusWidths", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setStatusWidths", // alternative name of method
  -1, // altlabelHashCode
  StatusBar_methods_setStatusWidths_IINLRintArray__V_args, // the arguments
  0, //arguments count
  StatusBar_methods_setStatusWidths_IINLRintArray__V_exceptions, // the declared exceptions
  StatusBar_MetainfoWrapper::StatusBar_method_setStatusWidths_IINLRintArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StatusBar_methods[] = 
{
  &StatusBar_method_GetClass__L_acdk_lang_RClass_,
  &StatusBar_method_StatusBar_INLRWindow_II_LRStatusBar_,
  &StatusBar_method_StatusBar_INLRWindow_I_LRStatusBar_,
  &StatusBar_method_acceptsFocus__Z,
  &StatusBar_method_getBorderX__I,
  &StatusBar_method_getBorderY__I,
  &StatusBar_method_getFieldRect_IOUTLRRect__Z,
  &StatusBar_method_getFieldsCount__I,
  &StatusBar_method_getStatusText_I_LRString_,
  &StatusBar_method_getStatusText__LRString_,
  &StatusBar_method_popStatusText_I_V,
  &StatusBar_method_popStatusText__V,
  &StatusBar_method_pushStatusText_INLRString_I_V,
  &StatusBar_method_pushStatusText_INLRString__V,
  &StatusBar_method_setFieldsCount_IINLRintArray__V,
  &StatusBar_method_setFieldsCount__V,
  &StatusBar_method_setFieldsCount_I_V,
  &StatusBar_method_setMinHeight_I_V,
  &StatusBar_method_setStatusText_INLRString_I_V,
  &StatusBar_method_setStatusText_INLRString__V,
  &StatusBar_method_setStatusWidths_IINLRintArray__V,
  0
};


struct StatusBar_MetaInfoInitializer
{  StatusBar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StatusBar::clazzInfo();
    ci->fields =  _StatusBar_fields;
    ci->methods =  _StatusBar_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StatusBar_MetaInfoInitializer StatusBar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Point_create_array(int length)
{
  return new ObjectArrayImpl<RPoint>(length);
}

//static
::acdk::lang::RObject
Point_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Point_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Point::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_Point__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Point();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_Point_II_LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Point(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_defaultPosition__LRPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Point::defaultPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_x__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Point* This = dmi_cast<Point>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Point::x();
    else
      ret = This->x();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_x_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Point* This = dmi_cast<Point>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Point::x(args[0].getIntVar());
    else
      ret = This->x(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_y__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Point* This = dmi_cast<Point>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Point::y();
    else
      ret = This->y();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Point_method_y_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Point* This = dmi_cast<Point>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Point::y(args[0].getIntVar());
    else
      ret = This->y(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Point_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Point_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_Point__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_Point__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_Point__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Point", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Point::clazzInfo(), // return type
  "_0_Point", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_Point__LRPoint__args, // the arguments
  0, //arguments count
  Point_methods_Point__LRPoint__exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_Point__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_methods_Point_II_LRPoint__arg_xpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_methods_Point_II_LRPoint__arg_ypos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ypos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_Point_II_LRPoint__args[] = 
{
  &Point_methods_Point_II_LRPoint__arg_xpos,
  &Point_methods_Point_II_LRPoint__arg_ypos,
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_Point_II_LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_Point_II_LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Point", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Point::clazzInfo(), // return type
  "_1_Point", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_Point_II_LRPoint__args, // the arguments
  0, //arguments count
  Point_methods_Point_II_LRPoint__exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_Point_II_LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_defaultPosition__LRPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_defaultPosition__LRPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_defaultPosition__LRPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaultPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo(), // return type
  "_2_defaultPosition", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_defaultPosition__LRPoint__args, // the arguments
  0, //arguments count
  Point_methods_defaultPosition__LRPoint__exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_defaultPosition__LRPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_x__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_x__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_x__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_x", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_x__I_args, // the arguments
  0, //arguments count
  Point_methods_x__I_exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_x__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_methods_x_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_x_I_I_args[] = 
{
  &Point_methods_x_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_x_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_x_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_x", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_x_I_I_args, // the arguments
  0, //arguments count
  Point_methods_x_I_I_exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_x_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_y__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_y__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_y__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_y", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_y__I_args, // the arguments
  0, //arguments count
  Point_methods_y__I_exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_y__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Point_methods_y_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Point_methods_y_I_I_args[] = 
{
  &Point_methods_y_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Point_methods_y_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Point_method_y_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_y", // alternative name of method
  -1, // altlabelHashCode
  Point_methods_y_I_I_args, // the arguments
  0, //arguments count
  Point_methods_y_I_I_exceptions, // the declared exceptions
  Point_MetainfoWrapper::Point_method_y_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Point_methods[] = 
{
  &Point_method_GetClass__L_acdk_lang_RClass_,
  &Point_method_Point__LRPoint_,
  &Point_method_Point_II_LRPoint_,
  &Point_method_defaultPosition__LRPoint_,
  &Point_method_x__I,
  &Point_method_x_I_I,
  &Point_method_y__I,
  &Point_method_y_I_I,
  0
};


struct Point_MetaInfoInitializer
{  Point_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Point::clazzInfo();
    ci->fields =  _Point_fields;
    ci->methods =  _Point_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Point_MetaInfoInitializer Point_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Size_create_array(int length)
{
  return new ObjectArrayImpl<RSize>(length);
}

//static
::acdk::lang::RObject
Size_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Size_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Size::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_Size__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_Size_II_LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Size(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_defaultSize__LRSize__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Size::defaultSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_x__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Size* This = dmi_cast<Size>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Size::x();
    else
      ret = This->x();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_x_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Size* This = dmi_cast<Size>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Size::x(args[0].getIntVar());
    else
      ret = This->x(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_y__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Size* This = dmi_cast<Size>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Size::y();
    else
      ret = This->y();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Size_method_y_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Size* This = dmi_cast<Size>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Size::y(args[0].getIntVar());
    else
      ret = This->y(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Size_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Size_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_Size__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_Size__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_Size__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Size::clazzInfo(), // return type
  "_0_Size", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_Size__LRSize__args, // the arguments
  0, //arguments count
  Size_methods_Size__LRSize__exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_Size__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_methods_Size_II_LRSize__arg_xpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_methods_Size_II_LRSize__arg_ypos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ypos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_Size_II_LRSize__args[] = 
{
  &Size_methods_Size_II_LRSize__arg_xpos,
  &Size_methods_Size_II_LRSize__arg_ypos,
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_Size_II_LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_Size_II_LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Size::clazzInfo(), // return type
  "_1_Size", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_Size_II_LRSize__args, // the arguments
  0, //arguments count
  Size_methods_Size_II_LRSize__exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_Size_II_LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_defaultSize__LRSize__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_defaultSize__LRSize__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_defaultSize__LRSize_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaultSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo(), // return type
  "_2_defaultSize", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_defaultSize__LRSize__args, // the arguments
  0, //arguments count
  Size_methods_defaultSize__LRSize__exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_defaultSize__LRSize__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_x__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_x__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_x__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_x", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_x__I_args, // the arguments
  0, //arguments count
  Size_methods_x__I_exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_x__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_methods_x_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_x_I_I_args[] = 
{
  &Size_methods_x_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_x_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_x_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_x", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_x_I_I_args, // the arguments
  0, //arguments count
  Size_methods_x_I_I_exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_x_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_y__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_y__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_y__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_y", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_y__I_args, // the arguments
  0, //arguments count
  Size_methods_y__I_exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_y__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Size_methods_y_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Size_methods_y_I_I_args[] = 
{
  &Size_methods_y_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Size_methods_y_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Size_method_y_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_y", // alternative name of method
  -1, // altlabelHashCode
  Size_methods_y_I_I_args, // the arguments
  0, //arguments count
  Size_methods_y_I_I_exceptions, // the declared exceptions
  Size_MetainfoWrapper::Size_method_y_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Size_methods[] = 
{
  &Size_method_GetClass__L_acdk_lang_RClass_,
  &Size_method_Size__LRSize_,
  &Size_method_Size_II_LRSize_,
  &Size_method_defaultSize__LRSize_,
  &Size_method_x__I,
  &Size_method_x_I_I,
  &Size_method_y__I,
  &Size_method_y_I_I,
  0
};


struct Size_MetaInfoInitializer
{  Size_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Size::clazzInfo();
    ci->fields =  _Size_fields;
    ci->methods =  _Size_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Size_MetaInfoInitializer Size_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
Rect_create_array(int length)
{
  return new ObjectArrayImpl<RRect>(length);
}

//static
::acdk::lang::RObject
Rect_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Rect_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Rect::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_Rect__LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Rect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_Rect_IIII_LRRect__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Rect(args[0].getIntVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_height__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::height();
    else
      ret = This->height();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_height_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::height(args[0].getIntVar());
    else
      ret = This->height(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_width__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::width();
    else
      ret = This->width();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_width_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::width(args[0].getIntVar());
    else
      ret = This->width(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_x__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::x();
    else
      ret = This->x();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_x_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::x(args[0].getIntVar());
    else
      ret = This->x(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_y__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::y();
    else
      ret = This->y();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Rect_method_y_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Rect* This = dmi_cast<Rect>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Rect::y(args[0].getIntVar());
    else
      ret = This->y(args[0].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Rect_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Rect_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_Rect__LRRect__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_Rect__LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_Rect__LRRect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Rect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Rect::clazzInfo(), // return type
  "_0_Rect", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_Rect__LRRect__args, // the arguments
  0, //arguments count
  Rect_methods_Rect__LRRect__exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_Rect__LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_Rect_IIII_LRRect__arg_xpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "xpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_Rect_IIII_LRRect__arg_ypos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ypos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_Rect_IIII_LRRect__arg_widthsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "widthsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_Rect_IIII_LRRect__arg_heightsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "heightsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_Rect_IIII_LRRect__args[] = 
{
  &Rect_methods_Rect_IIII_LRRect__arg_xpos,
  &Rect_methods_Rect_IIII_LRRect__arg_ypos,
  &Rect_methods_Rect_IIII_LRRect__arg_widthsize,
  &Rect_methods_Rect_IIII_LRRect__arg_heightsize,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_Rect_IIII_LRRect__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_Rect_IIII_LRRect_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Rect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Rect::clazzInfo(), // return type
  "_1_Rect", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_Rect_IIII_LRRect__args, // the arguments
  0, //arguments count
  Rect_methods_Rect_IIII_LRRect__exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_Rect_IIII_LRRect__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_height__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_height__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_height__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "height", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_height", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_height__I_args, // the arguments
  0, //arguments count
  Rect_methods_height__I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_height__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_height_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_height_I_I_args[] = 
{
  &Rect_methods_height_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_height_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_height_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "height", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_height", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_height_I_I_args, // the arguments
  0, //arguments count
  Rect_methods_height_I_I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_height_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_width__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_width__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_width__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "width", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_width", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_width__I_args, // the arguments
  0, //arguments count
  Rect_methods_width__I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_width__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_width_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_width_I_I_args[] = 
{
  &Rect_methods_width_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_width_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_width_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "width", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_width", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_width_I_I_args, // the arguments
  0, //arguments count
  Rect_methods_width_I_I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_width_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_x__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_x__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_x__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_x", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_x__I_args, // the arguments
  0, //arguments count
  Rect_methods_x__I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_x__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_x_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_x_I_I_args[] = 
{
  &Rect_methods_x_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_x_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_x_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "x", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_x", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_x_I_I_args, // the arguments
  0, //arguments count
  Rect_methods_x_I_I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_x_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_y__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_y__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_y__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_y", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_y__I_args, // the arguments
  0, //arguments count
  Rect_methods_y__I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_y__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Rect_methods_y_I_I_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Rect_methods_y_I_I_args[] = 
{
  &Rect_methods_y_I_I_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Rect_methods_y_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Rect_method_y_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "y", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_y", // alternative name of method
  -1, // altlabelHashCode
  Rect_methods_y_I_I_args, // the arguments
  0, //arguments count
  Rect_methods_y_I_I_exceptions, // the declared exceptions
  Rect_MetainfoWrapper::Rect_method_y_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Rect_methods[] = 
{
  &Rect_method_GetClass__L_acdk_lang_RClass_,
  &Rect_method_Rect__LRRect_,
  &Rect_method_Rect_IIII_LRRect_,
  &Rect_method_height__I,
  &Rect_method_height_I_I,
  &Rect_method_width__I,
  &Rect_method_width_I_I,
  &Rect_method_x__I,
  &Rect_method_x_I_I,
  &Rect_method_y__I,
  &Rect_method_y_I_I,
  0
};


struct Rect_MetaInfoInitializer
{  Rect_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Rect::clazzInfo();
    ci->fields =  _Rect_fields;
    ci->methods =  _Rect_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Rect_MetaInfoInitializer Rect_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextAttr_create_array(int length)
{
  return new ObjectArrayImpl<RTextAttr>(length);
}

//static
::acdk::lang::RObject
TextAttr_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextAttr_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextAttr_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextAttr::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextAttr_method_TextAttr__LRTextAttr__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextAttr();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TextAttr_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextAttr_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextAttr_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextAttr_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextAttr_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextAttr_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextAttr_MetainfoWrapper::TextAttr_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextAttr_methods_TextAttr__LRTextAttr__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextAttr_methods_TextAttr__LRTextAttr__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextAttr_method_TextAttr__LRTextAttr_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextAttr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextAttr::clazzInfo(), // return type
  "_0_TextAttr", // alternative name of method
  -1, // altlabelHashCode
  TextAttr_methods_TextAttr__LRTextAttr__args, // the arguments
  0, //arguments count
  TextAttr_methods_TextAttr__LRTextAttr__exceptions, // the declared exceptions
  TextAttr_MetainfoWrapper::TextAttr_method_TextAttr__LRTextAttr__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextAttr_methods[] = 
{
  &TextAttr_method_GetClass__L_acdk_lang_RClass_,
  &TextAttr_method_TextAttr__LRTextAttr_,
  0
};


struct TextAttr_MetaInfoInitializer
{  TextAttr_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextAttr::clazzInfo();
    ci->fields =  _TextAttr_fields;
    ci->methods =  _TextAttr_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextAttr_MetaInfoInitializer TextAttr_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx


namespace acdk { 
namespace wx { 


//static
::acdk::lang::RObject
TextCtrl_create_array(int length)
{
  return new ObjectArrayImpl<RTextCtrl>(length);
}

//static
::acdk::lang::RObject
TextCtrl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TextCtrl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TextCtrl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar(), args[5].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl_INLRWindow_I_LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TextCtrl((RWindow)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), (RPoint)args[3].getObjectVar(), (RSize)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_appendText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::appendText((RString)args[0].getObjectVar());
    else
        This->appendText((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_canCopy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::canCopy();
    else
      ret = This->canCopy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_canCut__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::canCut();
    else
      ret = This->canCut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_canPaste__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::canPaste();
    else
      ret = This->canPaste();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_canRedo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::canRedo();
    else
      ret = This->canRedo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_canUndo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::canUndo();
    else
      ret = This->canUndo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_copy__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::copy();
    else
        This->copy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_cut__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::cut();
    else
        This->cut();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_discardEdits__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::discardEdits();
    else
        This->discardEdits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_emulateKeyPress_INLRKeyEvent__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::emulateKeyPress((RKeyEvent)args[0].getObjectVar());
    else
      ret = This->emulateKeyPress((RKeyEvent)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getInsertionPoint__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::getInsertionPoint();
    else
      ret = This->getInsertionPoint();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getLastPosition__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::getLastPosition();
    else
      ret = This->getLastPosition();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getLineLength_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::getLineLength(args[0].getIntVar());
    else
      ret = This->getLineLength(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getLineText_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TextCtrl::getLineText(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getLineText(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getNumberOfLines__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::getNumberOfLines();
    else
      ret = This->getNumberOfLines();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getRange_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TextCtrl::getRange(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getRange(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getSelection_OUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::getSelection(args[0].getIntRef(), args[1].getIntRef());
    else
        This->getSelection(args[0].getIntRef(), args[1].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_getValue__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TextCtrl::getValue();
    else
        ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_isEditable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::isEditable();
    else
      ret = This->isEditable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_isModified__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::isModified();
    else
      ret = This->isModified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_loadFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::loadFile((RString)args[0].getObjectVar());
    else
      ret = This->loadFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_paste__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::paste();
    else
        This->paste();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_positionToXY_IOUTIOUTI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::positionToXY(args[0].getIntVar(), args[1].getIntRef(), args[2].getIntRef());
    else
      ret = This->positionToXY(args[0].getIntVar(), args[1].getIntRef(), args[2].getIntRef());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_redo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::redo();
    else
        This->redo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_remove_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::remove(args[0].getIntVar(), args[1].getIntVar());
    else
        This->remove(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_replace_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::replace(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->replace(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_saveFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::saveFile((RString)args[0].getObjectVar());
    else
      ret = This->saveFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setDefaultStyle_INLRTextAttr__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::setDefaultStyle((RTextAttr)args[0].getObjectVar());
    else
      ret = This->setDefaultStyle((RTextAttr)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setEditable_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setEditable(args[0].getBoolVar());
    else
        This->setEditable(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setInsertionPoint_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setInsertionPoint(args[0].getIntVar());
    else
        This->setInsertionPoint(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setInsertionPointEnd__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setInsertionPointEnd();
    else
        This->setInsertionPointEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setMaxLength_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setMaxLength(args[0].getIntVar());
    else
        This->setMaxLength(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setSelection_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setSelection(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setSelection(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setStyle_IIINLRTextAttr__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TextCtrl::setStyle(args[0].getIntVar(), args[1].getIntVar(), (RTextAttr)args[2].getObjectVar());
    else
      ret = This->setStyle(args[0].getIntVar(), args[1].getIntVar(), (RTextAttr)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_setValue_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::setValue((RString)args[0].getObjectVar());
    else
        This->setValue((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_showPosition_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::showPosition(args[0].getIntVar());
    else
        This->showPosition(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_undo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::undo();
    else
        This->undo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TextCtrl_method_writeText_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TextCtrl* This = dmi_cast<TextCtrl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TextCtrl::writeText((RString)args[0].getObjectVar());
    else
        This->writeText((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TextCtrl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_J_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TextCtrl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl__LRTextCtrl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_0_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl__LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl__LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__args[] = 
{
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_parent,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_id,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_value,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_pos,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_size,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_1_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__args[] = 
{
  &TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__arg_parent,
  &TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl_INLRWindow_I_LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_2_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl_INLRWindow_I_LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl_INLRWindow_I_LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__args[] = 
{
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_parent,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_id,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl_INLRWindow_IINLRString__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_3_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl_INLRWindow_IINLRString__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__args[] = 
{
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_parent,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_id,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_value,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_4_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWindow::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSize::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__args[] = 
{
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_parent,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_id,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_value,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_pos,
  &TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TextCtrl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TextCtrl::clazzInfo(), // return type
  "_5_TextCtrl", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__args, // the arguments
  0, //arguments count
  TextCtrl_methods_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_appendText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_appendText_INLRString__V_args[] = 
{
  &TextCtrl_methods_appendText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_appendText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_appendText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_appendText", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_appendText_INLRString__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_appendText_INLRString__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_appendText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_canCopy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_canCopy__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_canCopy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canCopy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_canCopy", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_canCopy__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_canCopy__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_canCopy__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_canCut__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_canCut__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_canCut__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canCut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_canCut", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_canCut__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_canCut__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_canCut__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_canPaste__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_canPaste__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_canPaste__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canPaste", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_canPaste", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_canPaste__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_canPaste__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_canPaste__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_canRedo__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_canRedo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_canRedo__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRedo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_canRedo", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_canRedo__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_canRedo__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_canRedo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_canUndo__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_canUndo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_canUndo__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canUndo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_canUndo", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_canUndo__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_canUndo__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_canUndo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_clear", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_clear__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_clear__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_copy__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_copy__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_copy__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_copy", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_copy__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_copy__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_copy__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_cut__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_cut__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_cut__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_cut", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_cut__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_cut__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_cut__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_discardEdits__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_discardEdits__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_discardEdits__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "discardEdits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_discardEdits", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_discardEdits__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_discardEdits__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_discardEdits__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RKeyEvent::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_args[] = 
{
  &TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_arg_event,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_emulateKeyPress_INLRKeyEvent__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "emulateKeyPress", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_emulateKeyPress", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_emulateKeyPress_INLRKeyEvent__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_emulateKeyPress_INLRKeyEvent__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getInsertionPoint__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getInsertionPoint__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getInsertionPoint__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInsertionPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_F_getInsertionPoint", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getInsertionPoint__I_args, // the arguments
  0, //arguments count
  TextCtrl_methods_getInsertionPoint__I_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getInsertionPoint__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getLastPosition__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getLastPosition__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getLastPosition__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLastPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_G_getLastPosition", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getLastPosition__I_args, // the arguments
  0, //arguments count
  TextCtrl_methods_getLastPosition__I_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getLastPosition__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getLineLength_I_I_arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getLineLength_I_I_args[] = 
{
  &TextCtrl_methods_getLineLength_I_I_arg_lineNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getLineLength_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getLineLength_I_I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getLineLength", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getLineLength_I_I_args, // the arguments
  0, //arguments count
  TextCtrl_methods_getLineLength_I_I_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getLineLength_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getLineText_I_LRString__arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getLineText_I_LRString__args[] = 
{
  &TextCtrl_methods_getLineText_I_LRString__arg_lineNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getLineText_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getLineText_I_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getLineText", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getLineText_I_LRString__args, // the arguments
  0, //arguments count
  TextCtrl_methods_getLineText_I_LRString__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getLineText_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getNumberOfLines__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getNumberOfLines__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getNumberOfLines__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumberOfLines", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getNumberOfLines", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getNumberOfLines__I_args, // the arguments
  0, //arguments count
  TextCtrl_methods_getNumberOfLines__I_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getNumberOfLines__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getRange_II_LRString__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getRange_II_LRString__arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getRange_II_LRString__args[] = 
{
  &TextCtrl_methods_getRange_II_LRString__arg_from,
  &TextCtrl_methods_getRange_II_LRString__arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getRange_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getRange_II_LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getRange", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getRange_II_LRString__args, // the arguments
  0, //arguments count
  TextCtrl_methods_getRange_II_LRString__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getRange_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getSelection_OUTIOUTI_V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_getSelection_OUTIOUTI_V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getSelection_OUTIOUTI_V_args[] = 
{
  &TextCtrl_methods_getSelection_OUTIOUTI_V_arg_from,
  &TextCtrl_methods_getSelection_OUTIOUTI_V_arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getSelection_OUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getSelection_OUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_getSelection", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getSelection_OUTIOUTI_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_getSelection_OUTIOUTI_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getSelection_OUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_getValue__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_getValue__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_getValue__LRString_ = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getValue", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_getValue__LRString__args, // the arguments
  0, //arguments count
  TextCtrl_methods_getValue__LRString__exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_getValue__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_isEditable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_isEditable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_isEditable__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEditable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isEditable", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_isEditable__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_isEditable__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_isEditable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_isModified__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_isModified__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_isModified__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isModified", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_isModified__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_isModified__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_isModified__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_loadFile_INLRString__Z_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_loadFile_INLRString__Z_args[] = 
{
  &TextCtrl_methods_loadFile_INLRString__Z_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_loadFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_loadFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_loadFile", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_loadFile_INLRString__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_loadFile_INLRString__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_loadFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_paste__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_paste__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_paste__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "paste", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_paste", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_paste__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_paste__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_paste__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_y = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "y", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_positionToXY_IOUTIOUTI_Z_args[] = 
{
  &TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_pos,
  &TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_x,
  &TextCtrl_methods_positionToXY_IOUTIOUTI_Z_arg_y,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_positionToXY_IOUTIOUTI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_positionToXY_IOUTIOUTI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "positionToXY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_positionToXY", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_positionToXY_IOUTIOUTI_Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_positionToXY_IOUTIOUTI_Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_positionToXY_IOUTIOUTI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_redo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_redo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_redo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "redo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_redo", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_redo__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_redo__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_redo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_remove_II_V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_remove_II_V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_remove_II_V_args[] = 
{
  &TextCtrl_methods_remove_II_V_arg_from,
  &TextCtrl_methods_remove_II_V_arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_remove_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_remove_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_remove", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_remove_II_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_remove_II_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_remove_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_replace_IIINLRString__V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_replace_IIINLRString__V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_replace_IIINLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_replace_IIINLRString__V_args[] = 
{
  &TextCtrl_methods_replace_IIINLRString__V_arg_from,
  &TextCtrl_methods_replace_IIINLRString__V_arg_to,
  &TextCtrl_methods_replace_IIINLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_replace_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_replace_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "replace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_replace", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_replace_IIINLRString__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_replace_IIINLRString__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_replace_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_saveFile_INLRString__Z_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_saveFile_INLRString__Z_args[] = 
{
  &TextCtrl_methods_saveFile_INLRString__Z_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_saveFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_saveFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "saveFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_saveFile", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_saveFile_INLRString__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_saveFile_INLRString__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_saveFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_args[] = 
{
  &TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setDefaultStyle_INLRTextAttr__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_setDefaultStyle", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setDefaultStyle_INLRTextAttr__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setDefaultStyle_INLRTextAttr__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setEditable_Z_V_arg_editable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "editable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setEditable_Z_V_args[] = 
{
  &TextCtrl_methods_setEditable_Z_V_arg_editable,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setEditable_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setEditable_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEditable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_setEditable", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setEditable_Z_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setEditable_Z_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setEditable_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setInsertionPoint_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setInsertionPoint_I_V_args[] = 
{
  &TextCtrl_methods_setInsertionPoint_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setInsertionPoint_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setInsertionPoint_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInsertionPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_setInsertionPoint", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setInsertionPoint_I_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setInsertionPoint_I_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setInsertionPoint_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setInsertionPointEnd__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setInsertionPointEnd__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setInsertionPointEnd__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInsertionPointEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setInsertionPointEnd", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setInsertionPointEnd__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setInsertionPointEnd__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setInsertionPointEnd__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setMaxLength_I_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setMaxLength_I_V_args[] = 
{
  &TextCtrl_methods_setMaxLength_I_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setMaxLength_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setMaxLength_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setMaxLength", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setMaxLength_I_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setMaxLength_I_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setMaxLength_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setSelection_II_V_arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setSelection_II_V_arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setSelection_II_V_args[] = 
{
  &TextCtrl_methods_setSelection_II_V_arg_from,
  &TextCtrl_methods_setSelection_II_V_arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setSelection_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setSelection_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSelection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_setSelection", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setSelection_II_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setSelection_II_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setSelection_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTextAttr::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setStyle_IIINLRTextAttr__Z_args[] = 
{
  &TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_start,
  &TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_end,
  &TextCtrl_methods_setStyle_IIINLRTextAttr__Z_arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setStyle_IIINLRTextAttr__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setStyle_IIINLRTextAttr__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStyle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_setStyle", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setStyle_IIINLRTextAttr__Z_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setStyle_IIINLRTextAttr__Z_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setStyle_IIINLRTextAttr__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_setValue_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_setValue_INLRString__V_args[] = 
{
  &TextCtrl_methods_setValue_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_setValue_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_setValue_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setValue", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_setValue_INLRString__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_setValue_INLRString__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_setValue_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_showPosition_I_V_arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_showPosition_I_V_args[] = 
{
  &TextCtrl_methods_showPosition_I_V_arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_showPosition_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_showPosition_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "showPosition", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_showPosition", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_showPosition_I_V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_showPosition_I_V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_showPosition_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_undo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_undo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_undo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "undo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_undo", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_undo__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_undo__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_undo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TextCtrl_methods_writeText_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TextCtrl_methods_writeText_INLRString__V_args[] = 
{
  &TextCtrl_methods_writeText_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* TextCtrl_methods_writeText_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TextCtrl_method_writeText_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_writeText", // alternative name of method
  -1, // altlabelHashCode
  TextCtrl_methods_writeText_INLRString__V_args, // the arguments
  0, //arguments count
  TextCtrl_methods_writeText_INLRString__V_exceptions, // the declared exceptions
  TextCtrl_MetainfoWrapper::TextCtrl_method_writeText_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TextCtrl_methods[] = 
{
  &TextCtrl_method_GetClass__L_acdk_lang_RClass_,
  &TextCtrl_method_TextCtrl__LRTextCtrl_,
  &TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize_I_LRTextCtrl_,
  &TextCtrl_method_TextCtrl_INLRWindow_I_LRTextCtrl_,
  &TextCtrl_method_TextCtrl_INLRWindow_IINLRString__LRTextCtrl_,
  &TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint__LRTextCtrl_,
  &TextCtrl_method_TextCtrl_INLRWindow_IINLRString_INLRPoint_INLRSize__LRTextCtrl_,
  &TextCtrl_method_appendText_INLRString__V,
  &TextCtrl_method_canCopy__Z,
  &TextCtrl_method_canCut__Z,
  &TextCtrl_method_canPaste__Z,
  &TextCtrl_method_canRedo__Z,
  &TextCtrl_method_canUndo__Z,
  &TextCtrl_method_clear__V,
  &TextCtrl_method_copy__V,
  &TextCtrl_method_cut__V,
  &TextCtrl_method_discardEdits__V,
  &TextCtrl_method_emulateKeyPress_INLRKeyEvent__Z,
  &TextCtrl_method_getInsertionPoint__I,
  &TextCtrl_method_getLastPosition__I,
  &TextCtrl_method_getLineLength_I_I,
  &TextCtrl_method_getLineText_I_LRString_,
  &TextCtrl_method_getNumberOfLines__I,
  &TextCtrl_method_getRange_II_LRString_,
  &TextCtrl_method_getSelection_OUTIOUTI_V,
  &TextCtrl_method_getValue__LRString_,
  &TextCtrl_method_isEditable__Z,
  &TextCtrl_method_isModified__Z,
  &TextCtrl_method_loadFile_INLRString__Z,
  &TextCtrl_method_paste__V,
  &TextCtrl_method_positionToXY_IOUTIOUTI_Z,
  &TextCtrl_method_redo__V,
  &TextCtrl_method_remove_II_V,
  &TextCtrl_method_replace_IIINLRString__V,
  &TextCtrl_method_saveFile_INLRString__Z,
  &TextCtrl_method_setDefaultStyle_INLRTextAttr__Z,
  &TextCtrl_method_setEditable_Z_V,
  &TextCtrl_method_setInsertionPoint_I_V,
  &TextCtrl_method_setInsertionPointEnd__V,
  &TextCtrl_method_setMaxLength_I_V,
  &TextCtrl_method_setSelection_II_V,
  &TextCtrl_method_setStyle_IIINLRTextAttr__Z,
  &TextCtrl_method_setValue_INLRString__V,
  &TextCtrl_method_showPosition_I_V,
  &TextCtrl_method_undo__V,
  &TextCtrl_method_writeText_INLRString__V,
  0
};


struct TextCtrl_MetaInfoInitializer
{  TextCtrl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TextCtrl::clazzInfo();
    ci->fields =  _TextCtrl_fields;
    ci->methods =  _TextCtrl_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TextCtrl_MetaInfoInitializer TextCtrl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace wx

